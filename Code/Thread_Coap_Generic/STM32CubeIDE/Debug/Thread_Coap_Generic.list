
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7c4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a1c  0800d904  0800d904  0001d904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e320  0800e320  0001e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e328  0800e328  0001e328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e32c  0800e32c  0001e32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000008  0800e330  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200000a4  0800e3cc  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000908  200000b8  0800e3dd  000200b8  2**2
                  ALLOC
  9 ._user_heap_stack 00002800  200009c0  0800e3dd  000209c0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 14 .debug_info   0003a05f  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000072f0  00000000  00000000  0005a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e90  00000000  00000000  00061438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002b78  00000000  00000000  000642c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003297d  00000000  00000000  00066e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a06d  00000000  00000000  000997bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001144be  00000000  00000000  000d382a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001e7ce8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c9a0  00000000  00000000  001e7d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000b8 	.word	0x200000b8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d8ec 	.word	0x0800d8ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000bc 	.word	0x200000bc
 800017c:	0800d8ec 	.word	0x0800d8ec

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000560:	23ff      	movs	r3, #255	; 0xff
 8000562:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000564:	2300      	movs	r3, #0
 8000566:	81fb      	strh	r3, [r7, #14]
 8000568:	e021      	b.n	80005ae <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800056a:	89fb      	ldrh	r3, [r7, #14]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	4053      	eors	r3, r2
 8000576:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000578:	2308      	movs	r3, #8
 800057a:	733b      	strb	r3, [r7, #12]
 800057c:	e011      	b.n	80005a2 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800057e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da07      	bge.n	8000596 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25b      	sxtb	r3, r3
 800058c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000590:	b25b      	sxtb	r3, r3
 8000592:	737b      	strb	r3, [r7, #13]
 8000594:	e002      	b.n	800059c <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800059c:	7b3b      	ldrb	r3, [r7, #12]
 800059e:	3b01      	subs	r3, #1
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ea      	bne.n	800057e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	3301      	adds	r3, #1
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	89fa      	ldrh	r2, [r7, #14]
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d3d9      	bcc.n	800056a <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80005b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
 80005d0:	4613      	mov	r3, r2
 80005d2:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	4619      	mov	r1, r3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffbb 	bl	8000554 <sensirion_common_generate_crc>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	787b      	ldrb	r3, [r7, #1]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d002      	beq.n	80005ee <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	e000      	b.n	80005f0 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	461a      	mov	r2, r3
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	4413      	add	r3, r2
 8000610:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800061a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8a2 	bl	800076c <sensirion_i2c_read>
 8000628:	4603      	mov	r3, r0
 800062a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800062e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000636:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800063a:	e047      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800063c:	2300      	movs	r3, #0
 800063e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000642:	2300      	movs	r3, #0
 8000644:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000648:	e039      	b.n	80006be <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800064a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800064e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000650:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000652:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000656:	3302      	adds	r3, #2
 8000658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800065a:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	2102      	movs	r1, #2
 8000662:	f7ff ffaf 	bl	80005c4 <sensirion_common_check_crc>
 8000666:	4603      	mov	r3, r0
 8000668:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 800066c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000674:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000678:	e028      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800067a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800067e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000680:	441a      	add	r2, r3
 8000682:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000686:	1c59      	adds	r1, r3, #1
 8000688:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 800068c:	4619      	mov	r1, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	440b      	add	r3, r1
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000696:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800069a:	3301      	adds	r3, #1
 800069c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800069e:	441a      	add	r2, r3
 80006a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80006a4:	1c59      	adds	r1, r3, #1
 80006a6:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80006aa:	4619      	mov	r1, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	440b      	add	r3, r1
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80006b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80006b8:	3303      	adds	r3, #3
 80006ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80006be:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80006c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3bf      	bcc.n	800064a <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3758      	adds	r7, #88	; 0x58
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff84 	bl	80005f8 <sensirion_i2c_read_words_as_bytes>
 80006f0:	4603      	mov	r3, r0
 80006f2:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80006f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <sensirion_i2c_read_words+0x2e>
        return ret;
 80006fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000700:	e020      	b.n	8000744 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e017      	b.n	8000738 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	b21a      	sxth	r2, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b219      	sxth	r1, r3
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	b28a      	uxth	r2, r1
 8000730:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	b29b      	uxth	r3, r3
 800073c:	88ba      	ldrh	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d8e2      	bhi.n	8000708 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <sensirion_i2c_init+0x1c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000d4 	.word	0x200000d4

0800076c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <sensirion_i2c_read+0x34>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	b29b      	uxth	r3, r3
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b299      	uxth	r1, r3
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	2205      	movs	r2, #5
 800078c:	9200      	str	r2, [sp, #0]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	f004 fcf0 	bl	8005174 <HAL_I2C_Master_Receive>
 8000794:	4603      	mov	r3, r0
 8000796:	b25b      	sxtb	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000d4 	.word	0x200000d4

080007a4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <sensirion_i2c_write+0x34>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b299      	uxth	r1, r3
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	2205      	movs	r2, #5
 80007c4:	9200      	str	r2, [sp, #0]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	f004 fbe0 	bl	8004f8c <HAL_I2C_Master_Transmit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b25b      	sxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000d4 	.word	0x200000d4

080007dc <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <sensirion_sleep_usec+0x40>)
 80007e8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ec:	099b      	lsrs	r3, r3, #6
 80007ee:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <sensirion_sleep_usec+0x40>)
 80007f4:	fba3 1302 	umull	r1, r3, r3, r2
 80007f8:	099b      	lsrs	r3, r3, #6
 80007fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007fe:	fb01 f303 	mul.w	r3, r1, r3
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <sensirion_sleep_usec+0x32>
        msec++;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f001 fe26 	bl	8002460 <HAL_Delay>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	10624dd3 	.word	0x10624dd3

08000820 <sht4x_activate_medium_heater>:
#define SHT_DRV_VERSION_STR "5.3.0"
static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


int16_t sht4x_activate_medium_heater(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	81fb      	strh	r3, [r7, #14]
    buffer[offset++] = (uint8_t)0x24;
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	81fa      	strh	r2, [r7, #14]
 8000830:	3310      	adds	r3, #16
 8000832:	443b      	add	r3, r7
 8000834:	2224      	movs	r2, #36	; 0x24
 8000836:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write(SHT4X_ADDRESS, &buffer[0], offset);
 800083a:	89fa      	ldrh	r2, [r7, #14]
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	2044      	movs	r0, #68	; 0x44
 8000842:	f7ff ffaf 	bl	80007a4 <sensirion_i2c_write>
 8000846:	4603      	mov	r3, r0
 8000848:	81bb      	strh	r3, [r7, #12]
    if (error) {
 800084a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <sht4x_activate_medium_heater+0x38>
        return error;
 8000852:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000856:	e003      	b.n	8000860 <sht4x_activate_medium_heater+0x40>
    }

    sensirion_sleep_usec(110000);
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <sht4x_activate_medium_heater+0x48>)
 800085a:	f7ff ffbf 	bl	80007dc <sensirion_sleep_usec>

    return NO_ERROR;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	0001adb0 	.word	0x0001adb0

0800086c <sht4x_measure>:
        return ret;
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
    return sht4x_read(temperature, humidity);
}

int16_t sht4x_measure(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	4904      	ldr	r1, [pc, #16]	; (8000884 <sht4x_measure+0x18>)
 8000874:	2044      	movs	r0, #68	; 0x44
 8000876:	f7ff ff95 	bl	80007a4 <sensirion_i2c_write>
 800087a:	4603      	mov	r3, r0
 800087c:	b21b      	sxth	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2202      	movs	r2, #2
 8000898:	4619      	mov	r1, r3
 800089a:	2044      	movs	r0, #68	; 0x44
 800089c:	f7ff ff1a 	bl	80006d4 <sensirion_i2c_read_words>
 80008a0:	4603      	mov	r3, r0
 80008a2:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 80008a4:	893b      	ldrh	r3, [r7, #8]
 80008a6:	461a      	mov	r2, r3
 80008a8:	f245 5373 	movw	r3, #21875	; 0x5573
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	135b      	asrs	r3, r3, #13
 80008b2:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80008b6:	3bc8      	subs	r3, #200	; 0xc8
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 80008bc:	897b      	ldrh	r3, [r7, #10]
 80008be:	461a      	mov	r2, r3
 80008c0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	135b      	asrs	r3, r3, #13
 80008ca:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 80008ce:	3b10      	subs	r3, #16
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	6013      	str	r3, [r2, #0]

    return ret;
 80008d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <sht4x_enable_low_power_mode+0x3c>)
 80008f2:	22e0      	movs	r2, #224	; 0xe0
 80008f4:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <sht4x_enable_low_power_mode+0x40>)
 80008f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008fc:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 80008fe:	e006      	b.n	800090e <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <sht4x_enable_low_power_mode+0x3c>)
 8000902:	22fd      	movs	r2, #253	; 0xfd
 8000904:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <sht4x_enable_low_power_mode+0x40>)
 8000908:	f242 7210 	movw	r2, #10000	; 0x2710
 800090c:	801a      	strh	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	2000000a 	.word	0x2000000a

08000924 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <platform_stts22h_init+0x3c>)
 800092e:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <platform_stts22h_init+0x40>)
 8000930:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <platform_stts22h_init+0x3c>)
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <platform_stts22h_init+0x44>)
 8000936:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <platform_stts22h_init+0x3c>)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <platform_stts22h_init+0x48>)
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <platform_stts22h_init+0x3c>)
 8000942:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <platform_stts22h_init+0x4c>)
 8000946:	f000 f944 	bl	8000bd2 <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <platform_stts22h_init+0x4c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2ba0      	cmp	r3, #160	; 0xa0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000d8 	.word	0x200000d8
 8000964:	08000975 	.word	0x08000975
 8000968:	080009ab 	.word	0x080009ab
 800096c:	200000e8 	.word	0x200000e8
 8000970:	200000ec 	.word	0x200000ec

08000974 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af02      	add	r7, sp, #8
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	461a      	mov	r2, r3
 8000980:	460b      	mov	r3, r1
 8000982:	72fb      	strb	r3, [r7, #11]
 8000984:	4613      	mov	r3, r2
 8000986:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	b29b      	uxth	r3, r3
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	b299      	uxth	r1, r3
 8000990:	893b      	ldrh	r3, [r7, #8]
 8000992:	2205      	movs	r2, #5
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f004 fbeb 	bl	8005174 <HAL_I2C_Master_Receive>
 800099e:	4603      	mov	r3, r0
 80009a0:	b25b      	sxtb	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af02      	add	r7, sp, #8
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	461a      	mov	r2, r3
 80009b6:	460b      	mov	r3, r1
 80009b8:	72fb      	strb	r3, [r7, #11]
 80009ba:	4613      	mov	r3, r2
 80009bc:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80009be:	7afb      	ldrb	r3, [r7, #11]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	b299      	uxth	r1, r3
 80009c6:	893b      	ldrh	r3, [r7, #8]
 80009c8:	2205      	movs	r2, #5
 80009ca:	9200      	str	r2, [sp, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f004 fadc 	bl	8004f8c <HAL_I2C_Master_Transmit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b25b      	sxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	4613      	mov	r3, r2
 80009ee:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <stts22h_read_reg+0x30>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	685c      	ldr	r4, [r3, #4]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <stts22h_read_reg+0x30>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68d8      	ldr	r0, [r3, #12]
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	79f9      	ldrb	r1, [r7, #7]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	47a0      	blx	r4
 8000a04:	60f8      	str	r0, [r7, #12]

  return ret;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	200000e8 	.word	0x200000e8

08000a14 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <stts22h_write_reg+0x30>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681c      	ldr	r4, [r3, #0]
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <stts22h_write_reg+0x30>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68d8      	ldr	r0, [r3, #12]
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	79f9      	ldrb	r1, [r7, #7]
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	47a0      	blx	r4
 8000a38:	60f8      	str	r0, [r7, #12]

  return ret;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	200000e8 	.word	0x200000e8

08000a48 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2004      	movs	r0, #4
 8000a5c:	f7ff ffc0 	bl	80009e0 <stts22h_read_reg>
 8000a60:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200c      	movs	r0, #12
 8000a72:	f7ff ffb5 	bl	80009e0 <stts22h_read_reg>
 8000a76:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d11d      	bne.n	8000aba <stts22h_temp_data_rate_set+0x72>
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d11a      	bne.n	8000aba <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000a84:	7c3b      	ldrb	r3, [r7, #16]
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	200c      	movs	r0, #12
 8000a96:	f7ff ffbd 	bl	8000a14 <stts22h_write_reg>
 8000a9a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10b      	bne.n	8000aba <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000aa2:	7c3b      	ldrb	r3, [r7, #16]
 8000aa4:	f36f 0341 	bfc	r3, #1, #1
 8000aa8:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	200c      	movs	r0, #12
 8000ab4:	f7ff ffae 	bl	8000a14 <stts22h_write_reg>
 8000ab8:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d008      	beq.n	8000ad2 <stts22h_temp_data_rate_set+0x8a>
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d005      	beq.n	8000ad2 <stts22h_temp_data_rate_set+0x8a>
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b22      	cmp	r3, #34	; 0x22
 8000aca:	d002      	beq.n	8000ad2 <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b32      	cmp	r3, #50	; 0x32
 8000ad0:	d123      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000ad2:	7b3b      	ldrb	r3, [r7, #12]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11d      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11a      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000ae4:	7c3b      	ldrb	r3, [r7, #16]
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	200c      	movs	r0, #12
 8000af6:	f7ff ff8d 	bl	8000a14 <stts22h_write_reg>
 8000afa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10b      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000b02:	7c3b      	ldrb	r3, [r7, #16]
 8000b04:	f36f 0341 	bfc	r3, #1, #1
 8000b08:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	200c      	movs	r0, #12
 8000b14:	f7ff ff7e 	bl	8000a14 <stts22h_write_reg>
 8000b18:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d125      	bne.n	8000b6c <stts22h_temp_data_rate_set+0x124>
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d122      	bne.n	8000b6c <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000b26:	7c3b      	ldrb	r3, [r7, #16]
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000b2e:	7c3b      	ldrb	r3, [r7, #16]
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	200c      	movs	r0, #12
 8000b40:	f7ff ff68 	bl	8000a14 <stts22h_write_reg>
 8000b44:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10f      	bne.n	8000b6c <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000b4c:	7c3b      	ldrb	r3, [r7, #16]
 8000b4e:	f36f 0341 	bfc	r3, #1, #1
 8000b52:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000b54:	7c3b      	ldrb	r3, [r7, #16]
 8000b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5a:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	2201      	movs	r2, #1
 8000b62:	4619      	mov	r1, r3
 8000b64:	200c      	movs	r0, #12
 8000b66:	f7ff ff55 	bl	8000a14 <stts22h_write_reg>
 8000b6a:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d12a      	bne.n	8000bc8 <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	7b3b      	ldrb	r3, [r7, #12]
 8000b7c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b80:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	7b3b      	ldrb	r3, [r7, #12]
 8000b8e:	f362 0382 	bfi	r3, r2, #2, #1
 8000b92:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ba0:	f362 13c7 	bfi	r3, r2, #7, #1
 8000ba4:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	091b      	lsrs	r3, r3, #4
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	7b3b      	ldrb	r3, [r7, #12]
 8000bb2:	f362 1305 	bfi	r3, r2, #4, #2
 8000bb6:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f7ff ff27 	bl	8000a14 <stts22h_write_reg>
 8000bc6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8000bc8:	697b      	ldr	r3, [r7, #20]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff fefe 	bl	80009e0 <stts22h_read_reg>
 8000be4:	60f8      	str	r0, [r7, #12]

  return ret;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000bf0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf4:	3304      	adds	r3, #4

08000bf6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000bfa:	d3f9      	bcc.n	8000bf0 <CopyDataInit>
  bx lr
 8000bfc:	4770      	bx	lr

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000bfe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c00:	3004      	adds	r0, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c02:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>
  bx lr
 8000c06:	4770      	bx	lr

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f003 f95c 	bl	8003ec8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <LoopForever+0x8>)
 8000c12:	490c      	ldr	r1, [pc, #48]	; (8000c44 <LoopForever+0xc>)
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <LoopForever+0x10>)
 8000c16:	2300      	movs	r3, #0
 8000c18:	f7ff ffed 	bl	8000bf6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <LoopForever+0x14>)
 8000c1e:	490c      	ldr	r1, [pc, #48]	; (8000c50 <LoopForever+0x18>)
 8000c20:	2300      	movs	r3, #0
 8000c22:	f7ff ffee 	bl	8000c02 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c26:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopForever+0x1c>)
 8000c28:	490b      	ldr	r1, [pc, #44]	; (8000c58 <LoopForever+0x20>)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f7ff ffe9 	bl	8000c02 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c30:	f00b fc78 	bl	800c524 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000c34:	f002 fc72 	bl	800351c <main>

08000c38 <LoopForever>:

LoopForever:
  b LoopForever
 8000c38:	e7fe      	b.n	8000c38 <LoopForever>
 8000c3a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000c3c:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200000a4 	.word	0x200000a4
 8000c48:	0800e330 	.word	0x0800e330
  INIT_BSS _sbss, _ebss
 8000c4c:	200000b8 	.word	0x200000b8
 8000c50:	200009c0 	.word	0x200009c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c54:	200300e8 	.word	0x200300e8
 8000c58:	20030c6a 	.word	0x20030c6a

08000c5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_IRQHandler>

08000c5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_kill>:

int _kill(int pid, int sig)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c78:	f00b fc3c 	bl	800c4f4 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2216      	movs	r2, #22
 8000c80:	601a      	str	r2, [r3, #0]
  return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_exit>:

void _exit (int status)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c96:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffe7 	bl	8000c6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ca0:	e7fe      	b.n	8000ca0 <_exit+0x12>

08000ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e00a      	b.n	8000cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	4601      	mov	r1, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	60ba      	str	r2, [r7, #8]
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf0      	blt.n	8000cb4 <_read+0x12>
  }

  return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e009      	b.n	8000d02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60ba      	str	r2, [r7, #8]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbf1      	blt.n	8000cee <_write+0x12>
  }
  return len;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_close>:

int _close(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_isatty>:

int _isatty(int file)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f00b fba2 	bl	800c4f4 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20024000 	.word	0x20024000
 8000ddc:	00002000 	.word	0x00002000
 8000de0:	200000f0 	.word	0x200000f0
 8000de4:	200009c0 	.word	0x200009c0

08000de8 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000df4:	2300      	movs	r3, #0
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f009 fb2c 	bl	800a458 <otCoapSendResponseWithParameters>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <APP_THREAD_Init>:
static otInstance *sInstance = NULL;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN APP_THREAD_INIT_1 */

	/* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000e12:	2101      	movs	r1, #1
 8000e14:	2002      	movs	r0, #2
 8000e16:	f00b f833 	bl	800be80 <UTIL_LPM_SetStopMode>
	SHCI_CmdStatus_t ThreadInitStatus;

	/* Check the compatibility with the Coprocessor Wireless Firmware loaded */
	APP_THREAD_CheckWirelessFirmwareInfo();
 8000e1a:	f000 fa53 	bl	80012c4 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

	/* Register cmdbuffer */
	APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000e1e:	4829      	ldr	r0, [pc, #164]	; (8000ec4 <APP_THREAD_Init+0xb8>)
 8000e20:	f000 fcb0 	bl	8001784 <APP_THREAD_RegisterCmdBuffer>

	/**
	 * Do not allow standby in the application
	 */
	UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000e24:	2101      	movs	r1, #1
 8000e26:	2002      	movs	r0, #2
 8000e28:	f00b f85a 	bl	800bee0 <UTIL_LPM_SetOffMode>

	/* Init config buffer and call TL_THREAD_Init */
	APP_THREAD_TL_THREAD_INIT();
 8000e2c:	f000 fdd0 	bl	80019d0 <APP_THREAD_TL_THREAD_INIT>

	/* Configure UART for sending CLI command from M4 */
	APP_THREAD_Init_UART_CLI();
 8000e30:	f000 fdb6 	bl	80019a0 <APP_THREAD_Init_UART_CLI>

	/* Send Thread start system cmd to M0 */
	ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000e34:	f00a fae1 	bl	800b3fa <SHCI_C2_THREAD_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(ThreadInitStatus);

	/* Register task */
	/* Create the different tasks */
	UTIL_SEQ_RegTask(1 << (uint32_t) CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU,
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <APP_THREAD_Init+0xbc>)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	f00b f979 	bl	800c138 <UTIL_SEQ_RegTask>
			APP_THREAD_ProcessMsgM0ToM4);

	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated,
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <APP_THREAD_Init+0xc0>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4921      	ldr	r1, [pc, #132]	; (8000ed0 <APP_THREAD_Init+0xc4>)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f002 f8a1 	bl	8002f94 <HW_TS_Create>
			(HW_TS_pTimerCb_t) APP_THREAD_SendCoapMsg);
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &setThreadLpTimerId, hw_ts_SingleShot,
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <APP_THREAD_Init+0xc8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	4920      	ldr	r1, [pc, #128]	; (8000ed8 <APP_THREAD_Init+0xcc>)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f002 f89b 	bl	8002f94 <HW_TS_Create>
			APP_THREAD_SetSleepyEndDeviceMode);
	HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <APP_THREAD_Init+0xc4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f642 0205 	movw	r2, #10245	; 0x2805
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 f991 	bl	8003190 <HW_TS_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2102      	movs	r1, #2
 8000e72:	481a      	ldr	r0, [pc, #104]	; (8000edc <APP_THREAD_Init+0xd0>)
 8000e74:	f003 ff82 	bl	8004d7c <HAL_GPIO_WritePin>

	sInstance = otInstanceInitSingle();
 8000e78:	f009 fb56 	bl	800a528 <otInstanceInitSingle>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <APP_THREAD_Init+0xd4>)
 8000e80:	6013      	str	r3, [r2, #0]
	assert(sInstance);
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <APP_THREAD_Init+0xd4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d105      	bne.n	8000e96 <APP_THREAD_Init+0x8a>
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <APP_THREAD_Init+0xd8>)
 8000e8c:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <APP_THREAD_Init+0xdc>)
 8000e8e:	21d1      	movs	r1, #209	; 0xd1
 8000e90:	4816      	ldr	r0, [pc, #88]	; (8000eec <APP_THREAD_Init+0xe0>)
 8000e92:	f00b fb11 	bl	800c4b8 <__assert_func>
	/* USER CODE BEGIN INIT TASKS */
	APP_THREAD_SetSleepyEndDeviceMode();
 8000e96:	f000 f8e1 	bl	800105c <APP_THREAD_SetSleepyEndDeviceMode>
	/* Initialize and configure the Thread device*/
	otPlatRadioSetTransmitPower(sInstance, 6);
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <APP_THREAD_Init+0xd4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2106      	movs	r1, #6
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00a fa77 	bl	800b394 <otPlatRadioSetTransmitPower>
	APP_THREAD_DeviceConfig();
 8000ea6:	f000 f933 	bl	8001110 <APP_THREAD_DeviceConfig>
	//appSrpInit();
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2002      	movs	r0, #2
 8000eae:	f00a ffe7 	bl	800be80 <UTIL_LPM_SetStopMode>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f00a facc 	bl	800b452 <SHCI_C2_RADIO_AllowLowPower>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200300e8 	.word	0x200300e8
 8000ec8:	08001a65 	.word	0x08001a65
 8000ecc:	0800154d 	.word	0x0800154d
 8000ed0:	2000030c 	.word	0x2000030c
 8000ed4:	0800105d 	.word	0x0800105d
 8000ed8:	2000030d 	.word	0x2000030d
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	2000044c 	.word	0x2000044c
 8000ee4:	0800d910 	.word	0x0800d910
 8000ee8:	0800e14c 	.word	0x0800e14c
 8000eec:	0800d91c 	.word	0x0800d91c

08000ef0 <APP_THREAD_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN APP_THREAD_Error_1 */

	/* USER CODE END APP_THREAD_Error_1 */
	switch (ErrId)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b16      	cmp	r3, #22
 8000efe:	f200 8081 	bhi.w	8001004 <APP_THREAD_Error+0x114>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <APP_THREAD_Error+0x18>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f65 	.word	0x08000f65
 8000f0c:	08000f6f 	.word	0x08000f6f
 8000f10:	08000f79 	.word	0x08000f79
 8000f14:	08000f83 	.word	0x08000f83
 8000f18:	08000f8d 	.word	0x08000f8d
 8000f1c:	08000f97 	.word	0x08000f97
 8000f20:	08000fa1 	.word	0x08000fa1
 8000f24:	08000fab 	.word	0x08000fab
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fc9 	.word	0x08000fc9
 8000f30:	08000fd3 	.word	0x08000fd3
 8000f34:	08000fdd 	.word	0x08000fdd
 8000f38:	08001005 	.word	0x08001005
 8000f3c:	08000fe7 	.word	0x08000fe7
 8000f40:	08000ff1 	.word	0x08000ff1
 8000f44:	08001005 	.word	0x08001005
 8000f48:	08001005 	.word	0x08001005
 8000f4c:	08001005 	.word	0x08001005
 8000f50:	08001005 	.word	0x08001005
 8000f54:	08001005 	.word	0x08001005
 8000f58:	08000ffb 	.word	0x08000ffb
 8000f5c:	08001005 	.word	0x08001005
 8000f60:	08000fb5 	.word	0x08000fb5
	{
	case ERR_REC_MULTI_MSG_FROM_M0:
		APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	482c      	ldr	r0, [pc, #176]	; (8001018 <APP_THREAD_Error+0x128>)
 8000f68:	f000 f998 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000f6c:	e04f      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_STATE_CB:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ", ErrCode);
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	482a      	ldr	r0, [pc, #168]	; (800101c <APP_THREAD_Error+0x12c>)
 8000f72:	f000 f993 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000f76:	e04a      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_CHANNEL:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ", ErrCode);
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <APP_THREAD_Error+0x130>)
 8000f7c:	f000 f98e 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000f80:	e045      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_PANID:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ", ErrCode);
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	4827      	ldr	r0, [pc, #156]	; (8001024 <APP_THREAD_Error+0x134>)
 8000f86:	f000 f989 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000f8a:	e040      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_IPV6_ENABLE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ", ErrCode);
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	4826      	ldr	r0, [pc, #152]	; (8001028 <APP_THREAD_Error+0x138>)
 8000f90:	f000 f984 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000f94:	e03b      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_START:
		APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4824      	ldr	r0, [pc, #144]	; (800102c <APP_THREAD_Error+0x13c>)
 8000f9a:	f000 f97f 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000f9e:	e036      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_ERASE_PERSISTENT_INFO:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <APP_THREAD_Error+0x140>)
 8000fa4:	f000 f97a 	bl	800129c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000fa8:	e031      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_NETWORK_KEY:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ", ErrCode);
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	4821      	ldr	r0, [pc, #132]	; (8001034 <APP_THREAD_Error+0x144>)
 8000fae:	f000 f975 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000fb2:	e02c      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_CHECK_WIRELESS:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ", ErrCode);
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	4820      	ldr	r0, [pc, #128]	; (8001038 <APP_THREAD_Error+0x148>)
 8000fb8:	f000 f970 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000fbc:	e027      	b.n	800100e <APP_THREAD_Error+0x11e>
		/* USER CODE BEGIN APP_THREAD_Error_2 */
	case ERR_THREAD_COAP_START:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ", ErrCode);
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <APP_THREAD_Error+0x14c>)
 8000fc2:	f000 f96b 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000fc6:	e022      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_ADD_RESSOURCE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <APP_THREAD_Error+0x150>)
 8000fcc:	f000 f966 	bl	800129c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000fd0:	e01d      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MESSAGE_READ:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ", ErrCode);
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	481b      	ldr	r0, [pc, #108]	; (8001044 <APP_THREAD_Error+0x154>)
 8000fd6:	f000 f961 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000fda:	e018      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_RESPONSE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <APP_THREAD_Error+0x158>)
 8000fe0:	f000 f95c 	bl	800129c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000fe4:	e013      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_APPEND:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ", ErrCode);
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <APP_THREAD_Error+0x15c>)
 8000fea:	f000 f957 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000fee:	e00e      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_REQUEST:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ", ErrCode);
 8000ff0:	6839      	ldr	r1, [r7, #0]
 8000ff2:	4817      	ldr	r0, [pc, #92]	; (8001050 <APP_THREAD_Error+0x160>)
 8000ff4:	f000 f952 	bl	800129c <APP_THREAD_TraceError>
		break;
 8000ff8:	e009      	b.n	800100e <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MSG_COMPARE_FAILED:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	4815      	ldr	r0, [pc, #84]	; (8001054 <APP_THREAD_Error+0x164>)
 8000ffe:	f000 f94d 	bl	800129c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8001002:	e004      	b.n	800100e <APP_THREAD_Error+0x11e>
		/* USER CODE END APP_THREAD_Error_2 */
	default:
		APP_THREAD_TraceError("ERROR Unknown ", 0);
 8001004:	2100      	movs	r1, #0
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <APP_THREAD_Error+0x168>)
 8001008:	f000 f948 	bl	800129c <APP_THREAD_TraceError>
		break;
 800100c:	bf00      	nop
	}
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0800d9a0 	.word	0x0800d9a0
 800101c:	0800d9c4 	.word	0x0800d9c4
 8001020:	0800d9e8 	.word	0x0800d9e8
 8001024:	0800da08 	.word	0x0800da08
 8001028:	0800da28 	.word	0x0800da28
 800102c:	0800da48 	.word	0x0800da48
 8001030:	0800da64 	.word	0x0800da64
 8001034:	0800da90 	.word	0x0800da90
 8001038:	0800dab4 	.word	0x0800dab4
 800103c:	0800dad8 	.word	0x0800dad8
 8001040:	0800daf8 	.word	0x0800daf8
 8001044:	0800db20 	.word	0x0800db20
 8001048:	0800db44 	.word	0x0800db44
 800104c:	0800db6c 	.word	0x0800db6c
 8001050:	0800db8c 	.word	0x0800db8c
 8001054:	0800dbb4 	.word	0x0800dbb4
 8001058:	0800dbdc 	.word	0x0800dbdc

0800105c <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	otError error = OT_ERROR_NONE;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]

	/* Set the pool period to 5 sec. It means that when the device will enter
	 * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
	 * This message will act as keep alive message.
	 */
	otLinkSetPollPeriod(sInstance, 5000);
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <APP_THREAD_SetSleepyEndDeviceMode+0xa8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f241 3188 	movw	r1, #5000	; 0x1388
 800106e:	4618      	mov	r0, r3
 8001070:	f009 fab1 	bl	800a5d6 <otLinkSetPollPeriod>

	/* Set the sleepy end device mode */
	OT_LinkMode.mRxOnWhenIdle = 0;
 8001074:	4a24      	ldr	r2, [pc, #144]	; (8001108 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8001076:	7813      	ldrb	r3, [r2, #0]
 8001078:	f36f 0300 	bfc	r3, #0, #1
 800107c:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mDeviceType = 0;
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8001080:	7813      	ldrb	r3, [r2, #0]
 8001082:	f36f 0341 	bfc	r3, #1, #1
 8001086:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mNetworkData = 0;
 8001088:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 800108a:	7813      	ldrb	r3, [r2, #0]
 800108c:	f36f 0382 	bfc	r3, #2, #1
 8001090:	7013      	strb	r3, [r2, #0]

	error = otThreadSetLinkMode(sInstance, OT_LinkMode);
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <APP_THREAD_SetSleepyEndDeviceMode+0xa8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8001098:	7811      	ldrb	r1, [r2, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f00a fc0a 	bl	800b8b4 <otThreadSetLinkMode>
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <APP_THREAD_SetSleepyEndDeviceMode+0x58>
		APP_THREAD_Error(ERR_THREAD_LINK_MODE, error);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4619      	mov	r1, r3
 80010ae:	2011      	movs	r0, #17
 80010b0:	f7ff ff1e 	bl	8000ef0 <APP_THREAD_Error>
	   * to modify its mode to MTD.
	   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
	   * then reattach.
	   *
	   */
	  if (sleepyEndDeviceFlag == FALSE)
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <APP_THREAD_SetSleepyEndDeviceMode+0xb0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d11e      	bne.n	80010fa <APP_THREAD_SetSleepyEndDeviceMode+0x9e>
	  {
	    error = otThreadSetEnabled(NULL, false);
 80010bc:	2100      	movs	r1, #0
 80010be:	2000      	movs	r0, #0
 80010c0:	f00a fbc8 	bl	800b854 <otThreadSetEnabled>
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	    if (error != OT_ERROR_NONE)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <APP_THREAD_SetSleepyEndDeviceMode+0x7c>
	      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4619      	mov	r1, r3
 80010d2:	2011      	movs	r0, #17
 80010d4:	f7ff ff0c 	bl	8000ef0 <APP_THREAD_Error>
	    error = otThreadSetEnabled(NULL, true);
 80010d8:	2101      	movs	r1, #1
 80010da:	2000      	movs	r0, #0
 80010dc:	f00a fbba 	bl	800b854 <otThreadSetEnabled>
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
	    if (error != OT_ERROR_NONE)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <APP_THREAD_SetSleepyEndDeviceMode+0x98>
	      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4619      	mov	r1, r3
 80010ee:	2011      	movs	r0, #17
 80010f0:	f7ff fefe 	bl	8000ef0 <APP_THREAD_Error>
	    sleepyEndDeviceFlag = TRUE;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <APP_THREAD_SetSleepyEndDeviceMode+0xb0>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
	  }
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000044c 	.word	0x2000044c
 8001108:	200000f4 	.word	0x200000f4
 800110c:	200000f8 	.word	0x200000f8

08001110 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b0a7      	sub	sp, #156	; 0x9c
 8001114:	af00      	add	r7, sp, #0

	static char aNetworkName[] = "OpenThread X-1";

	otOperationalDataset aDataset;

	memset(&aDataset, 0, sizeof(otOperationalDataset));
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	2278      	movs	r2, #120	; 0x78
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00b fa3a 	bl	800c598 <memset>
	 * Fields that can be configured in otOperationDataset to override defaults:
	 *     Network Name, Mesh Local Prefix, Extended PAN ID, PAN ID, Delay Timer,
	 *     Channel, Channel Mask Page 0, Network Key, PSKc, Security Policy
	 */
	//aDataset.mActiveTimestamp.mSeconds             = 1;
	aDataset.mComponents.mIsActiveTimestampPresent = true;
 8001124:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Channel to 15 */
	aDataset.mChannel = 15;
 8001130:	230f      	movs	r3, #15
 8001132:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	aDataset.mComponents.mIsChannelPresent = true;
 8001136:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	/* Set Pan ID to 2222 */
	aDataset.mPanId = (otPanId) 0xDEAD;
 8001142:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8001146:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	aDataset.mComponents.mIsPanIdPresent = true;
 800114a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800114e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001152:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Extended Pan ID to  */
	uint8_t extPanId[OT_EXT_PAN_ID_SIZE] =
 8001156:	4a49      	ldr	r2, [pc, #292]	; (800127c <APP_THREAD_DeviceConfig+0x16c>)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001160:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 0x72, 0x53, 0xc0, 0xf9, 0x58, 0xe3, 0x3f, 0x94 };
	memcpy(aDataset.mExtendedPanId.m8, extPanId,
 8001164:	f107 0259 	add.w	r2, r7, #89	; 0x59
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	cb03      	ldmia	r3!, {r0, r1}
 800116e:	6010      	str	r0, [r2, #0]
 8001170:	6051      	str	r1, [r2, #4]
			sizeof(aDataset.mExtendedPanId));
	aDataset.mComponents.mIsExtendedPanIdPresent = true;
 8001172:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set network key to  */
	uint8_t key[OT_NETWORK_KEY_SIZE] =
 800117e:	4b40      	ldr	r3, [pc, #256]	; (8001280 <APP_THREAD_DeviceConfig+0x170>)
 8001180:	463c      	mov	r4, r7
 8001182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ 0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9, 0xca, 0x86, 0x85, 0xab,
			0x99, 0xda, 0xc9, 0x51 };
	memcpy(aDataset.mNetworkKey.m8, key, sizeof(aDataset.mNetworkKey));
 8001188:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800118c:	463b      	mov	r3, r7
 800118e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	aDataset.mComponents.mIsNetworkKeyPresent = true;
 8001194:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Network Name */
	size_t length = strlen(aNetworkName);
 80011a0:	4838      	ldr	r0, [pc, #224]	; (8001284 <APP_THREAD_DeviceConfig+0x174>)
 80011a2:	f7fe fff7 	bl	8000194 <strlen>
 80011a6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	assert(length <= OT_NETWORK_NAME_MAX_SIZE);
 80011aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d906      	bls.n	80011c0 <APP_THREAD_DeviceConfig+0xb0>
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <APP_THREAD_DeviceConfig+0x178>)
 80011b4:	4a35      	ldr	r2, [pc, #212]	; (800128c <APP_THREAD_DeviceConfig+0x17c>)
 80011b6:	f240 11b1 	movw	r1, #433	; 0x1b1
 80011ba:	4835      	ldr	r0, [pc, #212]	; (8001290 <APP_THREAD_DeviceConfig+0x180>)
 80011bc:	f00b f97c 	bl	800c4b8 <__assert_func>
	memcpy(aDataset.mNetworkName.m8, aNetworkName, length);
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	3330      	adds	r3, #48	; 0x30
 80011c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80011ca:	492e      	ldr	r1, [pc, #184]	; (8001284 <APP_THREAD_DeviceConfig+0x174>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00b f9d5 	bl	800c57c <memcpy>
	aDataset.mComponents.mIsNetworkNamePresent = true;
 80011d2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	/* Set the Active Operational Dataset to this dataset */
	error = otDatasetSetActive(sInstance, &aDataset);
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <APP_THREAD_DeviceConfig+0x184>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f107 0218 	add.w	r2, r7, #24
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f009 f96c 	bl	800a4c6 <otDatasetSetActive>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	error = otIp6SetEnabled(sInstance, true);
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <APP_THREAD_DeviceConfig+0x184>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 f9bb 	bl	800a576 <otIp6SetEnabled>
 8001200:	4603      	mov	r3, r0
 8001202:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 8001206:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <APP_THREAD_DeviceConfig+0x10a>
	{
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 800120e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001212:	4619      	mov	r1, r3
 8001214:	2004      	movs	r0, #4
 8001216:	f7ff fe6b 	bl	8000ef0 <APP_THREAD_Error>
	}
	error = otThreadSetEnabled(sInstance, true);
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <APP_THREAD_DeviceConfig+0x184>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f00a fb17 	bl	800b854 <otThreadSetEnabled>
 8001226:	4603      	mov	r3, r0
 8001228:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 800122c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <APP_THREAD_DeviceConfig+0x130>
	{
		APP_THREAD_Error(ERR_THREAD_START, error);
 8001234:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001238:	4619      	mov	r1, r3
 800123a:	2005      	movs	r0, #5
 800123c:	f7ff fe58 	bl	8000ef0 <APP_THREAD_Error>
	}
	/* USER CODE BEGIN DEVICECONFIG */
	/* Start the COAP server */
	error = otCoapStart(sInstance, OT_DEFAULT_COAP_PORT);
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <APP_THREAD_DeviceConfig+0x184>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f241 6133 	movw	r1, #5683	; 0x1633
 8001248:	4618      	mov	r0, r3
 800124a:	f009 f8a9 	bl	800a3a0 <otCoapStart>
 800124e:	4603      	mov	r3, r0
 8001250:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 8001254:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <APP_THREAD_DeviceConfig+0x158>
	{
		APP_THREAD_Error(ERR_THREAD_COAP_START, error);
 800125c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001260:	4619      	mov	r1, r3
 8001262:	2008      	movs	r0, #8
 8001264:	f7ff fe44 	bl	8000ef0 <APP_THREAD_Error>
	}
	/* Add COAP resources */
	otCoapAddResource(sInstance, &OT_Ressource);
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <APP_THREAD_DeviceConfig+0x184>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	490a      	ldr	r1, [pc, #40]	; (8001298 <APP_THREAD_DeviceConfig+0x188>)
 800126e:	4618      	mov	r0, r3
 8001270:	f009 f8c6 	bl	800a400 <otCoapAddResource>

	/* USER CODE END DEVICECONFIG */
}
 8001274:	bf00      	nop
 8001276:	379c      	adds	r7, #156	; 0x9c
 8001278:	46bd      	mov	sp, r7
 800127a:	bd90      	pop	{r4, r7, pc}
 800127c:	0800dc10 	.word	0x0800dc10
 8001280:	0800dc18 	.word	0x0800dc18
 8001284:	2000001c 	.word	0x2000001c
 8001288:	0800dbec 	.word	0x0800dbec
 800128c:	0800e15c 	.word	0x0800e15c
 8001290:	0800d91c 	.word	0x0800d91c
 8001294:	2000044c 	.word	0x2000044c
 8001298:	2000000c 	.word	0x2000000c

0800129c <APP_THREAD_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
 * @retval None
 */
static void APP_THREAD_TraceError(const char *pMess, uint32_t ErrCode)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TRACE_ERROR */
	APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <APP_THREAD_TraceError+0x24>)
 80012ae:	2101      	movs	r1, #1
 80012b0:	2000      	movs	r0, #0
 80012b2:	f002 fdf9 	bl	8003ea8 <logApplication>

	/* USER CODE END TRACE_ERROR */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800dc28 	.word	0x0800dc28

080012c4 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af02      	add	r7, sp, #8
	WirelessFwInfo_t wireless_info_instance;
	WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	617b      	str	r3, [r7, #20]

	if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f00a f8de 	bl	800b490 <SHCI_GetWirelessFwInfo>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
	{
		APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 80012da:	2101      	movs	r1, #1
 80012dc:	2016      	movs	r0, #22
 80012de:	f7ff fe07 	bl	8000ef0 <APP_THREAD_Error>
					(uint32_t) ERR_INTERFACE_FATAL);
			break;
		}
		APP_DBG("**********************************************************");
	}
}
 80012e2:	e07c      	b.n	80013de <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
		APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 80012e4:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	2000      	movs	r0, #0
 80012ea:	f002 fddd 	bl	8003ea8 <logApplication>
		APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor,
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	461a      	mov	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	789b      	ldrb	r3, [r3, #2]
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	9200      	str	r2, [sp, #0]
 8001302:	460b      	mov	r3, r1
 8001304:	4a39      	ldr	r2, [pc, #228]	; (80013ec <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 8001306:	2101      	movs	r1, #1
 8001308:	2000      	movs	r0, #0
 800130a:	f002 fdcd 	bl	8003ea8 <logApplication>
		APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	791b      	ldrb	r3, [r3, #4]
 8001312:	4a37      	ldr	r2, [pc, #220]	; (80013f0 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8001314:	2101      	movs	r1, #1
 8001316:	2000      	movs	r0, #0
 8001318:	f002 fdc6 	bl	8003ea8 <logApplication>
		APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 8001322:	2101      	movs	r1, #1
 8001324:	2000      	movs	r0, #0
 8001326:	f002 fdbf 	bl	8003ea8 <logApplication>
		APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor,
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	7a9b      	ldrb	r3, [r3, #10]
 800132e:	4619      	mov	r1, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	7adb      	ldrb	r3, [r3, #11]
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	7b1b      	ldrb	r3, [r3, #12]
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	9200      	str	r2, [sp, #0]
 800133e:	460b      	mov	r3, r1
 8001340:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 8001342:	2101      	movs	r1, #1
 8001344:	2000      	movs	r0, #0
 8001346:	f002 fdaf 	bl	8003ea8 <logApplication>
		APP_DBG("Stack type: %d", p_wireless_info->StackType);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	7a5b      	ldrb	r3, [r3, #9]
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 8001350:	2101      	movs	r1, #1
 8001352:	2000      	movs	r0, #0
 8001354:	f002 fda8 	bl	8003ea8 <logApplication>
		APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	7a1b      	ldrb	r3, [r3, #8]
 800135c:	4a28      	ldr	r2, [pc, #160]	; (8001400 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 800135e:	2101      	movs	r1, #1
 8001360:	2000      	movs	r0, #0
 8001362:	f002 fda1 	bl	8003ea8 <logApplication>
		APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	79db      	ldrb	r3, [r3, #7]
 800136a:	4a26      	ldr	r2, [pc, #152]	; (8001404 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 800136c:	2101      	movs	r1, #1
 800136e:	2000      	movs	r0, #0
 8001370:	f002 fd9a 	bl	8003ea8 <logApplication>
		APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	799b      	ldrb	r3, [r3, #6]
 8001378:	4a23      	ldr	r2, [pc, #140]	; (8001408 <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 800137a:	2101      	movs	r1, #1
 800137c:	2000      	movs	r0, #0
 800137e:	f002 fd93 	bl	8003ea8 <logApplication>
		APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	795b      	ldrb	r3, [r3, #5]
 8001386:	4a21      	ldr	r2, [pc, #132]	; (800140c <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8001388:	2101      	movs	r1, #1
 800138a:	2000      	movs	r0, #0
 800138c:	f002 fd8c 	bl	8003ea8 <logApplication>
		switch (p_wireless_info->StackType)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	7a5b      	ldrb	r3, [r3, #9]
 8001394:	2b50      	cmp	r3, #80	; 0x50
 8001396:	d012      	beq.n	80013be <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8001398:	2b50      	cmp	r3, #80	; 0x50
 800139a:	dc16      	bgt.n	80013ca <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 800139c:	2b10      	cmp	r3, #16
 800139e:	d002      	beq.n	80013a6 <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 80013a0:	2b11      	cmp	r3, #17
 80013a2:	d006      	beq.n	80013b2 <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 80013a4:	e011      	b.n	80013ca <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
			APP_DBG("FW Type : Thread FTD")
 80013a6:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	2000      	movs	r0, #0
 80013ac:	f002 fd7c 	bl	8003ea8 <logApplication>
			break;
 80013b0:	e010      	b.n	80013d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_DBG("FW Type : Thread MTD")
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	2000      	movs	r0, #0
 80013b8:	f002 fd76 	bl	8003ea8 <logApplication>
			break;
 80013bc:	e00a      	b.n	80013d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_DBG("FW Type : Static Concurrent Mode BLE/Thread")
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	2000      	movs	r0, #0
 80013c4:	f002 fd70 	bl	8003ea8 <logApplication>
			break;
 80013c8:	e004      	b.n	80013d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 80013ca:	2101      	movs	r1, #1
 80013cc:	2016      	movs	r0, #22
 80013ce:	f7ff fd8f 	bl	8000ef0 <APP_THREAD_Error>
			break;
 80013d2:	bf00      	nop
		APP_DBG("**********************************************************");
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	2000      	movs	r0, #0
 80013da:	f002 fd65 	bl	8003ea8 <logApplication>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0800dc4c 	.word	0x0800dc4c
 80013ec:	0800dc88 	.word	0x0800dc88
 80013f0:	0800dca4 	.word	0x0800dca4
 80013f4:	0800dcc0 	.word	0x0800dcc0
 80013f8:	0800dcd8 	.word	0x0800dcd8
 80013fc:	0800dcf4 	.word	0x0800dcf4
 8001400:	0800dd04 	.word	0x0800dd04
 8001404:	0800dd18 	.word	0x0800dd18
 8001408:	0800dd2c 	.word	0x0800dd2c
 800140c:	0800dd40 	.word	0x0800dd40
 8001410:	0800dd54 	.word	0x0800dd54
 8001414:	0800dd6c 	.word	0x0800dd6c
 8001418:	0800dd84 	.word	0x0800dd84
 800141c:	0800ddb0 	.word	0x0800ddb0

08001420 <APP_THREAD_CoapPermissionsRequestHandler>:
 */

static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 800142c:	2100      	movs	r1, #0
 800142e:	2001      	movs	r0, #1
 8001430:	f00a f80f 	bl	800b452 <SHCI_C2_RADIO_AllowLowPower>
	coapConnectionEstablished = true;
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <APP_THREAD_CoapPermissionsRequestHandler+0x110>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2102      	movs	r1, #2
 800143e:	483d      	ldr	r0, [pc, #244]	; (8001534 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 8001440:	f003 fc9c 	bl	8004d7c <HAL_GPIO_WritePin>
	APP_DBG(
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a3c      	ldr	r2, [pc, #240]	; (8001538 <APP_THREAD_CoapPermissionsRequestHandler+0x118>)
 8001448:	2101      	movs	r1, #1
 800144a:	2000      	movs	r0, #0
 800144c:	f002 fd2c 	bl	8003ea8 <logApplication>
					"***********************************************************************",
			pContext);
	/* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
	//GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
	//printIPv6Addr(&aMessageInfo->mPeerAddr);
	brAddr = pMessageInfo->mPeerAddr;
 8001450:	4a3a      	ldr	r2, [pc, #232]	; (800153c <APP_THREAD_CoapPermissionsRequestHandler+0x11c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4614      	mov	r4, r2
 8001456:	3310      	adds	r3, #16
 8001458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800145a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	otError error = OT_ERROR_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	77fb      	strb	r3, [r7, #31]
	otMessage *responseMessage;
	otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 8001462:	2344      	movs	r3, #68	; 0x44
 8001464:	77bb      	strb	r3, [r7, #30]
	otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	f008 fea4 	bl	800a1b4 <otCoapMessageGetCode>
 800146c:	4603      	mov	r3, r0
 800146e:	777b      	strb	r3, [r7, #29]

	responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 8001470:	2100      	movs	r1, #0
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f008 fd36 	bl	8009ee4 <otCoapNewMessage>
 8001478:	61b8      	str	r0, [r7, #24]

	otCoapMessageInitResponse(responseMessage, pMessage,
 800147a:	7fbb      	ldrb	r3, [r7, #30]
 800147c:	2202      	movs	r2, #2
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	69b8      	ldr	r0, [r7, #24]
 8001482:	f008 fd92 	bl	8009faa <otCoapMessageInitResponse>
			OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
	otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f008 ff20 	bl	800a2cc <otCoapMessageGetToken>
 800148c:	4604      	mov	r4, r0
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f008 feee 	bl	800a270 <otCoapMessageGetTokenLength>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4621      	mov	r1, r4
 800149a:	69b8      	ldr	r0, [r7, #24]
 800149c:	f008 fdc3 	bl	800a026 <otCoapMessageSetToken>
			otCoapMessageGetTokenLength(pMessage));
	otCoapMessageSetPayloadMarker(responseMessage);
 80014a0:	69b8      	ldr	r0, [r7, #24]
 80014a2:	f008 fe59 	bl	800a158 <otCoapMessageSetPayloadMarker>

	uint16_t offset = otMessageGetOffset(pMessage);
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f009 f8f1 	bl	800a68e <otMessageGetOffset>
 80014ac:	4603      	mov	r3, r0
 80014ae:	82fb      	strh	r3, [r7, #22]
	otMessageRead(pMessage, offset, resource_name, sizeof(resource_name) - 1);
 80014b0:	8af9      	ldrh	r1, [r7, #22]
 80014b2:	231f      	movs	r3, #31
 80014b4:	4a22      	ldr	r2, [pc, #136]	; (8001540 <APP_THREAD_CoapPermissionsRequestHandler+0x120>)
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f009 f952 	bl	800a760 <otMessageRead>

	if (OT_COAP_CODE_GET == messageCode)
 80014bc:	7f7b      	ldrb	r3, [r7, #29]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d10e      	bne.n	80014e0 <APP_THREAD_CoapPermissionsRequestHandler+0xc0>
	{

		error = otMessageAppend(responseMessage, "ack", 3);
 80014c2:	2203      	movs	r2, #3
 80014c4:	491f      	ldr	r1, [pc, #124]	; (8001544 <APP_THREAD_CoapPermissionsRequestHandler+0x124>)
 80014c6:	69b8      	ldr	r0, [r7, #24]
 80014c8:	f009 f911 	bl	800a6ee <otMessageAppend>
 80014cc:	4603      	mov	r3, r0
 80014ce:	77fb      	strb	r3, [r7, #31]
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff fc87 	bl	8000de8 <otCoapSendResponse>
 80014da:	4603      	mov	r3, r0
 80014dc:	77fb      	strb	r3, [r7, #31]
 80014de:	e011      	b.n	8001504 <APP_THREAD_CoapPermissionsRequestHandler+0xe4>
				pMessageInfo);
	}
	else
	{
		error = otMessageAppend(responseMessage, "nack", 4);
 80014e0:	2204      	movs	r2, #4
 80014e2:	4919      	ldr	r1, [pc, #100]	; (8001548 <APP_THREAD_CoapPermissionsRequestHandler+0x128>)
 80014e4:	69b8      	ldr	r0, [r7, #24]
 80014e6:	f009 f902 	bl	800a6ee <otMessageAppend>
 80014ea:	4603      	mov	r3, r0
 80014ec:	77fb      	strb	r3, [r7, #31]
		otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 80014ee:	2185      	movs	r1, #133	; 0x85
 80014f0:	69b8      	ldr	r0, [r7, #24]
 80014f2:	f008 fe8d 	bl	800a210 <otCoapMessageSetCode>
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	69b9      	ldr	r1, [r7, #24]
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff fc74 	bl	8000de8 <otCoapSendResponse>
 8001500:	4603      	mov	r3, r0
 8001502:	77fb      	strb	r3, [r7, #31]
				pMessageInfo);
	}

	if (error != OT_ERROR_NONE && responseMessage != NULL)
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <APP_THREAD_CoapPermissionsRequestHandler+0xf6>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <APP_THREAD_CoapPermissionsRequestHandler+0xf6>
	{
		otMessageFree(responseMessage);
 8001510:	69b8      	ldr	r0, [r7, #24]
 8001512:	f009 f88f 	bl	800a634 <otMessageFree>
	}

	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8001516:	2101      	movs	r1, #1
 8001518:	2001      	movs	r0, #1
 800151a:	f009 ff9a 	bl	800b452 <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2102      	movs	r1, #2
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 8001524:	f003 fc2a 	bl	8004d7c <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	3724      	adds	r7, #36	; 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	20000448 	.word	0x20000448
 8001534:	48000800 	.word	0x48000800
 8001538:	0800ddec 	.word	0x0800ddec
 800153c:	20000430 	.word	0x20000430
 8001540:	20000410 	.word	0x20000410
 8001544:	0800dfc0 	.word	0x0800dfc0
 8001548:	0800dfc4 	.word	0x0800dfc4

0800154c <APP_THREAD_SendCoapMsg>:
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf, bool require_ack)
{
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	b0ad      	sub	sp, #180	; 0xb4
 8001550:	af0e      	add	r7, sp, #56	; 0x38
 8001552:	6278      	str	r0, [r7, #36]	; 0x24
 8001554:	460b      	mov	r3, r1
 8001556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (!coapConnectionEstablished)
 800155a:	4b80      	ldr	r3, [pc, #512]	; (800175c <APP_THREAD_SendCoapMsg+0x210>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 80f5 	bne.w	8001754 <APP_THREAD_SendCoapMsg+0x208>
		return;
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 800156a:	2100      	movs	r1, #0
 800156c:	2001      	movs	r0, #1
 800156e:	f009 ff70 	bl	800b452 <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2102      	movs	r1, #2
 8001576:	487a      	ldr	r0, [pc, #488]	; (8001760 <APP_THREAD_SendCoapMsg+0x214>)
 8001578:	f003 fc00 	bl	8004d7c <HAL_GPIO_WritePin>
	int8_t rssi;
	int16_t tmp_aux;
	require_ack = false;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	//otThreadGetParentLastRssi(NULL, &rssi);
	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 8001582:	4978      	ldr	r1, [pc, #480]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 8001584:	4878      	ldr	r0, [pc, #480]	; (8001768 <APP_THREAD_SendCoapMsg+0x21c>)
 8001586:	f7ff f97f 	bl	8000888 <sht4x_read>
	//stts22h_temperature_raw_get(&tmp_aux);
	sensor_data.temp_aux = tmp_aux;
 800158a:	4a76      	ldr	r2, [pc, #472]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 800158c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001590:	8113      	strh	r3, [r2, #8]
	int8_t state;
	int8_t ret = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	if (ret == RES_HEAT)
 8001598:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <APP_THREAD_SendCoapMsg+0x58>
		sht4x_activate_medium_heater();
 80015a0:	f7ff f93e 	bl	8000820 <sht4x_activate_medium_heater>
	 * opt_buf (uint32_t): light levels in lux
	 * vdd_meas (uint32_t): supply voltage in mV
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015a4:	2301      	movs	r3, #1
 80015a6:	469c      	mov	ip, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80015a8:	4b70      	ldr	r3, [pc, #448]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015ac:	461d      	mov	r5, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80015ae:	4b6f      	ldr	r3, [pc, #444]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015b2:	461e      	mov	r6, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015b6:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015b8:	61fb      	str	r3, [r7, #28]
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80015ba:	4b6c      	ldr	r3, [pc, #432]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015bc:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015be:	61bb      	str	r3, [r7, #24]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015c2:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015c4:	617b      	str	r3, [r7, #20]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80015c6:	4b69      	ldr	r3, [pc, #420]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015c8:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015ca:	613b      	str	r3, [r7, #16]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80015cc:	4b67      	ldr	r3, [pc, #412]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015ce:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015d0:	60fb      	str	r3, [r7, #12]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80015d2:	4b66      	ldr	r3, [pc, #408]	; (800176c <APP_THREAD_SendCoapMsg+0x220>)
 80015d4:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b62      	ldr	r3, [pc, #392]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4b61      	ldr	r3, [pc, #388]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 80015de:	6819      	ldr	r1, [r3, #0]
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux,
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 80015e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	f997 0073 	ldrsb.w	r0, [r7, #115]	; 0x73
 80015ec:	f997 4072 	ldrsb.w	r4, [r7, #114]	; 0x72
 80015f0:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 80015f4:	930d      	str	r3, [sp, #52]	; 0x34
 80015f6:	940c      	str	r4, [sp, #48]	; 0x30
 80015f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	900a      	str	r0, [sp, #40]	; 0x28
 80015fe:	9109      	str	r1, [sp, #36]	; 0x24
 8001600:	9208      	str	r2, [sp, #32]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	9207      	str	r2, [sp, #28]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	9206      	str	r2, [sp, #24]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	9205      	str	r2, [sp, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	9204      	str	r2, [sp, #16]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	9203      	str	r2, [sp, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	9601      	str	r6, [sp, #4]
 800161c:	9500      	str	r5, [sp, #0]
 800161e:	4663      	mov	r3, ip
 8001620:	4a53      	ldr	r2, [pc, #332]	; (8001770 <APP_THREAD_SendCoapMsg+0x224>)
 8001622:	21fe      	movs	r1, #254	; 0xfe
 8001624:	4853      	ldr	r0, [pc, #332]	; (8001774 <APP_THREAD_SendCoapMsg+0x228>)
 8001626:	f00b fb9d 	bl	800cd64 <sniprintf>
			ret, rssi, state);
	buf = tmp_tx_buf;
 800162a:	4b52      	ldr	r3, [pc, #328]	; (8001774 <APP_THREAD_SendCoapMsg+0x228>)
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d",
 800162e:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	494b      	ldr	r1, [pc, #300]	; (8001764 <APP_THREAD_SendCoapMsg+0x218>)
 8001638:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800163c:	9101      	str	r1, [sp, #4]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <APP_THREAD_SendCoapMsg+0x22c>)
 8001644:	2101      	movs	r1, #1
 8001646:	2000      	movs	r0, #0
 8001648:	f002 fc2e 	bl	8003ea8 <logApplication>
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
	otError error = OT_ERROR_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	otMessage *message = NULL;
 8001652:	2300      	movs	r3, #0
 8001654:	66fb      	str	r3, [r7, #108]	; 0x6c
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	// Default parameters
	otCoapType coapType =
			require_ack ?
					OT_COAP_TYPE_CONFIRMABLE : OT_COAP_TYPE_NON_CONFIRMABLE;
 800165c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
	otCoapType coapType =
 8001666:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	otIp6Address coapDestinationIp = brAddr;
 800166a:	4b44      	ldr	r3, [pc, #272]	; (800177c <APP_THREAD_SendCoapMsg+0x230>)
 800166c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(NULL, NULL);
 8001676:	2100      	movs	r1, #0
 8001678:	2000      	movs	r0, #0
 800167a:	f008 fc33 	bl	8009ee4 <otCoapNewMessage>
 800167e:	66f8      	str	r0, [r7, #108]	; 0x6c

	otCoapMessageInit(message, coapType, OT_COAP_CODE_PUT);
 8001680:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001684:	2203      	movs	r2, #3
 8001686:	4619      	mov	r1, r3
 8001688:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800168a:	f008 fc59 	bl	8009f40 <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 800168e:	2102      	movs	r1, #2
 8001690:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001692:	f008 fcff 	bl	800a094 <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 8001696:	493a      	ldr	r1, [pc, #232]	; (8001780 <APP_THREAD_SendCoapMsg+0x234>)
 8001698:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800169a:	f008 fd2b 	bl	800a0f4 <otCoapMessageAppendUriPathOptions>
 800169e:	4603      	mov	r3, r0
 80016a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	payloadLength = strlen(buf);
 80016a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016a6:	f7fe fd75 	bl	8000194 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	if (payloadLength > 0)
 80016b0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <APP_THREAD_SendCoapMsg+0x178>
	{
		error = otCoapMessageSetPayloadMarker(message);
 80016b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80016ba:	f008 fd4d 	bl	800a158 <otCoapMessageSetPayloadMarker>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	// Embed content into message if given
	if (payloadLength > 0)
 80016c4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <APP_THREAD_SendCoapMsg+0x194>
	{
		error = otMessageAppend(message, buf, payloadLength);
 80016cc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80016d0:	461a      	mov	r2, r3
 80016d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80016d6:	f009 f80a 	bl	800a6ee <otMessageAppend>
 80016da:	4603      	mov	r3, r0
 80016dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 80016e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e4:	222c      	movs	r2, #44	; 0x2c
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00a ff55 	bl	800c598 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 80016ee:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80016fc:	f241 6333 	movw	r3, #5683	; 0x1633
 8001700:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	if (coapConnectionEstablished)
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <APP_THREAD_SendCoapMsg+0x210>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d012      	beq.n	8001732 <APP_THREAD_SendCoapMsg+0x1e6>
	{
		error = otCoapSendRequestWithParameters(NULL, message, &messageInfo,
 800170c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001710:	2300      	movs	r3, #0
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800171c:	2000      	movs	r0, #0
 800171e:	f008 fe02 	bl	800a326 <otCoapSendRequestWithParameters>
 8001722:	4603      	mov	r3, r0
 8001724:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				NULL,
				NULL,
				NULL);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <APP_THREAD_SendCoapMsg+0x214>)
 800172e:	f003 fb25 	bl	8004d7c <HAL_GPIO_WritePin>
	}

	if ((error != OT_ERROR_NONE) && (message != NULL))
 8001732:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <APP_THREAD_SendCoapMsg+0x1fa>
 800173a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <APP_THREAD_SendCoapMsg+0x1fa>
	{
		otMessageFree(message);
 8001740:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001742:	f008 ff77 	bl	800a634 <otMessageFree>
	}
	sht4x_measure();
 8001746:	f7ff f891 	bl	800086c <sht4x_measure>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 800174a:	2101      	movs	r1, #1
 800174c:	2001      	movs	r0, #1
 800174e:	f009 fe80 	bl	800b452 <SHCI_C2_RADIO_AllowLowPower>
 8001752:	e000      	b.n	8001756 <APP_THREAD_SendCoapMsg+0x20a>
		return;
 8001754:	bf00      	nop
}
 8001756:	377c      	adds	r7, #124	; 0x7c
 8001758:	46bd      	mov	sp, r7
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175c:	20000448 	.word	0x20000448
 8001760:	48000800 	.word	0x48000800
 8001764:	200007b0 	.word	0x200007b0
 8001768:	200007b4 	.word	0x200007b4
 800176c:	20000440 	.word	0x20000440
 8001770:	0800e030 	.word	0x0800e030
 8001774:	20000310 	.word	0x20000310
 8001778:	0800e058 	.word	0x0800e058
 800177c:	20000430 	.word	0x20000430
 8001780:	20000410 	.word	0x20000410

08001784 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	p_thread_otcmdbuffer = p_buffer;
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000300 	.word	0x20000300

080017a4 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	330c      	adds	r3, #12
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000300 	.word	0x20000300

080017bc <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) ((TL_EvtPacket_t*) p_thread_otcmdbuffer)->evtserial.evt.payload;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	330b      	adds	r3, #11
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	20000300 	.word	0x20000300

080017d4 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) (p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	330b      	adds	r3, #11
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	20000304 	.word	0x20000304

080017ec <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

	/* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
	p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <Ot_Cmd_Transfer_Common+0x44>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017fc:	725a      	strb	r2, [r3, #9]
 80017fe:	2200      	movs	r2, #0
 8001800:	f042 0202 	orr.w	r2, r2, #2
 8001804:	729a      	strb	r2, [r3, #10]
	/* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
	 * + ID (4 bytes) + Size (4 bytes) */
	uint32_t l_size =
			((Thread_OT_Cmd_Request_t*) (p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <Ot_Cmd_Transfer_Common+0x44>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	330c      	adds	r3, #12
 800180c:	685b      	ldr	r3, [r3, #4]
					* 4U + 8U;
 800180e:	3302      	adds	r3, #2
	uint32_t l_size =
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	607b      	str	r3, [r7, #4]
	p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <Ot_Cmd_Transfer_Common+0x44>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	72da      	strb	r2, [r3, #11]

	TL_OT_SendCmd();
 800181e:	f00a f9a3 	bl	800bb68 <TL_OT_SendCmd>

	/* Wait completion of cmd */
	Wait_Getting_Ack_From_M0();
 8001822:	f000 f834 	bl	800188e <Wait_Getting_Ack_From_M0>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000300 	.word	0x20000300

08001834 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	Ot_Cmd_Transfer_Common();
 8001838:	f7ff ffd8 	bl	80017ec <Ot_Cmd_Transfer_Common>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(Otbuffer);

	Receive_Ack_From_M0();
 8001848:	f000 f828 	bl	800189c <Receive_Ack_From_M0>

	/* Does not allow OpenThread M0 to M4 notification */
	g_ot_notification_allowed = 0U;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <TL_OT_CmdEvtReceived+0x1c>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000460 	.word	0x20000460

08001860 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	p_thread_notif_M0_to_M4 = Notbuffer;
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <TL_THREAD_NotReceived+0x1c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]

	Receive_Notification_From_M0();
 800186e:	f000 f81d 	bl	80018ac <Receive_Notification_From_M0>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000304 	.word	0x20000304

08001880 <Pre_OtCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_OtCmdProcessing(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001884:	2004      	movs	r0, #4
 8001886:	f00a fcc5 	bl	800c214 <UTIL_SEQ_WaitEvt>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}

0800188e <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
	UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8001892:	2002      	movs	r0, #2
 8001894:	f00a fcbe 	bl	800c214 <UTIL_SEQ_WaitEvt>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 80018a0:	2002      	movs	r0, #2
 80018a2:	f00a fc97 	bl	800c1d4 <UTIL_SEQ_SetEvt>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	CptReceiveMsgFromM0++;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <Receive_Notification_From_M0+0x1c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <Receive_Notification_From_M0+0x1c>)
 80018b8:	6013      	str	r3, [r2, #0]
	UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	2001      	movs	r0, #1
 80018be:	f00a fc5d 	bl	800c17c <UTIL_SEQ_SetTask>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000308 	.word	0x20000308

080018cc <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	/* Filling buffer and wait for '\r' char */
	if (indexReceiveChar < C_SIZE_CMD_STRING)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <RxCpltCallback+0x4c>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2bff      	cmp	r3, #255	; 0xff
 80018d8:	d816      	bhi.n	8001908 <RxCpltCallback+0x3c>
	{
		CommandString[indexReceiveChar++] = aRxBuffer[0];
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <RxCpltCallback+0x4c>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	b291      	uxth	r1, r2
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <RxCpltCallback+0x4c>)
 80018e6:	8011      	strh	r1, [r2, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <RxCpltCallback+0x50>)
 80018ec:	7819      	ldrb	r1, [r3, #0]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <RxCpltCallback+0x54>)
 80018f0:	5499      	strb	r1, [r3, r2]
		if (aRxBuffer[0] == '\r')
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <RxCpltCallback+0x50>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b0d      	cmp	r3, #13
 80018f8:	d106      	bne.n	8001908 <RxCpltCallback+0x3c>
		{
			CptReceiveCmdFromUser = 1U;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <RxCpltCallback+0x58>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	801a      	strh	r2, [r3, #0]

			/* UART task scheduling*/
			UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 8001900:	2100      	movs	r1, #0
 8001902:	2002      	movs	r0, #2
 8001904:	f00a fc3a 	bl	800c17c <UTIL_SEQ_SetTask>
		}
	}

	/* Once a character has been sent, put back the device in reception mode */
	HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <RxCpltCallback+0x5c>)
 800190a:	2201      	movs	r2, #1
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <RxCpltCallback+0x50>)
 800190e:	2002      	movs	r0, #2
 8001910:	f001 fcd2 	bl	80032b8 <HW_UART_Receive_IT>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200002fc 	.word	0x200002fc
 800191c:	200000fc 	.word	0x200000fc
 8001920:	200001fc 	.word	0x200001fc
 8001924:	200002fe 	.word	0x200002fe
 8001928:	080018cd 	.word	0x080018cd

0800192c <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static inline void Send_CLI_To_M0(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8001930:	22ff      	movs	r2, #255	; 0xff
 8001932:	2100      	movs	r1, #0
 8001934:	4812      	ldr	r0, [pc, #72]	; (8001980 <Send_CLI_To_M0+0x54>)
 8001936:	f00a fe2f 	bl	800c598 <memset>
	memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString,
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <Send_CLI_To_M0+0x58>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4911      	ldr	r1, [pc, #68]	; (8001988 <Send_CLI_To_M0+0x5c>)
 8001944:	480e      	ldr	r0, [pc, #56]	; (8001980 <Send_CLI_To_M0+0x54>)
 8001946:	f00a fe19 	bl	800c57c <memcpy>
			indexReceiveChar);
	ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <Send_CLI_To_M0+0x58>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <Send_CLI_To_M0+0x60>)
 8001954:	72da      	strb	r2, [r3, #11]
	ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <Send_CLI_To_M0+0x60>)
 8001958:	2200      	movs	r2, #0
 800195a:	725a      	strb	r2, [r3, #9]
 800195c:	2200      	movs	r2, #0
 800195e:	729a      	strb	r2, [r3, #10]

	/* Clear receive buffer, character counter and command complete */
	CptReceiveCmdFromUser = 0;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <Send_CLI_To_M0+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	801a      	strh	r2, [r3, #0]
	indexReceiveChar = 0;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <Send_CLI_To_M0+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	801a      	strh	r2, [r3, #0]
	memset(CommandString, 0, C_SIZE_CMD_STRING);
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	2100      	movs	r1, #0
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <Send_CLI_To_M0+0x5c>)
 8001974:	f00a fe10 	bl	800c598 <memset>

	TL_CLI_SendCmd();
 8001978:	f00a f904 	bl	800bb84 <TL_CLI_SendCmd>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2003030c 	.word	0x2003030c
 8001984:	200002fc 	.word	0x200002fc
 8001988:	200001fc 	.word	0x200001fc
 800198c:	20030300 	.word	0x20030300
 8001990:	200002fe 	.word	0x200002fe

08001994 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static inline void Send_CLI_Ack_For_OT(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

	/* Notify M0 that characters have been sent to UART */
	TL_THREAD_CliSendAck();
 8001998:	f00a f910 	bl	800bbbc <TL_THREAD_CliSendAck>

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
	UTIL_SEQ_RegTask(1 << CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <APP_THREAD_Init_UART_CLI+0x24>)
 80019a6:	2100      	movs	r1, #0
 80019a8:	2002      	movs	r0, #2
 80019aa:	f00a fbc5 	bl	800c138 <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
	MX_LPUART1_UART_Init();
 80019ae:	f001 fecb 	bl	8003748 <MX_LPUART1_UART_Init>
	HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <APP_THREAD_Init_UART_CLI+0x28>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	4905      	ldr	r1, [pc, #20]	; (80019cc <APP_THREAD_Init_UART_CLI+0x2c>)
 80019b8:	2002      	movs	r0, #2
 80019ba:	f001 fc7d 	bl	80032b8 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	0800192d 	.word	0x0800192d
 80019c8:	080018cd 	.word	0x080018cd
 80019cc:	200000fc 	.word	0x200000fc

080019d0 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*) &ThreadOtCmdBuffer;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80019d8:	601a      	str	r2, [r3, #0]
	ThreadConfigBuffer.p_ThreadNotAckBuffer =
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <APP_THREAD_TL_THREAD_INIT+0x30>)
 80019de:	609a      	str	r2, [r3, #8]
			(uint8_t*) ThreadNotifRspEvtBuffer;
	ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*) &ThreadCliCmdBuffer;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <APP_THREAD_TL_THREAD_INIT+0x34>)
 80019e4:	605a      	str	r2, [r3, #4]
	ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*) &ThreadCliNotBuffer;
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <APP_THREAD_TL_THREAD_INIT+0x38>)
 80019ea:	60da      	str	r2, [r3, #12]

	TL_THREAD_Init(&ThreadConfigBuffer);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80019ee:	f00a f89b 	bl	800bb28 <TL_THREAD_Init>
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20030028 	.word	0x20030028
 80019fc:	200300e8 	.word	0x200300e8
 8001a00:	200301f4 	.word	0x200301f4
 8001a04:	20030300 	.word	0x20030300
 8001a08:	2003040c 	.word	0x2003040c

08001a0c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived(TL_EvtPacket_t *Notbuffer)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	TL_CmdPacket_t *l_CliBuffer = (TL_CmdPacket_t*) Notbuffer;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
	uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	7adb      	ldrb	r3, [r3, #11]
 8001a1c:	72fb      	strb	r3, [r7, #11]

	/* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
	if (strcmp((const char*) l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	330c      	adds	r3, #12
 8001a22:	490b      	ldr	r1, [pc, #44]	; (8001a50 <TL_THREAD_CliNotReceived+0x44>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fbab 	bl	8000180 <strcmp>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <TL_THREAD_CliNotReceived+0x38>
	{
		/* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
		HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload,
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f103 010c 	add.w	r1, r3, #12
 8001a36:	7afb      	ldrb	r3, [r7, #11]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <TL_THREAD_CliNotReceived+0x48>)
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f001 fc75 	bl	800332c <HW_UART_Transmit_IT>
	}
	else
	{
		Send_CLI_Ack_For_OT();
	}
}
 8001a42:	e001      	b.n	8001a48 <TL_THREAD_CliNotReceived+0x3c>
		Send_CLI_Ack_For_OT();
 8001a44:	f7ff ffa6 	bl	8001994 <Send_CLI_Ack_For_OT>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	0800e088 	.word	0x0800e088
 8001a54:	08001a59 	.word	0x08001a59

08001a58 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	Send_CLI_Ack_For_OT();
 8001a5c:	f7ff ff9a 	bl	8001994 <Send_CLI_Ack_For_OT>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	if (CptReceiveMsgFromM0 != 0)
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <APP_THREAD_ProcessMsgM0ToM4+0x28>
	{
		/* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
		if (CptReceiveMsgFromM0 > 1U)
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d904      	bls.n	8001a82 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
		{
			APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fa38 	bl	8000ef0 <APP_THREAD_Error>
 8001a80:	e001      	b.n	8001a86 <APP_THREAD_ProcessMsgM0ToM4+0x22>
		}
		else
		{
			OpenThread_CallBack_Processing();
 8001a82:	f008 fead 	bl	800a7e0 <OpenThread_CallBack_Processing>
		}
		/* Reset counter */
		CptReceiveMsgFromM0 = 0;
 8001a86:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000308 	.word	0x20000308

08001a94 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <LL_PWR_EnableBootC2+0x1c>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <LL_PWR_EnableBootC2+0x1c>)
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	58000400 	.word	0x58000400

08001ab4 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001abe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001ac2:	4905      	ldr	r1, [pc, #20]	; (8001ad8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	58000800 	.word	0x58000800

08001adc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	4904      	ldr	r1, [pc, #16]	; (8001afc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	620b      	str	r3, [r1, #32]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	58000800 	.word	0x58000800

08001b00 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	605a      	str	r2, [r3, #4]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	605a      	str	r2, [r3, #4]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	401a      	ands	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	605a      	str	r2, [r3, #4]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	605a      	str	r2, [r3, #4]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	609a      	str	r2, [r3, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	041a      	lsls	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4013      	ands	r3, r2
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d101      	bne.n	8001c90 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d101      	bne.n	8001cba <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001ccc:	2102      	movs	r1, #2
 8001cce:	482a      	ldr	r0, [pc, #168]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001cd0:	f7ff ffe5 	bl	8001c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HW_IPCC_Rx_Handler+0x26>
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001ce8:	f000 f8f8 	bl	8001edc <HW_IPCC_SYS_EvtHandler>
 8001cec:	e041      	b.n	8001d72 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4821      	ldr	r0, [pc, #132]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001cf2:	f7ff ffd4 	bl	8001c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <HW_IPCC_Rx_Handler+0x48>
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8001d0a:	f000 f941 	bl	8001f90 <HW_IPCC_THREAD_NotEvtHandler>
 8001d0e:	e030      	b.n	8001d72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001d10:	2110      	movs	r1, #16
 8001d12:	4819      	ldr	r0, [pc, #100]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001d14:	f7ff ffc3 	bl	8001c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HW_IPCC_Rx_Handler+0x6a>
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001d2c:	f000 f93c 	bl	8001fa8 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001d30:	e01f      	b.n	8001d72 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001d32:	2101      	movs	r1, #1
 8001d34:	4810      	ldr	r0, [pc, #64]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001d36:	f7ff ffb2 	bl	8001c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HW_IPCC_Rx_Handler+0x8a>
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001d4c:	f000 f88a 	bl	8001e64 <HW_IPCC_BLE_EvtHandler>
 8001d50:	e00f      	b.n	8001d72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001d52:	2108      	movs	r1, #8
 8001d54:	4808      	ldr	r0, [pc, #32]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001d56:	f7ff ffa2 	bl	8001c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HW_IPCC_Rx_Handler+0xac>
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HW_IPCC_Rx_Handler+0xb0>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001d6e:	f000 f967 	bl	8002040 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
}
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	58000c00 	.word	0x58000c00

08001d7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001d80:	2102      	movs	r1, #2
 8001d82:	4822      	ldr	r0, [pc, #136]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001d84:	f7ff ff76 	bl	8001c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HW_IPCC_Tx_Handler+0x26>
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001d9c:	f000 f892 	bl	8001ec4 <HW_IPCC_SYS_CmdEvtHandler>
 8001da0:	e031      	b.n	8001e06 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001da2:	2104      	movs	r1, #4
 8001da4:	4819      	ldr	r0, [pc, #100]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001da6:	f7ff ff65 	bl	8001c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HW_IPCC_Tx_Handler+0x48>
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001dbe:	f000 f8db 	bl	8001f78 <HW_IPCC_OT_CmdEvtHandler>
 8001dc2:	e020      	b.n	8001e06 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001dc4:	2108      	movs	r1, #8
 8001dc6:	4811      	ldr	r0, [pc, #68]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001dc8:	f7ff ff54 	bl	8001c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HW_IPCC_Tx_Handler+0x6a>
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001de0:	f000 f910 	bl	8002004 <HW_IPCC_MM_FreeBufHandler>
 8001de4:	e00f      	b.n	8001e06 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001de6:	2120      	movs	r1, #32
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001dea:	f7ff ff43 	bl	8001c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HW_IPCC_Tx_Handler+0x8c>
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HW_IPCC_Tx_Handler+0x90>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001e02:	f000 f83b 	bl	8001e7c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
}
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	58000c00 	.word	0x58000c00

08001e10 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001e14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e18:	f7ff fe8b 	bl	8001b32 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001e1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e20:	f7ff fe5c 	bl	8001adc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001e24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e28:	f7ff fe44 	bl	8001ab4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001e2c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001e2e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001e30:	f7ff fe30 	bl	8001a94 <LL_PWR_EnableBootC2>

  return;
 8001e34:	bf00      	nop
}
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001e3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e40:	f7ff fe5e 	bl	8001b00 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <HW_IPCC_Init+0x28>)
 8001e46:	f7ff fea0 	bl	8001b8a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HW_IPCC_Init+0x28>)
 8001e4c:	f7ff fe8d 	bl	8001b6a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e50:	202c      	movs	r0, #44	; 0x2c
 8001e52:	f002 faa2 	bl	800439a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e56:	202d      	movs	r0, #45	; 0x2d
 8001e58:	f002 fa9f 	bl	800439a <HAL_NVIC_EnableIRQ>

  return;
 8001e5c:	bf00      	nop
}
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58000c00 	.word	0x58000c00

08001e64 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001e68:	f009 fda6 	bl	800b9b8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001e70:	f7ff fee3 	bl	8001c3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001e74:	bf00      	nop
}
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58000c00 	.word	0x58000c00

08001e7c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001e80:	2120      	movs	r1, #32
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001e84:	f7ff fea4 	bl	8001bd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001e88:	f009 fdc6 	bl	800ba18 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001e8c:	bf00      	nop
}
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	58000c00 	.word	0x58000c00

08001e94 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <HW_IPCC_SYS_Init+0x10>)
 8001e9c:	f7ff feaa 	bl	8001bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001ea0:	bf00      	nop
}
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	58000c00 	.word	0x58000c00

08001ea8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001eac:	2102      	movs	r1, #2
 8001eae:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <HW_IPCC_SYS_SendCmd+0x18>)
 8001eb0:	f7ff fed1 	bl	8001c56 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <HW_IPCC_SYS_SendCmd+0x18>)
 8001eb8:	f7ff fe77 	bl	8001baa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001ebc:	bf00      	nop
}
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	58000c00 	.word	0x58000c00

08001ec4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001ecc:	f7ff fe80 	bl	8001bd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001ed0:	f009 fdf2 	bl	800bab8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001ed4:	bf00      	nop
}
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	58000c00 	.word	0x58000c00

08001edc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001ee0:	f009 fe00 	bl	800bae4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001ee8:	f7ff fea7 	bl	8001c3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001eec:	bf00      	nop
}
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58000c00 	.word	0x58000c00

08001ef4 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001ef8:	2104      	movs	r1, #4
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <HW_IPCC_THREAD_Init+0x18>)
 8001efc:	f7ff fe7a 	bl	8001bf4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001f00:	2110      	movs	r1, #16
 8001f02:	4802      	ldr	r0, [pc, #8]	; (8001f0c <HW_IPCC_THREAD_Init+0x18>)
 8001f04:	f7ff fe76 	bl	8001bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001f08:	bf00      	nop
}
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	58000c00 	.word	0x58000c00

08001f10 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001f14:	2104      	movs	r1, #4
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <HW_IPCC_OT_SendCmd+0x18>)
 8001f18:	f7ff fe9d 	bl	8001c56 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4802      	ldr	r0, [pc, #8]	; (8001f28 <HW_IPCC_OT_SendCmd+0x18>)
 8001f20:	f7ff fe43 	bl	8001baa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001f24:	bf00      	nop
}
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	58000c00 	.word	0x58000c00

08001f2c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8001f30:	2110      	movs	r1, #16
 8001f32:	4802      	ldr	r0, [pc, #8]	; (8001f3c <HW_IPCC_CLI_SendCmd+0x10>)
 8001f34:	f7ff fe8f 	bl	8001c56 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001f38:	bf00      	nop
}
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	58000c00 	.word	0x58000c00

08001f40 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001f44:	2104      	movs	r1, #4
 8001f46:	4804      	ldr	r0, [pc, #16]	; (8001f58 <HW_IPCC_THREAD_SendAck+0x18>)
 8001f48:	f7ff fe77 	bl	8001c3a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	4802      	ldr	r0, [pc, #8]	; (8001f58 <HW_IPCC_THREAD_SendAck+0x18>)
 8001f50:	f7ff fe50 	bl	8001bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001f54:	bf00      	nop
}
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	58000c00 	.word	0x58000c00

08001f5c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001f60:	2110      	movs	r1, #16
 8001f62:	4804      	ldr	r0, [pc, #16]	; (8001f74 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001f64:	f7ff fe69 	bl	8001c3a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001f68:	2110      	movs	r1, #16
 8001f6a:	4802      	ldr	r0, [pc, #8]	; (8001f74 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001f6c:	f7ff fe42 	bl	8001bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001f70:	bf00      	nop
}
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	58000c00 	.word	0x58000c00

08001f78 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001f80:	f7ff fe26 	bl	8001bd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001f84:	f009 fe28 	bl	800bbd8 <HW_IPCC_OT_CmdEvtNot>

  return;
 8001f88:	bf00      	nop
}
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58000c00 	.word	0x58000c00

08001f90 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001f94:	2104      	movs	r1, #4
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001f98:	f7ff fe3e 	bl	8001c18 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001f9c:	f009 fe28 	bl	800bbf0 <HW_IPCC_THREAD_EvtNot>

  return;
 8001fa0:	bf00      	nop
}
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	58000c00 	.word	0x58000c00

08001fa8 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001fac:	2110      	movs	r1, #16
 8001fae:	4803      	ldr	r0, [pc, #12]	; (8001fbc <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001fb0:	f7ff fe32 	bl	8001c18 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001fb4:	f009 fe28 	bl	800bc08 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001fb8:	bf00      	nop
}
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	58000c00 	.word	0x58000c00

08001fc0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001fc8:	2108      	movs	r1, #8
 8001fca:	480c      	ldr	r0, [pc, #48]	; (8001ffc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001fcc:	f7ff fe52 	bl	8001c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001fdc:	2108      	movs	r1, #8
 8001fde:	4807      	ldr	r0, [pc, #28]	; (8001ffc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001fe0:	f7ff fde3 	bl	8001baa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001fe4:	e006      	b.n	8001ff4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001fea:	2108      	movs	r1, #8
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001fee:	f7ff fe32 	bl	8001c56 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001ff2:	bf00      	nop
}
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	58000c00 	.word	0x58000c00
 8002000:	20000450 	.word	0x20000450

08002004 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002008:	2108      	movs	r1, #8
 800200a:	4806      	ldr	r0, [pc, #24]	; (8002024 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800200c:	f7ff fde0 	bl	8001bd0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002016:	2108      	movs	r1, #8
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800201a:	f7ff fe1c 	bl	8001c56 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800201e:	bf00      	nop
}
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	58000c00 	.word	0x58000c00
 8002028:	20000450 	.word	0x20000450

0800202c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002030:	2108      	movs	r1, #8
 8002032:	4802      	ldr	r0, [pc, #8]	; (800203c <HW_IPCC_TRACES_Init+0x10>)
 8002034:	f7ff fdde 	bl	8001bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002038:	bf00      	nop
}
 800203a:	bd80      	pop	{r7, pc}
 800203c:	58000c00 	.word	0x58000c00

08002040 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8002044:	f009 fe72 	bl	800bd2c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002048:	2108      	movs	r1, #8
 800204a:	4802      	ldr	r0, [pc, #8]	; (8002054 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800204c:	f7ff fdf5 	bl	8001c3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002050:	bf00      	nop
}
 8002052:	bd80      	pop	{r7, pc}
 8002054:	58000c00 	.word	0x58000c00

08002058 <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
	SensorQueueLL *ret = malloc(sizeof(SensorQueueLL));
 800205e:	200c      	movs	r0, #12
 8002060:	f00a fa84 	bl	800c56c <malloc>
 8002064:	4603      	mov	r3, r0
 8002066:	607b      	str	r3, [r7, #4]
	ret->front = NULL;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
	ret->rear = NULL;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
	ret->size = 0;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	721a      	strb	r2, [r3, #8]
	return ret;
 800207a:	687b      	ldr	r3, [r7, #4]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <app_algo_init>:

	return ret;
}

void app_algo_init(SensorData_t data)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 8002090:	f7ff ffe2 	bl	8002058 <create_sensor_LL>
 8002094:	4603      	mov	r3, r0
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <app_algo_init+0x38>)
 8002098:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <app_algo_init+0x38>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <app_algo_init+0x38>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	4a02      	ldr	r2, [pc, #8]	; (80020bc <app_algo_init+0x38>)
 80020b2:	6093      	str	r3, [r2, #8]
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000454 	.word	0x20000454

080020c0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80020ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4905      	ldr	r1, [pc, #20]	; (80020e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	58000400 	.word	0x58000400

080020ec <LL_EXTI_EnableIT_32_63>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <LL_EXTI_EnableIT_32_63+0x24>)
 80020f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020fa:	4905      	ldr	r1, [pc, #20]	; (8002110 <LL_EXTI_EnableIT_32_63+0x24>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	58000800 	.word	0x58000800

08002114 <LL_C2_EXTI_EnableIT_32_63>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800211e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002122:	4905      	ldr	r1, [pc, #20]	; (8002138 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	58000800 	.word	0x58000800

0800213c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800214a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002156:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	cafecafe 	.word	0xcafecafe

08002178 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800218a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <LL_LPM_EnableSleep+0x1c>)
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <LL_LPM_EnableSleep+0x1c>)
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	6113      	str	r3, [r2, #16]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	22ff      	movs	r2, #255	; 0xff
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	22ca      	movs	r2, #202	; 0xca
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2253      	movs	r2, #83	; 0x53
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 0207 	bic.w	r2, r3, #7
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <MX_APPE_Config+0x18>)
 8002226:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800222a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800222c:	f000 f83c 	bl	80022a8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002230:	f000 f841 	bl	80022b6 <Config_HSE>

  return;
 8002234:	bf00      	nop
}
 8002236:	bd80      	pop	{r7, pc}
 8002238:	58004000 	.word	0x58004000

0800223c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002240:	f000 f84d 	bl	80022de <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002244:	f000 f866 	bl	8002314 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002248:	4908      	ldr	r1, [pc, #32]	; (800226c <MX_APPE_Init+0x30>)
 800224a:	2000      	movs	r0, #0
 800224c:	f000 fdc8 	bl	8002de0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8002250:	f000 f81c 	bl	800228c <Init_Debug>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8002254:	2101      	movs	r1, #1
 8002256:	2001      	movs	r0, #1
 8002258:	f009 fe12 	bl	800be80 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800225c:	2101      	movs	r1, #1
 800225e:	2001      	movs	r0, #1
 8002260:	f009 fe3e 	bl	800bee0 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8002264:	f000 f864 	bl	8002330 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8002268:	bf00      	nop
}
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000078c 	.word	0x2000078c

08002270 <Init_Smps>:

void Init_Smps(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8002274:	bf00      	nop
}
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <Init_Exti>:

void Init_Exti(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002282:	2050      	movs	r0, #80	; 0x50
 8002284:	f7ff ff32 	bl	80020ec <LL_EXTI_EnableIT_32_63>

  return;
 8002288:	bf00      	nop
}
 800228a:	bd80      	pop	{r7, pc}

0800228c <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002290:	f001 ff12 	bl	80040b8 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8002294:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002298:	f7ff ff28 	bl	80020ec <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800229c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80022a0:	f7ff ff38 	bl	8002114 <LL_C2_EXTI_EnableIT_32_63>

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 80022a4:	bf00      	nop
}
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <Reset_Device>:
static void Reset_Device(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80022ac:	bf00      	nop
}
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80022bc:	2000      	movs	r0, #0
 80022be:	f009 fda5 	bl	800be0c <OTP_Read>
 80022c2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff34 	bl	800213c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
}
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <System_Init>:

static void System_Init(void)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	af00      	add	r7, sp, #0
  Init_Smps();
 80022e2:	f7ff ffc5 	bl	8002270 <Init_Smps>

  Init_Exti();
 80022e6:	f7ff ffca 	bl	800227e <Init_Exti>

  Init_Rtc();
 80022ea:	f000 f803 	bl	80022f4 <Init_Rtc>

  return;
 80022ee:	bf00      	nop
}
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <Init_Rtc+0x1c>)
 80022fa:	f7ff ff6e 	bl	80021da <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80022fe:	2100      	movs	r1, #0
 8002300:	4803      	ldr	r0, [pc, #12]	; (8002310 <Init_Rtc+0x1c>)
 8002302:	f7ff ff7a 	bl	80021fa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002306:	4802      	ldr	r0, [pc, #8]	; (8002310 <Init_Rtc+0x1c>)
 8002308:	f7ff ff5a 	bl	80021c0 <LL_RTC_EnableWriteProtection>

  return;
 800230c:	bf00      	nop
}
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40002800 	.word	0x40002800

08002314 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002318:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800231c:	f7ff ff2c 	bl	8002178 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002320:	f009 fd9c 	bl	800be5c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002324:	2004      	movs	r0, #4
 8002326:	f7ff fecb 	bl	80020c0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800232a:	bf00      	nop
}
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002336:	f009 fb05 	bl	800b944 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <appe_Tl_Init+0x50>)
 800233c:	2100      	movs	r1, #0
 800233e:	2004      	movs	r0, #4
 8002340:	f009 fefa 	bl	800c138 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <appe_Tl_Init+0x54>)
 8002346:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <appe_Tl_Init+0x58>)
 800234a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	480e      	ldr	r0, [pc, #56]	; (800238c <appe_Tl_Init+0x5c>)
 8002352:	f009 f94b 	bl	800b5ec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <appe_Tl_Init+0x60>)
 800235c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <appe_Tl_Init+0x64>)
 8002360:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8002362:	f240 533c 	movw	r3, #1340	; 0x53c
 8002366:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	4618      	mov	r0, r3
 800236e:	f009 fc57 	bl	800bc20 <TL_MM_Init>

  TL_Enable();
 8002372:	f009 fae0 	bl	800b936 <TL_Enable>

  return;
 8002376:	bf00      	nop
}
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	0800b625 	.word	0x0800b625
 8002384:	20030a54 	.word	0x20030a54
 8002388:	08002399 	.word	0x08002399
 800238c:	080023af 	.word	0x080023af
 8002390:	20030b60 	.word	0x20030b60
 8002394:	20030518 	.word	0x20030518

08002398 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80023a2:	bf00      	nop
}
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	330b      	adds	r3, #11
 80023bc:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80023c8:	d004      	beq.n	80023d4 <APPE_SysUserEvtRx+0x26>
 80023ca:	f249 2201 	movw	r2, #37377	; 0x9201
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80023d2:	e008      	b.n	80023e6 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 80023d4:	f000 f834 	bl	8002440 <APPE_SysEvtReadyProcessing>
         break;
 80023d8:	e005      	b.n	80023e6 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	789b      	ldrb	r3, [r3, #2]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f806 	bl	80023f0 <APPE_SysEvtError>
         break;
 80023e4:	bf00      	nop
  }
  return;
 80023e6:	bf00      	nop
}
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	2b7d      	cmp	r3, #125	; 0x7d
 80023fe:	d002      	beq.n	8002406 <APPE_SysEvtError+0x16>
 8002400:	2b7e      	cmp	r3, #126	; 0x7e
 8002402:	d006      	beq.n	8002412 <APPE_SysEvtError+0x22>
 8002404:	e00b      	b.n	800241e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <APPE_SysEvtError+0x44>)
 8002408:	2101      	movs	r1, #1
 800240a:	2000      	movs	r0, #0
 800240c:	f001 fd4c 	bl	8003ea8 <logApplication>
       break;
 8002410:	e00c      	b.n	800242c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <APPE_SysEvtError+0x48>)
 8002414:	2101      	movs	r1, #1
 8002416:	2000      	movs	r0, #0
 8002418:	f001 fd46 	bl	8003ea8 <logApplication>
       break;
 800241c:	e006      	b.n	800242c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <APPE_SysEvtError+0x4c>)
 8002422:	2101      	movs	r1, #1
 8002424:	2000      	movs	r0, #0
 8002426:	f001 fd3f 	bl	8003ea8 <logApplication>
       break;
 800242a:	bf00      	nop
  }
  return;
 800242c:	bf00      	nop
}
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	0800e08c 	.word	0x0800e08c
 8002438:	0800e0b0 	.word	0x0800e0b0
 800243c:	0800e0d0 	.word	0x0800e0d0

08002440 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8002444:	f009 fc60 	bl	800bd08 <TL_TRACES_Init>

  APP_THREAD_Init();
 8002448:	f7fe fce0 	bl	8000e0c <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800244c:	2100      	movs	r1, #0
 800244e:	2001      	movs	r0, #1
 8002450:	f009 fd16 	bl	800be80 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002454:	2100      	movs	r1, #0
 8002456:	2001      	movs	r0, #1
 8002458:	f009 fd42 	bl	800bee0 <UTIL_LPM_SetOffMode>
  return;
 800245c:	bf00      	nop
}
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f001 fe02 	bl	8004070 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d00a      	beq.n	8002490 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800247a:	f001 fe11 	bl	80040a0 <HAL_GetTickFreq>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4413      	add	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002488:	e002      	b.n	8002490 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800248a:	f7ff fe89 	bl	80021a0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800248e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002490:	f001 fdee 	bl	8004070 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8f4      	bhi.n	800248a <HAL_Delay+0x2a>
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80024ae:	f04f 30ff 	mov.w	r0, #4294967295
 80024b2:	f009 fd45 	bl	800bf40 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}

080024ba <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80024be:	bf00      	nop
}
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d003      	beq.n	80024e0 <UTIL_SEQ_EvtIdle+0x18>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d00c      	beq.n	80024f8 <UTIL_SEQ_EvtIdle+0x30>
 80024de:	e012      	b.n	8002506 <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <UTIL_SEQ_EvtIdle+0x50>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d103      	bne.n	80024f0 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f009 fd29 	bl	800bf40 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 80024ee:	e00f      	b.n	8002510 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f009 fd25 	bl	800bf40 <UTIL_SEQ_Run>
    break;
 80024f6:	e00b      	b.n	8002510 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80024f8:	2004      	movs	r0, #4
 80024fa:	f009 fe6b 	bl	800c1d4 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80024fe:	2001      	movs	r0, #1
 8002500:	f009 fd1e 	bl	800bf40 <UTIL_SEQ_Run>
    break;
 8002504:	e004      	b.n	8002510 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002506:	f04f 30ff 	mov.w	r0, #4294967295
 800250a:	f009 fd19 	bl	800bf40 <UTIL_SEQ_Run>
    break;
 800250e:	bf00      	nop
  }
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000460 	.word	0x20000460

0800251c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8002524:	2100      	movs	r1, #0
 8002526:	2004      	movs	r0, #4
 8002528:	f009 fe28 	bl	800c17c <UTIL_SEQ_SetTask>
  return;
 800252c:	bf00      	nop
}
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800253c:	2001      	movs	r0, #1
 800253e:	f009 fe49 	bl	800c1d4 <UTIL_SEQ_SetEvt>
  return;
 8002542:	bf00      	nop
}
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8002552:	2001      	movs	r0, #1
 8002554:	f009 fe5e 	bl	800c214 <UTIL_SEQ_WaitEvt>
  return;
 8002558:	bf00      	nop
}
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f009 fb95 	bl	800bc98 <TL_MM_EvtDone>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002586:	2101      	movs	r1, #1
 8002588:	2000      	movs	r0, #0
 800258a:	f001 fc8d 	bl	8003ea8 <logApplication>
  switch(GPIO_Pin)
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002594:	d003      	beq.n	800259e <HAL_GPIO_EXTI_Callback+0x26>
 8002596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 800259c:	e005      	b.n	80025aa <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 800259e:	2101      	movs	r1, #1
 80025a0:	2008      	movs	r0, #8
 80025a2:	f009 fdeb 	bl	800c17c <UTIL_SEQ_SetTask>
        break;
 80025a6:	e000      	b.n	80025aa <HAL_GPIO_EXTI_Callback+0x32>
        break;
 80025a8:	bf00      	nop
  }
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	0800e0f0 	.word	0x0800e0f0

080025b8 <LL_EXTI_EnableIT_0_31>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <LL_EXTI_EnableIT_0_31+0x24>)
 80025c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80025c6:	4905      	ldr	r1, [pc, #20]	; (80025dc <LL_EXTI_EnableIT_0_31+0x24>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	58000800 	.word	0x58000800

080025e0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4904      	ldr	r1, [pc, #16]	; (8002600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	58000800 	.word	0x58000800

08002604 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <ReadRtcSsrValue+0x3c>)
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	b29b      	uxth	r3, r3
 8002610:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <ReadRtcSsrValue+0x3c>)
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	b29b      	uxth	r3, r3
 8002618:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800261a:	e005      	b.n	8002628 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <ReadRtcSsrValue+0x3c>)
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	b29b      	uxth	r3, r3
 8002626:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d1f5      	bne.n	800261c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002630:	683b      	ldr	r3, [r7, #0]
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40002800 	.word	0x40002800

08002644 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	460a      	mov	r2, r1
 800264e:	71fb      	strb	r3, [r7, #7]
 8002650:	4613      	mov	r3, r2
 8002652:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002654:	79ba      	ldrb	r2, [r7, #6]
 8002656:	491d      	ldr	r1, [pc, #116]	; (80026cc <LinkTimerAfter+0x88>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3315      	adds	r3, #21
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b06      	cmp	r3, #6
 800266c:	d009      	beq.n	8002682 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <LinkTimerAfter+0x88>)
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	3314      	adds	r3, #20
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002682:	79fa      	ldrb	r2, [r7, #7]
 8002684:	4911      	ldr	r1, [pc, #68]	; (80026cc <LinkTimerAfter+0x88>)
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	3315      	adds	r3, #21
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002696:	79fa      	ldrb	r2, [r7, #7]
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <LinkTimerAfter+0x88>)
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	3314      	adds	r3, #20
 80026a6:	79ba      	ldrb	r2, [r7, #6]
 80026a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80026aa:	79ba      	ldrb	r2, [r7, #6]
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <LinkTimerAfter+0x88>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	3315      	adds	r3, #21
 80026ba:	79fa      	ldrb	r2, [r7, #7]
 80026bc:	701a      	strb	r2, [r3, #0]

  return;
 80026be:	bf00      	nop
}
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000464 	.word	0x20000464

080026d0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	460a      	mov	r2, r1
 80026da:	71fb      	strb	r3, [r7, #7]
 80026dc:	4613      	mov	r3, r2
 80026de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <LinkTimerBefore+0xb8>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	79ba      	ldrb	r2, [r7, #6]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d032      	beq.n	8002752 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80026ec:	79ba      	ldrb	r2, [r7, #6]
 80026ee:	4927      	ldr	r1, [pc, #156]	; (800278c <LinkTimerBefore+0xbc>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3314      	adds	r3, #20
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	4922      	ldr	r1, [pc, #136]	; (800278c <LinkTimerBefore+0xbc>)
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	3315      	adds	r3, #21
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002714:	79fa      	ldrb	r2, [r7, #7]
 8002716:	491d      	ldr	r1, [pc, #116]	; (800278c <LinkTimerBefore+0xbc>)
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	3315      	adds	r3, #21
 8002724:	79ba      	ldrb	r2, [r7, #6]
 8002726:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002728:	79fa      	ldrb	r2, [r7, #7]
 800272a:	4918      	ldr	r1, [pc, #96]	; (800278c <LinkTimerBefore+0xbc>)
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	3314      	adds	r3, #20
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800273c:	79ba      	ldrb	r2, [r7, #6]
 800273e:	4913      	ldr	r1, [pc, #76]	; (800278c <LinkTimerBefore+0xbc>)
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	3314      	adds	r3, #20
 800274c:	79fa      	ldrb	r2, [r7, #7]
 800274e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002750:	e014      	b.n	800277c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002752:	79fa      	ldrb	r2, [r7, #7]
 8002754:	490d      	ldr	r1, [pc, #52]	; (800278c <LinkTimerBefore+0xbc>)
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3315      	adds	r3, #21
 8002762:	79ba      	ldrb	r2, [r7, #6]
 8002764:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002766:	79ba      	ldrb	r2, [r7, #6]
 8002768:	4908      	ldr	r1, [pc, #32]	; (800278c <LinkTimerBefore+0xbc>)
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	3314      	adds	r3, #20
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	701a      	strb	r2, [r3, #0]
  return;
 800277a:	bf00      	nop
}
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200004f4 	.word	0x200004f4
 800278c:	20000464 	.word	0x20000464

08002790 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800279a:	4b4e      	ldr	r3, [pc, #312]	; (80028d4 <linkTimer+0x144>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b06      	cmp	r3, #6
 80027a2:	d118      	bne.n	80027d6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80027a4:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <linkTimer+0x144>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <linkTimer+0x148>)
 80027ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80027ae:	4a49      	ldr	r2, [pc, #292]	; (80028d4 <linkTimer+0x144>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80027b4:	79fa      	ldrb	r2, [r7, #7]
 80027b6:	4949      	ldr	r1, [pc, #292]	; (80028dc <linkTimer+0x14c>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	3315      	adds	r3, #21
 80027c4:	2206      	movs	r2, #6
 80027c6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80027c8:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <linkTimer+0x150>)
 80027ca:	f04f 32ff 	mov.w	r2, #4294967295
 80027ce:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	81fb      	strh	r3, [r7, #14]
 80027d4:	e078      	b.n	80028c8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80027d6:	f000 f909 	bl	80029ec <ReturnTimeElapsed>
 80027da:	4603      	mov	r3, r0
 80027dc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80027de:	79fa      	ldrb	r2, [r7, #7]
 80027e0:	493e      	ldr	r1, [pc, #248]	; (80028dc <linkTimer+0x14c>)
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	3308      	adds	r3, #8
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	89fb      	ldrh	r3, [r7, #14]
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	4419      	add	r1, r3
 80027f6:	4839      	ldr	r0, [pc, #228]	; (80028dc <linkTimer+0x14c>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4403      	add	r3, r0
 8002802:	3308      	adds	r3, #8
 8002804:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	4934      	ldr	r1, [pc, #208]	; (80028dc <linkTimer+0x14c>)
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3308      	adds	r3, #8
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <linkTimer+0x144>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	4a2e      	ldr	r2, [pc, #184]	; (80028dc <linkTimer+0x14c>)
 8002824:	460b      	mov	r3, r1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	3308      	adds	r3, #8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	d337      	bcc.n	80028a8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002838:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <linkTimer+0x144>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800283e:	7b7a      	ldrb	r2, [r7, #13]
 8002840:	4926      	ldr	r1, [pc, #152]	; (80028dc <linkTimer+0x14c>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	3315      	adds	r3, #21
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002852:	e013      	b.n	800287c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002854:	7b7a      	ldrb	r2, [r7, #13]
 8002856:	4921      	ldr	r1, [pc, #132]	; (80028dc <linkTimer+0x14c>)
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	3315      	adds	r3, #21
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002868:	7b7a      	ldrb	r2, [r7, #13]
 800286a:	491c      	ldr	r1, [pc, #112]	; (80028dc <linkTimer+0x14c>)
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3315      	adds	r3, #21
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800287c:	7b3b      	ldrb	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d00b      	beq.n	800289a <linkTimer+0x10a>
 8002882:	7b3a      	ldrb	r2, [r7, #12]
 8002884:	4915      	ldr	r1, [pc, #84]	; (80028dc <linkTimer+0x14c>)
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	3308      	adds	r3, #8
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d2dc      	bcs.n	8002854 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800289a:	7b7a      	ldrb	r2, [r7, #13]
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fecf 	bl	8002644 <LinkTimerAfter>
 80028a6:	e00f      	b.n	80028c8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <linkTimer+0x144>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff0c 	bl	80026d0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <linkTimer+0x144>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <linkTimer+0x148>)
 80028c0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <linkTimer+0x144>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80028c8:	89fb      	ldrh	r3, [r7, #14]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200004f4 	.word	0x200004f4
 80028d8:	200004f5 	.word	0x200004f5
 80028dc:	20000464 	.word	0x20000464
 80028e0:	200004f8 	.word	0x200004f8

080028e4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	460a      	mov	r2, r1
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80028f4:	4b39      	ldr	r3, [pc, #228]	; (80029dc <UnlinkTimer+0xf8>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	79fa      	ldrb	r2, [r7, #7]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d111      	bne.n	8002924 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002900:	4b36      	ldr	r3, [pc, #216]	; (80029dc <UnlinkTimer+0xf8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <UnlinkTimer+0xfc>)
 8002908:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800290a:	79fa      	ldrb	r2, [r7, #7]
 800290c:	4935      	ldr	r1, [pc, #212]	; (80029e4 <UnlinkTimer+0x100>)
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	3315      	adds	r3, #21
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <UnlinkTimer+0xf8>)
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e03e      	b.n	80029a2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002924:	79fa      	ldrb	r2, [r7, #7]
 8002926:	492f      	ldr	r1, [pc, #188]	; (80029e4 <UnlinkTimer+0x100>)
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	3314      	adds	r3, #20
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002938:	79fa      	ldrb	r2, [r7, #7]
 800293a:	492a      	ldr	r1, [pc, #168]	; (80029e4 <UnlinkTimer+0x100>)
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	3315      	adds	r3, #21
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800294c:	79f9      	ldrb	r1, [r7, #7]
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	4824      	ldr	r0, [pc, #144]	; (80029e4 <UnlinkTimer+0x100>)
 8002952:	460b      	mov	r3, r1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	440b      	add	r3, r1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4403      	add	r3, r0
 800295c:	3315      	adds	r3, #21
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2d8      	uxtb	r0, r3
 8002962:	4920      	ldr	r1, [pc, #128]	; (80029e4 <UnlinkTimer+0x100>)
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	3315      	adds	r3, #21
 8002970:	4602      	mov	r2, r0
 8002972:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002974:	7bbb      	ldrb	r3, [r7, #14]
 8002976:	2b06      	cmp	r3, #6
 8002978:	d013      	beq.n	80029a2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800297a:	79f9      	ldrb	r1, [r7, #7]
 800297c:	7bba      	ldrb	r2, [r7, #14]
 800297e:	4819      	ldr	r0, [pc, #100]	; (80029e4 <UnlinkTimer+0x100>)
 8002980:	460b      	mov	r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	440b      	add	r3, r1
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4403      	add	r3, r0
 800298a:	3314      	adds	r3, #20
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b2d8      	uxtb	r0, r3
 8002990:	4914      	ldr	r1, [pc, #80]	; (80029e4 <UnlinkTimer+0x100>)
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	3314      	adds	r3, #20
 800299e:	4602      	mov	r2, r0
 80029a0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80029a2:	79fa      	ldrb	r2, [r7, #7]
 80029a4:	490f      	ldr	r1, [pc, #60]	; (80029e4 <UnlinkTimer+0x100>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	330c      	adds	r3, #12
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <UnlinkTimer+0xf8>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d107      	bne.n	80029d0 <UnlinkTimer+0xec>
 80029c0:	79bb      	ldrb	r3, [r7, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <UnlinkTimer+0x104>)
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	601a      	str	r2, [r3, #0]
  }

  return;
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
}
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	200004f4 	.word	0x200004f4
 80029e0:	200004f5 	.word	0x200004f5
 80029e4:	20000464 	.word	0x20000464
 80029e8:	200004f8 	.word	0x200004f8

080029ec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <ReturnTimeElapsed+0x70>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d026      	beq.n	8002a4a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80029fc:	f7ff fe02 	bl	8002604 <ReadRtcSsrValue>
 8002a00:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <ReturnTimeElapsed+0x70>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d805      	bhi.n	8002a18 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <ReturnTimeElapsed+0x70>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	e00a      	b.n	8002a2e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <ReturnTimeElapsed+0x74>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <ReturnTimeElapsed+0x70>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <ReturnTimeElapsed+0x78>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <ReturnTimeElapsed+0x7c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	40d3      	lsrs	r3, r2
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	e001      	b.n	8002a4e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	b29b      	uxth	r3, r3
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200004f8 	.word	0x200004f8
 8002a60:	20000500 	.word	0x20000500
 8002a64:	200004fe 	.word	0x200004fe
 8002a68:	200004fd 	.word	0x200004fd

08002a6c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a7c:	f7ff fdc2 	bl	8002604 <ReadRtcSsrValue>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <RestartWakeupCounter+0x9c>)
 8002a84:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002a86:	2003      	movs	r0, #3
 8002a88:	f001 fcb3 	bl	80043f2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002a8c:	e039      	b.n	8002b02 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d803      	bhi.n	8002a9c <RestartWakeupCounter+0x30>
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <RestartWakeupCounter+0xa0>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d002      	beq.n	8002aa2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002aa2:	bf00      	nop
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <RestartWakeupCounter+0xa4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f8      	beq.n	8002aa4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <RestartWakeupCounter+0xa4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <RestartWakeupCounter+0xa4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ac2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <RestartWakeupCounter+0xa8>)
 8002ac6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002aca:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002acc:	2003      	movs	r0, #3
 8002ace:	f001 fc9e 	bl	800440e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <RestartWakeupCounter+0xac>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <RestartWakeupCounter+0xac>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002ae2:	f7ff fd8f 	bl	8002604 <ReadRtcSsrValue>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <RestartWakeupCounter+0x9c>)
 8002aea:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <RestartWakeupCounter+0xa4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <RestartWakeupCounter+0xa4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002afa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002afc:	f3af 8000 	nop.w
  return ;
 8002b00:	bf00      	nop
}
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200004f8 	.word	0x200004f8
 8002b0c:	200004fd 	.word	0x200004fd
 8002b10:	2000078c 	.word	0x2000078c
 8002b14:	58000800 	.word	0x58000800
 8002b18:	40002800 	.word	0x40002800

08002b1c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002b22:	4b45      	ldr	r3, [pc, #276]	; (8002c38 <RescheduleTimerList+0x11c>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d107      	bne.n	8002b40 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002b30:	bf00      	nop
 8002b32:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <RescheduleTimerList+0x120>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f8      	bne.n	8002b32 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002b40:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <RescheduleTimerList+0x120>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <RescheduleTimerList+0x120>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002b50:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <RescheduleTimerList+0x124>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	493a      	ldr	r1, [pc, #232]	; (8002c44 <RescheduleTimerList+0x128>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	3308      	adds	r3, #8
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002b6a:	f7ff ff3f 	bl	80029ec <ReturnTimeElapsed>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d205      	bcs.n	8002b86 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <RescheduleTimerList+0x12c>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e04d      	b.n	8002c22 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4a30      	ldr	r2, [pc, #192]	; (8002c4c <RescheduleTimerList+0x130>)
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	4413      	add	r3, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d906      	bls.n	8002ba6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <RescheduleTimerList+0x130>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <RescheduleTimerList+0x12c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e03d      	b.n	8002c22 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <RescheduleTimerList+0x12c>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002bb6:	e034      	b.n	8002c22 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	4922      	ldr	r1, [pc, #136]	; (8002c44 <RescheduleTimerList+0x128>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d20a      	bcs.n	8002be6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	491c      	ldr	r1, [pc, #112]	; (8002c44 <RescheduleTimerList+0x128>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	3308      	adds	r3, #8
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e013      	b.n	8002c0e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	4916      	ldr	r1, [pc, #88]	; (8002c44 <RescheduleTimerList+0x128>)
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	1ac9      	subs	r1, r1, r3
 8002bfe:	4811      	ldr	r0, [pc, #68]	; (8002c44 <RescheduleTimerList+0x128>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4403      	add	r3, r0
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	490c      	ldr	r1, [pc, #48]	; (8002c44 <RescheduleTimerList+0x128>)
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3315      	adds	r3, #21
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b06      	cmp	r3, #6
 8002c26:	d1c7      	bne.n	8002bb8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002c28:	89bb      	ldrh	r3, [r7, #12]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff1e 	bl	8002a6c <RestartWakeupCounter>

  return ;
 8002c30:	bf00      	nop
}
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40002800 	.word	0x40002800
 8002c3c:	2000078c 	.word	0x2000078c
 8002c40:	200004f4 	.word	0x200004f4
 8002c44:	20000464 	.word	0x20000464
 8002c48:	200004fc 	.word	0x200004fc
 8002c4c:	20000502 	.word	0x20000502

08002c50 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c56:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5a:	617b      	str	r3, [r7, #20]
  return(result);
 8002c5c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002c60:	b672      	cpsid	i
}
 8002c62:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	22ca      	movs	r2, #202	; 0xca
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6c:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2253      	movs	r2, #83	; 0x53
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002c74:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	4b54      	ldr	r3, [pc, #336]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002c84:	4b52      	ldr	r3, [pc, #328]	; (8002dd0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002c8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c90:	4950      	ldr	r1, [pc, #320]	; (8002dd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d16e      	bne.n	8002d84 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002ca6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002caa:	494a      	ldr	r1, [pc, #296]	; (8002dd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002cba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002cbe:	4945      	ldr	r1, [pc, #276]	; (8002dd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	3310      	adds	r3, #16
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d04c      	beq.n	8002d74 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002cda:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002cde:	493d      	ldr	r1, [pc, #244]	; (8002dd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	330d      	adds	r3, #13
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d124      	bne.n	8002d3e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fdf2 	bl	80028e4 <UnlinkTimer>
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f383 8810 	msr	PRIMASK, r3
}
 8002d0a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002d0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d10:	4930      	ldr	r1, [pc, #192]	; (8002dd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fa32 	bl	8003190 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d2c:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	22ca      	movs	r2, #202	; 0xca
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2253      	movs	r2, #83	; 0x53
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d3c:	e012      	b.n	8002d64 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f99a 	bl	8003088 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	22ca      	movs	r2, #202	; 0xca
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2253      	movs	r2, #83	; 0x53
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	69b8      	ldr	r0, [r7, #24]
 8002d6e:	f000 fa95 	bl	800329c <HW_TS_RTC_Int_AppNot>
 8002d72:	e022      	b.n	8002dba <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002d74:	f7ff fed2 	bl	8002b1c <RescheduleTimerList>
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	e01a      	b.n	8002dba <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002d84:	bf00      	nop
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f8      	beq.n	8002d86 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002da4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002da8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f383 8810 	msr	PRIMASK, r3
}
 8002db8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	22ff      	movs	r2, #255	; 0xff
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002dc2:	bf00      	nop
}
 8002dc4:	3728      	adds	r7, #40	; 0x28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000078c 	.word	0x2000078c
 8002dd0:	200004f4 	.word	0x200004f4
 8002dd4:	20000464 	.word	0x20000464
 8002dd8:	200004fc 	.word	0x200004fc
 8002ddc:	58000800 	.word	0x58000800

08002de0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002dec:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <HW_TS_Init+0x188>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	22ca      	movs	r2, #202	; 0xca
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24
 8002df4:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HW_TS_Init+0x188>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2253      	movs	r2, #83	; 0x53
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002dfc:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <HW_TS_Init+0x18c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a5a      	ldr	r2, [pc, #360]	; (8002f6c <HW_TS_Init+0x18c>)
 8002e02:	f043 0320 	orr.w	r3, r3, #32
 8002e06:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002e08:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <HW_TS_Init+0x18c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f1c3 0304 	rsb	r3, r3, #4
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b55      	ldr	r3, [pc, #340]	; (8002f70 <HW_TS_Init+0x190>)
 8002e1c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002e1e:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HW_TS_Init+0x18c>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e26:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002e2a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	fa92 f2a2 	rbit	r2, r2
 8002e32:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	2a00      	cmp	r2, #0
 8002e3c:	d101      	bne.n	8002e42 <HW_TS_Init+0x62>
  {
    return 32U;
 8002e3e:	2220      	movs	r2, #32
 8002e40:	e003      	b.n	8002e4a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	40d3      	lsrs	r3, r2
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <HW_TS_Init+0x194>)
 8002e54:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002e56:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <HW_TS_Init+0x18c>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <HW_TS_Init+0x198>)
 8002e68:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HW_TS_Init+0x198>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	4a40      	ldr	r2, [pc, #256]	; (8002f74 <HW_TS_Init+0x194>)
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HW_TS_Init+0x190>)
 8002e7e:	7812      	ldrb	r2, [r2, #0]
 8002e80:	40d3      	lsrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d904      	bls.n	8002e98 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HW_TS_Init+0x19c>)
 8002e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	e003      	b.n	8002ea0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HW_TS_Init+0x19c>)
 8002e9e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ea0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ea4:	f7ff fb9c 	bl	80025e0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ea8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002eac:	f7ff fb84 	bl	80025b8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d13d      	bne.n	8002f32 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HW_TS_Init+0x1a0>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HW_TS_Init+0x1a4>)
 8002ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e00c      	b.n	8002ee4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002eca:	7ffa      	ldrb	r2, [r7, #31]
 8002ecc:	492e      	ldr	r1, [pc, #184]	; (8002f88 <HW_TS_Init+0x1a8>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	330c      	adds	r3, #12
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d9ef      	bls.n	8002eca <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HW_TS_Init+0x1ac>)
 8002eec:	2206      	movs	r2, #6
 8002eee:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HW_TS_Init+0x188>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HW_TS_Init+0x188>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HW_TS_Init+0x188>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HW_TS_Init+0x188>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f10:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HW_TS_Init+0x1b0>)
 8002f14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f18:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	f001 fa77 	bl	800440e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HW_TS_Init+0x188>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HW_TS_Init+0x188>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	e009      	b.n	8002f46 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HW_TS_Init+0x188>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002f40:	2003      	movs	r0, #3
 8002f42:	f001 fa56 	bl	80043f2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HW_TS_Init+0x188>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	22ff      	movs	r2, #255	; 0xff
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2103      	movs	r1, #3
 8002f52:	2003      	movs	r0, #3
 8002f54:	f001 fa07 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f001 fa1e 	bl	800439a <HAL_NVIC_EnableIRQ>

  return;
 8002f5e:	bf00      	nop
}
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000078c 	.word	0x2000078c
 8002f6c:	40002800 	.word	0x40002800
 8002f70:	200004fd 	.word	0x200004fd
 8002f74:	200004fe 	.word	0x200004fe
 8002f78:	20000500 	.word	0x20000500
 8002f7c:	20000502 	.word	0x20000502
 8002f80:	200004fc 	.word	0x200004fc
 8002f84:	200004f8 	.word	0x200004f8
 8002f88:	20000464 	.word	0x20000464
 8002f8c:	200004f4 	.word	0x200004f4
 8002f90:	58000800 	.word	0x58000800

08002f94 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b08b      	sub	sp, #44	; 0x2c
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002faa:	f3ef 8310 	mrs	r3, PRIMASK
 8002fae:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002fb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002fb8:	e004      	b.n	8002fc4 <HW_TS_Create+0x30>
  {
    loop++;
 8002fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d80c      	bhi.n	8002fe6 <HW_TS_Create+0x52>
 8002fcc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002fd0:	492c      	ldr	r1, [pc, #176]	; (8003084 <HW_TS_Create+0xf0>)
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	330c      	adds	r3, #12
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e9      	bne.n	8002fba <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d038      	beq.n	8003060 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002fee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ff2:	4924      	ldr	r1, [pc, #144]	; (8003084 <HW_TS_Create+0xf0>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	330c      	adds	r3, #12
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003010:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003014:	491b      	ldr	r1, [pc, #108]	; (8003084 <HW_TS_Create+0xf0>)
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	3310      	adds	r3, #16
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8003026:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800302a:	4916      	ldr	r1, [pc, #88]	; (8003084 <HW_TS_Create+0xf0>)
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	440b      	add	r3, r1
 8003036:	330d      	adds	r3, #13
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800303c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003040:	4910      	ldr	r1, [pc, #64]	; (8003084 <HW_TS_Create+0xf0>)
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003056:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800305e:	e008      	b.n	8003072 <HW_TS_Create+0xde>
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f383 8810 	msr	PRIMASK, r3
}
 800306a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003076:	4618      	mov	r0, r3
 8003078:	372c      	adds	r7, #44	; 0x2c
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000464 	.word	0x20000464

08003088 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003092:	f3ef 8310 	mrs	r3, PRIMASK
 8003096:	60fb      	str	r3, [r7, #12]
  return(result);
 8003098:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800309a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800309c:	b672      	cpsid	i
}
 800309e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80030a0:	2003      	movs	r0, #3
 80030a2:	f001 f988 	bl	80043b6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HW_TS_Stop+0xf0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	22ca      	movs	r2, #202	; 0xca
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
 80030ae:	4b32      	ldr	r3, [pc, #200]	; (8003178 <HW_TS_Stop+0xf0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2253      	movs	r2, #83	; 0x53
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80030b6:	79fa      	ldrb	r2, [r7, #7]
 80030b8:	4930      	ldr	r1, [pc, #192]	; (800317c <HW_TS_Stop+0xf4>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	330c      	adds	r3, #12
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d142      	bne.n	8003154 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fc06 	bl	80028e4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HW_TS_Stop+0xf8>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b06      	cmp	r3, #6
 80030e2:	d12f      	bne.n	8003144 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HW_TS_Stop+0xfc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f0:	d107      	bne.n	8003102 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80030f2:	bf00      	nop
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HW_TS_Stop+0xf0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f8      	bne.n	80030f4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HW_TS_Stop+0xf0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HW_TS_Stop+0xf0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003110:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003112:	bf00      	nop
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <HW_TS_Stop+0xf0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f8      	beq.n	8003114 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <HW_TS_Stop+0xf0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HW_TS_Stop+0xf0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003132:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HW_TS_Stop+0x100>)
 8003136:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800313a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800313c:	2003      	movs	r0, #3
 800313e:	f001 f966 	bl	800440e <HAL_NVIC_ClearPendingIRQ>
 8003142:	e007      	b.n	8003154 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HW_TS_Stop+0x104>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	7cfa      	ldrb	r2, [r7, #19]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003150:	f7ff fce4 	bl	8002b1c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HW_TS_Stop+0xf0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	22ff      	movs	r2, #255	; 0xff
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800315c:	2003      	movs	r0, #3
 800315e:	f001 f91c 	bl	800439a <HAL_NVIC_EnableIRQ>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800316e:	bf00      	nop
}
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2000078c 	.word	0x2000078c
 800317c:	20000464 	.word	0x20000464
 8003180:	200004f4 	.word	0x200004f4
 8003184:	40002800 	.word	0x40002800
 8003188:	58000800 	.word	0x58000800
 800318c:	200004f5 	.word	0x200004f5

08003190 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800319c:	79fa      	ldrb	r2, [r7, #7]
 800319e:	493b      	ldr	r1, [pc, #236]	; (800328c <HW_TS_Start+0xfc>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	330c      	adds	r3, #12
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d103      	bne.n	80031bc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ff66 	bl	8003088 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031bc:	f3ef 8310 	mrs	r3, PRIMASK
 80031c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031c2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80031c6:	b672      	cpsid	i
}
 80031c8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80031ca:	2003      	movs	r0, #3
 80031cc:	f001 f8f3 	bl	80043b6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80031d0:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HW_TS_Start+0x100>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	22ca      	movs	r2, #202	; 0xca
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HW_TS_Start+0x100>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2253      	movs	r2, #83	; 0x53
 80031de:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	492a      	ldr	r1, [pc, #168]	; (800328c <HW_TS_Start+0xfc>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	330c      	adds	r3, #12
 80031f0:	2202      	movs	r2, #2
 80031f2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80031f4:	79fa      	ldrb	r2, [r7, #7]
 80031f6:	4925      	ldr	r1, [pc, #148]	; (800328c <HW_TS_Start+0xfc>)
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	3308      	adds	r3, #8
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003208:	79fa      	ldrb	r2, [r7, #7]
 800320a:	4920      	ldr	r1, [pc, #128]	; (800328c <HW_TS_Start+0xfc>)
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	3304      	adds	r3, #4
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fab6 	bl	8002790 <linkTimer>
 8003224:	4603      	mov	r3, r0
 8003226:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HW_TS_Start+0x104>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HW_TS_Start+0x108>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	7c7a      	ldrb	r2, [r7, #17]
 8003236:	429a      	cmp	r2, r3
 8003238:	d002      	beq.n	8003240 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800323a:	f7ff fc6f 	bl	8002b1c <RescheduleTimerList>
 800323e:	e013      	b.n	8003268 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003240:	79fa      	ldrb	r2, [r7, #7]
 8003242:	4912      	ldr	r1, [pc, #72]	; (800328c <HW_TS_Start+0xfc>)
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	3308      	adds	r3, #8
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	8a7b      	ldrh	r3, [r7, #18]
 8003254:	79fa      	ldrb	r2, [r7, #7]
 8003256:	1ac9      	subs	r1, r1, r3
 8003258:	480c      	ldr	r0, [pc, #48]	; (800328c <HW_TS_Start+0xfc>)
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4403      	add	r3, r0
 8003264:	3308      	adds	r3, #8
 8003266:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HW_TS_Start+0x100>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003270:	2003      	movs	r0, #3
 8003272:	f001 f892 	bl	800439a <HAL_NVIC_EnableIRQ>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003282:	bf00      	nop
}
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000464 	.word	0x20000464
 8003290:	2000078c 	.word	0x2000078c
 8003294:	200004f4 	.word	0x200004f4
 8003298:	200004f5 	.word	0x200004f5

0800329c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	460b      	mov	r3, r1
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4798      	blx	r3

  return;
 80032ae:	bf00      	nop
}
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	4613      	mov	r3, r2
 80032c8:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HW_UART_Receive_IT+0x1e>
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d00d      	beq.n	80032f0 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80032d4:	e019      	b.n	800330a <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 80032d6:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <HW_UART_Receive_IT+0x5c>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HW_UART_Receive_IT+0x60>)
 80032de:	4a0f      	ldr	r2, [pc, #60]	; (800331c <HW_UART_Receive_IT+0x64>)
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	89bb      	ldrh	r3, [r7, #12]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	480b      	ldr	r0, [pc, #44]	; (8003318 <HW_UART_Receive_IT+0x60>)
 80032ea:	f004 fceb 	bl	8007cc4 <HAL_UART_Receive_IT>
            break;
 80032ee:	e00c      	b.n	800330a <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80032f0:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <HW_UART_Receive_IT+0x68>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HW_UART_Receive_IT+0x6c>)
 80032f8:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <HW_UART_Receive_IT+0x70>)
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	89bb      	ldrh	r3, [r7, #12]
 80032fe:	461a      	mov	r2, r3
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	4808      	ldr	r0, [pc, #32]	; (8003324 <HW_UART_Receive_IT+0x6c>)
 8003304:	f004 fcde 	bl	8007cc4 <HAL_UART_Receive_IT>
            break;
 8003308:	bf00      	nop
    }

    return;
 800330a:	bf00      	nop
}
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000504 	.word	0x20000504
 8003318:	200005e4 	.word	0x200005e4
 800331c:	40013800 	.word	0x40013800
 8003320:	2000050c 	.word	0x2000050c
 8003324:	20000550 	.word	0x20000550
 8003328:	40008000 	.word	0x40008000

0800332c <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	4613      	mov	r3, r2
 800333c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HW_UART_Transmit_IT+0x1e>
 8003344:	2b02      	cmp	r3, #2
 8003346:	d00d      	beq.n	8003364 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003348:	e019      	b.n	800337e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <HW_UART_Transmit_IT+0x5c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HW_UART_Transmit_IT+0x60>)
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HW_UART_Transmit_IT+0x64>)
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	89bb      	ldrh	r3, [r7, #12]
 8003358:	461a      	mov	r2, r3
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	480b      	ldr	r0, [pc, #44]	; (800338c <HW_UART_Transmit_IT+0x60>)
 800335e:	f004 fc1d 	bl	8007b9c <HAL_UART_Transmit_IT>
            break;
 8003362:	e00c      	b.n	800337e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HW_UART_Transmit_IT+0x68>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HW_UART_Transmit_IT+0x6c>)
 800336c:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HW_UART_Transmit_IT+0x70>)
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	89bb      	ldrh	r3, [r7, #12]
 8003372:	461a      	mov	r2, r3
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4808      	ldr	r0, [pc, #32]	; (8003398 <HW_UART_Transmit_IT+0x6c>)
 8003378:	f004 fc10 	bl	8007b9c <HAL_UART_Transmit_IT>
            break;
 800337c:	bf00      	nop
    }

    return;
 800337e:	bf00      	nop
}
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000508 	.word	0x20000508
 800338c:	200005e4 	.word	0x200005e4
 8003390:	40013800 	.word	0x40013800
 8003394:	20000510 	.word	0x20000510
 8003398:	20000550 	.word	0x20000550
 800339c:	40008000 	.word	0x40008000

080033a0 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HAL_UART_RxCpltCallback+0x4c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00a      	beq.n	80033c8 <HAL_UART_RxCpltCallback+0x28>
 80033b2:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_UART_RxCpltCallback+0x50>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10f      	bne.n	80033d8 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_UART_RxCpltCallback+0x54>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_UART_RxCpltCallback+0x54>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4798      	blx	r3
            }
            break;
 80033c6:	e009      	b.n	80033dc <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_UART_RxCpltCallback+0x58>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_UART_RxCpltCallback+0x58>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4798      	blx	r3
            }
            break;
 80033d6:	e003      	b.n	80033e0 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 80033d8:	bf00      	nop
 80033da:	e002      	b.n	80033e2 <HAL_UART_RxCpltCallback+0x42>
            break;
 80033dc:	bf00      	nop
 80033de:	e000      	b.n	80033e2 <HAL_UART_RxCpltCallback+0x42>
            break;
 80033e0:	bf00      	nop
    }

    return;
 80033e2:	bf00      	nop
}
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40008000 	.word	0x40008000
 80033f0:	40013800 	.word	0x40013800
 80033f4:	20000504 	.word	0x20000504
 80033f8:	2000050c 	.word	0x2000050c

080033fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_UART_TxCpltCallback+0x4c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00a      	beq.n	8003424 <HAL_UART_TxCpltCallback+0x28>
 800340e:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_UART_TxCpltCallback+0x50>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10f      	bne.n	8003434 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_UART_TxCpltCallback+0x54>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_UART_TxCpltCallback+0x54>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4798      	blx	r3
            }
            break;
 8003422:	e009      	b.n	8003438 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_UART_TxCpltCallback+0x58>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_UART_TxCpltCallback+0x58>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4798      	blx	r3
            }
            break;
 8003432:	e003      	b.n	800343c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8003434:	bf00      	nop
 8003436:	e002      	b.n	800343e <HAL_UART_TxCpltCallback+0x42>
            break;
 8003438:	bf00      	nop
 800343a:	e000      	b.n	800343e <HAL_UART_TxCpltCallback+0x42>
            break;
 800343c:	bf00      	nop
    }

    return;
 800343e:	bf00      	nop
}
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40008000 	.word	0x40008000
 800344c:	40013800 	.word	0x40013800
 8003450:	20000508 	.word	0x20000508
 8003454:	20000510 	.word	0x20000510

08003458 <LL_RCC_LSE_SetDriveCapability>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f023 0218 	bic.w	r2, r3, #24
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_AHB1_GRP1_EnableClock>:
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4313      	orrs	r3, r2
 800349a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4013      	ands	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034a8:	68fb      	ldr	r3, [r7, #12]
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_AHB2_GRP1_EnableClock>:
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4013      	ands	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_APB1_GRP1_EnableClock>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800350c:	68fb      	ldr	r3, [r7, #12]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003520:	f000 fd38 	bl	8003f94 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8003524:	f7fe fe7c 	bl	8002220 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003528:	f000 f824 	bl	8003574 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800352c:	f000 f87e 	bl	800362c <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 8003530:	f000 f898 	bl	8003664 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003534:	f000 f9aa 	bl	800388c <MX_GPIO_Init>
	MX_DMA_Init();
 8003538:	f000 f98e 	bl	8003858 <MX_DMA_Init>
	MX_RF_Init();
 800353c:	f000 f950 	bl	80037e0 <MX_RF_Init>
	MX_RTC_Init();
 8003540:	f000 f956 	bl	80037f0 <MX_RTC_Init>
	MX_I2C1_Init();
 8003544:	f000 f8a2 	bl	800368c <MX_I2C1_Init>

	/*--[ Scanning Done ]--*/
	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8003548:	f7fe fe78 	bl	800223c <MX_APPE_Init>
	app_algo_init();
 800354c:	f7fe fd9a 	bl	8002084 <app_algo_init>

	sensirion_i2c_init(&hi2c1);
 8003550:	4807      	ldr	r0, [pc, #28]	; (8003570 <main+0x54>)
 8003552:	f7fd f8fb 	bl	800074c <sensirion_i2c_init>

	sht4x_enable_low_power_mode(1);
 8003556:	2001      	movs	r0, #1
 8003558:	f7fd f9c2 	bl	80008e0 <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <main+0x54>)
 800355e:	f7fd f9e1 	bl	8000924 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x04);
 8003562:	2004      	movs	r0, #4
 8003564:	f7fd fa70 	bl	8000a48 <stts22h_temp_data_rate_set>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 8003568:	f7fe ff9f 	bl	80024aa <MX_APPE_Process>
 800356c:	e7fc      	b.n	8003568 <main+0x4c>
 800356e:	bf00      	nop
 8003570:	20000738 	.word	0x20000738

08003574 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b09a      	sub	sp, #104	; 0x68
 8003578:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800357a:	f107 0320 	add.w	r3, r7, #32
 800357e:	2248      	movs	r2, #72	; 0x48
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f009 f808 	bl	800c598 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800359a:	f002 fa89 	bl	8005ab0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800359e:	2000      	movs	r0, #0
 80035a0:	f7ff ff5a 	bl	8003458 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <SystemClock_Config+0xb4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035ac:	4a1e      	ldr	r2, [pc, #120]	; (8003628 <SystemClock_Config+0xb4>)
 80035ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <SystemClock_Config+0xb4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80035c0:	2307      	movs	r3, #7
 80035c2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80035ca:	2301      	movs	r3, #1
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035d4:	2340      	movs	r3, #64	; 0x40
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035d8:	2300      	movs	r3, #0
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80035dc:	f107 0320 	add.w	r3, r7, #32
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fe77 	bl	80062d4 <HAL_RCC_OscConfig>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <SystemClock_Config+0x7c>
		Error_Handler();
 80035ec:	f000 f978 	bl	80038e0 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80035f0:	236f      	movs	r3, #111	; 0x6f
 80035f2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80035f4:	2302      	movs	r3, #2
 80035f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f003 f9d3 	bl	80069bc <HAL_RCC_ClockConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <SystemClock_Config+0xac>
		Error_Handler();
 800361c:	f000 f960 	bl	80038e0 <Error_Handler>
	}
}
 8003620:	bf00      	nop
 8003622:	3768      	adds	r7, #104	; 0x68
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	58000400 	.word	0x58000400

0800362c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b094      	sub	sp, #80	; 0x50
 8003630:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003632:	463b      	mov	r3, r7
 8003634:	2250      	movs	r2, #80	; 0x50
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f008 ffad 	bl	800c598 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 800363e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003642:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
	//PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
	// PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800364a:	463b      	mov	r3, r7
 800364c:	4618      	mov	r0, r3
 800364e:	f003 fdf2 	bl	8007236 <HAL_RCCEx_PeriphCLKConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <PeriphCommonClock_Config+0x30>
		Error_Handler();
 8003658:	f000 f942 	bl	80038e0 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 800365c:	bf00      	nop
 800365e:	3750      	adds	r7, #80	; 0x50
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <MX_IPCC_Init+0x20>)
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <MX_IPCC_Init+0x24>)
 800366c:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 800366e:	4805      	ldr	r0, [pc, #20]	; (8003684 <MX_IPCC_Init+0x20>)
 8003670:	f002 f998 	bl	80059a4 <HAL_IPCC_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_IPCC_Init+0x1a>
		Error_Handler();
 800367a:	f000 f931 	bl	80038e0 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000514 	.word	0x20000514
 8003688:	58000c00 	.word	0x58000c00

0800368c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003692:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003696:	f7ff ff27 	bl	80034e8 <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800369a:	2002      	movs	r0, #2
 800369c:	f7ff ff0b 	bl	80034b6 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80036a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036a4:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80036a6:	2312      	movs	r3, #18
 80036a8:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80036b2:	2304      	movs	r3, #4
 80036b4:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4820      	ldr	r0, [pc, #128]	; (800373c <MX_I2C1_Init+0xb0>)
 80036bc:	f001 f9ee 	bl	8004a9c <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036c2:	4a20      	ldr	r2, [pc, #128]	; (8003744 <MX_I2C1_Init+0xb8>)
 80036c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036c8:	f640 6214 	movw	r2, #3604	; 0xe14
 80036cc:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80036f8:	4811      	ldr	r0, [pc, #68]	; (8003740 <MX_I2C1_Init+0xb4>)
 80036fa:	f001 fbad 	bl	8004e58 <HAL_I2C_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_I2C1_Init+0x7c>
		Error_Handler();
 8003704:	f000 f8ec 	bl	80038e0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8003708:	2100      	movs	r1, #0
 800370a:	480d      	ldr	r0, [pc, #52]	; (8003740 <MX_I2C1_Init+0xb4>)
 800370c:	f002 f8a0 	bl	8005850 <HAL_I2CEx_ConfigAnalogFilter>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8003716:	f000 f8e3 	bl	80038e0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800371a:	2100      	movs	r1, #0
 800371c:	4808      	ldr	r0, [pc, #32]	; (8003740 <MX_I2C1_Init+0xb4>)
 800371e:	f002 f8e2 	bl	80058e6 <HAL_I2CEx_ConfigDigitalFilter>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_I2C1_Init+0xa0>
		Error_Handler();
 8003728:	f000 f8da 	bl	80038e0 <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800372c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003730:	f002 f926 	bl	8005980 <HAL_I2CEx_EnableFastModePlus>
}
 8003734:	bf00      	nop
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	48000400 	.word	0x48000400
 8003740:	20000738 	.word	0x20000738
 8003744:	40005400 	.word	0x40005400

08003748 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_LPUART1_UART_Init(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 800374c:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 800374e:	4a23      	ldr	r2, [pc, #140]	; (80037dc <MX_LPUART1_UART_Init+0x94>)
 8003750:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8003752:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 8003754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003758:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800375a:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003766:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 800376e:	220c      	movs	r2, #12
 8003770:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 800377a:	2200      	movs	r2, #0
 800377c:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 8003780:	2200      	movs	r2, #0
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 8003786:	2200      	movs	r2, #0
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 800378c:	2200      	movs	r2, #0
 800378e:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8003790:	4811      	ldr	r0, [pc, #68]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 8003792:	f004 f9b3 	bl	8007afc <HAL_UART_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 800379c:	f000 f8a0 	bl	80038e0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80037a0:	2100      	movs	r1, #0
 80037a2:	480d      	ldr	r0, [pc, #52]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 80037a4:	f006 fad3 	bl	8009d4e <HAL_UARTEx_SetTxFifoThreshold>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80037ae:	f000 f897 	bl	80038e0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80037b2:	2100      	movs	r1, #0
 80037b4:	4808      	ldr	r0, [pc, #32]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 80037b6:	f006 fb08 	bl	8009dca <HAL_UARTEx_SetRxFifoThreshold>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80037c0:	f000 f88e 	bl	80038e0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80037c4:	4804      	ldr	r0, [pc, #16]	; (80037d8 <MX_LPUART1_UART_Init+0x90>)
 80037c6:	f006 fa89 	bl	8009cdc <HAL_UARTEx_DisableFifoMode>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 80037d0:	f000 f886 	bl	80038e0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000550 	.word	0x20000550
 80037dc:	40008000 	.word	0x40008000

080037e0 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <MX_RTC_Init+0x60>)
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <MX_RTC_Init+0x64>)
 80037f8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <MX_RTC_Init+0x60>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <MX_RTC_Init+0x60>)
 8003802:	220f      	movs	r2, #15
 8003804:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <MX_RTC_Init+0x60>)
 8003808:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800380c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <MX_RTC_Init+0x60>)
 8003810:	2200      	movs	r2, #0
 8003812:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <MX_RTC_Init+0x60>)
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <MX_RTC_Init+0x60>)
 800381c:	2200      	movs	r2, #0
 800381e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <MX_RTC_Init+0x60>)
 8003822:	2200      	movs	r2, #0
 8003824:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8003826:	480a      	ldr	r0, [pc, #40]	; (8003850 <MX_RTC_Init+0x60>)
 8003828:	f003 ff8c 	bl	8007744 <HAL_RTC_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_RTC_Init+0x46>
		Error_Handler();
 8003832:	f000 f855 	bl	80038e0 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8003836:	2200      	movs	r2, #0
 8003838:	2100      	movs	r1, #0
 800383a:	4805      	ldr	r0, [pc, #20]	; (8003850 <MX_RTC_Init+0x60>)
 800383c:	f004 f882 	bl	8007944 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8003846:	f000 f84b 	bl	80038e0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2000078c 	.word	0x2000078c
 8003854:	40002800 	.word	0x40002800

08003858 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800385c:	2004      	movs	r0, #4
 800385e:	f7ff fe11 	bl	8003484 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003862:	2001      	movs	r0, #1
 8003864:	f7ff fe0e 	bl	8003484 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003868:	2200      	movs	r2, #0
 800386a:	2100      	movs	r1, #0
 800386c:	200b      	movs	r0, #11
 800386e:	f000 fd7a 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003872:	200b      	movs	r0, #11
 8003874:	f000 fd91 	bl	800439a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003878:	2200      	movs	r2, #0
 800387a:	2100      	movs	r1, #0
 800387c:	200c      	movs	r0, #12
 800387e:	f000 fd72 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003882:	200c      	movs	r0, #12
 8003884:	f000 fd89 	bl	800439a <HAL_NVIC_EnableIRQ>

}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}

0800388c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003892:	2004      	movs	r0, #4
 8003894:	f7ff fe0f 	bl	80034b6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003898:	2001      	movs	r0, #1
 800389a:	f7ff fe0c 	bl	80034b6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	2002      	movs	r0, #2
 80038a0:	f7ff fe09 	bl	80034b6 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80038b2:	2303      	movs	r3, #3
 80038b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b6:	2301      	movs	r3, #1
 80038b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4805      	ldr	r0, [pc, #20]	; (80038dc <MX_GPIO_Init+0x50>)
 80038c8:	f001 f8e8 	bl	8004a9c <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80038cc:	2102      	movs	r1, #2
 80038ce:	4803      	ldr	r0, [pc, #12]	; (80038dc <MX_GPIO_Init+0x50>)
 80038d0:	f001 fa6c 	bl	8004dac <HAL_GPIO_TogglePin>

}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	48000800 	.word	0x48000800

080038e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800391e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_AHB2_GRP1_EnableClock>:
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800394a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4313      	orrs	r3, r2
 8003952:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003960:	68fb      	ldr	r3, [r7, #12]
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_AHB3_GRP1_EnableClock>:
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800397c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4313      	orrs	r3, r2
 8003984:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4013      	ands	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_APB1_GRP1_EnableClock>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4013      	ands	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039c4:	68fb      	ldr	r3, [r7, #12]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_APB1_GRP2_EnableClock>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4013      	ands	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039f6:	68fb      	ldr	r3, [r7, #12]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_APB2_GRP1_EnableClock>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003a3a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a3e:	f7ff ff96 	bl	800396e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003a42:	2200      	movs	r2, #0
 8003a44:	2100      	movs	r1, #0
 8003a46:	2001      	movs	r0, #1
 8003a48:	f000 fc8d 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f000 fca4 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	2004      	movs	r0, #4
 8003a58:	f000 fc85 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003a5c:	2004      	movs	r0, #4
 8003a5e:	f000 fc9c 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2100      	movs	r1, #0
 8003a66:	2005      	movs	r0, #5
 8003a68:	f000 fc7d 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003a6c:	2005      	movs	r0, #5
 8003a6e:	f000 fc94 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2100      	movs	r1, #0
 8003a76:	2015      	movs	r0, #21
 8003a78:	f000 fc75 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003a7c:	2015      	movs	r0, #21
 8003a7e:	f000 fc8c 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2100      	movs	r1, #0
 8003a86:	202b      	movs	r0, #43	; 0x2b
 8003a88:	f000 fc6d 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003a8c:	202b      	movs	r0, #43	; 0x2b
 8003a8e:	f000 fc84 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	202e      	movs	r0, #46	; 0x2e
 8003a98:	f000 fc65 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003a9c:	202e      	movs	r0, #46	; 0x2e
 8003a9e:	f000 fc7c 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	2036      	movs	r0, #54	; 0x36
 8003aa8:	f000 fc5d 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003aac:	2036      	movs	r0, #54	; 0x36
 8003aae:	f000 fc74 	bl	800439a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_IPCC_MspInit+0x44>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d113      	bne.n	8003af2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003aca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003ace:	f7ff ff4e 	bl	800396e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	202c      	movs	r0, #44	; 0x2c
 8003ad8:	f000 fc45 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003adc:	202c      	movs	r0, #44	; 0x2c
 8003ade:	f000 fc5c 	bl	800439a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	202d      	movs	r0, #45	; 0x2d
 8003ae8:	f000 fc3d 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003aec:	202d      	movs	r0, #45	; 0x2d
 8003aee:	f000 fc54 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	58000c00 	.word	0x58000c00

08003b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b09c      	sub	sp, #112	; 0x70
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2250      	movs	r2, #80	; 0x50
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f008 fd39 	bl	800c598 <memset>
  if(huart->Instance==LPUART1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a67      	ldr	r2, [pc, #412]	; (8003cc8 <HAL_UART_MspInit+0x1c8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d156      	bne.n	8003bde <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003b30:	2302      	movs	r3, #2
 8003b32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fb7a 	bl	8007236 <HAL_RCCEx_PeriphCLKConfig>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003b48:	f7ff feca 	bl	80038e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f7ff ff40 	bl	80039d2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b52:	2001      	movs	r0, #1
 8003b54:	f7ff fef2 	bl	800393c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b58:	230c      	movs	r3, #12
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003b68:	2308      	movs	r3, #8
 8003b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b70:	4619      	mov	r1, r3
 8003b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b76:	f000 ff91 	bl	8004a9c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8003b7a:	4b54      	ldr	r3, [pc, #336]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003b7c:	4a54      	ldr	r2, [pc, #336]	; (8003cd0 <HAL_UART_MspInit+0x1d0>)
 8003b7e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003b80:	4b52      	ldr	r3, [pc, #328]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003b82:	2211      	movs	r2, #17
 8003b84:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b86:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003b88:	2210      	movs	r2, #16
 8003b8a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b92:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003ba4:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003baa:	4b48      	ldr	r3, [pc, #288]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003bb0:	4846      	ldr	r0, [pc, #280]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003bb2:	f000 fc3b 	bl	800442c <HAL_DMA_Init>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003bbc:	f7ff fe90 	bl	80038e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a42      	ldr	r2, [pc, #264]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003bc4:	67da      	str	r2, [r3, #124]	; 0x7c
 8003bc6:	4a41      	ldr	r2, [pc, #260]	; (8003ccc <HAL_UART_MspInit+0x1cc>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2100      	movs	r1, #0
 8003bd0:	2025      	movs	r0, #37	; 0x25
 8003bd2:	f000 fbc8 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003bd6:	2025      	movs	r0, #37	; 0x25
 8003bd8:	f000 fbdf 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bdc:	e06f      	b.n	8003cbe <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3c      	ldr	r2, [pc, #240]	; (8003cd4 <HAL_UART_MspInit+0x1d4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d16a      	bne.n	8003cbe <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003be8:	2301      	movs	r3, #1
 8003bea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f003 fb1e 	bl	8007236 <HAL_RCCEx_PeriphCLKConfig>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8003c00:	f7ff fe6e 	bl	80038e0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c08:	f7ff fefc 	bl	8003a04 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f7ff fe95 	bl	800393c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	2002      	movs	r0, #2
 8003c14:	f7ff fe92 	bl	800393c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c26:	2300      	movs	r3, #0
 8003c28:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c2a:	2307      	movs	r3, #7
 8003c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c32:	4619      	mov	r1, r3
 8003c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c38:	f000 ff30 	bl	8004a9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c3c:	23c0      	movs	r3, #192	; 0xc0
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c40:	2302      	movs	r3, #2
 8003c42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c4c:	2307      	movs	r3, #7
 8003c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c54:	4619      	mov	r1, r3
 8003c56:	4820      	ldr	r0, [pc, #128]	; (8003cd8 <HAL_UART_MspInit+0x1d8>)
 8003c58:	f000 ff20 	bl	8004a9c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c5e:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <HAL_UART_MspInit+0x1e0>)
 8003c60:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c64:	220f      	movs	r2, #15
 8003c66:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c76:	2280      	movs	r2, #128	; 0x80
 8003c78:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c80:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c92:	4812      	ldr	r0, [pc, #72]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003c94:	f000 fbca 	bl	800442c <HAL_DMA_Init>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8003c9e:	f7ff fe1f 	bl	80038e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003ca6:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <HAL_UART_MspInit+0x1dc>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2024      	movs	r0, #36	; 0x24
 8003cb4:	f000 fb57 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cb8:	2024      	movs	r0, #36	; 0x24
 8003cba:	f000 fb6e 	bl	800439a <HAL_NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3770      	adds	r7, #112	; 0x70
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40008000 	.word	0x40008000
 8003ccc:	20000678 	.word	0x20000678
 8003cd0:	40020008 	.word	0x40020008
 8003cd4:	40013800 	.word	0x40013800
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	200006d8 	.word	0x200006d8
 8003ce0:	4002001c 	.word	0x4002001c

08003ce4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b096      	sub	sp, #88	; 0x58
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	2250      	movs	r2, #80	; 0x50
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f008 fc4f 	bl	800c598 <memset>
  if(hrtc->Instance==RTC)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <HAL_RTC_MspInit+0x80>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d12b      	bne.n	8003d5c <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003d04:	f001 fed4 	bl	8005ab0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003d08:	f001 fed2 	bl	8005ab0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003d0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d10:	f7ff fded 	bl	80038ee <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d18:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	4618      	mov	r0, r3
 8003d26:	f003 fa86 	bl	8007236 <HAL_RCCEx_PeriphCLKConfig>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003d30:	f7ff fdd6 	bl	80038e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d34:	f7ff fdf1 	bl	800391a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d3c:	f7ff fe30 	bl	80039a0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003d40:	2200      	movs	r2, #0
 8003d42:	2100      	movs	r1, #0
 8003d44:	2003      	movs	r0, #3
 8003d46:	f000 fb0e 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003d4a:	2003      	movs	r0, #3
 8003d4c:	f000 fb25 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <HAL_RTC_MspInit+0x80>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a03      	ldr	r2, [pc, #12]	; (8003d64 <HAL_RTC_MspInit+0x80>)
 8003d56:	f023 0307 	bic.w	r3, r3, #7
 8003d5a:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d5c:	bf00      	nop
 8003d5e:	3758      	adds	r7, #88	; 0x58
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40002800 	.word	0x40002800

08003d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d7a:	e7fe      	b.n	8003d7a <HardFault_Handler+0x4>

08003d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d80:	e7fe      	b.n	8003d80 <MemManage_Handler+0x4>

08003d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d82:	b480      	push	{r7}
 8003d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d86:	e7fe      	b.n	8003d86 <BusFault_Handler+0x4>

08003d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d8c:	e7fe      	b.n	8003d8c <UsageFault_Handler+0x4>

08003d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dbc:	f000 f944 	bl	8004048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003dc8:	f001 fed8 	bl	8005b7c <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003dd4:	f7fe ff3c 	bl	8002c50 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003de0:	f000 fd9e 	bl	8004920 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <DMA1_Channel1_IRQHandler+0x10>)
 8003dfe:	f000 fc7b 	bl	80046f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000678 	.word	0x20000678

08003e0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <DMA1_Channel2_IRQHandler+0x10>)
 8003e12:	f000 fc71 	bl	80046f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200006d8 	.word	0x200006d8

08003e20 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <USART1_IRQHandler+0x10>)
 8003e36:	f003 ff91 	bl	8007d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200005e4 	.word	0x200005e4

08003e44 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003e48:	4802      	ldr	r0, [pc, #8]	; (8003e54 <LPUART1_IRQHandler+0x10>)
 8003e4a:	f003 ff87 	bl	8007d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000550 	.word	0x20000550

08003e58 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003e6a:	f7fd ff2d 	bl	8001cc8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003e76:	f7fd ff81 	bl	8001d7c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003e82:	f000 ffc5 	bl	8004e10 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8003e9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ea0:	f000 ff9e 	bl	8004de0 <HAL_GPIO_EXTI_IRQHandler>
}
 8003ea4:	bf00      	nop
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003ea8:	b40c      	push	{r2, r3}
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	71fb      	strb	r3, [r7, #7]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	b002      	add	sp, #8
 8003ec6:	4770      	bx	lr

08003ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003ecc:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <SystemInit+0xa0>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003ed2:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <SystemInit+0xa0>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <SystemInit+0xa0>)
 8003eda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ede:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003efa:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <SystemInit+0xa4>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f18:	f023 0305 	bic.w	r3, r3, #5
 8003f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <SystemInit+0xa8>)
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	4a0b      	ldr	r2, [pc, #44]	; (8003f70 <SystemInit+0xa8>)
 8003f42:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed00 	.word	0xe000ed00
 8003f6c:	faf6fefb 	.word	0xfaf6fefb
 8003f70:	22041000 	.word	0x22041000

08003f74 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6053      	str	r3, [r2, #4]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e0042000 	.word	0xe0042000

08003f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_Init+0x3c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a0b      	ldr	r2, [pc, #44]	; (8003fd0 <HAL_Init+0x3c>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003faa:	2003      	movs	r0, #3
 8003fac:	f000 f9d0 	bl	8004350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f000 f80f 	bl	8003fd4 <HAL_InitTick>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	71fb      	strb	r3, [r7, #7]
 8003fc0:	e001      	b.n	8003fc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fc2:	f7ff fd38 	bl	8003a36 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	58004000 	.word	0x58004000

08003fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_InitTick+0x6c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d024      	beq.n	8004032 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fe8:	f002 fe94 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8003fec:	4602      	mov	r2, r0
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_InitTick+0x6c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f9ea 	bl	80043da <HAL_SYSTICK_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10f      	bne.n	800402c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	d809      	bhi.n	8004026 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004012:	2200      	movs	r2, #0
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	f000 f9a4 	bl	8004366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_InitTick+0x70>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e007      	b.n	8004036 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e004      	b.n	8004036 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e001      	b.n	8004036 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000034 	.word	0x20000034
 8004044:	20000030 	.word	0x20000030

08004048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_IncTick+0x20>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_IncTick+0x24>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4413      	add	r3, r2
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <HAL_IncTick+0x24>)
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000034 	.word	0x20000034
 800406c:	200007bc 	.word	0x200007bc

08004070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return uwTick;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_GetTick+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200007bc 	.word	0x200007bc

08004088 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_GetTickPrio+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000030 	.word	0x20000030

080040a0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_GetTickFreq+0x14>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000034 	.word	0x20000034

080040b8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80040bc:	f7ff ff5a 	bl	8003f74 <LL_DBGMCU_EnableDBGSleepMode>
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f6:	4a04      	ldr	r2, [pc, #16]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	60d3      	str	r3, [r2, #12]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db12      	blt.n	800419c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	490a      	ldr	r1, [pc, #40]	; (80041a8 <__NVIC_DisableIRQ+0x44>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	3320      	adds	r3, #32
 800418c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004190:	f3bf 8f4f 	dsb	sy
}
 8004194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004196:	f3bf 8f6f 	isb	sy
}
 800419a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000e100 	.word	0xe000e100

080041ac <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0c      	blt.n	80041d8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4907      	ldr	r1, [pc, #28]	; (80041e4 <__NVIC_SetPendingIRQ+0x38>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	3340      	adds	r3, #64	; 0x40
 80041d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db0c      	blt.n	8004214 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	4907      	ldr	r1, [pc, #28]	; (8004220 <__NVIC_ClearPendingIRQ+0x38>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2001      	movs	r0, #1
 800420a:	fa00 f202 	lsl.w	r2, r0, r2
 800420e:	3360      	adds	r3, #96	; 0x60
 8004210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000e100 	.word	0xe000e100

08004224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	6039      	str	r1, [r7, #0]
 800422e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004234:	2b00      	cmp	r3, #0
 8004236:	db0a      	blt.n	800424e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	490c      	ldr	r1, [pc, #48]	; (8004270 <__NVIC_SetPriority+0x4c>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	440b      	add	r3, r1
 8004248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800424c:	e00a      	b.n	8004264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	4908      	ldr	r1, [pc, #32]	; (8004274 <__NVIC_SetPriority+0x50>)
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	3b04      	subs	r3, #4
 800425c:	0112      	lsls	r2, r2, #4
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	440b      	add	r3, r1
 8004262:	761a      	strb	r2, [r3, #24]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000e100 	.word	0xe000e100
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f1c3 0307 	rsb	r3, r3, #7
 8004292:	2b04      	cmp	r3, #4
 8004294:	bf28      	it	cs
 8004296:	2304      	movcs	r3, #4
 8004298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3304      	adds	r3, #4
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d902      	bls.n	80042a8 <NVIC_EncodePriority+0x30>
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3b03      	subs	r3, #3
 80042a6:	e000      	b.n	80042aa <NVIC_EncodePriority+0x32>
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ac:	f04f 32ff 	mov.w	r2, #4294967295
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43da      	mvns	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	401a      	ands	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c0:	f04f 31ff 	mov.w	r1, #4294967295
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	43d9      	mvns	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d0:	4313      	orrs	r3, r2
         );
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	; 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80042e4:	f3bf 8f4f 	dsb	sy
}
 80042e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <__NVIC_SystemReset+0x24>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80042f2:	4904      	ldr	r1, [pc, #16]	; (8004304 <__NVIC_SystemReset+0x24>)
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <__NVIC_SystemReset+0x28>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042fa:	f3bf 8f4f 	dsb	sy
}
 80042fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <__NVIC_SystemReset+0x20>
 8004304:	e000ed00 	.word	0xe000ed00
 8004308:	05fa0004 	.word	0x05fa0004

0800430c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800431c:	d301      	bcc.n	8004322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431e:	2301      	movs	r3, #1
 8004320:	e00f      	b.n	8004342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004322:	4a0a      	ldr	r2, [pc, #40]	; (800434c <SysTick_Config+0x40>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432a:	210f      	movs	r1, #15
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f7ff ff78 	bl	8004224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <SysTick_Config+0x40>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433a:	4b04      	ldr	r3, [pc, #16]	; (800434c <SysTick_Config+0x40>)
 800433c:	2207      	movs	r2, #7
 800433e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	e000e010 	.word	0xe000e010

08004350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff feb3 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004374:	f7ff feca 	bl	800410c <__NVIC_GetPriorityGrouping>
 8004378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff7a 	bl	8004278 <NVIC_EncodePriority>
 8004384:	4602      	mov	r2, r0
 8004386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff49 	bl	8004224 <__NVIC_SetPriority>
}
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff febd 	bl	8004128 <__NVIC_EnableIRQ>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fecd 	bl	8004164 <__NVIC_DisableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80043d6:	f7ff ff83 	bl	80042e0 <__NVIC_SystemReset>

080043da <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ff92 	bl	800430c <SysTick_Config>
 80043e8:	4603      	mov	r3, r0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fed3 	bl	80041ac <__NVIC_SetPendingIRQ>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fee3 	bl	80041e8 <__NVIC_ClearPendingIRQ>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e08e      	b.n	800455c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_DMA_Init+0x138>)
 8004446:	429a      	cmp	r2, r3
 8004448:	d80f      	bhi.n	800446a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	4b45      	ldr	r3, [pc, #276]	; (8004568 <HAL_DMA_Init+0x13c>)
 8004452:	4413      	add	r3, r2
 8004454:	4a45      	ldr	r2, [pc, #276]	; (800456c <HAL_DMA_Init+0x140>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	009a      	lsls	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a42      	ldr	r2, [pc, #264]	; (8004570 <HAL_DMA_Init+0x144>)
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
 8004468:	e00e      	b.n	8004488 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	4b40      	ldr	r3, [pc, #256]	; (8004574 <HAL_DMA_Init+0x148>)
 8004472:	4413      	add	r3, r2
 8004474:	4a3d      	ldr	r2, [pc, #244]	; (800456c <HAL_DMA_Init+0x140>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	009a      	lsls	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <HAL_DMA_Init+0x14c>)
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9bc 	bl	8004858 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e8:	d102      	bne.n	80044f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80044fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004506:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d010      	beq.n	8004532 <HAL_DMA_Init+0x106>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d80c      	bhi.n	8004532 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f9db 	bl	80048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e008      	b.n	8004544 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40020407 	.word	0x40020407
 8004568:	bffdfff8 	.word	0xbffdfff8
 800456c:	cccccccd 	.word	0xcccccccd
 8004570:	40020000 	.word	0x40020000
 8004574:	bffdfbf8 	.word	0xbffdfbf8
 8004578:	40020400 	.word	0x40020400

0800457c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e04f      	b.n	800462e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d008      	beq.n	80045ac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e040      	b.n	800462e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 020e 	bic.w	r2, r2, #14
 80045ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f003 021c 	and.w	r2, r3, #28
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	2101      	movs	r1, #1
 80045ea:	fa01 f202 	lsl.w	r2, r1, r2
 80045ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004610:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800461a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d005      	beq.n	800465e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2204      	movs	r2, #4
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
 800465c:	e047      	b.n	80046ee <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 020e 	bic.w	r2, r2, #14
 800466c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f003 021c 	and.w	r2, r3, #28
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2101      	movs	r1, #1
 800469c:	fa01 f202 	lsl.w	r2, r1, r2
 80046a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
    }
  }
  return status;
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f003 031c 	and.w	r3, r3, #28
 8004718:	2204      	movs	r2, #4
 800471a:	409a      	lsls	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d026      	beq.n	8004772 <HAL_DMA_IRQHandler+0x7a>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d021      	beq.n	8004772 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0204 	bic.w	r2, r2, #4
 800474a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f003 021c 	and.w	r2, r3, #28
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	2104      	movs	r1, #4
 800475a:	fa01 f202 	lsl.w	r2, r1, r2
 800475e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	2b00      	cmp	r3, #0
 8004766:	d071      	beq.n	800484c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004770:	e06c      	b.n	800484c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f003 031c 	and.w	r3, r3, #28
 800477a:	2202      	movs	r2, #2
 800477c:	409a      	lsls	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02e      	beq.n	80047e4 <HAL_DMA_IRQHandler+0xec>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d029      	beq.n	80047e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 020a 	bic.w	r2, r2, #10
 80047ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f003 021c 	and.w	r2, r3, #28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2102      	movs	r1, #2
 80047c4:	fa01 f202 	lsl.w	r2, r1, r2
 80047c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d038      	beq.n	800484c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047e2:	e033      	b.n	800484c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	f003 031c 	and.w	r3, r3, #28
 80047ec:	2208      	movs	r2, #8
 80047ee:	409a      	lsls	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02a      	beq.n	800484e <HAL_DMA_IRQHandler+0x156>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d025      	beq.n	800484e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 020e 	bic.w	r2, r2, #14
 8004810:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f003 021c 	and.w	r2, r3, #28
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f202 	lsl.w	r2, r1, r2
 8004824:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800484c:	bf00      	nop
 800484e:	bf00      	nop
}
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	4b17      	ldr	r3, [pc, #92]	; (80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d80a      	bhi.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004878:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6493      	str	r3, [r2, #72]	; 0x48
 8004880:	e007      	b.n	8004892 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	009a      	lsls	r2, r3, #2
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800488c:	4413      	add	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	3b08      	subs	r3, #8
 800489a:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	2201      	movs	r2, #1
 80048b2:	409a      	lsls	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40020407 	.word	0x40020407
 80048c8:	4002081c 	.word	0x4002081c
 80048cc:	cccccccd 	.word	0xcccccccd
 80048d0:	40020880 	.word	0x40020880

080048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80048f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2201      	movs	r2, #1
 8004904:	409a      	lsls	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	1000823f 	.word	0x1000823f
 800491c:	40020940 	.word	0x40020940

08004920 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800492c:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004934:	4013      	ands	r3, r2
 8004936:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004938:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	43db      	mvns	r3, r3
 8004942:	493c      	ldr	r1, [pc, #240]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 8004944:	4013      	ands	r3, r2
 8004946:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004948:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_FLASH_IRQHandler+0x11c>)
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004954:	4b38      	ldr	r3, [pc, #224]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	e008      	b.n	800496e <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800495c:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004968:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d022      	beq.n	80049ba <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004974:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	4a2e      	ldr	r2, [pc, #184]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 800497e:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_FLASH_IRQHandler+0x7a>
 800498a:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004994:	4927      	ldr	r1, [pc, #156]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 8004996:	4313      	orrs	r3, r2
 8004998:	618b      	str	r3, [r1, #24]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_FLASH_IRQHandler+0x8e>
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80049ac:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80049ae:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f84d 	bl	8004a54 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d124      	bne.n	8004a10 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80049c6:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d117      	bne.n	8004a04 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	3b01      	subs	r3, #1
 80049da:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049dc:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 80049de:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 80049e6:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	3301      	adds	r3, #1
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049ee:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f837 	bl	8004a68 <FLASH_PageErase>
 80049fa:	e006      	b.n	8004a0a <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	e002      	b.n	8004a0a <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f818 	bl	8004a40 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <HAL_FLASH_IRQHandler+0x114>)
 8004a1e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004a22:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_FLASH_IRQHandler+0x118>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	58004000 	.word	0x58004000
 8004a38:	200007c0 	.word	0x200007c0
 8004a3c:	00040001 	.word	0x00040001

08004a40 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <FLASH_PageErase+0x30>)
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	4a06      	ldr	r2, [pc, #24]	; (8004a98 <FLASH_PageErase+0x30>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	f043 0302 	orr.w	r3, r3, #2
 8004a88:	6153      	str	r3, [r2, #20]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	58004000 	.word	0x58004000

08004a9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aaa:	e14c      	b.n	8004d46 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 813e 	beq.w	8004d40 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d005      	beq.n	8004adc <HAL_GPIO_Init+0x40>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d130      	bne.n	8004b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b12:	2201      	movs	r2, #1
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0201 	and.w	r2, r3, #1
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d017      	beq.n	8004b7a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	2203      	movs	r2, #3
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d123      	bne.n	8004bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	08da      	lsrs	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3208      	adds	r2, #8
 8004b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	220f      	movs	r2, #15
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	08da      	lsrs	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3208      	adds	r2, #8
 8004bc8:	6939      	ldr	r1, [r7, #16]
 8004bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	2203      	movs	r2, #3
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8098 	beq.w	8004d40 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c10:	4a54      	ldr	r2, [pc, #336]	; (8004d64 <HAL_GPIO_Init+0x2c8>)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	089b      	lsrs	r3, r3, #2
 8004c16:	3302      	adds	r3, #2
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	220f      	movs	r2, #15
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4013      	ands	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c3a:	d019      	beq.n	8004c70 <HAL_GPIO_Init+0x1d4>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a4a      	ldr	r2, [pc, #296]	; (8004d68 <HAL_GPIO_Init+0x2cc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <HAL_GPIO_Init+0x1d0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a49      	ldr	r2, [pc, #292]	; (8004d6c <HAL_GPIO_Init+0x2d0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00d      	beq.n	8004c68 <HAL_GPIO_Init+0x1cc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a48      	ldr	r2, [pc, #288]	; (8004d70 <HAL_GPIO_Init+0x2d4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <HAL_GPIO_Init+0x1c8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a47      	ldr	r2, [pc, #284]	; (8004d74 <HAL_GPIO_Init+0x2d8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <HAL_GPIO_Init+0x1c4>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	e008      	b.n	8004c72 <HAL_GPIO_Init+0x1d6>
 8004c60:	2307      	movs	r3, #7
 8004c62:	e006      	b.n	8004c72 <HAL_GPIO_Init+0x1d6>
 8004c64:	2303      	movs	r3, #3
 8004c66:	e004      	b.n	8004c72 <HAL_GPIO_Init+0x1d6>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e002      	b.n	8004c72 <HAL_GPIO_Init+0x1d6>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_GPIO_Init+0x1d6>
 8004c70:	2300      	movs	r3, #0
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	f002 0203 	and.w	r2, r2, #3
 8004c78:	0092      	lsls	r2, r2, #2
 8004c7a:	4093      	lsls	r3, r2
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c82:	4938      	ldr	r1, [pc, #224]	; (8004d64 <HAL_GPIO_Init+0x2c8>)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	3302      	adds	r3, #2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c90:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cb4:	4a30      	ldr	r2, [pc, #192]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cba:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cde:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004d12:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d38:	4a0f      	ldr	r2, [pc, #60]	; (8004d78 <HAL_GPIO_Init+0x2dc>)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	3301      	adds	r3, #1
 8004d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f aeab 	bne.w	8004aac <HAL_GPIO_Init+0x10>
  }
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	40010000 	.word	0x40010000
 8004d68:	48000400 	.word	0x48000400
 8004d6c:	48000800 	.word	0x48000800
 8004d70:	48000c00 	.word	0x48000c00
 8004d74:	48001000 	.word	0x48001000
 8004d78:	58000800 	.word	0x58000800

08004d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	807b      	strh	r3, [r7, #2]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d8c:	787b      	ldrb	r3, [r7, #1]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d98:	e002      	b.n	8004da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d9a:	887a      	ldrh	r2, [r7, #2]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	43d9      	mvns	r1, r3
 8004dca:	887b      	ldrh	r3, [r7, #2]
 8004dcc:	400b      	ands	r3, r1
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	619a      	str	r2, [r3, #24]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dea:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d006      	beq.n	8004e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004df6:	4a05      	ldr	r2, [pc, #20]	; (8004e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fd fbba 	bl	8002578 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	58000800 	.word	0x58000800

08004e10 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <HAL_HSEM_IRQHandler+0x30>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <HAL_HSEM_IRQHandler+0x30>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	4906      	ldr	r1, [pc, #24]	; (8004e40 <HAL_HSEM_IRQHandler+0x30>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004e2a:	4a05      	ldr	r2, [pc, #20]	; (8004e40 <HAL_HSEM_IRQHandler+0x30>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f807 	bl	8004e44 <HAL_HSEM_FreeCallback>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	58001500 	.word	0x58001500

08004e44 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e081      	b.n	8004f6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f879 	bl	8004f76 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2224      	movs	r2, #36	; 0x24
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ea8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	e006      	b.n	8004ee0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ede:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d104      	bne.n	8004ef2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69d9      	ldr	r1, [r3, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	461a      	mov	r2, r3
 8004f98:	460b      	mov	r3, r1
 8004f9a:	817b      	strh	r3, [r7, #10]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	f040 80da 	bne.w	8005162 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_I2C_Master_Transmit+0x30>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0d3      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fc4:	f7ff f854 	bl	8004070 <HAL_GetTick>
 8004fc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2319      	movs	r3, #25
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f9e6 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0be      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2221      	movs	r2, #33	; 0x21
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	893a      	ldrh	r2, [r7, #8]
 8005006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2bff      	cmp	r3, #255	; 0xff
 8005016:	d90e      	bls.n	8005036 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	22ff      	movs	r2, #255	; 0xff
 800501c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	b2da      	uxtb	r2, r3
 8005024:	8979      	ldrh	r1, [r7, #10]
 8005026:	4b51      	ldr	r3, [pc, #324]	; (800516c <HAL_I2C_Master_Transmit+0x1e0>)
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fbdc 	bl	80057ec <I2C_TransferConfig>
 8005034:	e06c      	b.n	8005110 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005044:	b2da      	uxtb	r2, r3
 8005046:	8979      	ldrh	r1, [r7, #10]
 8005048:	4b48      	ldr	r3, [pc, #288]	; (800516c <HAL_I2C_Master_Transmit+0x1e0>)
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 fbcb 	bl	80057ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005056:	e05b      	b.n	8005110 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	6a39      	ldr	r1, [r7, #32]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f9e3 	bl	8005428 <I2C_WaitOnTXISFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e07b      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d034      	beq.n	8005110 <HAL_I2C_Master_Transmit+0x184>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d130      	bne.n	8005110 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f975 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e04d      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2bff      	cmp	r3, #255	; 0xff
 80050d0:	d90e      	bls.n	80050f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	8979      	ldrh	r1, [r7, #10]
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fb7f 	bl	80057ec <I2C_TransferConfig>
 80050ee:	e00f      	b.n	8005110 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	8979      	ldrh	r1, [r7, #10]
 8005102:	2300      	movs	r3, #0
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fb6e 	bl	80057ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d19e      	bne.n	8005058 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	6a39      	ldr	r1, [r7, #32]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f9c2 	bl	80054a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e01a      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2220      	movs	r2, #32
 8005134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_I2C_Master_Transmit+0x1e4>)
 8005142:	400b      	ands	r3, r1
 8005144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e000      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	80002000 	.word	0x80002000
 8005170:	fe00e800 	.word	0xfe00e800

08005174 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	461a      	mov	r2, r3
 8005180:	460b      	mov	r3, r1
 8005182:	817b      	strh	r3, [r7, #10]
 8005184:	4613      	mov	r3, r2
 8005186:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b20      	cmp	r3, #32
 8005192:	f040 80db 	bne.w	800534c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_I2C_Master_Receive+0x30>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0d4      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051ac:	f7fe ff60 	bl	8004070 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2319      	movs	r3, #25
 80051b8:	2201      	movs	r2, #1
 80051ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f8f2 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e0bf      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2222      	movs	r2, #34	; 0x22
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2210      	movs	r2, #16
 80051da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	893a      	ldrh	r2, [r7, #8]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2bff      	cmp	r3, #255	; 0xff
 80051fe:	d90e      	bls.n	800521e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	22ff      	movs	r2, #255	; 0xff
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	b2da      	uxtb	r2, r3
 800520c:	8979      	ldrh	r1, [r7, #10]
 800520e:	4b52      	ldr	r3, [pc, #328]	; (8005358 <HAL_I2C_Master_Receive+0x1e4>)
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fae8 	bl	80057ec <I2C_TransferConfig>
 800521c:	e06d      	b.n	80052fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522c:	b2da      	uxtb	r2, r3
 800522e:	8979      	ldrh	r1, [r7, #10]
 8005230:	4b49      	ldr	r3, [pc, #292]	; (8005358 <HAL_I2C_Master_Receive+0x1e4>)
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 fad7 	bl	80057ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800523e:	e05c      	b.n	80052fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f96b 	bl	8005520 <I2C_WaitOnRXNEFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e07c      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d034      	beq.n	80052fa <HAL_I2C_Master_Receive+0x186>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d130      	bne.n	80052fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f880 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e04d      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2bff      	cmp	r3, #255	; 0xff
 80052ba:	d90e      	bls.n	80052da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	22ff      	movs	r2, #255	; 0xff
 80052c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	8979      	ldrh	r1, [r7, #10]
 80052ca:	2300      	movs	r3, #0
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fa8a 	bl	80057ec <I2C_TransferConfig>
 80052d8:	e00f      	b.n	80052fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	8979      	ldrh	r1, [r7, #10]
 80052ec:	2300      	movs	r3, #0
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fa79 	bl	80057ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d19d      	bne.n	8005240 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	6a39      	ldr	r1, [r7, #32]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f8cd 	bl	80054a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e01a      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2220      	movs	r2, #32
 800531e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b0c      	ldr	r3, [pc, #48]	; (800535c <HAL_I2C_Master_Receive+0x1e8>)
 800532c:	400b      	ands	r3, r1
 800532e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	80002400 	.word	0x80002400
 800535c:	fe00e800 	.word	0xfe00e800

08005360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d103      	bne.n	800537e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d007      	beq.n	800539c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	619a      	str	r2, [r3, #24]
  }
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b8:	e022      	b.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d01e      	beq.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fe fe55 	bl	8004070 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d113      	bne.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e00f      	b.n	8005420 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	429a      	cmp	r2, r3
 800541c:	d0cd      	beq.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005434:	e02c      	b.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f8ea 	bl	8005614 <I2C_IsErrorOccurred>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e02a      	b.n	80054a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d01e      	beq.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fe fe0d 	bl	8004070 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d113      	bne.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d1cb      	bne.n	8005436 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b4:	e028      	b.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f8aa 	bl	8005614 <I2C_IsErrorOccurred>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e026      	b.n	8005518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ca:	f7fe fdd1 	bl	8004070 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d302      	bcc.n	80054e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d113      	bne.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e007      	b.n	8005518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d1cf      	bne.n	80054b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800552c:	e064      	b.n	80055f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f86e 	bl	8005614 <I2C_IsErrorOccurred>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e062      	b.n	8005608 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b20      	cmp	r3, #32
 800554e:	d138      	bne.n	80055c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b04      	cmp	r3, #4
 800555c:	d105      	bne.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e04e      	b.n	8005608 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b10      	cmp	r3, #16
 8005576:	d107      	bne.n	8005588 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2210      	movs	r2, #16
 800557e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2204      	movs	r2, #4
 8005584:	645a      	str	r2, [r3, #68]	; 0x44
 8005586:	e002      	b.n	800558e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2220      	movs	r2, #32
 8005594:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80055a2:	400b      	ands	r3, r1
 80055a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e022      	b.n	8005608 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c2:	f7fe fd55 	bl	8004070 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10f      	bne.n	80055f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e007      	b.n	8005608 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b04      	cmp	r3, #4
 8005604:	d193      	bne.n	800552e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	fe00e800 	.word	0xfe00e800

08005614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	; 0x28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d075      	beq.n	800572c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2210      	movs	r2, #16
 8005646:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005648:	e056      	b.n	80056f8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d052      	beq.n	80056f8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005652:	f7fe fd0d 	bl	8004070 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	429a      	cmp	r2, r3
 8005660:	d302      	bcc.n	8005668 <I2C_IsErrorOccurred+0x54>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d147      	bne.n	80056f8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005672:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800567a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568a:	d12e      	bne.n	80056ea <I2C_IsErrorOccurred+0xd6>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005692:	d02a      	beq.n	80056ea <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b20      	cmp	r3, #32
 8005698:	d027      	beq.n	80056ea <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056aa:	f7fe fce1 	bl	8004070 <HAL_GetTick>
 80056ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b0:	e01b      	b.n	80056ea <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056b2:	f7fe fcdd 	bl	8004070 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b19      	cmp	r3, #25
 80056be:	d914      	bls.n	80056ea <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d1dc      	bne.n	80056b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b20      	cmp	r3, #32
 8005704:	d003      	beq.n	800570e <I2C_IsErrorOccurred+0xfa>
 8005706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800570a:	2b00      	cmp	r3, #0
 800570c:	d09d      	beq.n	800564a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800570e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2220      	movs	r2, #32
 800571c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00b      	beq.n	8005778 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	f043 0308 	orr.w	r3, r3, #8
 8005766:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005770:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	f043 0302 	orr.w	r3, r3, #2
 8005788:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005792:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800579a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01c      	beq.n	80057dc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fddc 	bl	8005360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <I2C_IsErrorOccurred+0x1d4>)
 80057b4:	400b      	ands	r3, r1
 80057b6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	431a      	orrs	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80057dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3728      	adds	r7, #40	; 0x28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	fe00e800 	.word	0xfe00e800

080057ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	817b      	strh	r3, [r7, #10]
 80057fa:	4613      	mov	r3, r2
 80057fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057fe:	897b      	ldrh	r3, [r7, #10]
 8005800:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005804:	7a7b      	ldrb	r3, [r7, #9]
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800580c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	4313      	orrs	r3, r2
 8005816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800581a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	0d5b      	lsrs	r3, r3, #21
 8005826:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800582a:	4b08      	ldr	r3, [pc, #32]	; (800584c <I2C_TransferConfig+0x60>)
 800582c:	430b      	orrs	r3, r1
 800582e:	43db      	mvns	r3, r3
 8005830:	ea02 0103 	and.w	r1, r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	03ff63ff 	.word	0x03ff63ff

08005850 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b20      	cmp	r3, #32
 8005864:	d138      	bne.n	80058d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005870:	2302      	movs	r3, #2
 8005872:	e032      	b.n	80058da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6819      	ldr	r1, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d139      	bne.n	8005970 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005906:	2302      	movs	r3, #2
 8005908:	e033      	b.n	8005972 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2224      	movs	r2, #36	; 0x24
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005938:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4904      	ldr	r1, [pc, #16]	; (80059a0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	40010000 	.word	0x40010000

080059a4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01e      	beq.n	80059f4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <HAL_IPCC_Init+0x60>)
 80059b8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fe f876 	bl	8003ab8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80059cc:	68b8      	ldr	r0, [r7, #8]
 80059ce:	f000 f85b 	bl	8005a88 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f82c 	bl	8005a3c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80059f2:	e001      	b.n	80059f8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	58000c00 	.word	0x58000c00

08005a08 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e00f      	b.n	8005a6a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	4a0b      	ldr	r2, [pc, #44]	; (8005a80 <IPCC_SetDefaultCallbacks+0x44>)
 8005a54:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3306      	adds	r3, #6
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <IPCC_SetDefaultCallbacks+0x48>)
 8005a62:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3301      	adds	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d9ec      	bls.n	8005a4a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	08005a09 	.word	0x08005a09
 8005a84:	08005a23 	.word	0x08005a23

08005a88 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005a9c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	223f      	movs	r2, #63	; 0x3f
 8005aa2:	609a      	str	r2, [r3, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	; (8005acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abe:	6013      	str	r3, [r2, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	58000400 	.word	0x58000400

08005ad0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8005ae8:	4b04      	ldr	r3, [pc, #16]	; (8005afc <LL_EXTI_ReadFlag_0_31+0x1c>)
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4013      	ands	r3, r2
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	58000800 	.word	0x58000800

08005b00 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <LL_EXTI_ReadFlag_32_63+0x1c>)
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4013      	ands	r3, r2
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	58000800 	.word	0x58000800

08005b20 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005b28:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60d3      	str	r3, [r2, #12]
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	58000800 	.word	0x58000800

08005b40 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005b48:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	58000800 	.word	0x58000800

08005b60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	58000400 	.word	0x58000400

08005b7c <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8005b80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005b84:	f7ff ffac 	bl	8005ae0 <LL_EXTI_ReadFlag_0_31>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005b8e:	f7ff ff9f 	bl	8005ad0 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005b92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005b96:	f7ff ffc3 	bl	8005b20 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8005b9a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005b9e:	f7ff ff9f 	bl	8005ae0 <LL_EXTI_ReadFlag_0_31>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005ba8:	f000 f811 	bl	8005bce <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005bac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005bb0:	f7ff ffb6 	bl	8005b20 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	f7ff ffa3 	bl	8005b00 <LL_EXTI_ReadFlag_32_63>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8005bc0:	f000 f80c 	bl	8005bdc <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005bc4:	2002      	movs	r0, #2
 8005bc6:	f7ff ffbb 	bl	8005b40 <LL_EXTI_ClearFlag_32_63>
  }
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005bea:	b480      	push	{r7}
 8005bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfc:	d101      	bne.n	8005c02 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <LL_RCC_HSE_Enable>:
{
 8005c0e:	b480      	push	{r7}
 8005c10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c20:	6013      	str	r3, [r2, #0]
}
 8005c22:	bf00      	nop
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_RCC_HSE_Disable>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	6013      	str	r3, [r2, #0]
}
 8005c40:	bf00      	nop
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <LL_RCC_HSE_IsReady>:
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c5c:	d101      	bne.n	8005c62 <LL_RCC_HSE_IsReady+0x18>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <LL_RCC_HSE_IsReady+0x1a>
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_RCC_HSI_Enable>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c80:	6013      	str	r3, [r2, #0]
}
 8005c82:	bf00      	nop
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_HSI_Disable>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_RCC_HSI_IsReady>:
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbc:	d101      	bne.n	8005cc2 <LL_RCC_HSI_IsReady+0x18>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <LL_RCC_HSI_IsReady+0x1a>
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_HSI_SetCalibTrimming>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	604b      	str	r3, [r1, #4]
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_HSI48_Enable>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <LL_RCC_HSI48_Disable>:
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d32:	bf00      	nop
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_RCC_HSI48_IsReady>:
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d101      	bne.n	8005d54 <LL_RCC_HSI48_IsReady+0x18>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <LL_RCC_HSI48_IsReady+0x1a>
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <LL_RCC_LSE_Enable>:
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <LL_RCC_LSE_Disable>:
{
 8005d82:	b480      	push	{r7}
 8005d84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d92:	f023 0301 	bic.w	r3, r3, #1
 8005d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d9a:	bf00      	nop
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <LL_RCC_LSE_EnableBypass>:
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db4:	f043 0304 	orr.w	r3, r3, #4
 8005db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <LL_RCC_LSE_DisableBypass>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd6:	f023 0304 	bic.w	r3, r3, #4
 8005dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_RCC_LSE_IsReady>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d101      	bne.n	8005e00 <LL_RCC_LSE_IsReady+0x18>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <LL_RCC_LSE_IsReady+0x1a>
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <LL_RCC_LSI1_Enable>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <LL_RCC_LSI1_Disable>:
{
 8005e2e:	b480      	push	{r7}
 8005e30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <LL_RCC_LSI1_IsReady>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d101      	bne.n	8005e68 <LL_RCC_LSI1_IsReady+0x18>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <LL_RCC_LSI1_IsReady+0x1a>
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_RCC_LSI2_Enable>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e8c:	bf00      	nop
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <LL_RCC_LSI2_Disable>:
{
 8005e96:	b480      	push	{r7}
 8005e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea6:	f023 0304 	bic.w	r3, r3, #4
 8005eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005eae:	bf00      	nop
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <LL_RCC_LSI2_IsReady>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d101      	bne.n	8005ed0 <LL_RCC_LSI2_IsReady+0x18>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <LL_RCC_LSI2_IsReady+0x1a>
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <LL_RCC_LSI2_SetTrimming>:
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eec:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <LL_RCC_MSI_Enable>:
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	6013      	str	r3, [r2, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <LL_RCC_MSI_Disable>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	6013      	str	r3, [r2, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_RCC_MSI_IsReady>:
{
 8005f46:	b480      	push	{r7}
 8005f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d101      	bne.n	8005f5c <LL_RCC_MSI_IsReady+0x16>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <LL_RCC_MSI_IsReady+0x18>
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_MSI_SetRange>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_RCC_MSI_GetRange>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fa0:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2bb0      	cmp	r3, #176	; 0xb0
 8005fa6:	d901      	bls.n	8005fac <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005fa8:	23b0      	movs	r3, #176	; 0xb0
 8005faa:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005fac:	687b      	ldr	r3, [r7, #4]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_RCC_MSI_SetCalibTrimming>:
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	604b      	str	r3, [r1, #4]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_RCC_SetSysClkSource>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <LL_RCC_GetSysClkSource>:
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
}
 800601a:	4618      	mov	r0, r3
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <LL_RCC_SetAHBPrescaler>:
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800602c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4313      	orrs	r3, r2
 800603e:	608b      	str	r3, [r1, #8]
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <LL_C2_RCC_SetAHBPrescaler>:
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006058:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800605c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <LL_RCC_SetAHB4Prescaler>:
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006088:	f023 020f 	bic.w	r2, r3, #15
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	091b      	lsrs	r3, r3, #4
 8006090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <LL_RCC_SetAPB1Prescaler>:
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80060ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4313      	orrs	r3, r2
 80060c0:	608b      	str	r3, [r1, #8]
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <LL_RCC_SetAPB2Prescaler>:
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80060d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_GetAHBPrescaler>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006104:	4618      	mov	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <LL_RCC_GetAHB4Prescaler>:
{
 800610e:	b480      	push	{r7}
 8006110:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006116:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006120:	4618      	mov	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <LL_RCC_GetAPB1Prescaler>:
{
 800612a:	b480      	push	{r7}
 800612c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006138:	4618      	mov	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_RCC_GetAPB2Prescaler>:
{
 8006142:	b480      	push	{r7}
 8006144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800615a:	b480      	push	{r7}
 800615c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800615e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800616c:	6013      	str	r3, [r2, #0]
}
 800616e:	bf00      	nop
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800617c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800618a:	6013      	str	r3, [r2, #0]
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006196:	b480      	push	{r7}
 8006198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800619a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061a8:	d101      	bne.n	80061ae <LL_RCC_PLL_IsReady+0x18>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <LL_RCC_PLL_IsReady+0x1a>
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80061ba:	b480      	push	{r7}
 80061bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80061be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0303 	and.w	r3, r3, #3
}
 8006212:	4618      	mov	r0, r3
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622e:	d101      	bne.n	8006234 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006248:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800624c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006254:	d101      	bne.n	800625a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800626a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627a:	d101      	bne.n	8006280 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800629e:	d101      	bne.n	80062a4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80062b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062c2:	d101      	bne.n	80062c8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b08d      	sub	sp, #52	; 0x34
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e363      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 808d 	beq.w	800640e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f4:	f7ff fe8a 	bl	800600c <LL_RCC_GetSysClkSource>
 80062f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062fa:	f7ff ff83 	bl	8006204 <LL_RCC_PLL_GetMainSource>
 80062fe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <HAL_RCC_OscConfig+0x3e>
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	2b0c      	cmp	r3, #12
 800630a:	d147      	bne.n	800639c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2b01      	cmp	r3, #1
 8006310:	d144      	bne.n	800639c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e347      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006322:	f7ff fe35 	bl	8005f90 <LL_RCC_MSI_GetRange>
 8006326:	4603      	mov	r3, r0
 8006328:	429c      	cmp	r4, r3
 800632a:	d914      	bls.n	8006356 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fd2f 	bl	8006d94 <RCC_SetFlashLatencyFromMSIRange>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e336      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fe0f 	bl	8005f68 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fe33 	bl	8005fba <LL_RCC_MSI_SetCalibTrimming>
 8006354:	e013      	b.n	800637e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fe04 	bl	8005f68 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff fe28 	bl	8005fba <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fd10 	bl	8006d94 <RCC_SetFlashLatencyFromMSIRange>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e317      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800637e:	f000 fcc9 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006382:	4603      	mov	r3, r0
 8006384:	4aa4      	ldr	r2, [pc, #656]	; (8006618 <HAL_RCC_OscConfig+0x344>)
 8006386:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006388:	4ba4      	ldr	r3, [pc, #656]	; (800661c <HAL_RCC_OscConfig+0x348>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f7fd fe21 	bl	8003fd4 <HAL_InitTick>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d039      	beq.n	800640c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e308      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01e      	beq.n	80063e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063a4:	f7ff fdb1 	bl	8005f0a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063a8:	f7fd fe62 	bl	8004070 <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063b0:	f7fd fe5e 	bl	8004070 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e2f5      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80063c2:	f7ff fdc0 	bl	8005f46 <LL_RCC_MSI_IsReady>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f1      	beq.n	80063b0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fdc9 	bl	8005f68 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fded 	bl	8005fba <LL_RCC_MSI_SetCalibTrimming>
 80063e0:	e015      	b.n	800640e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063e2:	f7ff fda1 	bl	8005f28 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063e6:	f7fd fe43 	bl	8004070 <HAL_GetTick>
 80063ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80063ec:	e008      	b.n	8006400 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063ee:	f7fd fe3f 	bl	8004070 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e2d6      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006400:	f7ff fda1 	bl	8005f46 <LL_RCC_MSI_IsReady>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f1      	bne.n	80063ee <HAL_RCC_OscConfig+0x11a>
 800640a:	e000      	b.n	800640e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800640c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d047      	beq.n	80064aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800641a:	f7ff fdf7 	bl	800600c <LL_RCC_GetSysClkSource>
 800641e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006420:	f7ff fef0 	bl	8006204 <LL_RCC_PLL_GetMainSource>
 8006424:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d005      	beq.n	8006438 <HAL_RCC_OscConfig+0x164>
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d108      	bne.n	8006444 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2b03      	cmp	r3, #3
 8006436:	d105      	bne.n	8006444 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d134      	bne.n	80064aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e2b4      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644c:	d102      	bne.n	8006454 <HAL_RCC_OscConfig+0x180>
 800644e:	f7ff fbde 	bl	8005c0e <LL_RCC_HSE_Enable>
 8006452:	e001      	b.n	8006458 <HAL_RCC_OscConfig+0x184>
 8006454:	f7ff fbea 	bl	8005c2c <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d012      	beq.n	8006486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006460:	f7fd fe06 	bl	8004070 <HAL_GetTick>
 8006464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006468:	f7fd fe02 	bl	8004070 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	; 0x64
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e299      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800647a:	f7ff fbe6 	bl	8005c4a <LL_RCC_HSE_IsReady>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f1      	beq.n	8006468 <HAL_RCC_OscConfig+0x194>
 8006484:	e011      	b.n	80064aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fd fdf3 	bl	8004070 <HAL_GetTick>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648e:	f7fd fdef 	bl	8004070 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b64      	cmp	r3, #100	; 0x64
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e286      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80064a0:	f7ff fbd3 	bl	8005c4a <LL_RCC_HSE_IsReady>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f1      	bne.n	800648e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d04c      	beq.n	8006550 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b6:	f7ff fda9 	bl	800600c <LL_RCC_GetSysClkSource>
 80064ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064bc:	f7ff fea2 	bl	8006204 <LL_RCC_PLL_GetMainSource>
 80064c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d005      	beq.n	80064d4 <HAL_RCC_OscConfig+0x200>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d10e      	bne.n	80064ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d10b      	bne.n	80064ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e266      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fbf2 	bl	8005cce <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064ea:	e031      	b.n	8006550 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d019      	beq.n	8006528 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f4:	f7ff fbbb 	bl	8005c6e <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fd fdba 	bl	8004070 <HAL_GetTick>
 80064fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006500:	f7fd fdb6 	bl	8004070 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e24d      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006512:	f7ff fbca 	bl	8005caa <LL_RCC_HSI_IsReady>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f1      	beq.n	8006500 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fbd4 	bl	8005cce <LL_RCC_HSI_SetCalibTrimming>
 8006526:	e013      	b.n	8006550 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006528:	f7ff fbb0 	bl	8005c8c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652c:	f7fd fda0 	bl	8004070 <HAL_GetTick>
 8006530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006534:	f7fd fd9c 	bl	8004070 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e233      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006546:	f7ff fbb0 	bl	8005caa <LL_RCC_HSI_IsReady>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f1      	bne.n	8006534 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d106      	bne.n	800656a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80a3 	beq.w	80066b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d076      	beq.n	8006660 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	2b00      	cmp	r3, #0
 800657c:	d046      	beq.n	800660c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800657e:	f7ff fc67 	bl	8005e50 <LL_RCC_LSI1_IsReady>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d113      	bne.n	80065b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006588:	f7ff fc40 	bl	8005e0c <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800658c:	f7fd fd70 	bl	8004070 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006594:	f7fd fd6c 	bl	8004070 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e203      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80065a6:	f7ff fc53 	bl	8005e50 <LL_RCC_LSI1_IsReady>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f1      	beq.n	8006594 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80065b0:	f7ff fc60 	bl	8005e74 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b4:	f7fd fd5c 	bl	8004070 <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065bc:	f7fd fd58 	bl	8004070 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e1ef      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065ce:	f7ff fc73 	bl	8005eb8 <LL_RCC_LSI2_IsReady>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f1      	beq.n	80065bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fc7d 	bl	8005edc <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80065e2:	f7ff fc24 	bl	8005e2e <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e6:	f7fd fd43 	bl	8004070 <HAL_GetTick>
 80065ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065ee:	f7fd fd3f 	bl	8004070 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e1d6      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006600:	f7ff fc26 	bl	8005e50 <LL_RCC_LSI1_IsReady>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f1      	bne.n	80065ee <HAL_RCC_OscConfig+0x31a>
 800660a:	e051      	b.n	80066b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800660c:	f7ff fbfe 	bl	8005e0c <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fd fd2e 	bl	8004070 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006616:	e00c      	b.n	8006632 <HAL_RCC_OscConfig+0x35e>
 8006618:	2000002c 	.word	0x2000002c
 800661c:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006620:	f7fd fd26 	bl	8004070 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e1bd      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006632:	f7ff fc0d 	bl	8005e50 <LL_RCC_LSI1_IsReady>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f1      	beq.n	8006620 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800663c:	f7ff fc2b 	bl	8005e96 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006642:	f7fd fd15 	bl	8004070 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b03      	cmp	r3, #3
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e1ac      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006654:	f7ff fc30 	bl	8005eb8 <LL_RCC_LSI2_IsReady>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f1      	bne.n	8006642 <HAL_RCC_OscConfig+0x36e>
 800665e:	e027      	b.n	80066b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006660:	f7ff fc19 	bl	8005e96 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fd fd04 	bl	8004070 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800666c:	f7fd fd00 	bl	8004070 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b03      	cmp	r3, #3
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e197      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800667e:	f7ff fc1b 	bl	8005eb8 <LL_RCC_LSI2_IsReady>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f1      	bne.n	800666c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006688:	f7ff fbd1 	bl	8005e2e <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668c:	f7fd fcf0 	bl	8004070 <HAL_GetTick>
 8006690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006694:	f7fd fcec 	bl	8004070 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e183      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80066a6:	f7ff fbd3 	bl	8005e50 <LL_RCC_LSI1_IsReady>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f1      	bne.n	8006694 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d05b      	beq.n	8006774 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066bc:	4ba7      	ldr	r3, [pc, #668]	; (800695c <HAL_RCC_OscConfig+0x688>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d114      	bne.n	80066f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066c8:	f7ff f9f2 	bl	8005ab0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066cc:	f7fd fcd0 	bl	8004070 <HAL_GetTick>
 80066d0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d4:	f7fd fccc 	bl	8004070 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e163      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066e6:	4b9d      	ldr	r3, [pc, #628]	; (800695c <HAL_RCC_OscConfig+0x688>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d102      	bne.n	8006700 <HAL_RCC_OscConfig+0x42c>
 80066fa:	f7ff fb31 	bl	8005d60 <LL_RCC_LSE_Enable>
 80066fe:	e00c      	b.n	800671a <HAL_RCC_OscConfig+0x446>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b05      	cmp	r3, #5
 8006706:	d104      	bne.n	8006712 <HAL_RCC_OscConfig+0x43e>
 8006708:	f7ff fb4c 	bl	8005da4 <LL_RCC_LSE_EnableBypass>
 800670c:	f7ff fb28 	bl	8005d60 <LL_RCC_LSE_Enable>
 8006710:	e003      	b.n	800671a <HAL_RCC_OscConfig+0x446>
 8006712:	f7ff fb36 	bl	8005d82 <LL_RCC_LSE_Disable>
 8006716:	f7ff fb56 	bl	8005dc6 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d014      	beq.n	800674c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006722:	f7fd fca5 	bl	8004070 <HAL_GetTick>
 8006726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006728:	e00a      	b.n	8006740 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672a:	f7fd fca1 	bl	8004070 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f241 3288 	movw	r2, #5000	; 0x1388
 8006738:	4293      	cmp	r3, r2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e136      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006740:	f7ff fb52 	bl	8005de8 <LL_RCC_LSE_IsReady>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0ef      	beq.n	800672a <HAL_RCC_OscConfig+0x456>
 800674a:	e013      	b.n	8006774 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674c:	f7fd fc90 	bl	8004070 <HAL_GetTick>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006752:	e00a      	b.n	800676a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006754:	f7fd fc8c 	bl	8004070 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e121      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800676a:	f7ff fb3d 	bl	8005de8 <LL_RCC_LSE_IsReady>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1ef      	bne.n	8006754 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02c      	beq.n	80067da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d014      	beq.n	80067b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006788:	f7ff fab6 	bl	8005cf8 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678c:	f7fd fc70 	bl	8004070 <HAL_GetTick>
 8006790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006794:	f7fd fc6c 	bl	8004070 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e103      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80067a6:	f7ff fac9 	bl	8005d3c <LL_RCC_HSI48_IsReady>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f1      	beq.n	8006794 <HAL_RCC_OscConfig+0x4c0>
 80067b0:	e013      	b.n	80067da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067b2:	f7ff fab2 	bl	8005d1a <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b6:	f7fd fc5b 	bl	8004070 <HAL_GetTick>
 80067ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067be:	f7fd fc57 	bl	8004070 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e0ee      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067d0:	f7ff fab4 	bl	8005d3c <LL_RCC_HSI48_IsReady>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f1      	bne.n	80067be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80e4 	beq.w	80069ac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e4:	f7ff fc12 	bl	800600c <LL_RCC_GetSysClkSource>
 80067e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80067ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	f040 80b4 	bne.w	8006964 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f003 0203 	and.w	r2, r3, #3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	429a      	cmp	r2, r3
 8006808:	d123      	bne.n	8006852 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006814:	429a      	cmp	r2, r3
 8006816:	d11c      	bne.n	8006852 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	0a1b      	lsrs	r3, r3, #8
 800681c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d114      	bne.n	8006852 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d10d      	bne.n	8006852 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006840:	429a      	cmp	r2, r3
 8006842:	d106      	bne.n	8006852 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800684e:	429a      	cmp	r2, r3
 8006850:	d05d      	beq.n	800690e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b0c      	cmp	r3, #12
 8006856:	d058      	beq.n	800690a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e0a1      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800686a:	f7ff fc85 	bl	8006178 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800686e:	f7fd fbff 	bl	8004070 <HAL_GetTick>
 8006872:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006876:	f7fd fbfb 	bl	8004070 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e092      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ef      	bne.n	8006876 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	4b30      	ldr	r3, [pc, #192]	; (8006960 <HAL_RCC_OscConfig+0x68c>)
 800689e:	4013      	ands	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068a8:	4311      	orrs	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068ae:	0212      	lsls	r2, r2, #8
 80068b0:	4311      	orrs	r1, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80068b6:	4311      	orrs	r1, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068bc:	4311      	orrs	r1, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80068c2:	430a      	orrs	r2, r1
 80068c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068cc:	f7ff fc45 	bl	800615a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068e0:	f7fd fbc6 	bl	8004070 <HAL_GetTick>
 80068e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e8:	f7fd fbc2 	bl	8004070 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e059      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ef      	beq.n	80068e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006908:	e050      	b.n	80069ac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e04f      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800690e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d147      	bne.n	80069ac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800691c:	f7ff fc1d 	bl	800615a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800692a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006930:	f7fd fb9e 	bl	8004070 <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006938:	f7fd fb9a 	bl	8004070 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e031      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800694a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0ef      	beq.n	8006938 <HAL_RCC_OscConfig+0x664>
 8006958:	e028      	b.n	80069ac <HAL_RCC_OscConfig+0x6d8>
 800695a:	bf00      	nop
 800695c:	58000400 	.word	0x58000400
 8006960:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0c      	cmp	r3, #12
 8006968:	d01e      	beq.n	80069a8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800696a:	f7ff fc05 	bl	8006178 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fd fb7f 	bl	8004070 <HAL_GetTick>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006976:	f7fd fb7b 	bl	8004070 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e012      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ef      	bne.n	8006976 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_RCC_OscConfig+0x6e4>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	60cb      	str	r3, [r1, #12]
 80069a6:	e001      	b.n	80069ac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3734      	adds	r7, #52	; 0x34
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd90      	pop	{r4, r7, pc}
 80069b6:	bf00      	nop
 80069b8:	eefefffc 	.word	0xeefefffc

080069bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e12d      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069d0:	4b98      	ldr	r3, [pc, #608]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d91b      	bls.n	8006a16 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069de:	4b95      	ldr	r3, [pc, #596]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f023 0207 	bic.w	r2, r3, #7
 80069e6:	4993      	ldr	r1, [pc, #588]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ee:	f7fd fb3f 	bl	8004070 <HAL_GetTick>
 80069f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069f6:	f7fd fb3b 	bl	8004070 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e111      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a08:	4b8a      	ldr	r3, [pc, #552]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d1ef      	bne.n	80069f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d016      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fafc 	bl	8006024 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a2c:	f7fd fb20 	bl	8004070 <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a34:	f7fd fb1c 	bl	8004070 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e0f2      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a46:	f7ff fbe9 	bl	800621c <LL_RCC_IsActiveFlag_HPRE>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f1      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d016      	beq.n	8006a8a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff faf3 	bl	800604c <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a66:	f7fd fb03 	bl	8004070 <HAL_GetTick>
 8006a6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a6e:	f7fd faff 	bl	8004070 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e0d5      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a80:	f7ff fbde 	bl	8006240 <LL_RCC_IsActiveFlag_C2HPRE>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f1      	beq.n	8006a6e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff faec 	bl	8006078 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006aa0:	f7fd fae6 	bl	8004070 <HAL_GetTick>
 8006aa4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006aa8:	f7fd fae2 	bl	8004070 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e0b8      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006aba:	f7ff fbd4 	bl	8006266 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0f1      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d016      	beq.n	8006afe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fae6 	bl	80060a6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ada:	f7fd fac9 	bl	8004070 <HAL_GetTick>
 8006ade:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ae2:	f7fd fac5 	bl	8004070 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e09b      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006af4:	f7ff fbca 	bl	800628c <LL_RCC_IsActiveFlag_PPRE1>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f1      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fadc 	bl	80060ce <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b16:	f7fd faab 	bl	8004070 <HAL_GetTick>
 8006b1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b1e:	f7fd faa7 	bl	8004070 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e07d      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b30:	f7ff fbbe 	bl	80062b0 <LL_RCC_IsActiveFlag_PPRE2>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f1      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d043      	beq.n	8006bce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d106      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006b4e:	f7ff f87c 	bl	8005c4a <LL_RCC_HSE_IsReady>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11e      	bne.n	8006b96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e067      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d106      	bne.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006b64:	f7ff fb17 	bl	8006196 <LL_RCC_PLL_IsReady>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d113      	bne.n	8006b96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e05c      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b7a:	f7ff f9e4 	bl	8005f46 <LL_RCC_MSI_IsReady>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d108      	bne.n	8006b96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e051      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006b88:	f7ff f88f 	bl	8005caa <LL_RCC_HSI_IsReady>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e04a      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff fa22 	bl	8005fe4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba0:	f7fd fa66 	bl	8004070 <HAL_GetTick>
 8006ba4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba8:	f7fd fa62 	bl	8004070 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e036      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bbe:	f7ff fa25 	bl	800600c <LL_RCC_GetSysClkSource>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d1ec      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bce:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d21b      	bcs.n	8006c14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bdc:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f023 0207 	bic.w	r2, r3, #7
 8006be4:	4913      	ldr	r1, [pc, #76]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bec:	f7fd fa40 	bl	8004070 <HAL_GetTick>
 8006bf0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bf4:	f7fd fa3c 	bl	8004070 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e012      	b.n	8006c2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCC_ClockConfig+0x278>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d1ef      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006c14:	f000 f87e 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <HAL_RCC_ClockConfig+0x27c>)
 8006c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006c1e:	f7fd fa33 	bl	8004088 <HAL_GetTickPrio>
 8006c22:	4603      	mov	r3, r0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fd f9d5 	bl	8003fd4 <HAL_InitTick>
 8006c2a:	4603      	mov	r3, r0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	58004000 	.word	0x58004000
 8006c38:	2000002c 	.word	0x2000002c

08006c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c42:	f7ff f9e3 	bl	800600c <LL_RCC_GetSysClkSource>
 8006c46:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c4e:	f7ff f99f 	bl	8005f90 <LL_RCC_MSI_GetRange>
 8006c52:	4603      	mov	r3, r0
 8006c54:	091b      	lsrs	r3, r3, #4
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	4a2b      	ldr	r2, [pc, #172]	; (8006d08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e04b      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d102      	bne.n	8006c70 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c6a:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e045      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d10a      	bne.n	8006c8c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c76:	f7fe ffb8 	bl	8005bea <LL_RCC_HSE_IsEnabledDiv2>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d102      	bne.n	8006c86 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006c80:	4b22      	ldr	r3, [pc, #136]	; (8006d0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e03a      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006c86:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e037      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006c8c:	f7ff faba 	bl	8006204 <LL_RCC_PLL_GetMainSource>
 8006c90:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d003      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x64>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x6a>
 8006c9e:	e00d      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006ca0:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ca2:	60bb      	str	r3, [r7, #8]
        break;
 8006ca4:	e015      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006ca6:	f7fe ffa0 	bl	8005bea <LL_RCC_HSE_IsEnabledDiv2>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d102      	bne.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006cb0:	4b16      	ldr	r3, [pc, #88]	; (8006d0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006cb2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006cb4:	e00d      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006cb6:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006cb8:	60bb      	str	r3, [r7, #8]
        break;
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006cbc:	f7ff f968 	bl	8005f90 <LL_RCC_MSI_GetRange>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	091b      	lsrs	r3, r3, #4
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	4a0f      	ldr	r2, [pc, #60]	; (8006d08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cce:	60bb      	str	r3, [r7, #8]
        break;
 8006cd0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006cd2:	f7ff fa72 	bl	80061ba <LL_RCC_PLL_GetN>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	fb03 f402 	mul.w	r4, r3, r2
 8006cde:	f7ff fa85 	bl	80061ec <LL_RCC_PLL_GetDivider>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	fbb4 f4f3 	udiv	r4, r4, r3
 8006cec:	f7ff fa72 	bl	80061d4 <LL_RCC_PLL_GetR>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	0f5b      	lsrs	r3, r3, #29
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	fbb4 f3f3 	udiv	r3, r4, r3
 8006cfa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd90      	pop	{r4, r7, pc}
 8006d06:	bf00      	nop
 8006d08:	0800e1d4 	.word	0x0800e1d4
 8006d0c:	00f42400 	.word	0x00f42400
 8006d10:	01e84800 	.word	0x01e84800

08006d14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d14:	b598      	push	{r3, r4, r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006d18:	f7ff ff90 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	f7ff f9ea 	bl	80060f6 <LL_RCC_GetAHBPrescaler>
 8006d22:	4603      	mov	r3, r0
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	4a03      	ldr	r2, [pc, #12]	; (8006d38 <HAL_RCC_GetHCLKFreq+0x24>)
 8006d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	bd98      	pop	{r3, r4, r7, pc}
 8006d38:	0800e174 	.word	0x0800e174

08006d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d3c:	b598      	push	{r3, r4, r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d40:	f7ff ffe8 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006d44:	4604      	mov	r4, r0
 8006d46:	f7ff f9f0 	bl	800612a <LL_RCC_GetAPB1Prescaler>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	bd98      	pop	{r3, r4, r7, pc}
 8006d64:	0800e1b4 	.word	0x0800e1b4

08006d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d68:	b598      	push	{r3, r4, r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006d6c:	f7ff ffd2 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006d70:	4604      	mov	r4, r0
 8006d72:	f7ff f9e6 	bl	8006142 <LL_RCC_GetAPB2Prescaler>
 8006d76:	4603      	mov	r3, r0
 8006d78:	0adb      	lsrs	r3, r3, #11
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	4a04      	ldr	r2, [pc, #16]	; (8006d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd98      	pop	{r3, r4, r7, pc}
 8006d90:	0800e1b4 	.word	0x0800e1b4

08006d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d94:	b590      	push	{r4, r7, lr}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2bb0      	cmp	r3, #176	; 0xb0
 8006da0:	d903      	bls.n	8006daa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e007      	b.n	8006dba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006dba:	f7ff f9a8 	bl	800610e <LL_RCC_GetAHB4Prescaler>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	; (8006e00 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ddc:	0c9c      	lsrs	r4, r3, #18
 8006dde:	f7fe febf 	bl	8005b60 <HAL_PWREx_GetVoltageRange>
 8006de2:	4603      	mov	r3, r0
 8006de4:	4619      	mov	r1, r3
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 f80c 	bl	8006e04 <RCC_SetFlashLatency>
 8006dec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd90      	pop	{r4, r7, pc}
 8006df6:	bf00      	nop
 8006df8:	0800e1d4 	.word	0x0800e1d4
 8006dfc:	0800e174 	.word	0x0800e174
 8006e00:	431bde83 	.word	0x431bde83

08006e04 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b093      	sub	sp, #76	; 0x4c
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <RCC_SetFlashLatency+0xe8>)
 8006e10:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006e1a:	4a35      	ldr	r2, [pc, #212]	; (8006ef0 <RCC_SetFlashLatency+0xec>)
 8006e1c:	f107 031c 	add.w	r3, r7, #28
 8006e20:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006e26:	4b33      	ldr	r3, [pc, #204]	; (8006ef4 <RCC_SetFlashLatency+0xf0>)
 8006e28:	f107 040c 	add.w	r4, r7, #12
 8006e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006e32:	2300      	movs	r3, #0
 8006e34:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3c:	d11a      	bne.n	8006e74 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	643b      	str	r3, [r7, #64]	; 0x40
 8006e42:	e013      	b.n	8006e6c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	3348      	adds	r3, #72	; 0x48
 8006e4a:	443b      	add	r3, r7
 8006e4c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d807      	bhi.n	8006e66 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	3348      	adds	r3, #72	; 0x48
 8006e5c:	443b      	add	r3, r7
 8006e5e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e62:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e64:	e020      	b.n	8006ea8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e68:	3301      	adds	r3, #1
 8006e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d9e8      	bls.n	8006e44 <RCC_SetFlashLatency+0x40>
 8006e72:	e019      	b.n	8006ea8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e78:	e013      	b.n	8006ea2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	3348      	adds	r3, #72	; 0x48
 8006e80:	443b      	add	r3, r7
 8006e82:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d807      	bhi.n	8006e9c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	3348      	adds	r3, #72	; 0x48
 8006e92:	443b      	add	r3, r7
 8006e94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e98:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e9a:	e005      	b.n	8006ea8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d9e8      	bls.n	8006e7a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006ea8:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <RCC_SetFlashLatency+0xf4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f023 0207 	bic.w	r2, r3, #7
 8006eb0:	4911      	ldr	r1, [pc, #68]	; (8006ef8 <RCC_SetFlashLatency+0xf4>)
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006eb8:	f7fd f8da 	bl	8004070 <HAL_GetTick>
 8006ebc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ebe:	e008      	b.n	8006ed2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ec0:	f7fd f8d6 	bl	8004070 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e007      	b.n	8006ee2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <RCC_SetFlashLatency+0xf4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d1ef      	bne.n	8006ec0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	374c      	adds	r7, #76	; 0x4c
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd90      	pop	{r4, r7, pc}
 8006eea:	bf00      	nop
 8006eec:	0800e120 	.word	0x0800e120
 8006ef0:	0800e130 	.word	0x0800e130
 8006ef4:	0800e13c 	.word	0x0800e13c
 8006ef8:	58004000 	.word	0x58004000

08006efc <LL_RCC_LSE_IsEnabled>:
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <LL_RCC_LSE_IsEnabled+0x18>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <LL_RCC_LSE_IsEnabled+0x1a>
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <LL_RCC_LSE_IsReady>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d101      	bne.n	8006f38 <LL_RCC_LSE_IsReady+0x18>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <LL_RCC_LSE_IsReady+0x1a>
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <LL_RCC_SetRFWKPClockSource>:
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <LL_RCC_SetSMPSClockSource>:
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f023 0203 	bic.w	r2, r3, #3
 8006f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_RCC_SetSMPSPrescaler>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <LL_RCC_SetUSARTClockSource>:
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f023 0203 	bic.w	r2, r3, #3
 8006fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <LL_RCC_SetLPUARTClockSource>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <LL_RCC_SetI2CClockSource>:
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007024:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	091b      	lsrs	r3, r3, #4
 800702c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800703c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <LL_RCC_SetLPTIMClockSource>:
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800705a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	0c1b      	lsrs	r3, r3, #16
 8007066:	041b      	lsls	r3, r3, #16
 8007068:	43db      	mvns	r3, r3
 800706a:	401a      	ands	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	041b      	lsls	r3, r3, #16
 8007070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <LL_RCC_SetSAIClockSource>:
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800708e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800709a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <LL_RCC_SetRNGClockSource>:
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80070ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80070c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <LL_RCC_SetCLK48ClockSource>:
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80070e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <LL_RCC_SetUSBClockSource>:
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff ffe3 	bl	80070de <LL_RCC_SetCLK48ClockSource>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <LL_RCC_SetADCClockSource>:
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007130:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <LL_RCC_SetRTCClockSource>:
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <LL_RCC_GetRTCClockSource>:
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800717c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007184:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007188:	4618      	mov	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_RCC_ForceBackupDomainReset>:
{
 8007192:	b480      	push	{r7}
 8007194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80071b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071cc:	bf00      	nop
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <LL_RCC_PLLSAI1_Enable>:
{
 80071d6:	b480      	push	{r7}
 80071d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071e8:	6013      	str	r3, [r2, #0]
}
 80071ea:	bf00      	nop
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <LL_RCC_PLLSAI1_Disable>:
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007206:	6013      	str	r3, [r2, #0]
}
 8007208:	bf00      	nop
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <LL_RCC_PLLSAI1_IsReady>:
{
 8007212:	b480      	push	{r7}
 8007214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007224:	d101      	bne.n	800722a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b088      	sub	sp, #32
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800723e:	2300      	movs	r3, #0
 8007240:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007242:	2300      	movs	r3, #0
 8007244:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d034      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800725a:	d021      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800725c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007260:	d81b      	bhi.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007266:	d01d      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800726c:	d815      	bhi.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007276:	d110      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007286:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007288:	e00d      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f947 	bl	8007522 <RCCEx_PLLSAI1_ConfigNP>
 8007294:	4603      	mov	r3, r0
 8007296:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007298:	e005      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	77fb      	strb	r3, [r7, #31]
        break;
 800729e:	e002      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072a0:	bf00      	nop
 80072a2:	e000      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a6:	7ffb      	ldrb	r3, [r7, #31]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff fee8 	bl	8007086 <LL_RCC_SetSAIClockSource>
 80072b6:	e001      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	7ffb      	ldrb	r3, [r7, #31]
 80072ba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d046      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80072c8:	f7ff ff56 	bl	8007178 <LL_RCC_GetRTCClockSource>
 80072cc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d03c      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80072d8:	f7fe fbea 	bl	8005ab0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ff30 	bl	800714c <LL_RCC_SetRTCClockSource>
 80072ec:	e02e      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80072ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80072f8:	f7ff ff4b 	bl	8007192 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80072fc:	f7ff ff5a 	bl	80071b4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800730e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007318:	f7ff fdf0 	bl	8006efc <LL_RCC_LSE_IsEnabled>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d114      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007322:	f7fc fea5 	bl	8004070 <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007328:	e00b      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732a:	f7fc fea1 	bl	8004070 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	f241 3288 	movw	r2, #5000	; 0x1388
 8007338:	4293      	cmp	r3, r2
 800733a:	d902      	bls.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	77fb      	strb	r3, [r7, #31]
              break;
 8007340:	e004      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007342:	f7ff fded 	bl	8006f20 <LL_RCC_LSE_IsReady>
 8007346:	4603      	mov	r3, r0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d1ee      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800734c:	7ffb      	ldrb	r3, [r7, #31]
 800734e:	77bb      	strb	r3, [r7, #30]
 8007350:	e001      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007352:	7ffb      	ldrb	r3, [r7, #31]
 8007354:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fe2a 	bl	8006fc0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fe35 	bl	8006fec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fe5d 	bl	8007052 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0320 	and.w	r3, r3, #32
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d004      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff fe52 	bl	8007052 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fe2a 	bl	8007018 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fe1f 	bl	8007018 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d022      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fe8d 	bl	800710a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f8:	d107      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80073fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007408:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007412:	d10b      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3304      	adds	r3, #4
 8007418:	4618      	mov	r0, r3
 800741a:	f000 f8dd 	bl	80075d8 <RCCEx_PLLSAI1_ConfigNQ>
 800741e:	4603      	mov	r3, r0
 8007420:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007422:	7ffb      	ldrb	r3, [r7, #31]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007428:	7ffb      	ldrb	r3, [r7, #31]
 800742a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007434:	2b00      	cmp	r3, #0
 8007436:	d02b      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007440:	d008      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800744a:	d003      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff fe2a 	bl	80070b2 <LL_RCC_SetRNGClockSource>
 800745e:	e00a      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	2000      	movs	r0, #0
 800746c:	f7ff fe21 	bl	80070b2 <LL_RCC_SetRNGClockSource>
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f7ff fe34 	bl	80070de <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800747e:	d107      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800748a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800748e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007498:	2b00      	cmp	r3, #0
 800749a:	d022      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff fe3d 	bl	8007120 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ae:	d107      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074be:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c8:	d10b      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3304      	adds	r3, #4
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f8dd 	bl	800768e <RCCEx_PLLSAI1_ConfigNR>
 80074d4:	4603      	mov	r3, r0
 80074d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80074d8:	7ffb      	ldrb	r3, [r7, #31]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80074de:	7ffb      	ldrb	r3, [r7, #31]
 80074e0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fd26 	bl	8006f44 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fd45 	bl	8006f98 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff fd2c 	bl	8006f70 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007518:	7fbb      	ldrb	r3, [r7, #30]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800752e:	f7ff fe61 	bl	80071f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007532:	f7fc fd9d 	bl	8004070 <HAL_GetTick>
 8007536:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007538:	e009      	b.n	800754e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800753a:	f7fc fd99 	bl	8004070 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d902      	bls.n	800754e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	73fb      	strb	r3, [r7, #15]
      break;
 800754c:	e004      	b.n	8007558 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800754e:	f7ff fe60 	bl	8007212 <LL_RCC_PLLSAI1_IsReady>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d137      	bne.n	80075ce <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800755e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007572:	4313      	orrs	r3, r2
 8007574:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007588:	4313      	orrs	r3, r2
 800758a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800758c:	f7ff fe23 	bl	80071d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007590:	f7fc fd6e 	bl	8004070 <HAL_GetTick>
 8007594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007596:	e009      	b.n	80075ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007598:	f7fc fd6a 	bl	8004070 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d902      	bls.n	80075ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	73fb      	strb	r3, [r7, #15]
        break;
 80075aa:	e004      	b.n	80075b6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075ac:	f7ff fe31 	bl	8007212 <LL_RCC_PLLSAI1_IsReady>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d1f0      	bne.n	8007598 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80075bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075ca:	4313      	orrs	r3, r2
 80075cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80075e4:	f7ff fe06 	bl	80071f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075e8:	f7fc fd42 	bl	8004070 <HAL_GetTick>
 80075ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075ee:	e009      	b.n	8007604 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075f0:	f7fc fd3e 	bl	8004070 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d902      	bls.n	8007604 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	73fb      	strb	r3, [r7, #15]
      break;
 8007602:	e004      	b.n	800760e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007604:	f7ff fe05 	bl	8007212 <LL_RCC_PLLSAI1_IsReady>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d137      	bne.n	8007684 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007628:	4313      	orrs	r3, r2
 800762a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800762c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800763e:	4313      	orrs	r3, r2
 8007640:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007642:	f7ff fdc8 	bl	80071d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007646:	f7fc fd13 	bl	8004070 <HAL_GetTick>
 800764a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800764c:	e009      	b.n	8007662 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800764e:	f7fc fd0f 	bl	8004070 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d902      	bls.n	8007662 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	73fb      	strb	r3, [r7, #15]
        break;
 8007660:	e004      	b.n	800766c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007662:	f7ff fdd6 	bl	8007212 <LL_RCC_PLLSAI1_IsReady>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d1f0      	bne.n	800764e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d108      	bne.n	8007684 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007680:	4313      	orrs	r3, r2
 8007682:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800769a:	f7ff fdab 	bl	80071f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800769e:	f7fc fce7 	bl	8004070 <HAL_GetTick>
 80076a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076a4:	e009      	b.n	80076ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076a6:	f7fc fce3 	bl	8004070 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d902      	bls.n	80076ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	73fb      	strb	r3, [r7, #15]
      break;
 80076b8:	e004      	b.n	80076c4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076ba:	f7ff fdaa 	bl	8007212 <LL_RCC_PLLSAI1_IsReady>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1f0      	bne.n	80076a6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d137      	bne.n	800773a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80076ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076de:	4313      	orrs	r3, r2
 80076e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80076e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076f4:	4313      	orrs	r3, r2
 80076f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80076f8:	f7ff fd6d 	bl	80071d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fc:	f7fc fcb8 	bl	8004070 <HAL_GetTick>
 8007700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007702:	e009      	b.n	8007718 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007704:	f7fc fcb4 	bl	8004070 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d902      	bls.n	8007718 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	73fb      	strb	r3, [r7, #15]
        break;
 8007716:	e004      	b.n	8007722 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007718:	f7ff fd7b 	bl	8007212 <LL_RCC_PLLSAI1_IsReady>
 800771c:	4603      	mov	r3, r0
 800771e:	2b01      	cmp	r3, #1
 8007720:	d1f0      	bne.n	8007704 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d108      	bne.n	800773a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007736:	4313      	orrs	r3, r2
 8007738:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800773a:	7bfb      	ldrb	r3, [r7, #15]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e09f      	b.n	8007896 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fc faba 	bl	8003ce4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007778:	4b49      	ldr	r3, [pc, #292]	; (80078a0 <HAL_RTC_Init+0x15c>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b10      	cmp	r3, #16
 8007782:	d07e      	beq.n	8007882 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	22ca      	movs	r2, #202	; 0xca
 800778a:	625a      	str	r2, [r3, #36]	; 0x24
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2253      	movs	r2, #83	; 0x53
 8007792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f8ab 	bl	80078f0 <RTC_EnterInitMode>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2204      	movs	r2, #4
 80077ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e067      	b.n	8007886 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6899      	ldr	r1, [r3, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	68d2      	ldr	r2, [r2, #12]
 80077f0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6919      	ldr	r1, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	041a      	lsls	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007814:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0203 	bic.w	r2, r2, #3
 8007824:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d113      	bne.n	8007874 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f829 	bl	80078a4 <HAL_RTC_WaitForSynchro>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00d      	beq.n	8007874 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2204      	movs	r2, #4
 8007864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e010      	b.n	8007896 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	22ff      	movs	r2, #255	; 0xff
 800787a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
 8007880:	e001      	b.n	8007886 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40002800 	.word	0x40002800

080078a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80078bc:	f7fc fbd8 	bl	8004070 <HAL_GetTick>
 80078c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078c2:	e009      	b.n	80078d8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078c4:	f7fc fbd4 	bl	8004070 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078d2:	d901      	bls.n	80078d8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e007      	b.n	80078e8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0ee      	beq.n	80078c4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	d119      	bne.n	800793a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f04f 32ff 	mov.w	r2, #4294967295
 800790e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007910:	f7fc fbae 	bl	8004070 <HAL_GetTick>
 8007914:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007916:	e009      	b.n	800792c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007918:	f7fc fbaa 	bl	8004070 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007926:	d901      	bls.n	800792c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e007      	b.n	800793c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0ee      	beq.n	8007918 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800795a:	2302      	movs	r3, #2
 800795c:	e0a8      	b.n	8007ab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	22ca      	movs	r2, #202	; 0xca
 8007974:	625a      	str	r2, [r3, #36]	; 0x24
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2253      	movs	r2, #83	; 0x53
 800797c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007988:	2b00      	cmp	r3, #0
 800798a:	d020      	beq.n	80079ce <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800798c:	f7fc fb70 	bl	8004070 <HAL_GetTick>
 8007990:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007992:	e015      	b.n	80079c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007994:	f7fc fb6c 	bl	8004070 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079a2:	d90d      	bls.n	80079c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	22ff      	movs	r2, #255	; 0xff
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2203      	movs	r2, #3
 80079b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e077      	b.n	8007ab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e2      	bne.n	8007994 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079dc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80079ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80079f0:	f7fc fb3e 	bl	8004070 <HAL_GetTick>
 80079f4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80079f6:	e015      	b.n	8007a24 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079f8:	f7fc fb3a 	bl	8004070 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a06:	d90d      	bls.n	8007a24 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	22ff      	movs	r2, #255	; 0xff
 8007a0e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2203      	movs	r2, #3
 8007a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e045      	b.n	8007ab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0e2      	beq.n	80079f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0207 	bic.w	r2, r2, #7
 8007a48:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6899      	ldr	r1, [r3, #8]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007a5a:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a60:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a12      	ldr	r2, [pc, #72]	; (8007ab8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a74:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a84:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a94:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	22ff      	movs	r2, #255	; 0xff
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	58000800 	.word	0x58000800

08007abc <LL_RCC_GetUSARTClockSource>:
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4013      	ands	r3, r2
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <LL_RCC_GetLPUARTClockSource>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4013      	ands	r3, r2
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e042      	b.n	8007b94 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fb ffed 	bl	8003b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2224      	movs	r2, #36	; 0x24
 8007b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fc46 	bl	80083d0 <UART_SetConfig>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e022      	b.n	8007b94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fe62 	bl	8008820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fee9 	bl	8008964 <UART_CheckIdleState>
 8007b92:	4603      	mov	r3, r0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b091      	sub	sp, #68	; 0x44
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d178      	bne.n	8007ca6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HAL_UART_Transmit_IT+0x24>
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e071      	b.n	8007ca8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	88fa      	ldrh	r2, [r7, #6]
 8007bce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	88fa      	ldrh	r2, [r7, #6]
 8007bd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2221      	movs	r2, #33	; 0x21
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf8:	d12a      	bne.n	8007c50 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c02:	d107      	bne.n	8007c14 <HAL_UART_Transmit_IT+0x78>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4a29      	ldr	r2, [pc, #164]	; (8007cb4 <HAL_UART_Transmit_IT+0x118>)
 8007c10:	679a      	str	r2, [r3, #120]	; 0x78
 8007c12:	e002      	b.n	8007c1a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a28      	ldr	r2, [pc, #160]	; (8007cb8 <HAL_UART_Transmit_IT+0x11c>)
 8007c18:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3a:	637a      	str	r2, [r7, #52]	; 0x34
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e5      	bne.n	8007c1a <HAL_UART_Transmit_IT+0x7e>
 8007c4e:	e028      	b.n	8007ca2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c58:	d107      	bne.n	8007c6a <HAL_UART_Transmit_IT+0xce>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a15      	ldr	r2, [pc, #84]	; (8007cbc <HAL_UART_Transmit_IT+0x120>)
 8007c66:	679a      	str	r2, [r3, #120]	; 0x78
 8007c68:	e002      	b.n	8007c70 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <HAL_UART_Transmit_IT+0x124>)
 8007c6e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8e:	623b      	str	r3, [r7, #32]
 8007c90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	69f9      	ldr	r1, [r7, #28]
 8007c94:	6a3a      	ldr	r2, [r7, #32]
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e6      	bne.n	8007c70 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3744      	adds	r7, #68	; 0x44
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	08009127 	.word	0x08009127
 8007cb8:	08009047 	.word	0x08009047
 8007cbc:	08008f85 	.word	0x08008f85
 8007cc0:	08008ecd 	.word	0x08008ecd

08007cc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d137      	bne.n	8007d4c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <HAL_UART_Receive_IT+0x24>
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e030      	b.n	8007d4e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a18      	ldr	r2, [pc, #96]	; (8007d58 <HAL_UART_Receive_IT+0x94>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d01f      	beq.n	8007d3c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d018      	beq.n	8007d3c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	613b      	str	r3, [r7, #16]
   return(result);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	623b      	str	r3, [r7, #32]
 8007d2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	69f9      	ldr	r1, [r7, #28]
 8007d2e:	6a3a      	ldr	r2, [r7, #32]
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e6      	bne.n	8007d0a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 ff24 	bl	8008b90 <UART_Start_Receive_IT>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	e000      	b.n	8007d4e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d4c:	2302      	movs	r3, #2
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3728      	adds	r7, #40	; 0x28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40008000 	.word	0x40008000

08007d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b0ba      	sub	sp, #232	; 0xe8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d86:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11b      	bne.n	8007dd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9c:	f003 0320 	and.w	r3, r3, #32
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d015      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da8:	f003 0320 	and.w	r3, r3, #32
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d105      	bne.n	8007dbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d009      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 82e3 	beq.w	800838c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4798      	blx	r3
      }
      return;
 8007dce:	e2dd      	b.n	800838c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8123 	beq.w	8008020 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007dde:	4b8d      	ldr	r3, [pc, #564]	; (8008014 <HAL_UART_IRQHandler+0x2b8>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007de6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007dea:	4b8b      	ldr	r3, [pc, #556]	; (8008018 <HAL_UART_IRQHandler+0x2bc>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 8116 	beq.w	8008020 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d011      	beq.n	8007e24 <HAL_UART_IRQHandler+0xc8>
 8007e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2201      	movs	r2, #1
 8007e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1a:	f043 0201 	orr.w	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d011      	beq.n	8007e54 <HAL_UART_IRQHandler+0xf8>
 8007e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2202      	movs	r2, #2
 8007e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4a:	f043 0204 	orr.w	r2, r3, #4
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d011      	beq.n	8007e84 <HAL_UART_IRQHandler+0x128>
 8007e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00b      	beq.n	8007e84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2204      	movs	r2, #4
 8007e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7a:	f043 0202 	orr.w	r2, r3, #2
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d017      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ea0:	4b5c      	ldr	r3, [pc, #368]	; (8008014 <HAL_UART_IRQHandler+0x2b8>)
 8007ea2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2208      	movs	r2, #8
 8007eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb6:	f043 0208 	orr.w	r2, r3, #8
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d012      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x196>
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00c      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee8:	f043 0220 	orr.w	r2, r3, #32
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8249 	beq.w	8008390 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d013      	beq.n	8007f32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d105      	bne.n	8007f22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d005      	beq.n	8007f56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d054      	beq.n	8008000 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 ff3c 	bl	8008dd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	d146      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1d9      	bne.n	8007f6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d017      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fc6:	4a15      	ldr	r2, [pc, #84]	; (800801c <HAL_UART_IRQHandler+0x2c0>)
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fc fb32 	bl	800463a <HAL_DMA_Abort_IT>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d019      	beq.n	8008010 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007fea:	4610      	mov	r0, r2
 8007fec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fee:	e00f      	b.n	8008010 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f9d7 	bl	80083a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	e00b      	b.n	8008010 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9d3 	bl	80083a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffe:	e007      	b.n	8008010 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9cf 	bl	80083a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800800e:	e1bf      	b.n	8008390 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	bf00      	nop
    return;
 8008012:	e1bd      	b.n	8008390 <HAL_UART_IRQHandler+0x634>
 8008014:	10000001 	.word	0x10000001
 8008018:	04000120 	.word	0x04000120
 800801c:	08008ea1 	.word	0x08008ea1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008024:	2b01      	cmp	r3, #1
 8008026:	f040 8153 	bne.w	80082d0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800802a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 814c 	beq.w	80082d0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8145 	beq.w	80082d0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2210      	movs	r2, #16
 800804c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	f040 80bb 	bne.w	80081d4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800806c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 818f 	beq.w	8008394 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800807c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008080:	429a      	cmp	r2, r3
 8008082:	f080 8187 	bcs.w	8008394 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800808c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 8087 	bne.w	80081b2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1da      	bne.n	80080a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3308      	adds	r3, #8
 80080f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3308      	adds	r3, #8
 800810e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008112:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008116:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800811a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e1      	bne.n	80080ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3308      	adds	r3, #8
 8008130:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800813a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800813c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3308      	adds	r3, #8
 800814a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800814e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800815c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e3      	bne.n	800812a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800817e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008180:	f023 0310 	bic.w	r3, r3, #16
 8008184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008192:	65bb      	str	r3, [r7, #88]	; 0x58
 8008194:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e4      	bne.n	8008170 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fc f9e5 	bl	800457c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2202      	movs	r2, #2
 80081b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f8f3 	bl	80083b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081d2:	e0df      	b.n	8008394 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 80d1 	beq.w	8008398 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80081f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80cc 	beq.w	8008398 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008222:	647b      	str	r3, [r7, #68]	; 0x44
 8008224:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e4      	bne.n	8008200 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	623b      	str	r3, [r7, #32]
   return(result);
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3308      	adds	r3, #8
 800825a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800825e:	633a      	str	r2, [r7, #48]	; 0x30
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e1      	bne.n	8008236 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	60fb      	str	r3, [r7, #12]
   return(result);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	69b9      	ldr	r1, [r7, #24]
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	617b      	str	r3, [r7, #20]
   return(result);
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e4      	bne.n	8008286 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f875 	bl	80083b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082ce:	e063      	b.n	8008398 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00e      	beq.n	80082fa <HAL_UART_IRQHandler+0x59e>
 80082dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fcd4 	bl	8009ca0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082f8:	e051      	b.n	800839e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80082fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008302:	2b00      	cmp	r3, #0
 8008304:	d014      	beq.n	8008330 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830e:	2b00      	cmp	r3, #0
 8008310:	d105      	bne.n	800831e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008322:	2b00      	cmp	r3, #0
 8008324:	d03a      	beq.n	800839c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
    }
    return;
 800832e:	e035      	b.n	800839c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d009      	beq.n	8008350 <HAL_UART_IRQHandler+0x5f4>
 800833c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 ff61 	bl	8009210 <UART_EndTransmit_IT>
    return;
 800834e:	e026      	b.n	800839e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <HAL_UART_IRQHandler+0x614>
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008360:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 fcad 	bl	8009cc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800836e:	e016      	b.n	800839e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d010      	beq.n	800839e <HAL_UART_IRQHandler+0x642>
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008380:	2b00      	cmp	r3, #0
 8008382:	da0c      	bge.n	800839e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 fc95 	bl	8009cb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800838a:	e008      	b.n	800839e <HAL_UART_IRQHandler+0x642>
      return;
 800838c:	bf00      	nop
 800838e:	e006      	b.n	800839e <HAL_UART_IRQHandler+0x642>
    return;
 8008390:	bf00      	nop
 8008392:	e004      	b.n	800839e <HAL_UART_IRQHandler+0x642>
      return;
 8008394:	bf00      	nop
 8008396:	e002      	b.n	800839e <HAL_UART_IRQHandler+0x642>
      return;
 8008398:	bf00      	nop
 800839a:	e000      	b.n	800839e <HAL_UART_IRQHandler+0x642>
    return;
 800839c:	bf00      	nop
  }
}
 800839e:	37e8      	adds	r7, #232	; 0xe8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083d4:	b08c      	sub	sp, #48	; 0x30
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	431a      	orrs	r2, r3
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4baf      	ldr	r3, [pc, #700]	; (80086bc <UART_SetConfig+0x2ec>)
 8008400:	4013      	ands	r3, r2
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	6812      	ldr	r2, [r2, #0]
 8008406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008408:	430b      	orrs	r3, r1
 800840a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4aa4      	ldr	r2, [pc, #656]	; (80086c0 <UART_SetConfig+0x2f0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008438:	4313      	orrs	r3, r2
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008446:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008450:	430b      	orrs	r3, r1
 8008452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	f023 010f 	bic.w	r1, r3, #15
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a95      	ldr	r2, [pc, #596]	; (80086c4 <UART_SetConfig+0x2f4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d125      	bne.n	80084c0 <UART_SetConfig+0xf0>
 8008474:	2003      	movs	r0, #3
 8008476:	f7ff fb21 	bl	8007abc <LL_RCC_GetUSARTClockSource>
 800847a:	4603      	mov	r3, r0
 800847c:	2b03      	cmp	r3, #3
 800847e:	d81b      	bhi.n	80084b8 <UART_SetConfig+0xe8>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <UART_SetConfig+0xb8>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	08008499 	.word	0x08008499
 800848c:	080084a9 	.word	0x080084a9
 8008490:	080084a1 	.word	0x080084a1
 8008494:	080084b1 	.word	0x080084b1
 8008498:	2301      	movs	r3, #1
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849e:	e042      	b.n	8008526 <UART_SetConfig+0x156>
 80084a0:	2302      	movs	r3, #2
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084a6:	e03e      	b.n	8008526 <UART_SetConfig+0x156>
 80084a8:	2304      	movs	r3, #4
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ae:	e03a      	b.n	8008526 <UART_SetConfig+0x156>
 80084b0:	2308      	movs	r3, #8
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b6:	e036      	b.n	8008526 <UART_SetConfig+0x156>
 80084b8:	2310      	movs	r3, #16
 80084ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084be:	e032      	b.n	8008526 <UART_SetConfig+0x156>
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a7e      	ldr	r2, [pc, #504]	; (80086c0 <UART_SetConfig+0x2f0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d12a      	bne.n	8008520 <UART_SetConfig+0x150>
 80084ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80084ce:	f7ff fb05 	bl	8007adc <LL_RCC_GetLPUARTClockSource>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084d8:	d01a      	beq.n	8008510 <UART_SetConfig+0x140>
 80084da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084de:	d81b      	bhi.n	8008518 <UART_SetConfig+0x148>
 80084e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e4:	d00c      	beq.n	8008500 <UART_SetConfig+0x130>
 80084e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ea:	d815      	bhi.n	8008518 <UART_SetConfig+0x148>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <UART_SetConfig+0x128>
 80084f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f4:	d008      	beq.n	8008508 <UART_SetConfig+0x138>
 80084f6:	e00f      	b.n	8008518 <UART_SetConfig+0x148>
 80084f8:	2300      	movs	r3, #0
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084fe:	e012      	b.n	8008526 <UART_SetConfig+0x156>
 8008500:	2302      	movs	r3, #2
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008506:	e00e      	b.n	8008526 <UART_SetConfig+0x156>
 8008508:	2304      	movs	r3, #4
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800850e:	e00a      	b.n	8008526 <UART_SetConfig+0x156>
 8008510:	2308      	movs	r3, #8
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008516:	e006      	b.n	8008526 <UART_SetConfig+0x156>
 8008518:	2310      	movs	r3, #16
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851e:	e002      	b.n	8008526 <UART_SetConfig+0x156>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a65      	ldr	r2, [pc, #404]	; (80086c0 <UART_SetConfig+0x2f0>)
 800852c:	4293      	cmp	r3, r2
 800852e:	f040 8097 	bne.w	8008660 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008536:	2b08      	cmp	r3, #8
 8008538:	d823      	bhi.n	8008582 <UART_SetConfig+0x1b2>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x170>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008565 	.word	0x08008565
 8008544:	08008583 	.word	0x08008583
 8008548:	0800856d 	.word	0x0800856d
 800854c:	08008583 	.word	0x08008583
 8008550:	08008573 	.word	0x08008573
 8008554:	08008583 	.word	0x08008583
 8008558:	08008583 	.word	0x08008583
 800855c:	08008583 	.word	0x08008583
 8008560:	0800857b 	.word	0x0800857b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008564:	f7fe fbea 	bl	8006d3c <HAL_RCC_GetPCLK1Freq>
 8008568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800856a:	e010      	b.n	800858e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800856c:	4b56      	ldr	r3, [pc, #344]	; (80086c8 <UART_SetConfig+0x2f8>)
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008570:	e00d      	b.n	800858e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008572:	f7fe fb63 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 8008576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008578:	e009      	b.n	800858e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800857a:	f248 0306 	movw	r3, #32774	; 0x8006
 800857e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008580:	e005      	b.n	800858e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800858c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 812b 	beq.w	80087ec <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	4a4c      	ldr	r2, [pc, #304]	; (80086cc <UART_SetConfig+0x2fc>)
 800859c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085a0:	461a      	mov	r2, r3
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	4413      	add	r3, r2
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d305      	bcc.n	80085c6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d903      	bls.n	80085ce <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085cc:	e10e      	b.n	80087ec <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	2200      	movs	r2, #0
 80085d2:	60bb      	str	r3, [r7, #8]
 80085d4:	60fa      	str	r2, [r7, #12]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	4a3c      	ldr	r2, [pc, #240]	; (80086cc <UART_SetConfig+0x2fc>)
 80085dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2200      	movs	r2, #0
 80085e4:	603b      	str	r3, [r7, #0]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085f0:	f7f7 fe2e 	bl	8000250 <__aeabi_uldivmod>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4610      	mov	r0, r2
 80085fa:	4619      	mov	r1, r3
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	020b      	lsls	r3, r1, #8
 8008606:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800860a:	0202      	lsls	r2, r0, #8
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	6849      	ldr	r1, [r1, #4]
 8008610:	0849      	lsrs	r1, r1, #1
 8008612:	2000      	movs	r0, #0
 8008614:	460c      	mov	r4, r1
 8008616:	4605      	mov	r5, r0
 8008618:	eb12 0804 	adds.w	r8, r2, r4
 800861c:	eb43 0905 	adc.w	r9, r3, r5
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	469a      	mov	sl, r3
 8008628:	4693      	mov	fp, r2
 800862a:	4652      	mov	r2, sl
 800862c:	465b      	mov	r3, fp
 800862e:	4640      	mov	r0, r8
 8008630:	4649      	mov	r1, r9
 8008632:	f7f7 fe0d 	bl	8000250 <__aeabi_uldivmod>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4613      	mov	r3, r2
 800863c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008644:	d308      	bcc.n	8008658 <UART_SetConfig+0x288>
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800864c:	d204      	bcs.n	8008658 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6a3a      	ldr	r2, [r7, #32]
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	e0c9      	b.n	80087ec <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800865e:	e0c5      	b.n	80087ec <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008668:	d16d      	bne.n	8008746 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800866a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800866e:	3b01      	subs	r3, #1
 8008670:	2b07      	cmp	r3, #7
 8008672:	d82d      	bhi.n	80086d0 <UART_SetConfig+0x300>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <UART_SetConfig+0x2ac>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	0800869d 	.word	0x0800869d
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086d1 	.word	0x080086d1
 8008688:	080086ab 	.word	0x080086ab
 800868c:	080086d1 	.word	0x080086d1
 8008690:	080086d1 	.word	0x080086d1
 8008694:	080086d1 	.word	0x080086d1
 8008698:	080086b3 	.word	0x080086b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800869c:	f7fe fb64 	bl	8006d68 <HAL_RCC_GetPCLK2Freq>
 80086a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086a2:	e01b      	b.n	80086dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086a4:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <UART_SetConfig+0x2f8>)
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086a8:	e018      	b.n	80086dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086aa:	f7fe fac7 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 80086ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086b0:	e014      	b.n	80086dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086b2:	f248 0306 	movw	r3, #32774	; 0x8006
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086b8:	e010      	b.n	80086dc <UART_SetConfig+0x30c>
 80086ba:	bf00      	nop
 80086bc:	cfff69f3 	.word	0xcfff69f3
 80086c0:	40008000 	.word	0x40008000
 80086c4:	40013800 	.word	0x40013800
 80086c8:	00f42400 	.word	0x00f42400
 80086cc:	0800e214 	.word	0x0800e214
      default:
        pclk = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8084 	beq.w	80087ec <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	4a4b      	ldr	r2, [pc, #300]	; (8008818 <UART_SetConfig+0x448>)
 80086ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f6:	005a      	lsls	r2, r3, #1
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	085b      	lsrs	r3, r3, #1
 80086fe:	441a      	add	r2, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	fbb2 f3f3 	udiv	r3, r2, r3
 8008708:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	2b0f      	cmp	r3, #15
 800870e:	d916      	bls.n	800873e <UART_SetConfig+0x36e>
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008716:	d212      	bcs.n	800873e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	b29b      	uxth	r3, r3
 800871c:	f023 030f 	bic.w	r3, r3, #15
 8008720:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	b29b      	uxth	r3, r3
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	b29a      	uxth	r2, r3
 800872e:	8bfb      	ldrh	r3, [r7, #30]
 8008730:	4313      	orrs	r3, r2
 8008732:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	8bfa      	ldrh	r2, [r7, #30]
 800873a:	60da      	str	r2, [r3, #12]
 800873c:	e056      	b.n	80087ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008744:	e052      	b.n	80087ec <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800874a:	3b01      	subs	r3, #1
 800874c:	2b07      	cmp	r3, #7
 800874e:	d822      	bhi.n	8008796 <UART_SetConfig+0x3c6>
 8008750:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <UART_SetConfig+0x388>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	08008779 	.word	0x08008779
 800875c:	08008781 	.word	0x08008781
 8008760:	08008797 	.word	0x08008797
 8008764:	08008787 	.word	0x08008787
 8008768:	08008797 	.word	0x08008797
 800876c:	08008797 	.word	0x08008797
 8008770:	08008797 	.word	0x08008797
 8008774:	0800878f 	.word	0x0800878f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008778:	f7fe faf6 	bl	8006d68 <HAL_RCC_GetPCLK2Freq>
 800877c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800877e:	e010      	b.n	80087a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008780:	4b26      	ldr	r3, [pc, #152]	; (800881c <UART_SetConfig+0x44c>)
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008784:	e00d      	b.n	80087a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008786:	f7fe fa59 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 800878a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800878c:	e009      	b.n	80087a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878e:	f248 0306 	movw	r3, #32774	; 0x8006
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008794:	e005      	b.n	80087a2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087a0:	bf00      	nop
    }

    if (pclk != 0U)
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d021      	beq.n	80087ec <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <UART_SetConfig+0x448>)
 80087ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b2:	461a      	mov	r2, r3
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	441a      	add	r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	2b0f      	cmp	r3, #15
 80087d0:	d909      	bls.n	80087e6 <UART_SetConfig+0x416>
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d205      	bcs.n	80087e6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	b29a      	uxth	r2, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60da      	str	r2, [r3, #12]
 80087e4:	e002      	b.n	80087ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2200      	movs	r2, #0
 8008800:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2200      	movs	r2, #0
 8008806:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008808:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800880c:	4618      	mov	r0, r3
 800880e:	3730      	adds	r7, #48	; 0x30
 8008810:	46bd      	mov	sp, r7
 8008812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008816:	bf00      	nop
 8008818:	0800e214 	.word	0x0800e214
 800881c:	00f42400 	.word	0x00f42400

08008820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01a      	beq.n	8008936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800891e:	d10a      	bne.n	8008936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	605a      	str	r2, [r3, #4]
  }
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af02      	add	r7, sp, #8
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008974:	f7fb fb7c 	bl	8004070 <HAL_GetTick>
 8008978:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b08      	cmp	r3, #8
 8008986:	d10e      	bne.n	80089a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f832 	bl	8008a00 <UART_WaitOnFlagUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e028      	b.n	80089f8 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d10e      	bne.n	80089d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f81c 	bl	8008a00 <UART_WaitOnFlagUntilTimeout>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e012      	b.n	80089f8 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2220      	movs	r2, #32
 80089d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b09c      	sub	sp, #112	; 0x70
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a10:	e0a9      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a18:	f000 80a5 	beq.w	8008b66 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1c:	f7fb fb28 	bl	8004070 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d140      	bne.n	8008ab4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3a:	e853 3f00 	ldrex	r3, [r3]
 8008a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a46:	667b      	str	r3, [r7, #100]	; 0x64
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a58:	e841 2300 	strex	r3, r2, [r1]
 8008a5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1e6      	bne.n	8008a32 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	f023 0301 	bic.w	r3, r3, #1
 8008a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3308      	adds	r3, #8
 8008a82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a84:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e5      	bne.n	8008a64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e069      	b.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d051      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad0:	d149      	bne.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ada:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
 8008afc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3308      	adds	r3, #8
 8008b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b2e:	623a      	str	r2, [r7, #32]
 8008b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	69f9      	ldr	r1, [r7, #28]
 8008b34:	6a3a      	ldr	r2, [r7, #32]
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e5      	bne.n	8008b0e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e010      	b.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69da      	ldr	r2, [r3, #28]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	bf0c      	ite	eq
 8008b76:	2301      	moveq	r3, #1
 8008b78:	2300      	movne	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	f43f af46 	beq.w	8008a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3770      	adds	r7, #112	; 0x70
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b0a3      	sub	sp, #140	; 0x8c
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	88fa      	ldrh	r2, [r7, #6]
 8008ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	88fa      	ldrh	r2, [r7, #6]
 8008bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc2:	d10e      	bne.n	8008be2 <UART_Start_Receive_IT+0x52>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d105      	bne.n	8008bd8 <UART_Start_Receive_IT+0x48>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bd6:	e02d      	b.n	8008c34 <UART_Start_Receive_IT+0xa4>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	22ff      	movs	r2, #255	; 0xff
 8008bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008be0:	e028      	b.n	8008c34 <UART_Start_Receive_IT+0xa4>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10d      	bne.n	8008c06 <UART_Start_Receive_IT+0x76>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <UART_Start_Receive_IT+0x6c>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	22ff      	movs	r2, #255	; 0xff
 8008bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bfa:	e01b      	b.n	8008c34 <UART_Start_Receive_IT+0xa4>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	227f      	movs	r2, #127	; 0x7f
 8008c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c04:	e016      	b.n	8008c34 <UART_Start_Receive_IT+0xa4>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c0e:	d10d      	bne.n	8008c2c <UART_Start_Receive_IT+0x9c>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <UART_Start_Receive_IT+0x92>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	227f      	movs	r2, #127	; 0x7f
 8008c1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c20:	e008      	b.n	8008c34 <UART_Start_Receive_IT+0xa4>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	223f      	movs	r2, #63	; 0x3f
 8008c26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c2a:	e003      	b.n	8008c34 <UART_Start_Receive_IT+0xa4>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2222      	movs	r2, #34	; 0x22
 8008c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3308      	adds	r3, #8
 8008c64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c68:	673a      	str	r2, [r7, #112]	; 0x70
 8008c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008c6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e3      	bne.n	8008c44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c84:	d14f      	bne.n	8008d26 <UART_Start_Receive_IT+0x196>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c8c:	88fa      	ldrh	r2, [r7, #6]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d349      	bcc.n	8008d26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9a:	d107      	bne.n	8008cac <UART_Start_Receive_IT+0x11c>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4a47      	ldr	r2, [pc, #284]	; (8008dc4 <UART_Start_Receive_IT+0x234>)
 8008ca8:	675a      	str	r2, [r3, #116]	; 0x74
 8008caa:	e002      	b.n	8008cb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4a46      	ldr	r2, [pc, #280]	; (8008dc8 <UART_Start_Receive_IT+0x238>)
 8008cb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d01a      	beq.n	8008cf0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cde:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ce2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e4      	bne.n	8008cba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008d10:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e5      	bne.n	8008cf0 <UART_Start_Receive_IT+0x160>
 8008d24:	e046      	b.n	8008db4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d107      	bne.n	8008d40 <UART_Start_Receive_IT+0x1b0>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4a24      	ldr	r2, [pc, #144]	; (8008dcc <UART_Start_Receive_IT+0x23c>)
 8008d3c:	675a      	str	r2, [r3, #116]	; 0x74
 8008d3e:	e002      	b.n	8008d46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <UART_Start_Receive_IT+0x240>)
 8008d44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d019      	beq.n	8008d82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008d62:	677b      	str	r3, [r7, #116]	; 0x74
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e6      	bne.n	8008d4e <UART_Start_Receive_IT+0x1be>
 8008d80:	e018      	b.n	8008db4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f043 0320 	orr.w	r3, r3, #32
 8008d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da0:	623b      	str	r3, [r7, #32]
 8008da2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	69f9      	ldr	r1, [r7, #28]
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e6      	bne.n	8008d82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	378c      	adds	r7, #140	; 0x8c
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	08009939 	.word	0x08009939
 8008dc8:	080095d9 	.word	0x080095d9
 8008dcc:	08009421 	.word	0x08009421
 8008dd0:	08009269 	.word	0x08009269

08008dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b095      	sub	sp, #84	; 0x54
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8008dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e6      	bne.n	8008ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e3      	bne.n	8008e0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d118      	bne.n	8008e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f023 0310 	bic.w	r3, r3, #16
 8008e62:	647b      	str	r3, [r7, #68]	; 0x44
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e6      	bne.n	8008e4e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e94:	bf00      	nop
 8008e96:	3754      	adds	r7, #84	; 0x54
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff fa70 	bl	80083a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b08f      	sub	sp, #60	; 0x3c
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eda:	2b21      	cmp	r3, #33	; 0x21
 8008edc:	d14c      	bne.n	8008f78 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d132      	bne.n	8008f50 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008efe:	637b      	str	r3, [r7, #52]	; 0x34
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f0a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f30:	633b      	str	r3, [r7, #48]	; 0x30
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6979      	ldr	r1, [r7, #20]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	613b      	str	r3, [r7, #16]
   return(result);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e6      	bne.n	8008f1c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008f4e:	e013      	b.n	8008f78 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008f78:	bf00      	nop
 8008f7a:	373c      	adds	r7, #60	; 0x3c
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b091      	sub	sp, #68	; 0x44
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f92:	2b21      	cmp	r3, #33	; 0x21
 8008f94:	d151      	bne.n	800903a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d132      	bne.n	8009008 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	623b      	str	r3, [r7, #32]
   return(result);
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8008fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e6      	bne.n	8008fa2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	61fb      	str	r3, [r7, #28]
 8008ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	69b9      	ldr	r1, [r7, #24]
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e6      	bne.n	8008fd4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009006:	e018      	b.n	800903a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	461a      	mov	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800901c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009022:	1c9a      	adds	r2, r3, #2
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800902e:	b29b      	uxth	r3, r3
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800903a:	bf00      	nop
 800903c:	3744      	adds	r7, #68	; 0x44
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009046:	b480      	push	{r7}
 8009048:	b091      	sub	sp, #68	; 0x44
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009054:	2b21      	cmp	r3, #33	; 0x21
 8009056:	d160      	bne.n	800911a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800905e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009060:	e057      	b.n	8009112 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d133      	bne.n	80090d6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	623b      	str	r3, [r7, #32]
   return(result);
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009084:	63bb      	str	r3, [r7, #56]	; 0x38
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908e:	633a      	str	r2, [r7, #48]	; 0x30
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e5      	bne.n	800906e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	637b      	str	r3, [r7, #52]	; 0x34
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c0:	61fb      	str	r3, [r7, #28]
 80090c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	69b9      	ldr	r1, [r7, #24]
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	617b      	str	r3, [r7, #20]
   return(result);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e6      	bne.n	80090a2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80090d4:	e021      	b.n	800911a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d013      	beq.n	800910c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	781a      	ldrb	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800910c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800910e:	3b01      	subs	r3, #1
 8009110:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009112:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1a4      	bne.n	8009062 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009118:	e7ff      	b.n	800911a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800911a:	bf00      	nop
 800911c:	3744      	adds	r7, #68	; 0x44
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009126:	b480      	push	{r7}
 8009128:	b091      	sub	sp, #68	; 0x44
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009134:	2b21      	cmp	r3, #33	; 0x21
 8009136:	d165      	bne.n	8009204 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800913e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009140:	e05c      	b.n	80091fc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d133      	bne.n	80091b6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3308      	adds	r3, #8
 8009154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	61fb      	str	r3, [r7, #28]
   return(result);
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800916e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e5      	bne.n	800914e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009196:	633b      	str	r3, [r7, #48]	; 0x30
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	61bb      	str	r3, [r7, #24]
 80091a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6979      	ldr	r1, [r7, #20]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	613b      	str	r3, [r7, #16]
   return(result);
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e6      	bne.n	8009182 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80091b4:	e026      	b.n	8009204 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d018      	beq.n	80091f6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80091ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091d8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091de:	1c9a      	adds	r2, r3, #2
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80091f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80091f8:	3b01      	subs	r3, #1
 80091fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80091fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d19f      	bne.n	8009142 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009202:	e7ff      	b.n	8009204 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009204:	bf00      	nop
 8009206:	3744      	adds	r7, #68	; 0x44
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	60bb      	str	r3, [r7, #8]
   return(result);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6979      	ldr	r1, [r7, #20]
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	613b      	str	r3, [r7, #16]
   return(result);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e6      	bne.n	8009218 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7fa f8cf 	bl	80033fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800925e:	bf00      	nop
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b09c      	sub	sp, #112	; 0x70
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009276:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009280:	2b22      	cmp	r3, #34	; 0x22
 8009282:	f040 80be 	bne.w	8009402 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009290:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009294:	b2d9      	uxtb	r1, r3
 8009296:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800929a:	b2da      	uxtb	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a0:	400a      	ands	r2, r1
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f040 80a1 	bne.w	8009412 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80092f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e6      	bne.n	80092d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	667b      	str	r3, [r7, #100]	; 0x64
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009322:	647a      	str	r2, [r7, #68]	; 0x44
 8009324:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a33      	ldr	r2, [pc, #204]	; (800941c <UART_RxISR_8BIT+0x1b4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d01f      	beq.n	8009394 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d018      	beq.n	8009394 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	623b      	str	r3, [r7, #32]
   return(result);
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009376:	663b      	str	r3, [r7, #96]	; 0x60
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009380:	633b      	str	r3, [r7, #48]	; 0x30
 8009382:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d12e      	bne.n	80093fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f023 0310 	bic.w	r3, r3, #16
 80093b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	69b9      	ldr	r1, [r7, #24]
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	617b      	str	r3, [r7, #20]
   return(result);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e6      	bne.n	80093a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	f003 0310 	and.w	r3, r3, #16
 80093de:	2b10      	cmp	r3, #16
 80093e0:	d103      	bne.n	80093ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2210      	movs	r2, #16
 80093e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fe ffe0 	bl	80083b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093f8:	e00b      	b.n	8009412 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7f9 ffd0 	bl	80033a0 <HAL_UART_RxCpltCallback>
}
 8009400:	e007      	b.n	8009412 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	699a      	ldr	r2, [r3, #24]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f042 0208 	orr.w	r2, r2, #8
 8009410:	619a      	str	r2, [r3, #24]
}
 8009412:	bf00      	nop
 8009414:	3770      	adds	r7, #112	; 0x70
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40008000 	.word	0x40008000

08009420 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b09c      	sub	sp, #112	; 0x70
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800942e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009438:	2b22      	cmp	r3, #34	; 0x22
 800943a:	f040 80be 	bne.w	80095ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800944e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009452:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009456:	4013      	ands	r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800945c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009462:	1c9a      	adds	r2, r3, #2
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	f040 80a1 	bne.w	80095ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800949c:	667b      	str	r3, [r7, #100]	; 0x64
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094a6:	657b      	str	r3, [r7, #84]	; 0x54
 80094a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e6      	bne.n	8009488 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	f023 0301 	bic.w	r3, r3, #1
 80094d0:	663b      	str	r3, [r7, #96]	; 0x60
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3308      	adds	r3, #8
 80094d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094da:	643a      	str	r2, [r7, #64]	; 0x40
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e5      	bne.n	80094ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a33      	ldr	r2, [pc, #204]	; (80095d4 <UART_RxISR_16BIT+0x1b4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d01f      	beq.n	800954c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d018      	beq.n	800954c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	61fb      	str	r3, [r7, #28]
   return(result);
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800952e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800953a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800953e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e6      	bne.n	800951a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009550:	2b01      	cmp	r3, #1
 8009552:	d12e      	bne.n	80095b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	60bb      	str	r3, [r7, #8]
   return(result);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f023 0310 	bic.w	r3, r3, #16
 800956e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6979      	ldr	r1, [r7, #20]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	613b      	str	r3, [r7, #16]
   return(result);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e6      	bne.n	800955a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b10      	cmp	r3, #16
 8009598:	d103      	bne.n	80095a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2210      	movs	r2, #16
 80095a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7fe ff04 	bl	80083b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b0:	e00b      	b.n	80095ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f9 fef4 	bl	80033a0 <HAL_UART_RxCpltCallback>
}
 80095b8:	e007      	b.n	80095ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699a      	ldr	r2, [r3, #24]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0208 	orr.w	r2, r2, #8
 80095c8:	619a      	str	r2, [r3, #24]
}
 80095ca:	bf00      	nop
 80095cc:	3770      	adds	r7, #112	; 0x70
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40008000 	.word	0x40008000

080095d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b0ac      	sub	sp, #176	; 0xb0
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800960e:	2b22      	cmp	r3, #34	; 0x22
 8009610:	f040 8182 	bne.w	8009918 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800961a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800961e:	e125      	b.n	800986c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800962a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800962e:	b2d9      	uxtb	r1, r3
 8009630:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009634:	b2da      	uxtb	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	400a      	ands	r2, r1
 800963c:	b2d2      	uxtb	r2, r2
 800963e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009650:	b29b      	uxth	r3, r3
 8009652:	3b01      	subs	r3, #1
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	2b00      	cmp	r3, #0
 8009670:	d053      	beq.n	800971a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d011      	beq.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800967e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00b      	beq.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2201      	movs	r2, #1
 8009690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009698:	f043 0201 	orr.w	r2, r3, #1
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d011      	beq.n	80096d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80096ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00b      	beq.n	80096d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2202      	movs	r2, #2
 80096c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c8:	f043 0204 	orr.w	r2, r3, #4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d011      	beq.n	8009702 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80096de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2204      	movs	r2, #4
 80096f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f8:	f043 0202 	orr.w	r2, r3, #2
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009708:	2b00      	cmp	r3, #0
 800970a:	d006      	beq.n	800971a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fe fe49 	bl	80083a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	f040 80a2 	bne.w	800986c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800974a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800974c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009750:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e4      	bne.n	8009728 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800976e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009786:	66ba      	str	r2, [r7, #104]	; 0x68
 8009788:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800978c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1e1      	bne.n	800975e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a5f      	ldr	r2, [pc, #380]	; (8009930 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d021      	beq.n	80097fc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01a      	beq.n	80097fc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097e8:	657b      	str	r3, [r7, #84]	; 0x54
 80097ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e4      	bne.n	80097c6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009800:	2b01      	cmp	r3, #1
 8009802:	d130      	bne.n	8009866 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009812:	e853 3f00 	ldrex	r3, [r3]
 8009816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	f023 0310 	bic.w	r3, r3, #16
 800981e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800982c:	643b      	str	r3, [r7, #64]	; 0x40
 800982e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e4      	bne.n	800980a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	2b10      	cmp	r3, #16
 800984c:	d103      	bne.n	8009856 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2210      	movs	r2, #16
 8009854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fe fdaa 	bl	80083b8 <HAL_UARTEx_RxEventCallback>
 8009864:	e002      	b.n	800986c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7f9 fd9a 	bl	80033a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800986c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b00      	cmp	r3, #0
 800987e:	f47f aecf 	bne.w	8009620 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009888:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800988c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009890:	2b00      	cmp	r3, #0
 8009892:	d049      	beq.n	8009928 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800989a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800989e:	429a      	cmp	r2, r3
 80098a0:	d242      	bcs.n	8009928 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3308      	adds	r3, #8
 80098a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	e853 3f00 	ldrex	r3, [r3]
 80098b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3308      	adds	r3, #8
 80098c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80098c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e3      	bne.n	80098a2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a15      	ldr	r2, [pc, #84]	; (8009934 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80098de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	f043 0320 	orr.w	r3, r3, #32
 80098f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009902:	61bb      	str	r3, [r7, #24]
 8009904:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6979      	ldr	r1, [r7, #20]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	613b      	str	r3, [r7, #16]
   return(result);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e4      	bne.n	80098e0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009916:	e007      	b.n	8009928 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699a      	ldr	r2, [r3, #24]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f042 0208 	orr.w	r2, r2, #8
 8009926:	619a      	str	r2, [r3, #24]
}
 8009928:	bf00      	nop
 800992a:	37b0      	adds	r7, #176	; 0xb0
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	40008000 	.word	0x40008000
 8009934:	08009269 	.word	0x08009269

08009938 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b0ae      	sub	sp, #184	; 0xb8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009946:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800996e:	2b22      	cmp	r3, #34	; 0x22
 8009970:	f040 8186 	bne.w	8009c80 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800997a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800997e:	e129      	b.n	8009bd4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009992:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009996:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800999a:	4013      	ands	r3, r2
 800999c:	b29a      	uxth	r2, r3
 800999e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a8:	1c9a      	adds	r2, r3, #2
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d053      	beq.n	8009a7e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d011      	beq.n	8009a06 <UART_RxISR_16BIT_FIFOEN+0xce>
 80099e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00b      	beq.n	8009a06 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2201      	movs	r2, #1
 80099f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fc:	f043 0201 	orr.w	r2, r3, #1
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d011      	beq.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2202      	movs	r2, #2
 8009a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a2c:	f043 0204 	orr.w	r2, r3, #4
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a3a:	f003 0304 	and.w	r3, r3, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d011      	beq.n	8009a66 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00b      	beq.n	8009a66 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2204      	movs	r2, #4
 8009a54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a5c:	f043 0202 	orr.w	r2, r3, #2
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fe fc97 	bl	80083a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f040 80a4 	bne.w	8009bd4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ab2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e2      	bne.n	8009a8c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009adc:	f023 0301 	bic.w	r3, r3, #1
 8009ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009aee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009af0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e1      	bne.n	8009ac6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a5f      	ldr	r2, [pc, #380]	; (8009c98 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d021      	beq.n	8009b64 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d01a      	beq.n	8009b64 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e4      	bne.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d130      	bne.n	8009bce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b82:	f023 0310 	bic.w	r3, r3, #16
 8009b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b94:	647b      	str	r3, [r7, #68]	; 0x44
 8009b96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e4      	bne.n	8009b72 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f003 0310 	and.w	r3, r3, #16
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d103      	bne.n	8009bbe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2210      	movs	r2, #16
 8009bbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fe fbf6 	bl	80083b8 <HAL_UARTEx_RxEventCallback>
 8009bcc:	e002      	b.n	8009bd4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7f9 fbe6 	bl	80033a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bd4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d006      	beq.n	8009bea <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f47f aecb 	bne.w	8009980 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bf0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bf4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d049      	beq.n	8009c90 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c02:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d242      	bcs.n	8009c90 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	623b      	str	r3, [r7, #32]
   return(result);
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8009c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e3      	bne.n	8009c0a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a15      	ldr	r2, [pc, #84]	; (8009c9c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009c46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f043 0320 	orr.w	r3, r3, #32
 8009c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c6a:	61fb      	str	r3, [r7, #28]
 8009c6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	69b9      	ldr	r1, [r7, #24]
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	617b      	str	r3, [r7, #20]
   return(result);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e4      	bne.n	8009c48 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c7e:	e007      	b.n	8009c90 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0208 	orr.w	r2, r2, #8
 8009c8e:	619a      	str	r2, [r3, #24]
}
 8009c90:	bf00      	nop
 8009c92:	37b8      	adds	r7, #184	; 0xb8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	40008000 	.word	0x40008000
 8009c9c:	08009421 	.word	0x08009421

08009ca0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d101      	bne.n	8009cf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	e027      	b.n	8009d42 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2224      	movs	r2, #36	; 0x24
 8009cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0201 	bic.w	r2, r2, #1
 8009d18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e02d      	b.n	8009dc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2224      	movs	r2, #36	; 0x24
 8009d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f022 0201 	bic.w	r2, r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f850 	bl	8009e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d101      	bne.n	8009de2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dde:	2302      	movs	r3, #2
 8009de0:	e02d      	b.n	8009e3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2224      	movs	r2, #36	; 0x24
 8009dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f812 	bl	8009e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d108      	bne.n	8009e6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e68:	e031      	b.n	8009ece <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e6a:	2308      	movs	r3, #8
 8009e6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e6e:	2308      	movs	r3, #8
 8009e70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	0e5b      	lsrs	r3, r3, #25
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0307 	and.w	r3, r3, #7
 8009e80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	0f5b      	lsrs	r3, r3, #29
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	f003 0307 	and.w	r3, r3, #7
 8009e90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	7b3a      	ldrb	r2, [r7, #12]
 8009e96:	4911      	ldr	r1, [pc, #68]	; (8009edc <UARTEx_SetNbDataToProcess+0x94>)
 8009e98:	5c8a      	ldrb	r2, [r1, r2]
 8009e9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e9e:	7b3a      	ldrb	r2, [r7, #12]
 8009ea0:	490f      	ldr	r1, [pc, #60]	; (8009ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ea2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	7b7a      	ldrb	r2, [r7, #13]
 8009eb4:	4909      	ldr	r1, [pc, #36]	; (8009edc <UARTEx_SetNbDataToProcess+0x94>)
 8009eb6:	5c8a      	ldrb	r2, [r1, r2]
 8009eb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ebc:	7b7a      	ldrb	r2, [r7, #13]
 8009ebe:	4908      	ldr	r1, [pc, #32]	; (8009ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ec0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	0800e22c 	.word	0x0800e22c
 8009ee0:	0800e234 	.word	0x0800e234

08009ee4 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009eee:	f7f7 fcc7 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009ef2:	f7f7 fc57 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 8009ef6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f062 0208 	orn	r2, r2, #8
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	2200      	movs	r2, #0
 8009f04:	705a      	strb	r2, [r3, #1]
 8009f06:	2200      	movs	r2, #0
 8009f08:	709a      	strb	r2, [r3, #2]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f042 0201 	orr.w	r2, r2, #1
 8009f16:	711a      	strb	r2, [r3, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	715a      	strb	r2, [r3, #5]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	719a      	strb	r2, [r3, #6]
 8009f20:	2200      	movs	r2, #0
 8009f22:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009f2a:	f7f7 fc83 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f2e:	f7f7 fc45 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f32:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	689b      	ldr	r3, [r3, #8]

}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8009f50:	f7f7 fc96 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f54:	f7f7 fc26 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 8009f58:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f062 0228 	orn	r2, r2, #40	; 0x28
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	2200      	movs	r2, #0
 8009f66:	705a      	strb	r2, [r3, #1]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	709a      	strb	r2, [r3, #2]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f042 0203 	orr.w	r2, r2, #3
 8009f78:	711a      	strb	r2, [r3, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	715a      	strb	r2, [r3, #5]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	719a      	strb	r2, [r3, #6]
 8009f82:	2200      	movs	r2, #0
 8009f84:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 8009f92:	78ba      	ldrb	r2, [r7, #2]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009f98:	f7f7 fc4c 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f9c:	f7f7 fc0e 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fa0:	60f8      	str	r0, [r7, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b086      	sub	sp, #24
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	460b      	mov	r3, r1
 8009fba:	71fb      	strb	r3, [r7, #7]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8009fc0:	f7f7 fc5e 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009fc4:	f7f7 fbee 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 8009fc8:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f062 0227 	orn	r2, r2, #39	; 0x27
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	705a      	strb	r2, [r3, #1]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	709a      	strb	r2, [r3, #2]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f042 0204 	orr.w	r2, r2, #4
 8009fe8:	711a      	strb	r2, [r3, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	715a      	strb	r2, [r3, #5]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	719a      	strb	r2, [r3, #6]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 800a002:	79fa      	ldrb	r2, [r7, #7]
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 800a008:	79ba      	ldrb	r2, [r7, #6]
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800a00e:	f7f7 fc11 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a012:	f7f7 fbd3 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a016:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	b2db      	uxtb	r3, r3
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	4613      	mov	r3, r2
 800a032:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 800a034:	f7f7 fc24 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a038:	f7f7 fbb4 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a03c:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2200      	movs	r2, #0
 800a042:	f062 0226 	orn	r2, r2, #38	; 0x26
 800a046:	701a      	strb	r2, [r3, #0]
 800a048:	2200      	movs	r2, #0
 800a04a:	705a      	strb	r2, [r3, #1]
 800a04c:	2200      	movs	r2, #0
 800a04e:	709a      	strb	r2, [r3, #2]
 800a050:	2200      	movs	r2, #0
 800a052:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2200      	movs	r2, #0
 800a058:	f042 0203 	orr.w	r2, r2, #3
 800a05c:	711a      	strb	r2, [r3, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	715a      	strb	r2, [r3, #5]
 800a062:	2200      	movs	r2, #0
 800a064:	719a      	strb	r2, [r3, #6]
 800a066:	2200      	movs	r2, #0
 800a068:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 800a076:	79fa      	ldrb	r2, [r7, #7]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a07c:	f7f7 fbda 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a080:	f7f7 fb9c 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a084:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	b2db      	uxtb	r3, r3
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a0a0:	f7f7 fbee 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0a4:	f7f7 fb7e 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a0a8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f062 0225 	orn	r2, r2, #37	; 0x25
 800a0b2:	701a      	strb	r2, [r3, #0]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	705a      	strb	r2, [r3, #1]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	709a      	strb	r2, [r3, #2]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f042 0202 	orr.w	r2, r2, #2
 800a0c8:	711a      	strb	r2, [r3, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	715a      	strb	r2, [r3, #5]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	719a      	strb	r2, [r3, #6]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a0e2:	f7f7 fba7 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0e6:	f7f7 fb69 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0ea:	60f8      	str	r0, [r7, #12]
}
 800a0ec:	bf00      	nop
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a0fe:	f7f7 fbbf 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a102:	f7f7 fb4f 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a106:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f062 0220 	orn	r2, r2, #32
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	2200      	movs	r2, #0
 800a114:	705a      	strb	r2, [r3, #1]
 800a116:	2200      	movs	r2, #0
 800a118:	709a      	strb	r2, [r3, #2]
 800a11a:	2200      	movs	r2, #0
 800a11c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f042 0202 	orr.w	r2, r2, #2
 800a126:	711a      	strb	r2, [r3, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	715a      	strb	r2, [r3, #5]
 800a12c:	2200      	movs	r2, #0
 800a12e:	719a      	strb	r2, [r3, #6]
 800a130:	2200      	movs	r2, #0
 800a132:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a140:	f7f7 fb78 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a144:	f7f7 fb3a 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a148:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	b2db      	uxtb	r3, r3
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a160:	f7f7 fb8e 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a164:	f7f7 fb1e 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a168:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f062 0219 	orn	r2, r2, #25
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	2200      	movs	r2, #0
 800a176:	705a      	strb	r2, [r3, #1]
 800a178:	2200      	movs	r2, #0
 800a17a:	709a      	strb	r2, [r3, #2]
 800a17c:	2200      	movs	r2, #0
 800a17e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f042 0201 	orr.w	r2, r2, #1
 800a188:	711a      	strb	r2, [r3, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	715a      	strb	r2, [r3, #5]
 800a18e:	2200      	movs	r2, #0
 800a190:	719a      	strb	r2, [r3, #6]
 800a192:	2200      	movs	r2, #0
 800a194:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a19c:	f7f7 fb4a 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1a0:	f7f7 fb0c 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a1a4:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	b2db      	uxtb	r3, r3
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a1bc:	f7f7 fb60 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1c0:	f7f7 faf0 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a1c4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f062 0217 	orn	r2, r2, #23
 800a1ce:	701a      	strb	r2, [r3, #0]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	705a      	strb	r2, [r3, #1]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	709a      	strb	r2, [r3, #2]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f042 0201 	orr.w	r2, r2, #1
 800a1e4:	711a      	strb	r2, [r3, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	715a      	strb	r2, [r3, #5]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	719a      	strb	r2, [r3, #6]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a1f8:	f7f7 fb1c 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1fc:	f7f7 fade 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a200:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	b2db      	uxtb	r3, r3
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a21c:	f7f7 fb30 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a220:	f7f7 fac0 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a224:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f062 0216 	orn	r2, r2, #22
 800a22e:	701a      	strb	r2, [r3, #0]
 800a230:	2200      	movs	r2, #0
 800a232:	705a      	strb	r2, [r3, #1]
 800a234:	2200      	movs	r2, #0
 800a236:	709a      	strb	r2, [r3, #2]
 800a238:	2200      	movs	r2, #0
 800a23a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f042 0202 	orr.w	r2, r2, #2
 800a244:	711a      	strb	r2, [r3, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	715a      	strb	r2, [r3, #5]
 800a24a:	2200      	movs	r2, #0
 800a24c:	719a      	strb	r2, [r3, #6]
 800a24e:	2200      	movs	r2, #0
 800a250:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 800a258:	78fa      	ldrb	r2, [r7, #3]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a25e:	f7f7 fae9 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a262:	f7f7 faab 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a266:	60f8      	str	r0, [r7, #12]
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a278:	f7f7 fb02 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a27c:	f7f7 fa92 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a280:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f062 0213 	orn	r2, r2, #19
 800a28a:	701a      	strb	r2, [r3, #0]
 800a28c:	2200      	movs	r2, #0
 800a28e:	705a      	strb	r2, [r3, #1]
 800a290:	2200      	movs	r2, #0
 800a292:	709a      	strb	r2, [r3, #2]
 800a294:	2200      	movs	r2, #0
 800a296:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f042 0201 	orr.w	r2, r2, #1
 800a2a0:	711a      	strb	r2, [r3, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	715a      	strb	r2, [r3, #5]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	719a      	strb	r2, [r3, #6]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a2b4:	f7f7 fabe 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2b8:	f7f7 fa80 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a2bc:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	b2db      	uxtb	r3, r3
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a2d4:	f7f7 fad4 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2d8:	f7f7 fa64 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a2dc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f062 0212 	orn	r2, r2, #18
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	705a      	strb	r2, [r3, #1]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	709a      	strb	r2, [r3, #2]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f042 0201 	orr.w	r2, r2, #1
 800a2fc:	711a      	strb	r2, [r3, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	715a      	strb	r2, [r3, #5]
 800a302:	2200      	movs	r2, #0
 800a304:	719a      	strb	r2, [r3, #6]
 800a306:	2200      	movs	r2, #0
 800a308:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a310:	f7f7 fa90 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a314:	f7f7 fa52 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a318:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b086      	sub	sp, #24
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
 800a332:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800a334:	f7f7 faa4 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a338:	f7f7 fa34 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a33c:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2200      	movs	r2, #0
 800a342:	f062 0209 	orn	r2, r2, #9
 800a346:	701a      	strb	r2, [r3, #0]
 800a348:	2200      	movs	r2, #0
 800a34a:	705a      	strb	r2, [r3, #1]
 800a34c:	2200      	movs	r2, #0
 800a34e:	709a      	strb	r2, [r3, #2]
 800a350:	2200      	movs	r2, #0
 800a352:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2200      	movs	r2, #0
 800a358:	f042 0205 	orr.w	r2, r2, #5
 800a35c:	711a      	strb	r2, [r3, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	715a      	strb	r2, [r3, #5]
 800a362:	2200      	movs	r2, #0
 800a364:	719a      	strb	r2, [r3, #6]
 800a366:	2200      	movs	r2, #0
 800a368:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 800a37c:	6a3a      	ldr	r2, [r7, #32]
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 800a382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 800a388:	f7f7 fa54 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a38c:	f7f7 fa16 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a390:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	b2db      	uxtb	r3, r3
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a3ac:	f7f7 fa68 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a3b0:	f7f7 f9f8 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a3b4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f062 0207 	orn	r2, r2, #7
 800a3be:	701a      	strb	r2, [r3, #0]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	705a      	strb	r2, [r3, #1]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	709a      	strb	r2, [r3, #2]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f042 0201 	orr.w	r2, r2, #1
 800a3d4:	711a      	strb	r2, [r3, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	715a      	strb	r2, [r3, #5]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	719a      	strb	r2, [r3, #6]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800a3e2:	887a      	ldrh	r2, [r7, #2]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a3e8:	f7f7 fa24 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a3ec:	f7f7 f9e6 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a3f0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	b2db      	uxtb	r3, r3
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a40a:	f7f7 fa39 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a40e:	f7f7 f9c9 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a412:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f062 0203 	orn	r2, r2, #3
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	705a      	strb	r2, [r3, #1]
 800a422:	2200      	movs	r2, #0
 800a424:	709a      	strb	r2, [r3, #2]
 800a426:	2200      	movs	r2, #0
 800a428:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f042 0201 	orr.w	r2, r2, #1
 800a432:	711a      	strb	r2, [r3, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	715a      	strb	r2, [r3, #5]
 800a438:	2200      	movs	r2, #0
 800a43a:	719a      	strb	r2, [r3, #6]
 800a43c:	2200      	movs	r2, #0
 800a43e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a446:	f7f7 f9f5 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a44a:	f7f7 f9b7 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a44e:	60f8      	str	r0, [r7, #12]
}
 800a450:	bf00      	nop
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800a466:	f7f7 fa0b 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a46a:	f7f7 f99b 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a46e:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
 800a476:	2200      	movs	r2, #0
 800a478:	f042 0201 	orr.w	r2, r2, #1
 800a47c:	705a      	strb	r2, [r3, #1]
 800a47e:	2200      	movs	r2, #0
 800a480:	709a      	strb	r2, [r3, #2]
 800a482:	2200      	movs	r2, #0
 800a484:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2200      	movs	r2, #0
 800a48a:	f042 0203 	orr.w	r2, r2, #3
 800a48e:	711a      	strb	r2, [r3, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	715a      	strb	r2, [r3, #5]
 800a494:	2200      	movs	r2, #0
 800a496:	719a      	strb	r2, [r3, #6]
 800a498:	2200      	movs	r2, #0
 800a49a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a4ae:	f7f7 f9c1 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a4b2:	f7f7 f983 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a4b6:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	b2db      	uxtb	r3, r3
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <otDatasetSetActive>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otDatasetSetActive(otInstance *aInstance, const otOperationalDataset *aDataset)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a4d0:	f7f7 f9d6 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a4d4:	f7f7 f966 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a4d8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_DATASET_SET_ACTIVE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800a4e2:	701a      	strb	r2, [r3, #0]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	705a      	strb	r2, [r3, #1]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	709a      	strb	r2, [r3, #2]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f042 0201 	orr.w	r2, r2, #1
 800a4fc:	711a      	strb	r2, [r3, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	715a      	strb	r2, [r3, #5]
 800a502:	2200      	movs	r2, #0
 800a504:	719a      	strb	r2, [r3, #6]
 800a506:	2200      	movs	r2, #0
 800a508:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aDataset;
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a510:	f7f7 f990 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a514:	f7f7 f952 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a518:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	b2db      	uxtb	r3, r3
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 800a52e:	f7f7 f9a7 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a532:	f7f7 f937 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a536:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f062 0235 	orn	r2, r2, #53	; 0x35
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	2200      	movs	r2, #0
 800a544:	705a      	strb	r2, [r3, #1]
 800a546:	2200      	movs	r2, #0
 800a548:	709a      	strb	r2, [r3, #2]
 800a54a:	2200      	movs	r2, #0
 800a54c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	711a      	strb	r2, [r3, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	715a      	strb	r2, [r3, #5]
 800a558:	2200      	movs	r2, #0
 800a55a:	719a      	strb	r2, [r3, #6]
 800a55c:	2200      	movs	r2, #0
 800a55e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a560:	f7f7 f968 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a564:	f7f7 f92a 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a568:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	689b      	ldr	r3, [r3, #8]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a582:	f7f7 f97d 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a586:	f7f7 f90d 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a58a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800a594:	701a      	strb	r2, [r3, #0]
 800a596:	2200      	movs	r2, #0
 800a598:	705a      	strb	r2, [r3, #1]
 800a59a:	2200      	movs	r2, #0
 800a59c:	709a      	strb	r2, [r3, #2]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f042 0201 	orr.w	r2, r2, #1
 800a5aa:	711a      	strb	r2, [r3, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	715a      	strb	r2, [r3, #5]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	719a      	strb	r2, [r3, #6]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a5b8:	78fa      	ldrb	r2, [r7, #3]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a5be:	f7f7 f939 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a5c2:	f7f7 f8fb 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a5c6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	b2db      	uxtb	r3, r3
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a5e0:	f7f7 f94e 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a5e4:	f7f7 f8de 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a5e8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f042 0210 	orr.w	r2, r2, #16
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	705a      	strb	r2, [r3, #1]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	709a      	strb	r2, [r3, #2]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f042 0201 	orr.w	r2, r2, #1
 800a608:	711a      	strb	r2, [r3, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	715a      	strb	r2, [r3, #5]
 800a60e:	2200      	movs	r2, #0
 800a610:	719a      	strb	r2, [r3, #6]
 800a612:	2200      	movs	r2, #0
 800a614:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a61c:	f7f7 f90a 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a620:	f7f7 f8cc 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a624:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	b2db      	uxtb	r3, r3
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a63c:	f7f7 f920 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a640:	f7f7 f8b0 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a644:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f042 0216 	orr.w	r2, r2, #22
 800a64e:	701a      	strb	r2, [r3, #0]
 800a650:	2200      	movs	r2, #0
 800a652:	f042 0201 	orr.w	r2, r2, #1
 800a656:	705a      	strb	r2, [r3, #1]
 800a658:	2200      	movs	r2, #0
 800a65a:	709a      	strb	r2, [r3, #2]
 800a65c:	2200      	movs	r2, #0
 800a65e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f042 0201 	orr.w	r2, r2, #1
 800a668:	711a      	strb	r2, [r3, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	715a      	strb	r2, [r3, #5]
 800a66e:	2200      	movs	r2, #0
 800a670:	719a      	strb	r2, [r3, #6]
 800a672:	2200      	movs	r2, #0
 800a674:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a67c:	f7f7 f8da 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a680:	f7f7 f89c 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a684:	60f8      	str	r0, [r7, #12]
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a696:	f7f7 f8f3 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a69a:	f7f7 f883 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a69e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f042 0219 	orr.w	r2, r2, #25
 800a6a8:	701a      	strb	r2, [r3, #0]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f042 0201 	orr.w	r2, r2, #1
 800a6b0:	705a      	strb	r2, [r3, #1]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	709a      	strb	r2, [r3, #2]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f042 0201 	orr.w	r2, r2, #1
 800a6c2:	711a      	strb	r2, [r3, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	715a      	strb	r2, [r3, #5]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	719a      	strb	r2, [r3, #6]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a6d6:	f7f7 f8ad 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a6da:	f7f7 f86f 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a6de:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	b29b      	uxth	r3, r3
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	60b9      	str	r1, [r7, #8]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800a6fc:	f7f7 f8c0 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a700:	f7f7 f850 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a704:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2200      	movs	r2, #0
 800a70a:	f042 021e 	orr.w	r2, r2, #30
 800a70e:	701a      	strb	r2, [r3, #0]
 800a710:	2200      	movs	r2, #0
 800a712:	f042 0201 	orr.w	r2, r2, #1
 800a716:	705a      	strb	r2, [r3, #1]
 800a718:	2200      	movs	r2, #0
 800a71a:	709a      	strb	r2, [r3, #2]
 800a71c:	2200      	movs	r2, #0
 800a71e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2200      	movs	r2, #0
 800a724:	f042 0203 	orr.w	r2, r2, #3
 800a728:	711a      	strb	r2, [r3, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	715a      	strb	r2, [r3, #5]
 800a72e:	2200      	movs	r2, #0
 800a730:	719a      	strb	r2, [r3, #6]
 800a732:	2200      	movs	r2, #0
 800a734:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 800a742:	88fa      	ldrh	r2, [r7, #6]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a748:	f7f7 f874 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a74c:	f7f7 f836 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a750:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	b2db      	uxtb	r3, r3
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	461a      	mov	r2, r3
 800a76c:	460b      	mov	r3, r1
 800a76e:	817b      	strh	r3, [r7, #10]
 800a770:	4613      	mov	r3, r2
 800a772:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 800a774:	f7f7 f884 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a778:	f7f7 f814 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800a77c:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2200      	movs	r2, #0
 800a782:	f042 021f 	orr.w	r2, r2, #31
 800a786:	701a      	strb	r2, [r3, #0]
 800a788:	2200      	movs	r2, #0
 800a78a:	f042 0201 	orr.w	r2, r2, #1
 800a78e:	705a      	strb	r2, [r3, #1]
 800a790:	2200      	movs	r2, #0
 800a792:	709a      	strb	r2, [r3, #2]
 800a794:	2200      	movs	r2, #0
 800a796:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f042 0204 	orr.w	r2, r2, #4
 800a7a0:	711a      	strb	r2, [r3, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	715a      	strb	r2, [r3, #5]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	719a      	strb	r2, [r3, #6]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 800a7b4:	897a      	ldrh	r2, [r7, #10]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 800a7c0:	893a      	ldrh	r2, [r7, #8]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800a7c6:	f7f7 f835 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a7ca:	f7f6 fff7 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800a7ce:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	b29b      	uxth	r3, r3
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a7e0:	b5b0      	push	{r4, r5, r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a7ea:	f7f6 fff3 	bl	80017d4 <THREAD_Get_NotificationPayloadBuffer>
 800a7ee:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	2b48      	cmp	r3, #72	; 0x48
 800a7f8:	f200 8543 	bhi.w	800b282 <OpenThread_CallBack_Processing+0xaa2>
 800a7fc:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <OpenThread_CallBack_Processing+0x24>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800ab6f 	.word	0x0800ab6f
 800a808:	0800ac27 	.word	0x0800ac27
 800a80c:	0800ac7f 	.word	0x0800ac7f
 800a810:	0800ad2b 	.word	0x0800ad2b
 800a814:	0800ad37 	.word	0x0800ad37
 800a818:	0800ad55 	.word	0x0800ad55
 800a81c:	0800b283 	.word	0x0800b283
 800a820:	0800ad7f 	.word	0x0800ad7f
 800a824:	0800ad99 	.word	0x0800ad99
 800a828:	0800adcd 	.word	0x0800adcd
 800a82c:	0800adeb 	.word	0x0800adeb
 800a830:	0800ae09 	.word	0x0800ae09
 800a834:	0800b283 	.word	0x0800b283
 800a838:	0800ae33 	.word	0x0800ae33
 800a83c:	0800ae95 	.word	0x0800ae95
 800a840:	0800aebb 	.word	0x0800aebb
 800a844:	0800aedb 	.word	0x0800aedb
 800a848:	0800aef9 	.word	0x0800aef9
 800a84c:	0800b283 	.word	0x0800b283
 800a850:	0800af21 	.word	0x0800af21
 800a854:	0800af49 	.word	0x0800af49
 800a858:	0800b283 	.word	0x0800b283
 800a85c:	0800af67 	.word	0x0800af67
 800a860:	0800af8b 	.word	0x0800af8b
 800a864:	0800afb5 	.word	0x0800afb5
 800a868:	0800a995 	.word	0x0800a995
 800a86c:	0800a9b9 	.word	0x0800a9b9
 800a870:	0800a9dd 	.word	0x0800a9dd
 800a874:	0800aa07 	.word	0x0800aa07
 800a878:	0800b283 	.word	0x0800b283
 800a87c:	0800afd5 	.word	0x0800afd5
 800a880:	0800b283 	.word	0x0800b283
 800a884:	0800b283 	.word	0x0800b283
 800a888:	0800b283 	.word	0x0800b283
 800a88c:	0800b283 	.word	0x0800b283
 800a890:	0800b283 	.word	0x0800b283
 800a894:	0800ac5d 	.word	0x0800ac5d
 800a898:	0800acbd 	.word	0x0800acbd
 800a89c:	0800ace3 	.word	0x0800ace3
 800a8a0:	0800ad09 	.word	0x0800ad09
 800a8a4:	0800aff7 	.word	0x0800aff7
 800a8a8:	0800b035 	.word	0x0800b035
 800a8ac:	0800b04d 	.word	0x0800b04d
 800a8b0:	0800ab8b 	.word	0x0800ab8b
 800a8b4:	0800abf1 	.word	0x0800abf1
 800a8b8:	0800b283 	.word	0x0800b283
 800a8bc:	0800aa31 	.word	0x0800aa31
 800a8c0:	0800aa51 	.word	0x0800aa51
 800a8c4:	0800aa71 	.word	0x0800aa71
 800a8c8:	0800aa91 	.word	0x0800aa91
 800a8cc:	0800aab3 	.word	0x0800aab3
 800a8d0:	0800aad5 	.word	0x0800aad5
 800a8d4:	0800b283 	.word	0x0800b283
 800a8d8:	0800b283 	.word	0x0800b283
 800a8dc:	0800a929 	.word	0x0800a929
 800a8e0:	0800a94d 	.word	0x0800a94d
 800a8e4:	0800a971 	.word	0x0800a971
 800a8e8:	0800b283 	.word	0x0800b283
 800a8ec:	0800b283 	.word	0x0800b283
 800a8f0:	0800aaf7 	.word	0x0800aaf7
 800a8f4:	0800ab15 	.word	0x0800ab15
 800a8f8:	0800b283 	.word	0x0800b283
 800a8fc:	0800ab47 	.word	0x0800ab47
 800a900:	0800ac09 	.word	0x0800ac09
 800a904:	0800b07b 	.word	0x0800b07b
 800a908:	0800b099 	.word	0x0800b099
 800a90c:	0800b0b7 	.word	0x0800b0b7
 800a910:	0800b135 	.word	0x0800b135
 800a914:	0800b163 	.word	0x0800b163
 800a918:	0800b1a7 	.word	0x0800b1a7
 800a91c:	0800b211 	.word	0x0800b211
 800a920:	0800b24f 	.word	0x0800b24f
 800a924:	0800b1db 	.word	0x0800b1db
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 800a928:	4b9f      	ldr	r3, [pc, #636]	; (800aba8 <OpenThread_CallBack_Processing+0x3c8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 84ab 	beq.w	800b288 <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800a932:	4b9d      	ldr	r3, [pc, #628]	; (800aba8 <OpenThread_CallBack_Processing+0x3c8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	6892      	ldr	r2, [r2, #8]
 800a93a:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800a940:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800a946:	4798      	blx	r3
    }
    break;
 800a948:	f000 bc9e 	b.w	800b288 <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 800a94c:	4b97      	ldr	r3, [pc, #604]	; (800abac <OpenThread_CallBack_Processing+0x3cc>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 849b 	beq.w	800b28c <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800a956:	4b95      	ldr	r3, [pc, #596]	; (800abac <OpenThread_CallBack_Processing+0x3cc>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	6892      	ldr	r2, [r2, #8]
 800a95e:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800a964:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800a96a:	4798      	blx	r3
    }
    break;
 800a96c:	f000 bc8e 	b.w	800b28c <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 800a970:	4b8f      	ldr	r3, [pc, #572]	; (800abb0 <OpenThread_CallBack_Processing+0x3d0>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 848b 	beq.w	800b290 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800a97a:	4b8d      	ldr	r3, [pc, #564]	; (800abb0 <OpenThread_CallBack_Processing+0x3d0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	6892      	ldr	r2, [r2, #8]
 800a982:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800a988:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800a98e:	4798      	blx	r3
    }
    break;
 800a990:	f000 bc7e 	b.w	800b290 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 800a994:	4b87      	ldr	r3, [pc, #540]	; (800abb4 <OpenThread_CallBack_Processing+0x3d4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 847b 	beq.w	800b294 <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800a99e:	4b85      	ldr	r3, [pc, #532]	; (800abb4 <OpenThread_CallBack_Processing+0x3d4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	6892      	ldr	r2, [r2, #8]
 800a9a6:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800a9ac:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800a9b2:	4798      	blx	r3
    }
    break;
 800a9b4:	f000 bc6e 	b.w	800b294 <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 800a9b8:	4b7f      	ldr	r3, [pc, #508]	; (800abb8 <OpenThread_CallBack_Processing+0x3d8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 846b 	beq.w	800b298 <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800a9c2:	4b7d      	ldr	r3, [pc, #500]	; (800abb8 <OpenThread_CallBack_Processing+0x3d8>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	6892      	ldr	r2, [r2, #8]
 800a9ca:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800a9d0:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800a9d6:	4798      	blx	r3
    }
    break;
 800a9d8:	f000 bc5e 	b.w	800b298 <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 800a9dc:	4b77      	ldr	r3, [pc, #476]	; (800abbc <OpenThread_CallBack_Processing+0x3dc>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 845b 	beq.w	800b29c <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800a9e6:	4b75      	ldr	r3, [pc, #468]	; (800abbc <OpenThread_CallBack_Processing+0x3dc>)
 800a9e8:	681c      	ldr	r4, [r3, #0]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800a9f4:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800a9fa:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800aa00:	47a0      	blx	r4
    }
    break;
 800aa02:	f000 bc4b 	b.w	800b29c <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 800aa06:	4b6e      	ldr	r3, [pc, #440]	; (800abc0 <OpenThread_CallBack_Processing+0x3e0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 8448 	beq.w	800b2a0 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa10:	4b6b      	ldr	r3, [pc, #428]	; (800abc0 <OpenThread_CallBack_Processing+0x3e0>)
 800aa12:	681c      	ldr	r4, [r3, #0]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa1e:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa24:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa2a:	47a0      	blx	r4
    }
    break;
 800aa2c:	f000 bc38 	b.w	800b2a0 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 800aa30:	4b64      	ldr	r3, [pc, #400]	; (800abc4 <OpenThread_CallBack_Processing+0x3e4>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 8435 	beq.w	800b2a4 <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800aa3a:	4b62      	ldr	r3, [pc, #392]	; (800abc4 <OpenThread_CallBack_Processing+0x3e4>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	6892      	ldr	r2, [r2, #8]
 800aa42:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4798      	blx	r3
    }
    break;
 800aa4c:	f000 bc2a 	b.w	800b2a4 <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 800aa50:	4b5d      	ldr	r3, [pc, #372]	; (800abc8 <OpenThread_CallBack_Processing+0x3e8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 8427 	beq.w	800b2a8 <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800aa5a:	4b5b      	ldr	r3, [pc, #364]	; (800abc8 <OpenThread_CallBack_Processing+0x3e8>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	6892      	ldr	r2, [r2, #8]
 800aa62:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4798      	blx	r3
    }
    break;
 800aa6c:	f000 bc1c 	b.w	800b2a8 <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800aa70:	4b56      	ldr	r3, [pc, #344]	; (800abcc <OpenThread_CallBack_Processing+0x3ec>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8419 	beq.w	800b2ac <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800aa7a:	4b54      	ldr	r3, [pc, #336]	; (800abcc <OpenThread_CallBack_Processing+0x3ec>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	6892      	ldr	r2, [r2, #8]
 800aa82:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4798      	blx	r3
    }
    break;
 800aa8c:	f000 bc0e 	b.w	800b2ac <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 800aa90:	4b4f      	ldr	r3, [pc, #316]	; (800abd0 <OpenThread_CallBack_Processing+0x3f0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 840b 	beq.w	800b2b0 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800aa9a:	4b4d      	ldr	r3, [pc, #308]	; (800abd0 <OpenThread_CallBack_Processing+0x3f0>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	6892      	ldr	r2, [r2, #8]
 800aaa2:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800aaa8:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800aaae:	4798      	blx	r3
    }
    break;
 800aab0:	e3fe      	b.n	800b2b0 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 800aab2:	4b48      	ldr	r3, [pc, #288]	; (800abd4 <OpenThread_CallBack_Processing+0x3f4>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 83fc 	beq.w	800b2b4 <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 800aabc:	4b45      	ldr	r3, [pc, #276]	; (800abd4 <OpenThread_CallBack_Processing+0x3f4>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	683a      	ldr	r2, [r7, #0]
 800aac2:	6892      	ldr	r2, [r2, #8]
 800aac4:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 800aaca:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 800aad0:	4798      	blx	r3
    }
    break;
 800aad2:	e3ef      	b.n	800b2b4 <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 800aad4:	4b3f      	ldr	r3, [pc, #252]	; (800abd4 <OpenThread_CallBack_Processing+0x3f4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 83ed 	beq.w	800b2b8 <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 800aade:	4b3e      	ldr	r3, [pc, #248]	; (800abd8 <OpenThread_CallBack_Processing+0x3f8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	6892      	ldr	r2, [r2, #8]
 800aae6:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 800aaec:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800aaf2:	4798      	blx	r3
    }
    break;
 800aaf4:	e3e0      	b.n	800b2b8 <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 800aaf6:	4b39      	ldr	r3, [pc, #228]	; (800abdc <OpenThread_CallBack_Processing+0x3fc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 83de 	beq.w	800b2bc <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800ab00:	4b36      	ldr	r3, [pc, #216]	; (800abdc <OpenThread_CallBack_Processing+0x3fc>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	6892      	ldr	r2, [r2, #8]
 800ab08:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4798      	blx	r3
    }
    break;
 800ab12:	e3d3      	b.n	800b2bc <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 800ab14:	4b32      	ldr	r3, [pc, #200]	; (800abe0 <OpenThread_CallBack_Processing+0x400>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 83d1 	beq.w	800b2c0 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 800ab1e:	4b30      	ldr	r3, [pc, #192]	; (800abe0 <OpenThread_CallBack_Processing+0x400>)
 800ab20:	681c      	ldr	r4, [r3, #0]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab2c:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab32:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab38:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	462b      	mov	r3, r5
 800ab42:	47a0      	blx	r4
    }
    break;
 800ab44:	e3bc      	b.n	800b2c0 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 800ab46:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <OpenThread_CallBack_Processing+0x404>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 83ba 	beq.w	800b2c4 <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800ab50:	4b24      	ldr	r3, [pc, #144]	; (800abe4 <OpenThread_CallBack_Processing+0x404>)
 800ab52:	681c      	ldr	r4, [r3, #0]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800ab5e:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800ab64:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800ab6a:	47a0      	blx	r4
    }
    break;
 800ab6c:	e3aa      	b.n	800b2c4 <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <OpenThread_CallBack_Processing+0x408>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 83a8 	beq.w	800b2c8 <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800ab78:	4b1b      	ldr	r3, [pc, #108]	; (800abe8 <OpenThread_CallBack_Processing+0x408>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800ab84:	4611      	mov	r1, r2
 800ab86:	4798      	blx	r3
    }
    break;
 800ab88:	e39e      	b.n	800b2c8 <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 800ab8a:	4b18      	ldr	r3, [pc, #96]	; (800abec <OpenThread_CallBack_Processing+0x40c>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 839c 	beq.w	800b2cc <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800ab94:	4b15      	ldr	r3, [pc, #84]	; (800abec <OpenThread_CallBack_Processing+0x40c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	6892      	ldr	r2, [r2, #8]
 800ab9c:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800aba2:	4611      	mov	r1, r2
 800aba4:	4798      	blx	r3
    }
    break;
 800aba6:	e391      	b.n	800b2cc <OpenThread_CallBack_Processing+0xaec>
 800aba8:	2000086c 	.word	0x2000086c
 800abac:	20000874 	.word	0x20000874
 800abb0:	20000870 	.word	0x20000870
 800abb4:	20000800 	.word	0x20000800
 800abb8:	200007fc 	.word	0x200007fc
 800abbc:	20000804 	.word	0x20000804
 800abc0:	200007f8 	.word	0x200007f8
 800abc4:	20000878 	.word	0x20000878
 800abc8:	2000087c 	.word	0x2000087c
 800abcc:	20000880 	.word	0x20000880
 800abd0:	20000888 	.word	0x20000888
 800abd4:	20000884 	.word	0x20000884
 800abd8:	2000088c 	.word	0x2000088c
 800abdc:	20000898 	.word	0x20000898
 800abe0:	20000894 	.word	0x20000894
 800abe4:	20000890 	.word	0x20000890
 800abe8:	200007d8 	.word	0x200007d8
 800abec:	20000808 	.word	0x20000808
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 800abf0:	4b97      	ldr	r3, [pc, #604]	; (800ae50 <OpenThread_CallBack_Processing+0x670>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 836b 	beq.w	800b2d0 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 800abfa:	4b95      	ldr	r3, [pc, #596]	; (800ae50 <OpenThread_CallBack_Processing+0x670>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	6892      	ldr	r2, [r2, #8]
 800ac02:	4610      	mov	r0, r2
 800ac04:	4798      	blx	r3
    }
    break;
 800ac06:	e363      	b.n	800b2d0 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 800ac08:	4b92      	ldr	r3, [pc, #584]	; (800ae54 <OpenThread_CallBack_Processing+0x674>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 8361 	beq.w	800b2d4 <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800ac12:	4b90      	ldr	r3, [pc, #576]	; (800ae54 <OpenThread_CallBack_Processing+0x674>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	6892      	ldr	r2, [r2, #8]
 800ac1a:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800ac20:	4611      	mov	r1, r2
 800ac22:	4798      	blx	r3
    }
    break;
 800ac24:	e356      	b.n	800b2d4 <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	4b8a      	ldr	r3, [pc, #552]	; (800ae58 <OpenThread_CallBack_Processing+0x678>)
 800ac2e:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800ac30:	4b89      	ldr	r3, [pc, #548]	; (800ae58 <OpenThread_CallBack_Processing+0x678>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	4a89      	ldr	r2, [pc, #548]	; (800ae5c <OpenThread_CallBack_Processing+0x67c>)
 800ac38:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800ac3a:	4b88      	ldr	r3, [pc, #544]	; (800ae5c <OpenThread_CallBack_Processing+0x67c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 834a 	beq.w	800b2d8 <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800ac44:	4b85      	ldr	r3, [pc, #532]	; (800ae5c <OpenThread_CallBack_Processing+0x67c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a83      	ldr	r2, [pc, #524]	; (800ae58 <OpenThread_CallBack_Processing+0x678>)
 800ac4a:	6812      	ldr	r2, [r2, #0]
 800ac4c:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800ac52:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800ac58:	4798      	blx	r3
    }
    break;
 800ac5a:	e33d      	b.n	800b2d8 <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800ac5c:	4b80      	ldr	r3, [pc, #512]	; (800ae60 <OpenThread_CallBack_Processing+0x680>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 833b 	beq.w	800b2dc <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800ac66:	4b7e      	ldr	r3, [pc, #504]	; (800ae60 <OpenThread_CallBack_Processing+0x680>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	6892      	ldr	r2, [r2, #8]
 800ac6e:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800ac74:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800ac7a:	4798      	blx	r3
    }
    break;
 800ac7c:	e32e      	b.n	800b2dc <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	461a      	mov	r2, r3
 800ac84:	4b77      	ldr	r3, [pc, #476]	; (800ae64 <OpenThread_CallBack_Processing+0x684>)
 800ac86:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800ac88:	4b76      	ldr	r3, [pc, #472]	; (800ae64 <OpenThread_CallBack_Processing+0x684>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	4a76      	ldr	r2, [pc, #472]	; (800ae68 <OpenThread_CallBack_Processing+0x688>)
 800ac90:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800ac92:	4b75      	ldr	r3, [pc, #468]	; (800ae68 <OpenThread_CallBack_Processing+0x688>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f000 8322 	beq.w	800b2e0 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ac9c:	4b72      	ldr	r3, [pc, #456]	; (800ae68 <OpenThread_CallBack_Processing+0x688>)
 800ac9e:	681c      	ldr	r4, [r3, #0]
 800aca0:	4b70      	ldr	r3, [pc, #448]	; (800ae64 <OpenThread_CallBack_Processing+0x684>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800acaa:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800acb0:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	47a0      	blx	r4
    }
    break;
 800acba:	e311      	b.n	800b2e0 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800acbc:	4b6b      	ldr	r3, [pc, #428]	; (800ae6c <OpenThread_CallBack_Processing+0x68c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 830f 	beq.w	800b2e4 <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800acc6:	4b69      	ldr	r3, [pc, #420]	; (800ae6c <OpenThread_CallBack_Processing+0x68c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	6892      	ldr	r2, [r2, #8]
 800acce:	2a00      	cmp	r2, #0
 800acd0:	bf14      	ite	ne
 800acd2:	2201      	movne	r2, #1
 800acd4:	2200      	moveq	r2, #0
 800acd6:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800acdc:	4611      	mov	r1, r2
 800acde:	4798      	blx	r3
    }
    break;
 800ace0:	e300      	b.n	800b2e4 <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800ace2:	4b62      	ldr	r3, [pc, #392]	; (800ae6c <OpenThread_CallBack_Processing+0x68c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 82fe 	beq.w	800b2e8 <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800acec:	4b5f      	ldr	r3, [pc, #380]	; (800ae6c <OpenThread_CallBack_Processing+0x68c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	6892      	ldr	r2, [r2, #8]
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	bf14      	ite	ne
 800acf8:	2201      	movne	r2, #1
 800acfa:	2200      	moveq	r2, #0
 800acfc:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800ad02:	4611      	mov	r1, r2
 800ad04:	4798      	blx	r3
    }
    break;
 800ad06:	e2ef      	b.n	800b2e8 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800ad08:	4b59      	ldr	r3, [pc, #356]	; (800ae70 <OpenThread_CallBack_Processing+0x690>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 82ed 	beq.w	800b2ec <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ad12:	4b57      	ldr	r3, [pc, #348]	; (800ae70 <OpenThread_CallBack_Processing+0x690>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	6892      	ldr	r2, [r2, #8]
 800ad1a:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ad20:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ad26:	4798      	blx	r3
    }
    break;
 800ad28:	e2e0      	b.n	800b2ec <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	f000 fb78 	bl	800b420 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800ad30:	f7f9 fb4f 	bl	80043d2 <HAL_NVIC_SystemReset>
    break;
 800ad34:	e317      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800ad36:	4b4f      	ldr	r3, [pc, #316]	; (800ae74 <OpenThread_CallBack_Processing+0x694>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 82d8 	beq.w	800b2f0 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ad40:	4b4c      	ldr	r3, [pc, #304]	; (800ae74 <OpenThread_CallBack_Processing+0x694>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	6892      	ldr	r2, [r2, #8]
 800ad48:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4798      	blx	r3
    }
    break;
 800ad52:	e2cd      	b.n	800b2f0 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800ad54:	4b48      	ldr	r3, [pc, #288]	; (800ae78 <OpenThread_CallBack_Processing+0x698>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 82cb 	beq.w	800b2f4 <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800ad5e:	4b46      	ldr	r3, [pc, #280]	; (800ae78 <OpenThread_CallBack_Processing+0x698>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	6892      	ldr	r2, [r2, #8]
 800ad66:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800ad6c:	2a00      	cmp	r2, #0
 800ad6e:	bf14      	ite	ne
 800ad70:	2201      	movne	r2, #1
 800ad72:	2200      	moveq	r2, #0
 800ad74:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800ad7a:	4798      	blx	r3
    }
    break;
 800ad7c:	e2ba      	b.n	800b2f4 <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800ad7e:	4b3f      	ldr	r3, [pc, #252]	; (800ae7c <OpenThread_CallBack_Processing+0x69c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 82b8 	beq.w	800b2f8 <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800ad88:	4b3c      	ldr	r3, [pc, #240]	; (800ae7c <OpenThread_CallBack_Processing+0x69c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800ad90:	4611      	mov	r1, r2
 800ad92:	2000      	movs	r0, #0
 800ad94:	4798      	blx	r3
    }
    break;
 800ad96:	e2af      	b.n	800b2f8 <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 800ad98:	4b39      	ldr	r3, [pc, #228]	; (800ae80 <OpenThread_CallBack_Processing+0x6a0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 82ad 	beq.w	800b2fc <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800ada2:	4b37      	ldr	r3, [pc, #220]	; (800ae80 <OpenThread_CallBack_Processing+0x6a0>)
 800ada4:	681c      	ldr	r4, [r3, #0]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adb0:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adb6:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adbc:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	462b      	mov	r3, r5
 800adc8:	47a0      	blx	r4
    }
    break;
 800adca:	e297      	b.n	800b2fc <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800adcc:	4b2d      	ldr	r3, [pc, #180]	; (800ae84 <OpenThread_CallBack_Processing+0x6a4>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8295 	beq.w	800b300 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800add6:	4b2b      	ldr	r3, [pc, #172]	; (800ae84 <OpenThread_CallBack_Processing+0x6a4>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	6892      	ldr	r2, [r2, #8]
 800adde:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800ade4:	4611      	mov	r1, r2
 800ade6:	4798      	blx	r3
    }
    break;
 800ade8:	e28a      	b.n	800b300 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800adea:	4b27      	ldr	r3, [pc, #156]	; (800ae88 <OpenThread_CallBack_Processing+0x6a8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 8288 	beq.w	800b304 <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800adf4:	4b24      	ldr	r3, [pc, #144]	; (800ae88 <OpenThread_CallBack_Processing+0x6a8>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	6892      	ldr	r2, [r2, #8]
 800adfc:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800ae02:	4611      	mov	r1, r2
 800ae04:	4798      	blx	r3
    }
    break;
 800ae06:	e27d      	b.n	800b304 <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800ae08:	4b20      	ldr	r3, [pc, #128]	; (800ae8c <OpenThread_CallBack_Processing+0x6ac>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 827b 	beq.w	800b308 <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800ae12:	4b1e      	ldr	r3, [pc, #120]	; (800ae8c <OpenThread_CallBack_Processing+0x6ac>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	6892      	ldr	r2, [r2, #8]
 800ae1a:	4610      	mov	r0, r2
          p_notification->Data[1],
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800ae20:	2a00      	cmp	r2, #0
 800ae22:	bf14      	ite	ne
 800ae24:	2201      	movne	r2, #1
 800ae26:	2200      	moveq	r2, #0
 800ae28:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800ae2e:	4798      	blx	r3
    }
    break;
 800ae30:	e26a      	b.n	800b308 <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800ae32:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <OpenThread_CallBack_Processing+0x6b0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 8268 	beq.w	800b30c <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800ae3c:	4b14      	ldr	r3, [pc, #80]	; (800ae90 <OpenThread_CallBack_Processing+0x6b0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	6892      	ldr	r2, [r2, #8]
 800ae44:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4798      	blx	r3
    }
    break;
 800ae4e:	e25d      	b.n	800b30c <OpenThread_CallBack_Processing+0xb2c>
 800ae50:	2000080c 	.word	0x2000080c
 800ae54:	20000810 	.word	0x20000810
 800ae58:	20000854 	.word	0x20000854
 800ae5c:	20000848 	.word	0x20000848
 800ae60:	2000084c 	.word	0x2000084c
 800ae64:	20000858 	.word	0x20000858
 800ae68:	20000850 	.word	0x20000850
 800ae6c:	20000860 	.word	0x20000860
 800ae70:	2000085c 	.word	0x2000085c
 800ae74:	200007e0 	.word	0x200007e0
 800ae78:	200007e4 	.word	0x200007e4
 800ae7c:	200007dc 	.word	0x200007dc
 800ae80:	200007e8 	.word	0x200007e8
 800ae84:	200007ec 	.word	0x200007ec
 800ae88:	200007f0 	.word	0x200007f0
 800ae8c:	200007f4 	.word	0x200007f4
 800ae90:	20000814 	.word	0x20000814
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800ae94:	4b95      	ldr	r3, [pc, #596]	; (800b0ec <OpenThread_CallBack_Processing+0x90c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 8239 	beq.w	800b310 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800ae9e:	4b93      	ldr	r3, [pc, #588]	; (800b0ec <OpenThread_CallBack_Processing+0x90c>)
 800aea0:	681c      	ldr	r4, [r3, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800aeaa:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800aeb0:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800aeb6:	47a0      	blx	r4
    }
    break;
 800aeb8:	e22a      	b.n	800b310 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800aeba:	4b8d      	ldr	r3, [pc, #564]	; (800b0f0 <OpenThread_CallBack_Processing+0x910>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 8228 	beq.w	800b314 <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800aec4:	4b8a      	ldr	r3, [pc, #552]	; (800b0f0 <OpenThread_CallBack_Processing+0x910>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	6892      	ldr	r2, [r2, #8]
 800aecc:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800aed6:	4798      	blx	r3
    }
    break;
 800aed8:	e21c      	b.n	800b314 <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800aeda:	4b86      	ldr	r3, [pc, #536]	; (800b0f4 <OpenThread_CallBack_Processing+0x914>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 821a 	beq.w	800b318 <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800aee4:	4b83      	ldr	r3, [pc, #524]	; (800b0f4 <OpenThread_CallBack_Processing+0x914>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	6892      	ldr	r2, [r2, #8]
 800aeec:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800aef2:	4611      	mov	r1, r2
 800aef4:	4798      	blx	r3
    }
    break;
 800aef6:	e20f      	b.n	800b318 <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800aef8:	4b7f      	ldr	r3, [pc, #508]	; (800b0f8 <OpenThread_CallBack_Processing+0x918>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 820d 	beq.w	800b31c <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af02:	4b7d      	ldr	r3, [pc, #500]	; (800b0f8 <OpenThread_CallBack_Processing+0x918>)
 800af04:	681c      	ldr	r4, [r3, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af10:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af16:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af1c:	47a0      	blx	r4
    }
    break;
 800af1e:	e1fd      	b.n	800b31c <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800af20:	4b76      	ldr	r3, [pc, #472]	; (800b0fc <OpenThread_CallBack_Processing+0x91c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 81fb 	beq.w	800b320 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af2a:	4b74      	ldr	r3, [pc, #464]	; (800b0fc <OpenThread_CallBack_Processing+0x91c>)
 800af2c:	681c      	ldr	r4, [r3, #0]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af38:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af3e:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af44:	47a0      	blx	r4
    }
    break;
 800af46:	e1eb      	b.n	800b320 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800af48:	4b6d      	ldr	r3, [pc, #436]	; (800b100 <OpenThread_CallBack_Processing+0x920>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 81e9 	beq.w	800b324 <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800af52:	4b6b      	ldr	r3, [pc, #428]	; (800b100 <OpenThread_CallBack_Processing+0x920>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	6892      	ldr	r2, [r2, #8]
 800af5a:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800af60:	4611      	mov	r1, r2
 800af62:	4798      	blx	r3
    }
    break;
 800af64:	e1de      	b.n	800b324 <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800af66:	4b67      	ldr	r3, [pc, #412]	; (800b104 <OpenThread_CallBack_Processing+0x924>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 81dc 	beq.w	800b328 <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800af70:	4b64      	ldr	r3, [pc, #400]	; (800b104 <OpenThread_CallBack_Processing+0x924>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	6892      	ldr	r2, [r2, #8]
 800af78:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800af7e:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	4798      	blx	r3
    }
    break;
 800af88:	e1ce      	b.n	800b328 <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800af8a:	4b5f      	ldr	r3, [pc, #380]	; (800b108 <OpenThread_CallBack_Processing+0x928>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 81cc 	beq.w	800b32c <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800af94:	4b5c      	ldr	r3, [pc, #368]	; (800b108 <OpenThread_CallBack_Processing+0x928>)
 800af96:	681c      	ldr	r4, [r3, #0]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800afa2:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800afa8:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	47a0      	blx	r4
    }
    break;
 800afb2:	e1bb      	b.n	800b32c <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800afb4:	4b55      	ldr	r3, [pc, #340]	; (800b10c <OpenThread_CallBack_Processing+0x92c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 81b9 	beq.w	800b330 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800afbe:	4b53      	ldr	r3, [pc, #332]	; (800b10c <OpenThread_CallBack_Processing+0x92c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	6892      	ldr	r2, [r2, #8]
 800afc6:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800afcc:	b252      	sxtb	r2, r2
 800afce:	4611      	mov	r1, r2
 800afd0:	4798      	blx	r3
    }
    break;
 800afd2:	e1ad      	b.n	800b330 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800afd4:	4b4e      	ldr	r3, [pc, #312]	; (800b110 <OpenThread_CallBack_Processing+0x930>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 81ab 	beq.w	800b334 <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800afde:	4b4c      	ldr	r3, [pc, #304]	; (800b110 <OpenThread_CallBack_Processing+0x930>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	6892      	ldr	r2, [r2, #8]
 800afe6:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800afec:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800aff2:	4798      	blx	r3
    }
    break;
 800aff4:	e19e      	b.n	800b334 <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	461a      	mov	r2, r3
 800affc:	4b45      	ldr	r3, [pc, #276]	; (800b114 <OpenThread_CallBack_Processing+0x934>)
 800affe:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800b000:	4b44      	ldr	r3, [pc, #272]	; (800b114 <OpenThread_CallBack_Processing+0x934>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	4a44      	ldr	r2, [pc, #272]	; (800b118 <OpenThread_CallBack_Processing+0x938>)
 800b008:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800b00a:	4b43      	ldr	r3, [pc, #268]	; (800b118 <OpenThread_CallBack_Processing+0x938>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 8192 	beq.w	800b338 <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b014:	4b40      	ldr	r3, [pc, #256]	; (800b118 <OpenThread_CallBack_Processing+0x938>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a3e      	ldr	r2, [pc, #248]	; (800b114 <OpenThread_CallBack_Processing+0x934>)
 800b01a:	6812      	ldr	r2, [r2, #0]
 800b01c:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b022:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b028:	4798      	blx	r3
 800b02a:	4603      	mov	r3, r0
 800b02c:	461a      	mov	r2, r3
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	609a      	str	r2, [r3, #8]
      }
      break;
 800b032:	e181      	b.n	800b338 <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800b034:	4b39      	ldr	r3, [pc, #228]	; (800b11c <OpenThread_CallBack_Processing+0x93c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 817f 	beq.w	800b33c <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800b03e:	4b37      	ldr	r3, [pc, #220]	; (800b11c <OpenThread_CallBack_Processing+0x93c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	6892      	ldr	r2, [r2, #8]
 800b046:	4610      	mov	r0, r2
 800b048:	4798      	blx	r3
    }
    break;
 800b04a:	e177      	b.n	800b33c <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800b04c:	4b34      	ldr	r3, [pc, #208]	; (800b120 <OpenThread_CallBack_Processing+0x940>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 8175 	beq.w	800b340 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b056:	4b32      	ldr	r3, [pc, #200]	; (800b120 <OpenThread_CallBack_Processing+0x940>)
 800b058:	6819      	ldr	r1, [r3, #0]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b064:	2200      	movs	r2, #0
 800b066:	461c      	mov	r4, r3
 800b068:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4622      	mov	r2, r4
 800b074:	462b      	mov	r3, r5
 800b076:	4788      	blx	r1
    }
    break;
 800b078:	e162      	b.n	800b340 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 800b07a:	4b2a      	ldr	r3, [pc, #168]	; (800b124 <OpenThread_CallBack_Processing+0x944>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 8160 	beq.w	800b344 <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800b084:	4b27      	ldr	r3, [pc, #156]	; (800b124 <OpenThread_CallBack_Processing+0x944>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	6892      	ldr	r2, [r2, #8]
 800b08c:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800b092:	4611      	mov	r1, r2
 800b094:	4798      	blx	r3
    }
    break;
 800b096:	e155      	b.n	800b344 <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 800b098:	4b23      	ldr	r3, [pc, #140]	; (800b128 <OpenThread_CallBack_Processing+0x948>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f000 8153 	beq.w	800b348 <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800b0a2:	4b21      	ldr	r3, [pc, #132]	; (800b128 <OpenThread_CallBack_Processing+0x948>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	6892      	ldr	r2, [r2, #8]
 800b0aa:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	4798      	blx	r3
    }
    break;
 800b0b4:	e148      	b.n	800b348 <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b0be:	4a1b      	ldr	r2, [pc, #108]	; (800b12c <OpenThread_CallBack_Processing+0x94c>)
 800b0c0:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 800b0c2:	4b1a      	ldr	r3, [pc, #104]	; (800b12c <OpenThread_CallBack_Processing+0x94c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	4a19      	ldr	r2, [pc, #100]	; (800b130 <OpenThread_CallBack_Processing+0x950>)
 800b0ca:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 800b0cc:	4b18      	ldr	r3, [pc, #96]	; (800b130 <OpenThread_CallBack_Processing+0x950>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 813b 	beq.w	800b34c <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800b0d6:	4b16      	ldr	r3, [pc, #88]	; (800b130 <OpenThread_CallBack_Processing+0x950>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	6892      	ldr	r2, [r2, #8]
 800b0de:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800b0e4:	b2d2      	uxtb	r2, r2
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	4798      	blx	r3
    }
    break;
 800b0ea:	e12f      	b.n	800b34c <OpenThread_CallBack_Processing+0xb6c>
 800b0ec:	20000820 	.word	0x20000820
 800b0f0:	20000824 	.word	0x20000824
 800b0f4:	20000818 	.word	0x20000818
 800b0f8:	2000081c 	.word	0x2000081c
 800b0fc:	20000828 	.word	0x20000828
 800b100:	2000082c 	.word	0x2000082c
 800b104:	20000830 	.word	0x20000830
 800b108:	20000834 	.word	0x20000834
 800b10c:	20000838 	.word	0x20000838
 800b110:	2000083c 	.word	0x2000083c
 800b114:	20000844 	.word	0x20000844
 800b118:	20000840 	.word	0x20000840
 800b11c:	20000864 	.word	0x20000864
 800b120:	20000868 	.word	0x20000868
 800b124:	2000089c 	.word	0x2000089c
 800b128:	200008a0 	.word	0x200008a0
 800b12c:	200008a4 	.word	0x200008a4
 800b130:	200008ac 	.word	0x200008ac
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b13c:	4a8d      	ldr	r2, [pc, #564]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b13e:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800b140:	4b8c      	ldr	r3, [pc, #560]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4a8c      	ldr	r2, [pc, #560]	; (800b378 <OpenThread_CallBack_Processing+0xb98>)
 800b148:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 800b14a:	4b8b      	ldr	r3, [pc, #556]	; (800b378 <OpenThread_CallBack_Processing+0xb98>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 80fe 	beq.w	800b350 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800b154:	4b88      	ldr	r3, [pc, #544]	; (800b378 <OpenThread_CallBack_Processing+0xb98>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	6892      	ldr	r2, [r2, #8]
 800b15c:	4610      	mov	r0, r2
 800b15e:	4798      	blx	r3
    }
    break;
 800b160:	e0f6      	b.n	800b350 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b16a:	4a82      	ldr	r2, [pc, #520]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b16c:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800b16e:	4b81      	ldr	r3, [pc, #516]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	4a81      	ldr	r2, [pc, #516]	; (800b37c <OpenThread_CallBack_Processing+0xb9c>)
 800b176:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 800b178:	4b80      	ldr	r3, [pc, #512]	; (800b37c <OpenThread_CallBack_Processing+0xb9c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 80e9 	beq.w	800b354 <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b182:	4b7e      	ldr	r3, [pc, #504]	; (800b37c <OpenThread_CallBack_Processing+0xb9c>)
 800b184:	681c      	ldr	r4, [r3, #0]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b194:	2b00      	cmp	r3, #0
 800b196:	bf14      	ite	ne
 800b198:	2301      	movne	r3, #1
 800b19a:	2300      	moveq	r3, #0
 800b19c:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b1a2:	47a0      	blx	r4
    }
    break;
 800b1a4:	e0d6      	b.n	800b354 <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b1ae:	4a71      	ldr	r2, [pc, #452]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b1b0:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 800b1b2:	4b70      	ldr	r3, [pc, #448]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	4a71      	ldr	r2, [pc, #452]	; (800b380 <OpenThread_CallBack_Processing+0xba0>)
 800b1ba:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800b1bc:	4b70      	ldr	r3, [pc, #448]	; (800b380 <OpenThread_CallBack_Processing+0xba0>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80c9 	beq.w	800b358 <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800b1c6:	4b6e      	ldr	r3, [pc, #440]	; (800b380 <OpenThread_CallBack_Processing+0xba0>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	6892      	ldr	r2, [r2, #8]
 800b1ce:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	4798      	blx	r3
    }
    break;
 800b1d8:	e0be      	b.n	800b358 <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b1e2:	4a64      	ldr	r2, [pc, #400]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b1e4:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800b1e6:	4b63      	ldr	r3, [pc, #396]	; (800b374 <OpenThread_CallBack_Processing+0xb94>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	4a65      	ldr	r2, [pc, #404]	; (800b384 <OpenThread_CallBack_Processing+0xba4>)
 800b1ee:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800b1f0:	4b64      	ldr	r3, [pc, #400]	; (800b384 <OpenThread_CallBack_Processing+0xba4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 80b1 	beq.w	800b35c <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800b1fa:	4b62      	ldr	r3, [pc, #392]	; (800b384 <OpenThread_CallBack_Processing+0xba4>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	6892      	ldr	r2, [r2, #8]
 800b202:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800b20c:	4798      	blx	r3
    }
    break;
 800b20e:	e0a5      	b.n	800b35c <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	4a5c      	ldr	r2, [pc, #368]	; (800b388 <OpenThread_CallBack_Processing+0xba8>)
 800b218:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 800b21a:	4b5b      	ldr	r3, [pc, #364]	; (800b388 <OpenThread_CallBack_Processing+0xba8>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	4a5a      	ldr	r2, [pc, #360]	; (800b38c <OpenThread_CallBack_Processing+0xbac>)
 800b222:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800b224:	4b59      	ldr	r3, [pc, #356]	; (800b38c <OpenThread_CallBack_Processing+0xbac>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 8099 	beq.w	800b360 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800b22e:	4b57      	ldr	r3, [pc, #348]	; (800b38c <OpenThread_CallBack_Processing+0xbac>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	6892      	ldr	r2, [r2, #8]
 800b236:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800b23c:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800b242:	4798      	blx	r3
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	609a      	str	r2, [r3, #8]
    }
    break;
 800b24c:	e088      	b.n	800b360 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	6a1b      	ldr	r3, [r3, #32]
 800b254:	4a4c      	ldr	r2, [pc, #304]	; (800b388 <OpenThread_CallBack_Processing+0xba8>)
 800b256:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 800b258:	4b4b      	ldr	r3, [pc, #300]	; (800b388 <OpenThread_CallBack_Processing+0xba8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	4a4c      	ldr	r2, [pc, #304]	; (800b390 <OpenThread_CallBack_Processing+0xbb0>)
 800b260:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800b262:	4b4b      	ldr	r3, [pc, #300]	; (800b390 <OpenThread_CallBack_Processing+0xbb0>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d07c      	beq.n	800b364 <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800b26a:	4b49      	ldr	r3, [pc, #292]	; (800b390 <OpenThread_CallBack_Processing+0xbb0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	6892      	ldr	r2, [r2, #8]
 800b272:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800b278:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800b27e:	4798      	blx	r3
    }
    break;
 800b280:	e070      	b.n	800b364 <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	71fb      	strb	r3, [r7, #7]
    break;
 800b286:	e06e      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b288:	bf00      	nop
 800b28a:	e06c      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b28c:	bf00      	nop
 800b28e:	e06a      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b290:	bf00      	nop
 800b292:	e068      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b294:	bf00      	nop
 800b296:	e066      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b298:	bf00      	nop
 800b29a:	e064      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b29c:	bf00      	nop
 800b29e:	e062      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2a0:	bf00      	nop
 800b2a2:	e060      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2a4:	bf00      	nop
 800b2a6:	e05e      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2a8:	bf00      	nop
 800b2aa:	e05c      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2ac:	bf00      	nop
 800b2ae:	e05a      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2b0:	bf00      	nop
 800b2b2:	e058      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2b4:	bf00      	nop
 800b2b6:	e056      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2b8:	bf00      	nop
 800b2ba:	e054      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2bc:	bf00      	nop
 800b2be:	e052      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2c0:	bf00      	nop
 800b2c2:	e050      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2c4:	bf00      	nop
 800b2c6:	e04e      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2c8:	bf00      	nop
 800b2ca:	e04c      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2cc:	bf00      	nop
 800b2ce:	e04a      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2d0:	bf00      	nop
 800b2d2:	e048      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2d4:	bf00      	nop
 800b2d6:	e046      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2d8:	bf00      	nop
 800b2da:	e044      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2dc:	bf00      	nop
 800b2de:	e042      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2e0:	bf00      	nop
 800b2e2:	e040      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2e4:	bf00      	nop
 800b2e6:	e03e      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2e8:	bf00      	nop
 800b2ea:	e03c      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2ec:	bf00      	nop
 800b2ee:	e03a      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2f0:	bf00      	nop
 800b2f2:	e038      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2f4:	bf00      	nop
 800b2f6:	e036      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2f8:	bf00      	nop
 800b2fa:	e034      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2fc:	bf00      	nop
 800b2fe:	e032      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b300:	bf00      	nop
 800b302:	e030      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b304:	bf00      	nop
 800b306:	e02e      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b308:	bf00      	nop
 800b30a:	e02c      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b30c:	bf00      	nop
 800b30e:	e02a      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b310:	bf00      	nop
 800b312:	e028      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b314:	bf00      	nop
 800b316:	e026      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b318:	bf00      	nop
 800b31a:	e024      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b31c:	bf00      	nop
 800b31e:	e022      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b320:	bf00      	nop
 800b322:	e020      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b324:	bf00      	nop
 800b326:	e01e      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b328:	bf00      	nop
 800b32a:	e01c      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b32c:	bf00      	nop
 800b32e:	e01a      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b330:	bf00      	nop
 800b332:	e018      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b334:	bf00      	nop
 800b336:	e016      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
      break;
 800b338:	bf00      	nop
 800b33a:	e014      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b33c:	bf00      	nop
 800b33e:	e012      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b340:	bf00      	nop
 800b342:	e010      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b344:	bf00      	nop
 800b346:	e00e      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b348:	bf00      	nop
 800b34a:	e00c      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b34c:	bf00      	nop
 800b34e:	e00a      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b350:	bf00      	nop
 800b352:	e008      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b354:	bf00      	nop
 800b356:	e006      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b358:	bf00      	nop
 800b35a:	e004      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b35c:	bf00      	nop
 800b35e:	e002      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b360:	bf00      	nop
 800b362:	e000      	b.n	800b366 <OpenThread_CallBack_Processing+0xb86>
    break;
 800b364:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800b366:	f000 fc1b 	bl	800bba0 <TL_THREAD_SendAck>
  return status;
 800b36a:	79fb      	ldrb	r3, [r7, #7]

}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bdb0      	pop	{r4, r5, r7, pc}
 800b374:	200008a4 	.word	0x200008a4
 800b378:	200008b0 	.word	0x200008b0
 800b37c:	200008b4 	.word	0x200008b4
 800b380:	200008b8 	.word	0x200008b8
 800b384:	200008c4 	.word	0x200008c4
 800b388:	200008a8 	.word	0x200008a8
 800b38c:	200008bc 	.word	0x200008bc
 800b390:	200008c0 	.word	0x200008c0

0800b394 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800b3a0:	f7f6 fa6e 	bl	8001880 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b3a4:	f7f6 f9fe 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800b3a8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f042 0202 	orr.w	r2, r2, #2
 800b3ba:	705a      	strb	r2, [r3, #1]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	709a      	strb	r2, [r3, #2]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f042 0201 	orr.w	r2, r2, #1
 800b3cc:	711a      	strb	r2, [r3, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	715a      	strb	r2, [r3, #5]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	719a      	strb	r2, [r3, #6]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800b3da:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b3e2:	f7f6 fa27 	bl	8001834 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b3e6:	f7f6 f9e9 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800b3ea:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	b2db      	uxtb	r3, r3
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b086      	sub	sp, #24
 800b3fe:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b400:	1d3b      	adds	r3, r7, #4
 800b402:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2200      	movs	r2, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800b40e:	f000 f957 	bl	800b6c0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	330b      	adds	r3, #11
 800b416:	78db      	ldrb	r3, [r3, #3]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b42a:	f107 030c 	add.w	r3, r7, #12
 800b42e:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800b434:	f107 020c 	add.w	r2, r7, #12
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	2101      	movs	r1, #1
 800b43c:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800b440:	f000 f93e 	bl	800b6c0 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	330b      	adds	r3, #11
 800b448:	78db      	ldrb	r3, [r3, #3]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b088      	sub	sp, #32
 800b456:	af00      	add	r7, sp, #0
 800b458:	4603      	mov	r3, r0
 800b45a:	460a      	mov	r2, r1
 800b45c:	71fb      	strb	r3, [r7, #7]
 800b45e:	4613      	mov	r3, r2
 800b460:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b462:	f107 030c 	add.w	r3, r7, #12
 800b466:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800b46c:	79bb      	ldrb	r3, [r7, #6]
 800b46e:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 800b470:	f107 020c 	add.w	r2, r7, #12
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	2102      	movs	r1, #2
 800b478:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800b47c:	f000 f920 	bl	800b6c0 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	330b      	adds	r3, #11
 800b484:	78db      	ldrb	r3, [r3, #3]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3720      	adds	r7, #32
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b490:	b480      	push	{r7}
 800b492:	b08b      	sub	sp, #44	; 0x2c
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b4b8:	4b4a      	ldr	r3, [pc, #296]	; (800b5e4 <SHCI_GetWirelessFwInfo+0x154>)
 800b4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b4c0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b4ca:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a44      	ldr	r2, [pc, #272]	; (800b5e8 <SHCI_GetWirelessFwInfo+0x158>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d10f      	bne.n	800b4fc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	e01a      	b.n	800b532 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b504:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b508:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	0e1b      	lsrs	r3, r3, #24
 800b536:	b2da      	uxtb	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	0c1b      	lsrs	r3, r3, #16
 800b540:	b2da      	uxtb	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	0a1b      	lsrs	r3, r3, #8
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	091b      	lsrs	r3, r3, #4
 800b554:	b2db      	uxtb	r3, r3
 800b556:	f003 030f 	and.w	r3, r3, #15
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	b2db      	uxtb	r3, r3
 800b564:	f003 030f 	and.w	r3, r3, #15
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	0e1b      	lsrs	r3, r3, #24
 800b572:	b2da      	uxtb	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	0c1b      	lsrs	r3, r3, #16
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	0a1b      	lsrs	r3, r3, #8
 800b586:	b2da      	uxtb	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	b2da      	uxtb	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	0e1b      	lsrs	r3, r3, #24
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	0c1b      	lsrs	r3, r3, #16
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	0a1b      	lsrs	r3, r3, #8
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	0e1b      	lsrs	r3, r3, #24
 800b5be:	b2da      	uxtb	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	0c1b      	lsrs	r3, r3, #16
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	372c      	adds	r7, #44	; 0x2c
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	58004000 	.word	0x58004000
 800b5e8:	a94656b9 	.word	0xa94656b9

0800b5ec <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	4a08      	ldr	r2, [pc, #32]	; (800b61c <shci_init+0x30>)
 800b5fc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b5fe:	4a08      	ldr	r2, [pc, #32]	; (800b620 <shci_init+0x34>)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b604:	4806      	ldr	r0, [pc, #24]	; (800b620 <shci_init+0x34>)
 800b606:	f000 f911 	bl	800b82c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 f894 	bl	800b73c <TlInit>

  return;
 800b614:	bf00      	nop
}
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	200008e8 	.word	0x200008e8
 800b620:	200008c8 	.word	0x200008c8

0800b624 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b62a:	4822      	ldr	r0, [pc, #136]	; (800b6b4 <shci_user_evt_proc+0x90>)
 800b62c:	f000 fe96 	bl	800c35c <LST_is_empty>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d12b      	bne.n	800b68e <shci_user_evt_proc+0x6a>
 800b636:	4b20      	ldr	r3, [pc, #128]	; (800b6b8 <shci_user_evt_proc+0x94>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d027      	beq.n	800b68e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b63e:	f107 030c 	add.w	r3, r7, #12
 800b642:	4619      	mov	r1, r3
 800b644:	481b      	ldr	r0, [pc, #108]	; (800b6b4 <shci_user_evt_proc+0x90>)
 800b646:	f000 ff18 	bl	800c47a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b64a:	4b1c      	ldr	r3, [pc, #112]	; (800b6bc <shci_user_evt_proc+0x98>)
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00c      	beq.n	800b66c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b656:	2301      	movs	r3, #1
 800b658:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b65a:	4b18      	ldr	r3, [pc, #96]	; (800b6bc <shci_user_evt_proc+0x98>)
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	1d3a      	adds	r2, r7, #4
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b664:	793a      	ldrb	r2, [r7, #4]
 800b666:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <shci_user_evt_proc+0x94>)
 800b668:	701a      	strb	r2, [r3, #0]
 800b66a:	e002      	b.n	800b672 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b66c:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <shci_user_evt_proc+0x94>)
 800b66e:	2201      	movs	r2, #1
 800b670:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b672:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <shci_user_evt_proc+0x94>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d004      	beq.n	800b684 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fb0b 	bl	800bc98 <TL_MM_EvtDone>
 800b682:	e004      	b.n	800b68e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4619      	mov	r1, r3
 800b688:	480a      	ldr	r0, [pc, #40]	; (800b6b4 <shci_user_evt_proc+0x90>)
 800b68a:	f000 fe89 	bl	800c3a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b68e:	4809      	ldr	r0, [pc, #36]	; (800b6b4 <shci_user_evt_proc+0x90>)
 800b690:	f000 fe64 	bl	800c35c <LST_is_empty>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d107      	bne.n	800b6aa <shci_user_evt_proc+0x86>
 800b69a:	4b07      	ldr	r3, [pc, #28]	; (800b6b8 <shci_user_evt_proc+0x94>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d003      	beq.n	800b6aa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b6a2:	4804      	ldr	r0, [pc, #16]	; (800b6b4 <shci_user_evt_proc+0x90>)
 800b6a4:	f7f6 ff3a 	bl	800251c <shci_notify_asynch_evt>
  }


  return;
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
}
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	200000a4 	.word	0x200000a4
 800b6b8:	200000b4 	.word	0x200000b4
 800b6bc:	200008c8 	.word	0x200008c8

0800b6c0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60ba      	str	r2, [r7, #8]
 800b6c8:	607b      	str	r3, [r7, #4]
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	81fb      	strh	r3, [r7, #14]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	f000 f864 	bl	800b7a0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b6d8:	4b16      	ldr	r3, [pc, #88]	; (800b734 <shci_send+0x74>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	89fa      	ldrh	r2, [r7, #14]
 800b6de:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b6e2:	4b14      	ldr	r3, [pc, #80]	; (800b734 <shci_send+0x74>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	7b7a      	ldrb	r2, [r7, #13]
 800b6e8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b6ea:	4b12      	ldr	r3, [pc, #72]	; (800b734 <shci_send+0x74>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	330c      	adds	r3, #12
 800b6f0:	7b7a      	ldrb	r2, [r7, #13]
 800b6f2:	68b9      	ldr	r1, [r7, #8]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 ff41 	bl	800c57c <memcpy>

  shciContext.io.Send(0,0);
 800b6fa:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <shci_send+0x78>)
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	2100      	movs	r1, #0
 800b700:	2000      	movs	r0, #0
 800b702:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b704:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b708:	f7f6 ff1f 	bl	800254a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f103 0008 	add.w	r0, r3, #8
 800b712:	4b08      	ldr	r3, [pc, #32]	; (800b734 <shci_send+0x74>)
 800b714:	6819      	ldr	r1, [r3, #0]
 800b716:	4b07      	ldr	r3, [pc, #28]	; (800b734 <shci_send+0x74>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	789b      	ldrb	r3, [r3, #2]
 800b71c:	3303      	adds	r3, #3
 800b71e:	461a      	mov	r2, r3
 800b720:	f000 ff2c 	bl	800c57c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b724:	2001      	movs	r0, #1
 800b726:	f000 f83b 	bl	800b7a0 <Cmd_SetStatus>

  return;
 800b72a:	bf00      	nop
}
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	200000b0 	.word	0x200000b0
 800b738:	200008c8 	.word	0x200008c8

0800b73c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b744:	4a10      	ldr	r2, [pc, #64]	; (800b788 <TlInit+0x4c>)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b74a:	4810      	ldr	r0, [pc, #64]	; (800b78c <TlInit+0x50>)
 800b74c:	f000 fdf6 	bl	800c33c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b750:	2001      	movs	r0, #1
 800b752:	f000 f825 	bl	800b7a0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b756:	4b0e      	ldr	r3, [pc, #56]	; (800b790 <TlInit+0x54>)
 800b758:	2201      	movs	r2, #1
 800b75a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <TlInit+0x58>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00c      	beq.n	800b77e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b768:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <TlInit+0x5c>)
 800b76a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b76c:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <TlInit+0x60>)
 800b76e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b770:	4b08      	ldr	r3, [pc, #32]	; (800b794 <TlInit+0x58>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f107 020c 	add.w	r2, r7, #12
 800b778:	4610      	mov	r0, r2
 800b77a:	4798      	blx	r3
  }

  return;
 800b77c:	bf00      	nop
 800b77e:	bf00      	nop
}
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	200000b0 	.word	0x200000b0
 800b78c:	200000a4 	.word	0x200000a4
 800b790:	200000b4 	.word	0x200000b4
 800b794:	200008c8 	.word	0x200008c8
 800b798:	0800b7f1 	.word	0x0800b7f1
 800b79c:	0800b809 	.word	0x0800b809

0800b7a0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10b      	bne.n	800b7c8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b7b0:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <Cmd_SetStatus+0x48>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b7b8:	4b0b      	ldr	r3, [pc, #44]	; (800b7e8 <Cmd_SetStatus+0x48>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2000      	movs	r0, #0
 800b7be:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <Cmd_SetStatus+0x4c>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b7c6:	e00b      	b.n	800b7e0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b7c8:	4b08      	ldr	r3, [pc, #32]	; (800b7ec <Cmd_SetStatus+0x4c>)
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b7ce:	4b06      	ldr	r3, [pc, #24]	; (800b7e8 <Cmd_SetStatus+0x48>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d004      	beq.n	800b7e0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b7d6:	4b04      	ldr	r3, [pc, #16]	; (800b7e8 <Cmd_SetStatus+0x48>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2001      	movs	r0, #1
 800b7dc:	4798      	blx	r3
  return;
 800b7de:	bf00      	nop
 800b7e0:	bf00      	nop
}
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	200008e8 	.word	0x200008e8
 800b7ec:	200000ac 	.word	0x200000ac

0800b7f0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	f7f6 fe9b 	bl	8002534 <shci_cmd_resp_release>

  return;
 800b7fe:	bf00      	nop
}
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	4805      	ldr	r0, [pc, #20]	; (800b828 <TlUserEvtReceived+0x20>)
 800b814:	f000 fdea 	bl	800c3ec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b818:	4803      	ldr	r0, [pc, #12]	; (800b828 <TlUserEvtReceived+0x20>)
 800b81a:	f7f6 fe7f 	bl	800251c <shci_notify_asynch_evt>

  return;
 800b81e:	bf00      	nop
}
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	200000a4 	.word	0x200000a4

0800b82c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a05      	ldr	r2, [pc, #20]	; (800b84c <shci_register_io_bus+0x20>)
 800b838:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a04      	ldr	r2, [pc, #16]	; (800b850 <shci_register_io_bus+0x24>)
 800b83e:	611a      	str	r2, [r3, #16]

  return;
 800b840:	bf00      	nop
}
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	0800ba2d 	.word	0x0800ba2d
 800b850:	0800ba81 	.word	0x0800ba81

0800b854 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800b860:	f7f6 f80e 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b864:	f7f5 ff9e 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800b868:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b872:	701a      	strb	r2, [r3, #0]
 800b874:	2200      	movs	r2, #0
 800b876:	705a      	strb	r2, [r3, #1]
 800b878:	2200      	movs	r2, #0
 800b87a:	709a      	strb	r2, [r3, #2]
 800b87c:	2200      	movs	r2, #0
 800b87e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f042 0201 	orr.w	r2, r2, #1
 800b888:	711a      	strb	r2, [r3, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	715a      	strb	r2, [r3, #5]
 800b88e:	2200      	movs	r2, #0
 800b890:	719a      	strb	r2, [r3, #6]
 800b892:	2200      	movs	r2, #0
 800b894:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800b896:	78fa      	ldrb	r2, [r7, #3]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b89c:	f7f5 ffca 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b8a0:	f7f5 ff8c 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800b8a4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	b2db      	uxtb	r3, r3
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800b8be:	f7f5 ffdf 	bl	8001880 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b8c2:	f7f5 ff6f 	bl	80017a4 <THREAD_Get_OTCmdPayloadBuffer>
 800b8c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 800b8d0:	701a      	strb	r2, [r3, #0]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	705a      	strb	r2, [r3, #1]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	709a      	strb	r2, [r3, #2]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f042 0203 	orr.w	r2, r2, #3
 800b8e6:	711a      	strb	r2, [r3, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	715a      	strb	r2, [r3, #5]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	719a      	strb	r2, [r3, #6]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800b8f4:	783b      	ldrb	r3, [r7, #0]
 800b8f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 800b902:	783b      	ldrb	r3, [r7, #0]
 800b904:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	461a      	mov	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800b910:	783b      	ldrb	r3, [r7, #0]
 800b912:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b916:	b2db      	uxtb	r3, r3
 800b918:	461a      	mov	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800b91e:	f7f5 ff89 	bl	8001834 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b922:	f7f5 ff4b 	bl	80017bc <THREAD_Get_OTCmdRspPayloadBuffer>
 800b926:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	b2db      	uxtb	r3, r3
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800b936:	b580      	push	{r7, lr}
 800b938:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b93a:	f7f6 fa69 	bl	8001e10 <HW_IPCC_Enable>

  return;
 800b93e:	bf00      	nop
}
 800b940:	bd80      	pop	{r7, pc}
	...

0800b944 <TL_Init>:


void TL_Init( void )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b948:	4b10      	ldr	r3, [pc, #64]	; (800b98c <TL_Init+0x48>)
 800b94a:	4a11      	ldr	r2, [pc, #68]	; (800b990 <TL_Init+0x4c>)
 800b94c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b94e:	4b0f      	ldr	r3, [pc, #60]	; (800b98c <TL_Init+0x48>)
 800b950:	4a10      	ldr	r2, [pc, #64]	; (800b994 <TL_Init+0x50>)
 800b952:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b954:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <TL_Init+0x48>)
 800b956:	4a10      	ldr	r2, [pc, #64]	; (800b998 <TL_Init+0x54>)
 800b958:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b95a:	4b0c      	ldr	r3, [pc, #48]	; (800b98c <TL_Init+0x48>)
 800b95c:	4a0f      	ldr	r2, [pc, #60]	; (800b99c <TL_Init+0x58>)
 800b95e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <TL_Init+0x48>)
 800b962:	4a0f      	ldr	r2, [pc, #60]	; (800b9a0 <TL_Init+0x5c>)
 800b964:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b966:	4b09      	ldr	r3, [pc, #36]	; (800b98c <TL_Init+0x48>)
 800b968:	4a0e      	ldr	r2, [pc, #56]	; (800b9a4 <TL_Init+0x60>)
 800b96a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b96c:	4b07      	ldr	r3, [pc, #28]	; (800b98c <TL_Init+0x48>)
 800b96e:	4a0e      	ldr	r2, [pc, #56]	; (800b9a8 <TL_Init+0x64>)
 800b970:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b972:	4b06      	ldr	r3, [pc, #24]	; (800b98c <TL_Init+0x48>)
 800b974:	4a0d      	ldr	r2, [pc, #52]	; (800b9ac <TL_Init+0x68>)
 800b976:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b978:	4b04      	ldr	r3, [pc, #16]	; (800b98c <TL_Init+0x48>)
 800b97a:	4a0d      	ldr	r2, [pc, #52]	; (800b9b0 <TL_Init+0x6c>)
 800b97c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b97e:	4b03      	ldr	r3, [pc, #12]	; (800b98c <TL_Init+0x48>)
 800b980:	4a0c      	ldr	r2, [pc, #48]	; (800b9b4 <TL_Init+0x70>)
 800b982:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b984:	f7f6 fa58 	bl	8001e38 <HW_IPCC_Init>

  return;
 800b988:	bf00      	nop
}
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20030000 	.word	0x20030000
 800b990:	20030038 	.word	0x20030038
 800b994:	20030058 	.word	0x20030058
 800b998:	20030068 	.word	0x20030068
 800b99c:	20030078 	.word	0x20030078
 800b9a0:	20030080 	.word	0x20030080
 800b9a4:	20030088 	.word	0x20030088
 800b9a8:	20030090 	.word	0x20030090
 800b9ac:	200300ac 	.word	0x200300ac
 800b9b0:	200300b0 	.word	0x200300b0
 800b9b4:	200300bc 	.word	0x200300bc

0800b9b8 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b9be:	e01c      	b.n	800b9fa <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b9c0:	1d3b      	adds	r3, r7, #4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4812      	ldr	r0, [pc, #72]	; (800ba10 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b9c6:	f000 fd58 	bl	800c47a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7a5b      	ldrb	r3, [r3, #9]
 800b9ce:	2b0f      	cmp	r3, #15
 800b9d0:	d003      	beq.n	800b9da <HW_IPCC_BLE_RxEvtNot+0x22>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7a5b      	ldrb	r3, [r3, #9]
 800b9d6:	2b0e      	cmp	r3, #14
 800b9d8:	d105      	bne.n	800b9e6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	2002      	movs	r0, #2
 800b9e0:	f000 f9be 	bl	800bd60 <OutputDbgTrace>
 800b9e4:	e004      	b.n	800b9f0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	2003      	movs	r0, #3
 800b9ec:	f000 f9b8 	bl	800bd60 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b9f0:	4b08      	ldr	r3, [pc, #32]	; (800ba14 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b9fa:	4805      	ldr	r0, [pc, #20]	; (800ba10 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b9fc:	f000 fcae 	bl	800c35c <LST_is_empty>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0dc      	beq.n	800b9c0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ba06:	bf00      	nop
}
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	200300d8 	.word	0x200300d8
 800ba14:	200008f4 	.word	0x200008f4

0800ba18 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ba1c:	4b02      	ldr	r3, [pc, #8]	; (800ba28 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4798      	blx	r3

  return;
 800ba22:	bf00      	nop
}
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	200008f8 	.word	0x200008f8

0800ba2c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ba38:	480d      	ldr	r0, [pc, #52]	; (800ba70 <TL_SYS_Init+0x44>)
 800ba3a:	f000 fc7f 	bl	800c33c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	; (800ba74 <TL_SYS_Init+0x48>)
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	4a08      	ldr	r2, [pc, #32]	; (800ba70 <TL_SYS_Init+0x44>)
 800ba50:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ba52:	f7f6 fa1f 	bl	8001e94 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a07      	ldr	r2, [pc, #28]	; (800ba78 <TL_SYS_Init+0x4c>)
 800ba5c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	4a06      	ldr	r2, [pc, #24]	; (800ba7c <TL_SYS_Init+0x50>)
 800ba64:	6013      	str	r3, [r2, #0]

  return 0;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	200300e0 	.word	0x200300e0
 800ba74:	20030000 	.word	0x20030000
 800ba78:	200008fc 	.word	0x200008fc
 800ba7c:	20000900 	.word	0x20000900

0800ba80 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ba8c:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <TL_SYS_SendCmd+0x34>)
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2210      	movs	r2, #16
 800ba94:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ba96:	4b07      	ldr	r3, [pc, #28]	; (800bab4 <TL_SYS_SendCmd+0x34>)
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	2004      	movs	r0, #4
 800baa0:	f000 f95e 	bl	800bd60 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800baa4:	f7f6 fa00 	bl	8001ea8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20030000 	.word	0x20030000

0800bab8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800babc:	4b07      	ldr	r3, [pc, #28]	; (800badc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4619      	mov	r1, r3
 800bac4:	2005      	movs	r0, #5
 800bac6:	f000 f94b 	bl	800bd60 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800baca:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a03      	ldr	r2, [pc, #12]	; (800badc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800bad0:	68d2      	ldr	r2, [r2, #12]
 800bad2:	6812      	ldr	r2, [r2, #0]
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3

  return;
 800bad8:	bf00      	nop
}
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20030000 	.word	0x20030000
 800bae0:	200008fc 	.word	0x200008fc

0800bae4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800baea:	e00e      	b.n	800bb0a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800baec:	1d3b      	adds	r3, r7, #4
 800baee:	4619      	mov	r1, r3
 800baf0:	480b      	ldr	r0, [pc, #44]	; (800bb20 <HW_IPCC_SYS_EvtNot+0x3c>)
 800baf2:	f000 fcc2 	bl	800c47a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4619      	mov	r1, r3
 800bafa:	2006      	movs	r0, #6
 800bafc:	f000 f930 	bl	800bd60 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800bb00:	4b08      	ldr	r3, [pc, #32]	; (800bb24 <HW_IPCC_SYS_EvtNot+0x40>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	4610      	mov	r0, r2
 800bb08:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bb0a:	4805      	ldr	r0, [pc, #20]	; (800bb20 <HW_IPCC_SYS_EvtNot+0x3c>)
 800bb0c:	f000 fc26 	bl	800c35c <LST_is_empty>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0ea      	beq.n	800baec <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800bb16:	bf00      	nop
}
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	200300e0 	.word	0x200300e0
 800bb24:	20000900 	.word	0x20000900

0800bb28 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800bb30:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <TL_THREAD_Init+0x3c>)
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	689a      	ldr	r2, [r3, #8]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68da      	ldr	r2, [r3, #12]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800bb56:	f7f6 f9cd 	bl	8001ef4 <HW_IPCC_THREAD_Init>

  return;
 800bb5a:	bf00      	nop
}
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20030000 	.word	0x20030000

0800bb68 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800bb6c:	4b04      	ldr	r3, [pc, #16]	; (800bb80 <TL_OT_SendCmd+0x18>)
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	2208      	movs	r2, #8
 800bb74:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800bb76:	f7f6 f9cb 	bl	8001f10 <HW_IPCC_OT_SendCmd>

  return;
 800bb7a:	bf00      	nop
}
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20030000 	.word	0x20030000

0800bb84 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800bb88:	4b04      	ldr	r3, [pc, #16]	; (800bb9c <TL_CLI_SendCmd+0x18>)
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	220a      	movs	r2, #10
 800bb90:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800bb92:	f7f6 f9cb 	bl	8001f2c <HW_IPCC_CLI_SendCmd>

  return;
 800bb96:	bf00      	nop
}
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20030000 	.word	0x20030000

0800bba0 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800bba4:	4b04      	ldr	r3, [pc, #16]	; (800bbb8 <TL_THREAD_SendAck+0x18>)
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	220d      	movs	r2, #13
 800bbac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800bbae:	f7f6 f9c7 	bl	8001f40 <HW_IPCC_THREAD_SendAck>

  return;
 800bbb2:	bf00      	nop
}
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20030000 	.word	0x20030000

0800bbbc <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800bbc0:	4b04      	ldr	r3, [pc, #16]	; (800bbd4 <TL_THREAD_CliSendAck+0x18>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	220d      	movs	r2, #13
 800bbc8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800bbca:	f7f6 f9c7 	bl	8001f5c <HW_IPCC_THREAD_CliSendAck>

  return;
 800bbce:	bf00      	nop
}
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20030000 	.word	0x20030000

0800bbd8 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800bbdc:	4b03      	ldr	r3, [pc, #12]	; (800bbec <HW_IPCC_OT_CmdEvtNot+0x14>)
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f5 fe2c 	bl	8001840 <TL_OT_CmdEvtReceived>

  return;
 800bbe8:	bf00      	nop
}
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20030000 	.word	0x20030000

0800bbf0 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800bbf4:	4b03      	ldr	r3, [pc, #12]	; (800bc04 <HW_IPCC_THREAD_EvtNot+0x14>)
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7f5 fe30 	bl	8001860 <TL_THREAD_NotReceived>

  return;
 800bc00:	bf00      	nop
}
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20030000 	.word	0x20030000

0800bc08 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800bc0c:	4b03      	ldr	r3, [pc, #12]	; (800bc1c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f5 fefa 	bl	8001a0c <TL_THREAD_CliNotReceived>

  return;
 800bc18:	bf00      	nop
}
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20030000 	.word	0x20030000

0800bc20 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800bc28:	4817      	ldr	r0, [pc, #92]	; (800bc88 <TL_MM_Init+0x68>)
 800bc2a:	f000 fb87 	bl	800c33c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800bc2e:	4817      	ldr	r0, [pc, #92]	; (800bc8c <TL_MM_Init+0x6c>)
 800bc30:	f000 fb84 	bl	800c33c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800bc34:	4b16      	ldr	r3, [pc, #88]	; (800bc90 <TL_MM_Init+0x70>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	4a16      	ldr	r2, [pc, #88]	; (800bc94 <TL_MM_Init+0x74>)
 800bc3a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800bc3c:	4b15      	ldr	r3, [pc, #84]	; (800bc94 <TL_MM_Init+0x74>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	6892      	ldr	r2, [r2, #8]
 800bc44:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800bc46:	4b13      	ldr	r3, [pc, #76]	; (800bc94 <TL_MM_Init+0x74>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	68d2      	ldr	r2, [r2, #12]
 800bc4e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800bc50:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <TL_MM_Init+0x74>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a0c      	ldr	r2, [pc, #48]	; (800bc88 <TL_MM_Init+0x68>)
 800bc56:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800bc58:	4b0e      	ldr	r3, [pc, #56]	; (800bc94 <TL_MM_Init+0x74>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	6812      	ldr	r2, [r2, #0]
 800bc60:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800bc62:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <TL_MM_Init+0x74>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	6852      	ldr	r2, [r2, #4]
 800bc6a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800bc6c:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <TL_MM_Init+0x74>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	6912      	ldr	r2, [r2, #16]
 800bc74:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <TL_MM_Init+0x74>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	6952      	ldr	r2, [r2, #20]
 800bc7e:	619a      	str	r2, [r3, #24]

  return;
 800bc80:	bf00      	nop
}
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	200300c8 	.word	0x200300c8
 800bc8c:	200008ec 	.word	0x200008ec
 800bc90:	20030000 	.word	0x20030000
 800bc94:	20000904 	.word	0x20000904

0800bc98 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800bca0:	6879      	ldr	r1, [r7, #4]
 800bca2:	4807      	ldr	r0, [pc, #28]	; (800bcc0 <TL_MM_EvtDone+0x28>)
 800bca4:	f000 fba2 	bl	800c3ec <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	2000      	movs	r0, #0
 800bcac:	f000 f858 	bl	800bd60 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800bcb0:	4804      	ldr	r0, [pc, #16]	; (800bcc4 <TL_MM_EvtDone+0x2c>)
 800bcb2:	f7f6 f985 	bl	8001fc0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800bcb6:	bf00      	nop
}
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	200008ec 	.word	0x200008ec
 800bcc4:	0800bcc9 	.word	0x0800bcc9

0800bcc8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bcce:	e00c      	b.n	800bcea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800bcd0:	1d3b      	adds	r3, r7, #4
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	480a      	ldr	r0, [pc, #40]	; (800bd00 <SendFreeBuf+0x38>)
 800bcd6:	f000 fbd0 	bl	800c47a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800bcda:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <SendFreeBuf+0x3c>)
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fb81 	bl	800c3ec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bcea:	4805      	ldr	r0, [pc, #20]	; (800bd00 <SendFreeBuf+0x38>)
 800bcec:	f000 fb36 	bl	800c35c <LST_is_empty>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0ec      	beq.n	800bcd0 <SendFreeBuf+0x8>
  }

  return;
 800bcf6:	bf00      	nop
}
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200008ec 	.word	0x200008ec
 800bd04:	20030000 	.word	0x20030000

0800bd08 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800bd0c:	4805      	ldr	r0, [pc, #20]	; (800bd24 <TL_TRACES_Init+0x1c>)
 800bd0e:	f000 fb15 	bl	800c33c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800bd12:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <TL_TRACES_Init+0x20>)
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	4a03      	ldr	r2, [pc, #12]	; (800bd24 <TL_TRACES_Init+0x1c>)
 800bd18:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800bd1a:	f7f6 f987 	bl	800202c <HW_IPCC_TRACES_Init>

  return;
 800bd1e:	bf00      	nop
}
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	200300d0 	.word	0x200300d0
 800bd28:	20030000 	.word	0x20030000

0800bd2c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bd32:	e008      	b.n	800bd46 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800bd34:	1d3b      	adds	r3, r7, #4
 800bd36:	4619      	mov	r1, r3
 800bd38:	4808      	ldr	r0, [pc, #32]	; (800bd5c <HW_IPCC_TRACES_EvtNot+0x30>)
 800bd3a:	f000 fb9e 	bl	800c47a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7f6 fc0d 	bl	8002560 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bd46:	4805      	ldr	r0, [pc, #20]	; (800bd5c <HW_IPCC_TRACES_EvtNot+0x30>)
 800bd48:	f000 fb08 	bl	800c35c <LST_is_empty>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0f0      	beq.n	800bd34 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800bd52:	bf00      	nop
}
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	200300d0 	.word	0x200300d0

0800bd60 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	6039      	str	r1, [r7, #0]
 800bd6a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	2b06      	cmp	r3, #6
 800bd70:	d845      	bhi.n	800bdfe <OutputDbgTrace+0x9e>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <OutputDbgTrace+0x18>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bd95 	.word	0x0800bd95
 800bd7c:	0800bdb9 	.word	0x0800bdb9
 800bd80:	0800bdbf 	.word	0x0800bdbf
 800bd84:	0800bdd3 	.word	0x0800bdd3
 800bd88:	0800bddf 	.word	0x0800bddf
 800bd8c:	0800bde5 	.word	0x0800bde5
 800bd90:	0800bdf3 	.word	0x0800bdf3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	7a5b      	ldrb	r3, [r3, #9]
 800bd9c:	2bff      	cmp	r3, #255	; 0xff
 800bd9e:	d005      	beq.n	800bdac <OutputDbgTrace+0x4c>
 800bda0:	2bff      	cmp	r3, #255	; 0xff
 800bda2:	dc05      	bgt.n	800bdb0 <OutputDbgTrace+0x50>
 800bda4:	2b0e      	cmp	r3, #14
 800bda6:	d005      	beq.n	800bdb4 <OutputDbgTrace+0x54>
 800bda8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800bdaa:	e001      	b.n	800bdb0 <OutputDbgTrace+0x50>
          break;
 800bdac:	bf00      	nop
 800bdae:	e027      	b.n	800be00 <OutputDbgTrace+0xa0>
          break;
 800bdb0:	bf00      	nop
 800bdb2:	e025      	b.n	800be00 <OutputDbgTrace+0xa0>
          break;
 800bdb4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800bdb6:	e023      	b.n	800be00 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800bdbc:	e020      	b.n	800be00 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	7a5b      	ldrb	r3, [r3, #9]
 800bdc6:	2b0e      	cmp	r3, #14
 800bdc8:	d001      	beq.n	800bdce <OutputDbgTrace+0x6e>
 800bdca:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800bdcc:	e000      	b.n	800bdd0 <OutputDbgTrace+0x70>
          break;
 800bdce:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bdd0:	e016      	b.n	800be00 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	7a5b      	ldrb	r3, [r3, #9]
 800bdda:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bddc:	e010      	b.n	800be00 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800bde2:	e00d      	b.n	800be00 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	7a5b      	ldrb	r3, [r3, #9]
 800bdec:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800bdee:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bdf0:	e006      	b.n	800be00 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	7a5b      	ldrb	r3, [r3, #9]
 800bdfa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bdfc:	e000      	b.n	800be00 <OutputDbgTrace+0xa0>

    default:
      break;
 800bdfe:	bf00      	nop
  }

  return;
 800be00:	bf00      	nop
}
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800be16:	4b0f      	ldr	r3, [pc, #60]	; (800be54 <OTP_Read+0x48>)
 800be18:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800be1a:	e002      	b.n	800be22 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3b08      	subs	r3, #8
 800be20:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3307      	adds	r3, #7
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	79fa      	ldrb	r2, [r7, #7]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d003      	beq.n	800be36 <OTP_Read+0x2a>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	4a09      	ldr	r2, [pc, #36]	; (800be58 <OTP_Read+0x4c>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d1f2      	bne.n	800be1c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3307      	adds	r3, #7
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	79fa      	ldrb	r2, [r7, #7]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d001      	beq.n	800be46 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800be46:	68fb      	ldr	r3, [r7, #12]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	1fff73f8 	.word	0x1fff73f8
 800be58:	1fff7000 	.word	0x1fff7000

0800be5c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800be60:	4b05      	ldr	r3, [pc, #20]	; (800be78 <UTIL_LPM_Init+0x1c>)
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <UTIL_LPM_Init+0x20>)
 800be68:	2200      	movs	r2, #0
 800be6a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800be6c:	bf00      	nop
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	20000908 	.word	0x20000908
 800be7c:	2000090c 	.word	0x2000090c

0800be80 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800be80:	b480      	push	{r7}
 800be82:	b087      	sub	sp, #28
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be8c:	f3ef 8310 	mrs	r3, PRIMASK
 800be90:	613b      	str	r3, [r7, #16]
  return(result);
 800be92:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800be94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be96:	b672      	cpsid	i
}
 800be98:	bf00      	nop

  switch( state )
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d008      	beq.n	800beb2 <UTIL_LPM_SetStopMode+0x32>
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d10e      	bne.n	800bec2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800bea4:	4b0d      	ldr	r3, [pc, #52]	; (800bedc <UTIL_LPM_SetStopMode+0x5c>)
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4313      	orrs	r3, r2
 800beac:	4a0b      	ldr	r2, [pc, #44]	; (800bedc <UTIL_LPM_SetStopMode+0x5c>)
 800beae:	6013      	str	r3, [r2, #0]
      break;
 800beb0:	e008      	b.n	800bec4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	43da      	mvns	r2, r3
 800beb6:	4b09      	ldr	r3, [pc, #36]	; (800bedc <UTIL_LPM_SetStopMode+0x5c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4013      	ands	r3, r2
 800bebc:	4a07      	ldr	r2, [pc, #28]	; (800bedc <UTIL_LPM_SetStopMode+0x5c>)
 800bebe:	6013      	str	r3, [r2, #0]
      break;
 800bec0:	e000      	b.n	800bec4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800bec2:	bf00      	nop
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f383 8810 	msr	PRIMASK, r3
}
 800bece:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bed0:	bf00      	nop
 800bed2:	371c      	adds	r7, #28
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	20000908 	.word	0x20000908

0800bee0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b087      	sub	sp, #28
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beec:	f3ef 8310 	mrs	r3, PRIMASK
 800bef0:	613b      	str	r3, [r7, #16]
  return(result);
 800bef2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bef4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bef6:	b672      	cpsid	i
}
 800bef8:	bf00      	nop
  
  switch(state)
 800befa:	78fb      	ldrb	r3, [r7, #3]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d008      	beq.n	800bf12 <UTIL_LPM_SetOffMode+0x32>
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d10e      	bne.n	800bf22 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bf04:	4b0d      	ldr	r3, [pc, #52]	; (800bf3c <UTIL_LPM_SetOffMode+0x5c>)
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	4a0b      	ldr	r2, [pc, #44]	; (800bf3c <UTIL_LPM_SetOffMode+0x5c>)
 800bf0e:	6013      	str	r3, [r2, #0]
      break;
 800bf10:	e008      	b.n	800bf24 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	43da      	mvns	r2, r3
 800bf16:	4b09      	ldr	r3, [pc, #36]	; (800bf3c <UTIL_LPM_SetOffMode+0x5c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	4a07      	ldr	r2, [pc, #28]	; (800bf3c <UTIL_LPM_SetOffMode+0x5c>)
 800bf1e:	6013      	str	r3, [r2, #0]
      break;
 800bf20:	e000      	b.n	800bf24 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bf22:	bf00      	nop
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f383 8810 	msr	PRIMASK, r3
}
 800bf2e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bf30:	bf00      	nop
 800bf32:	371c      	adds	r7, #28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	2000090c 	.word	0x2000090c

0800bf40 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b090      	sub	sp, #64	; 0x40
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bf48:	4b73      	ldr	r3, [pc, #460]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bf4e:	4b72      	ldr	r3, [pc, #456]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4013      	ands	r3, r2
 800bf56:	4a70      	ldr	r2, [pc, #448]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800bf58:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bf5a:	4b70      	ldr	r3, [pc, #448]	; (800c11c <UTIL_SEQ_Run+0x1dc>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bf60:	4b6f      	ldr	r3, [pc, #444]	; (800c120 <UTIL_SEQ_Run+0x1e0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bf66:	4b6f      	ldr	r3, [pc, #444]	; (800c124 <UTIL_SEQ_Run+0x1e4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800bf6c:	4b6e      	ldr	r3, [pc, #440]	; (800c128 <UTIL_SEQ_Run+0x1e8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bf72:	e08d      	b.n	800c090 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bf78:	e002      	b.n	800bf80 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bf80:	4a6a      	ldr	r2, [pc, #424]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800bf82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf84:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	401a      	ands	r2, r3
 800bf8c:	4b62      	ldr	r3, [pc, #392]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4013      	ands	r3, r2
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0f1      	beq.n	800bf7a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bf96:	4a65      	ldr	r2, [pc, #404]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800bf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	401a      	ands	r2, r3
 800bfa2:	4b5d      	ldr	r3, [pc, #372]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bfaa:	4a60      	ldr	r2, [pc, #384]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800bfac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfae:	00db      	lsls	r3, r3, #3
 800bfb0:	4413      	add	r3, r2
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d106      	bne.n	800bfca <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bfbc:	4a5b      	ldr	r2, [pc, #364]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800bfbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bfca:	4a58      	ldr	r2, [pc, #352]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800bfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	4413      	add	r3, r2
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 f973 	bl	800c2c4 <SEQ_BitPosition>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	4b53      	ldr	r3, [pc, #332]	; (800c130 <UTIL_SEQ_Run+0x1f0>)
 800bfe4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bfe6:	4a51      	ldr	r2, [pc, #324]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	4413      	add	r3, r2
 800bfee:	685a      	ldr	r2, [r3, #4]
 800bff0:	4b4f      	ldr	r3, [pc, #316]	; (800c130 <UTIL_SEQ_Run+0x1f0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2101      	movs	r1, #1
 800bff6:	fa01 f303 	lsl.w	r3, r1, r3
 800bffa:	43db      	mvns	r3, r3
 800bffc:	401a      	ands	r2, r3
 800bffe:	494b      	ldr	r1, [pc, #300]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800c000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c002:	00db      	lsls	r3, r3, #3
 800c004:	440b      	add	r3, r1
 800c006:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c008:	f3ef 8310 	mrs	r3, PRIMASK
 800c00c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c00e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c010:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c012:	b672      	cpsid	i
}
 800c014:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c016:	4b46      	ldr	r3, [pc, #280]	; (800c130 <UTIL_SEQ_Run+0x1f0>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2201      	movs	r2, #1
 800c01c:	fa02 f303 	lsl.w	r3, r2, r3
 800c020:	43da      	mvns	r2, r3
 800c022:	4b3e      	ldr	r3, [pc, #248]	; (800c11c <UTIL_SEQ_Run+0x1dc>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4013      	ands	r3, r2
 800c028:	4a3c      	ldr	r2, [pc, #240]	; (800c11c <UTIL_SEQ_Run+0x1dc>)
 800c02a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c02c:	2302      	movs	r3, #2
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c030:	e013      	b.n	800c05a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c034:	3b01      	subs	r3, #1
 800c036:	4a3d      	ldr	r2, [pc, #244]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800c038:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c03c:	4b3c      	ldr	r3, [pc, #240]	; (800c130 <UTIL_SEQ_Run+0x1f0>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2201      	movs	r2, #1
 800c042:	fa02 f303 	lsl.w	r3, r2, r3
 800c046:	43da      	mvns	r2, r3
 800c048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04a:	3b01      	subs	r3, #1
 800c04c:	400a      	ands	r2, r1
 800c04e:	4937      	ldr	r1, [pc, #220]	; (800c12c <UTIL_SEQ_Run+0x1ec>)
 800c050:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c056:	3b01      	subs	r3, #1
 800c058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e8      	bne.n	800c032 <UTIL_SEQ_Run+0xf2>
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f383 8810 	msr	PRIMASK, r3
}
 800c06a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c06c:	4b30      	ldr	r3, [pc, #192]	; (800c130 <UTIL_SEQ_Run+0x1f0>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a30      	ldr	r2, [pc, #192]	; (800c134 <UTIL_SEQ_Run+0x1f4>)
 800c072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c076:	4798      	blx	r3

    local_taskset = TaskSet;
 800c078:	4b28      	ldr	r3, [pc, #160]	; (800c11c <UTIL_SEQ_Run+0x1dc>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c07e:	4b28      	ldr	r3, [pc, #160]	; (800c120 <UTIL_SEQ_Run+0x1e0>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c084:	4b27      	ldr	r3, [pc, #156]	; (800c124 <UTIL_SEQ_Run+0x1e4>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c08a:	4b27      	ldr	r3, [pc, #156]	; (800c128 <UTIL_SEQ_Run+0x1e8>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	401a      	ands	r2, r3
 800c096:	4b20      	ldr	r3, [pc, #128]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4013      	ands	r3, r2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d005      	beq.n	800c0ac <UTIL_SEQ_Run+0x16c>
 800c0a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f43f af64 	beq.w	800bf74 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c0ac:	4b20      	ldr	r3, [pc, #128]	; (800c130 <UTIL_SEQ_Run+0x1f0>)
 800c0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c0b4:	f000 f8f8 	bl	800c2a8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0b8:	f3ef 8310 	mrs	r3, PRIMASK
 800c0bc:	613b      	str	r3, [r7, #16]
  return(result);
 800c0be:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c0c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0c2:	b672      	cpsid	i
}
 800c0c4:	bf00      	nop
  local_taskset = TaskSet;
 800c0c6:	4b15      	ldr	r3, [pc, #84]	; (800c11c <UTIL_SEQ_Run+0x1dc>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c0cc:	4b14      	ldr	r3, [pc, #80]	; (800c120 <UTIL_SEQ_Run+0x1e0>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c0d2:	4b14      	ldr	r3, [pc, #80]	; (800c124 <UTIL_SEQ_Run+0x1e4>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c0d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	401a      	ands	r2, r3
 800c0de:	4b0e      	ldr	r3, [pc, #56]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d107      	bne.n	800c0f8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c0e8:	4b0f      	ldr	r3, [pc, #60]	; (800c128 <UTIL_SEQ_Run+0x1e8>)
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c0f4:	f7f6 f9e1 	bl	80024ba <UTIL_SEQ_Idle>
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f383 8810 	msr	PRIMASK, r3
}
 800c102:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c104:	f000 f8d7 	bl	800c2b6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c108:	4a03      	ldr	r2, [pc, #12]	; (800c118 <UTIL_SEQ_Run+0x1d8>)
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	6013      	str	r3, [r2, #0]

  return;
 800c10e:	bf00      	nop
}
 800c110:	3740      	adds	r7, #64	; 0x40
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	2000003c 	.word	0x2000003c
 800c11c:	20000910 	.word	0x20000910
 800c120:	20000914 	.word	0x20000914
 800c124:	20000038 	.word	0x20000038
 800c128:	20000918 	.word	0x20000918
 800c12c:	200009a0 	.word	0x200009a0
 800c130:	2000091c 	.word	0x2000091c
 800c134:	20000920 	.word	0x20000920

0800c138 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b088      	sub	sp, #32
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c144:	f3ef 8310 	mrs	r3, PRIMASK
 800c148:	617b      	str	r3, [r7, #20]
  return(result);
 800c14a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c14c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c14e:	b672      	cpsid	i
}
 800c150:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f000 f8b6 	bl	800c2c4 <SEQ_BitPosition>
 800c158:	4603      	mov	r3, r0
 800c15a:	4619      	mov	r1, r3
 800c15c:	4a06      	ldr	r2, [pc, #24]	; (800c178 <UTIL_SEQ_RegTask+0x40>)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	f383 8810 	msr	PRIMASK, r3
}
 800c16e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c170:	bf00      	nop
}
 800c172:	3720      	adds	r7, #32
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20000920 	.word	0x20000920

0800c17c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c186:	f3ef 8310 	mrs	r3, PRIMASK
 800c18a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c18c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c18e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c190:	b672      	cpsid	i
}
 800c192:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c194:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <UTIL_SEQ_SetTask+0x50>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	4a0b      	ldr	r2, [pc, #44]	; (800c1cc <UTIL_SEQ_SetTask+0x50>)
 800c19e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c1a0:	4a0b      	ldr	r2, [pc, #44]	; (800c1d0 <UTIL_SEQ_SetTask+0x54>)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	4908      	ldr	r1, [pc, #32]	; (800c1d0 <UTIL_SEQ_SetTask+0x54>)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f383 8810 	msr	PRIMASK, r3
}
 800c1be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c1c0:	bf00      	nop
}
 800c1c2:	371c      	adds	r7, #28
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	20000910 	.word	0x20000910
 800c1d0:	200009a0 	.word	0x200009a0

0800c1d4 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b087      	sub	sp, #28
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1dc:	f3ef 8310 	mrs	r3, PRIMASK
 800c1e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c1e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1e6:	b672      	cpsid	i
}
 800c1e8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c1ea:	4b09      	ldr	r3, [pc, #36]	; (800c210 <UTIL_SEQ_SetEvt+0x3c>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	4a07      	ldr	r2, [pc, #28]	; (800c210 <UTIL_SEQ_SetEvt+0x3c>)
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f383 8810 	msr	PRIMASK, r3
}
 800c200:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c202:	bf00      	nop
}
 800c204:	371c      	adds	r7, #28
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	20000914 	.word	0x20000914

0800c214 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b088      	sub	sp, #32
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c21c:	4b1f      	ldr	r3, [pc, #124]	; (800c29c <UTIL_SEQ_WaitEvt+0x88>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c222:	4b1e      	ldr	r3, [pc, #120]	; (800c29c <UTIL_SEQ_WaitEvt+0x88>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22a:	d102      	bne.n	800c232 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c22c:	2300      	movs	r3, #0
 800c22e:	61fb      	str	r3, [r7, #28]
 800c230:	e005      	b.n	800c23e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c232:	4b1a      	ldr	r3, [pc, #104]	; (800c29c <UTIL_SEQ_WaitEvt+0x88>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2201      	movs	r2, #1
 800c238:	fa02 f303 	lsl.w	r3, r2, r3
 800c23c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c23e:	4b18      	ldr	r3, [pc, #96]	; (800c2a0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c244:	4a16      	ldr	r2, [pc, #88]	; (800c2a0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c24a:	e003      	b.n	800c254 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	69f8      	ldr	r0, [r7, #28]
 800c250:	f7f6 f93a 	bl	80024c8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c254:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <UTIL_SEQ_WaitEvt+0x90>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0f5      	beq.n	800c24c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c260:	4a0e      	ldr	r2, [pc, #56]	; (800c29c <UTIL_SEQ_WaitEvt+0x88>)
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c266:	f3ef 8310 	mrs	r3, PRIMASK
 800c26a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c26c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c26e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c270:	b672      	cpsid	i
}
 800c272:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	43da      	mvns	r2, r3
 800c278:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <UTIL_SEQ_WaitEvt+0x90>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4013      	ands	r3, r2
 800c27e:	4a09      	ldr	r2, [pc, #36]	; (800c2a4 <UTIL_SEQ_WaitEvt+0x90>)
 800c280:	6013      	str	r3, [r2, #0]
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f383 8810 	msr	PRIMASK, r3
}
 800c28c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c28e:	4a04      	ldr	r2, [pc, #16]	; (800c2a0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	6013      	str	r3, [r2, #0]
  return;
 800c294:	bf00      	nop
}
 800c296:	3720      	adds	r7, #32
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	2000091c 	.word	0x2000091c
 800c2a0:	20000918 	.word	0x20000918
 800c2a4:	20000914 	.word	0x20000914

0800c2a8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c2ac:	bf00      	nop
}
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c2ba:	bf00      	nop
}
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	0c1b      	lsrs	r3, r3, #16
 800c2d8:	041b      	lsls	r3, r3, #16
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d104      	bne.n	800c2e8 <SEQ_BitPosition+0x24>
 800c2de:	2310      	movs	r3, #16
 800c2e0:	73fb      	strb	r3, [r7, #15]
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	041b      	lsls	r3, r3, #16
 800c2e6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d105      	bne.n	800c2fe <SEQ_BitPosition+0x3a>
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	021b      	lsls	r3, r3, #8
 800c2fc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d105      	bne.n	800c314 <SEQ_BitPosition+0x50>
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	3304      	adds	r3, #4
 800c30c:	73fb      	strb	r3, [r7, #15]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	011b      	lsls	r3, r3, #4
 800c312:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	0f1b      	lsrs	r3, r3, #28
 800c318:	4a07      	ldr	r2, [pc, #28]	; (800c338 <SEQ_BitPosition+0x74>)
 800c31a:	5cd2      	ldrb	r2, [r2, r3]
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
 800c31e:	4413      	add	r3, r2
 800c320:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	f1c3 031f 	rsb	r3, r3, #31
 800c328:	b2db      	uxtb	r3, r3
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	0800e23c 	.word	0x0800e23c

0800c33c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	605a      	str	r2, [r3, #4]
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c364:	f3ef 8310 	mrs	r3, PRIMASK
 800c368:	60fb      	str	r3, [r7, #12]
  return(result);
 800c36a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c36c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c36e:	b672      	cpsid	i
}
 800c370:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d102      	bne.n	800c382 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c37c:	2301      	movs	r3, #1
 800c37e:	75fb      	strb	r3, [r7, #23]
 800c380:	e001      	b.n	800c386 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c382:	2300      	movs	r3, #0
 800c384:	75fb      	strb	r3, [r7, #23]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f383 8810 	msr	PRIMASK, r3
}
 800c390:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c392:	7dfb      	ldrb	r3, [r7, #23]
}
 800c394:	4618      	mov	r0, r3
 800c396:	371c      	adds	r7, #28
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c3b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3b4:	b672      	cpsid	i
}
 800c3b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	605a      	str	r2, [r3, #4]
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f383 8810 	msr	PRIMASK, r3
}
 800c3de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c3e0:	bf00      	nop
 800c3e2:	371c      	adds	r7, #28
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b087      	sub	sp, #28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c3fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c400:	b672      	cpsid	i
}
 800c402:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	601a      	str	r2, [r3, #0]
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	f383 8810 	msr	PRIMASK, r3
}
 800c42a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c42c:	bf00      	nop
 800c42e:	371c      	adds	r7, #28
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c440:	f3ef 8310 	mrs	r3, PRIMASK
 800c444:	60fb      	str	r3, [r7, #12]
  return(result);
 800c446:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c44a:	b672      	cpsid	i
}
 800c44c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	6812      	ldr	r2, [r2, #0]
 800c456:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	6852      	ldr	r2, [r2, #4]
 800c460:	605a      	str	r2, [r3, #4]
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f383 8810 	msr	PRIMASK, r3
}
 800c46c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c46e:	bf00      	nop
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b086      	sub	sp, #24
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c484:	f3ef 8310 	mrs	r3, PRIMASK
 800c488:	60fb      	str	r3, [r7, #12]
  return(result);
 800c48a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c48c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c48e:	b672      	cpsid	i
}
 800c490:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff ffca 	bl	800c438 <LST_remove_node>
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	f383 8810 	msr	PRIMASK, r3
}
 800c4ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c4b0:	bf00      	nop
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <__assert_func>:
 800c4b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4ba:	4614      	mov	r4, r2
 800c4bc:	461a      	mov	r2, r3
 800c4be:	4b09      	ldr	r3, [pc, #36]	; (800c4e4 <__assert_func+0x2c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	68d8      	ldr	r0, [r3, #12]
 800c4c6:	b14c      	cbz	r4, 800c4dc <__assert_func+0x24>
 800c4c8:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <__assert_func+0x30>)
 800c4ca:	9100      	str	r1, [sp, #0]
 800c4cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4d0:	4906      	ldr	r1, [pc, #24]	; (800c4ec <__assert_func+0x34>)
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	f000 f814 	bl	800c500 <fiprintf>
 800c4d8:	f000 fd38 	bl	800cf4c <abort>
 800c4dc:	4b04      	ldr	r3, [pc, #16]	; (800c4f0 <__assert_func+0x38>)
 800c4de:	461c      	mov	r4, r3
 800c4e0:	e7f3      	b.n	800c4ca <__assert_func+0x12>
 800c4e2:	bf00      	nop
 800c4e4:	20000040 	.word	0x20000040
 800c4e8:	0800e24c 	.word	0x0800e24c
 800c4ec:	0800e259 	.word	0x0800e259
 800c4f0:	0800e287 	.word	0x0800e287

0800c4f4 <__errno>:
 800c4f4:	4b01      	ldr	r3, [pc, #4]	; (800c4fc <__errno+0x8>)
 800c4f6:	6818      	ldr	r0, [r3, #0]
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	20000040 	.word	0x20000040

0800c500 <fiprintf>:
 800c500:	b40e      	push	{r1, r2, r3}
 800c502:	b503      	push	{r0, r1, lr}
 800c504:	4601      	mov	r1, r0
 800c506:	ab03      	add	r3, sp, #12
 800c508:	4805      	ldr	r0, [pc, #20]	; (800c520 <fiprintf+0x20>)
 800c50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c50e:	6800      	ldr	r0, [r0, #0]
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	f000 f953 	bl	800c7bc <_vfiprintf_r>
 800c516:	b002      	add	sp, #8
 800c518:	f85d eb04 	ldr.w	lr, [sp], #4
 800c51c:	b003      	add	sp, #12
 800c51e:	4770      	bx	lr
 800c520:	20000040 	.word	0x20000040

0800c524 <__libc_init_array>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4d0d      	ldr	r5, [pc, #52]	; (800c55c <__libc_init_array+0x38>)
 800c528:	4c0d      	ldr	r4, [pc, #52]	; (800c560 <__libc_init_array+0x3c>)
 800c52a:	1b64      	subs	r4, r4, r5
 800c52c:	10a4      	asrs	r4, r4, #2
 800c52e:	2600      	movs	r6, #0
 800c530:	42a6      	cmp	r6, r4
 800c532:	d109      	bne.n	800c548 <__libc_init_array+0x24>
 800c534:	4d0b      	ldr	r5, [pc, #44]	; (800c564 <__libc_init_array+0x40>)
 800c536:	4c0c      	ldr	r4, [pc, #48]	; (800c568 <__libc_init_array+0x44>)
 800c538:	f001 f9d8 	bl	800d8ec <_init>
 800c53c:	1b64      	subs	r4, r4, r5
 800c53e:	10a4      	asrs	r4, r4, #2
 800c540:	2600      	movs	r6, #0
 800c542:	42a6      	cmp	r6, r4
 800c544:	d105      	bne.n	800c552 <__libc_init_array+0x2e>
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	f855 3b04 	ldr.w	r3, [r5], #4
 800c54c:	4798      	blx	r3
 800c54e:	3601      	adds	r6, #1
 800c550:	e7ee      	b.n	800c530 <__libc_init_array+0xc>
 800c552:	f855 3b04 	ldr.w	r3, [r5], #4
 800c556:	4798      	blx	r3
 800c558:	3601      	adds	r6, #1
 800c55a:	e7f2      	b.n	800c542 <__libc_init_array+0x1e>
 800c55c:	0800e328 	.word	0x0800e328
 800c560:	0800e328 	.word	0x0800e328
 800c564:	0800e328 	.word	0x0800e328
 800c568:	0800e32c 	.word	0x0800e32c

0800c56c <malloc>:
 800c56c:	4b02      	ldr	r3, [pc, #8]	; (800c578 <malloc+0xc>)
 800c56e:	4601      	mov	r1, r0
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f000 b885 	b.w	800c680 <_malloc_r>
 800c576:	bf00      	nop
 800c578:	20000040 	.word	0x20000040

0800c57c <memcpy>:
 800c57c:	440a      	add	r2, r1
 800c57e:	4291      	cmp	r1, r2
 800c580:	f100 33ff 	add.w	r3, r0, #4294967295
 800c584:	d100      	bne.n	800c588 <memcpy+0xc>
 800c586:	4770      	bx	lr
 800c588:	b510      	push	{r4, lr}
 800c58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c592:	4291      	cmp	r1, r2
 800c594:	d1f9      	bne.n	800c58a <memcpy+0xe>
 800c596:	bd10      	pop	{r4, pc}

0800c598 <memset>:
 800c598:	4402      	add	r2, r0
 800c59a:	4603      	mov	r3, r0
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d100      	bne.n	800c5a2 <memset+0xa>
 800c5a0:	4770      	bx	lr
 800c5a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5a6:	e7f9      	b.n	800c59c <memset+0x4>

0800c5a8 <_free_r>:
 800c5a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5aa:	2900      	cmp	r1, #0
 800c5ac:	d044      	beq.n	800c638 <_free_r+0x90>
 800c5ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5b2:	9001      	str	r0, [sp, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f1a1 0404 	sub.w	r4, r1, #4
 800c5ba:	bfb8      	it	lt
 800c5bc:	18e4      	addlt	r4, r4, r3
 800c5be:	f000 ff07 	bl	800d3d0 <__malloc_lock>
 800c5c2:	4a1e      	ldr	r2, [pc, #120]	; (800c63c <_free_r+0x94>)
 800c5c4:	9801      	ldr	r0, [sp, #4]
 800c5c6:	6813      	ldr	r3, [r2, #0]
 800c5c8:	b933      	cbnz	r3, 800c5d8 <_free_r+0x30>
 800c5ca:	6063      	str	r3, [r4, #4]
 800c5cc:	6014      	str	r4, [r2, #0]
 800c5ce:	b003      	add	sp, #12
 800c5d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5d4:	f000 bf02 	b.w	800d3dc <__malloc_unlock>
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d908      	bls.n	800c5ee <_free_r+0x46>
 800c5dc:	6825      	ldr	r5, [r4, #0]
 800c5de:	1961      	adds	r1, r4, r5
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	bf01      	itttt	eq
 800c5e4:	6819      	ldreq	r1, [r3, #0]
 800c5e6:	685b      	ldreq	r3, [r3, #4]
 800c5e8:	1949      	addeq	r1, r1, r5
 800c5ea:	6021      	streq	r1, [r4, #0]
 800c5ec:	e7ed      	b.n	800c5ca <_free_r+0x22>
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	b10b      	cbz	r3, 800c5f8 <_free_r+0x50>
 800c5f4:	42a3      	cmp	r3, r4
 800c5f6:	d9fa      	bls.n	800c5ee <_free_r+0x46>
 800c5f8:	6811      	ldr	r1, [r2, #0]
 800c5fa:	1855      	adds	r5, r2, r1
 800c5fc:	42a5      	cmp	r5, r4
 800c5fe:	d10b      	bne.n	800c618 <_free_r+0x70>
 800c600:	6824      	ldr	r4, [r4, #0]
 800c602:	4421      	add	r1, r4
 800c604:	1854      	adds	r4, r2, r1
 800c606:	42a3      	cmp	r3, r4
 800c608:	6011      	str	r1, [r2, #0]
 800c60a:	d1e0      	bne.n	800c5ce <_free_r+0x26>
 800c60c:	681c      	ldr	r4, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	6053      	str	r3, [r2, #4]
 800c612:	4421      	add	r1, r4
 800c614:	6011      	str	r1, [r2, #0]
 800c616:	e7da      	b.n	800c5ce <_free_r+0x26>
 800c618:	d902      	bls.n	800c620 <_free_r+0x78>
 800c61a:	230c      	movs	r3, #12
 800c61c:	6003      	str	r3, [r0, #0]
 800c61e:	e7d6      	b.n	800c5ce <_free_r+0x26>
 800c620:	6825      	ldr	r5, [r4, #0]
 800c622:	1961      	adds	r1, r4, r5
 800c624:	428b      	cmp	r3, r1
 800c626:	bf04      	itt	eq
 800c628:	6819      	ldreq	r1, [r3, #0]
 800c62a:	685b      	ldreq	r3, [r3, #4]
 800c62c:	6063      	str	r3, [r4, #4]
 800c62e:	bf04      	itt	eq
 800c630:	1949      	addeq	r1, r1, r5
 800c632:	6021      	streq	r1, [r4, #0]
 800c634:	6054      	str	r4, [r2, #4]
 800c636:	e7ca      	b.n	800c5ce <_free_r+0x26>
 800c638:	b003      	add	sp, #12
 800c63a:	bd30      	pop	{r4, r5, pc}
 800c63c:	200009b0 	.word	0x200009b0

0800c640 <sbrk_aligned>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4e0e      	ldr	r6, [pc, #56]	; (800c67c <sbrk_aligned+0x3c>)
 800c644:	460c      	mov	r4, r1
 800c646:	6831      	ldr	r1, [r6, #0]
 800c648:	4605      	mov	r5, r0
 800c64a:	b911      	cbnz	r1, 800c652 <sbrk_aligned+0x12>
 800c64c:	f000 fb7a 	bl	800cd44 <_sbrk_r>
 800c650:	6030      	str	r0, [r6, #0]
 800c652:	4621      	mov	r1, r4
 800c654:	4628      	mov	r0, r5
 800c656:	f000 fb75 	bl	800cd44 <_sbrk_r>
 800c65a:	1c43      	adds	r3, r0, #1
 800c65c:	d00a      	beq.n	800c674 <sbrk_aligned+0x34>
 800c65e:	1cc4      	adds	r4, r0, #3
 800c660:	f024 0403 	bic.w	r4, r4, #3
 800c664:	42a0      	cmp	r0, r4
 800c666:	d007      	beq.n	800c678 <sbrk_aligned+0x38>
 800c668:	1a21      	subs	r1, r4, r0
 800c66a:	4628      	mov	r0, r5
 800c66c:	f000 fb6a 	bl	800cd44 <_sbrk_r>
 800c670:	3001      	adds	r0, #1
 800c672:	d101      	bne.n	800c678 <sbrk_aligned+0x38>
 800c674:	f04f 34ff 	mov.w	r4, #4294967295
 800c678:	4620      	mov	r0, r4
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
 800c67c:	200009b4 	.word	0x200009b4

0800c680 <_malloc_r>:
 800c680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c684:	1ccd      	adds	r5, r1, #3
 800c686:	f025 0503 	bic.w	r5, r5, #3
 800c68a:	3508      	adds	r5, #8
 800c68c:	2d0c      	cmp	r5, #12
 800c68e:	bf38      	it	cc
 800c690:	250c      	movcc	r5, #12
 800c692:	2d00      	cmp	r5, #0
 800c694:	4607      	mov	r7, r0
 800c696:	db01      	blt.n	800c69c <_malloc_r+0x1c>
 800c698:	42a9      	cmp	r1, r5
 800c69a:	d905      	bls.n	800c6a8 <_malloc_r+0x28>
 800c69c:	230c      	movs	r3, #12
 800c69e:	603b      	str	r3, [r7, #0]
 800c6a0:	2600      	movs	r6, #0
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a8:	4e2e      	ldr	r6, [pc, #184]	; (800c764 <_malloc_r+0xe4>)
 800c6aa:	f000 fe91 	bl	800d3d0 <__malloc_lock>
 800c6ae:	6833      	ldr	r3, [r6, #0]
 800c6b0:	461c      	mov	r4, r3
 800c6b2:	bb34      	cbnz	r4, 800c702 <_malloc_r+0x82>
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	f7ff ffc2 	bl	800c640 <sbrk_aligned>
 800c6bc:	1c43      	adds	r3, r0, #1
 800c6be:	4604      	mov	r4, r0
 800c6c0:	d14d      	bne.n	800c75e <_malloc_r+0xde>
 800c6c2:	6834      	ldr	r4, [r6, #0]
 800c6c4:	4626      	mov	r6, r4
 800c6c6:	2e00      	cmp	r6, #0
 800c6c8:	d140      	bne.n	800c74c <_malloc_r+0xcc>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	eb04 0803 	add.w	r8, r4, r3
 800c6d4:	f000 fb36 	bl	800cd44 <_sbrk_r>
 800c6d8:	4580      	cmp	r8, r0
 800c6da:	d13a      	bne.n	800c752 <_malloc_r+0xd2>
 800c6dc:	6821      	ldr	r1, [r4, #0]
 800c6de:	3503      	adds	r5, #3
 800c6e0:	1a6d      	subs	r5, r5, r1
 800c6e2:	f025 0503 	bic.w	r5, r5, #3
 800c6e6:	3508      	adds	r5, #8
 800c6e8:	2d0c      	cmp	r5, #12
 800c6ea:	bf38      	it	cc
 800c6ec:	250c      	movcc	r5, #12
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7ff ffa5 	bl	800c640 <sbrk_aligned>
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	d02b      	beq.n	800c752 <_malloc_r+0xd2>
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	442b      	add	r3, r5
 800c6fe:	6023      	str	r3, [r4, #0]
 800c700:	e00e      	b.n	800c720 <_malloc_r+0xa0>
 800c702:	6822      	ldr	r2, [r4, #0]
 800c704:	1b52      	subs	r2, r2, r5
 800c706:	d41e      	bmi.n	800c746 <_malloc_r+0xc6>
 800c708:	2a0b      	cmp	r2, #11
 800c70a:	d916      	bls.n	800c73a <_malloc_r+0xba>
 800c70c:	1961      	adds	r1, r4, r5
 800c70e:	42a3      	cmp	r3, r4
 800c710:	6025      	str	r5, [r4, #0]
 800c712:	bf18      	it	ne
 800c714:	6059      	strne	r1, [r3, #4]
 800c716:	6863      	ldr	r3, [r4, #4]
 800c718:	bf08      	it	eq
 800c71a:	6031      	streq	r1, [r6, #0]
 800c71c:	5162      	str	r2, [r4, r5]
 800c71e:	604b      	str	r3, [r1, #4]
 800c720:	4638      	mov	r0, r7
 800c722:	f104 060b 	add.w	r6, r4, #11
 800c726:	f000 fe59 	bl	800d3dc <__malloc_unlock>
 800c72a:	f026 0607 	bic.w	r6, r6, #7
 800c72e:	1d23      	adds	r3, r4, #4
 800c730:	1af2      	subs	r2, r6, r3
 800c732:	d0b6      	beq.n	800c6a2 <_malloc_r+0x22>
 800c734:	1b9b      	subs	r3, r3, r6
 800c736:	50a3      	str	r3, [r4, r2]
 800c738:	e7b3      	b.n	800c6a2 <_malloc_r+0x22>
 800c73a:	6862      	ldr	r2, [r4, #4]
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	bf0c      	ite	eq
 800c740:	6032      	streq	r2, [r6, #0]
 800c742:	605a      	strne	r2, [r3, #4]
 800c744:	e7ec      	b.n	800c720 <_malloc_r+0xa0>
 800c746:	4623      	mov	r3, r4
 800c748:	6864      	ldr	r4, [r4, #4]
 800c74a:	e7b2      	b.n	800c6b2 <_malloc_r+0x32>
 800c74c:	4634      	mov	r4, r6
 800c74e:	6876      	ldr	r6, [r6, #4]
 800c750:	e7b9      	b.n	800c6c6 <_malloc_r+0x46>
 800c752:	230c      	movs	r3, #12
 800c754:	603b      	str	r3, [r7, #0]
 800c756:	4638      	mov	r0, r7
 800c758:	f000 fe40 	bl	800d3dc <__malloc_unlock>
 800c75c:	e7a1      	b.n	800c6a2 <_malloc_r+0x22>
 800c75e:	6025      	str	r5, [r4, #0]
 800c760:	e7de      	b.n	800c720 <_malloc_r+0xa0>
 800c762:	bf00      	nop
 800c764:	200009b0 	.word	0x200009b0

0800c768 <__sfputc_r>:
 800c768:	6893      	ldr	r3, [r2, #8]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	b410      	push	{r4}
 800c770:	6093      	str	r3, [r2, #8]
 800c772:	da08      	bge.n	800c786 <__sfputc_r+0x1e>
 800c774:	6994      	ldr	r4, [r2, #24]
 800c776:	42a3      	cmp	r3, r4
 800c778:	db01      	blt.n	800c77e <__sfputc_r+0x16>
 800c77a:	290a      	cmp	r1, #10
 800c77c:	d103      	bne.n	800c786 <__sfputc_r+0x1e>
 800c77e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c782:	f000 bb23 	b.w	800cdcc <__swbuf_r>
 800c786:	6813      	ldr	r3, [r2, #0]
 800c788:	1c58      	adds	r0, r3, #1
 800c78a:	6010      	str	r0, [r2, #0]
 800c78c:	7019      	strb	r1, [r3, #0]
 800c78e:	4608      	mov	r0, r1
 800c790:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <__sfputs_r>:
 800c796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c798:	4606      	mov	r6, r0
 800c79a:	460f      	mov	r7, r1
 800c79c:	4614      	mov	r4, r2
 800c79e:	18d5      	adds	r5, r2, r3
 800c7a0:	42ac      	cmp	r4, r5
 800c7a2:	d101      	bne.n	800c7a8 <__sfputs_r+0x12>
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	e007      	b.n	800c7b8 <__sfputs_r+0x22>
 800c7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ac:	463a      	mov	r2, r7
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7ff ffda 	bl	800c768 <__sfputc_r>
 800c7b4:	1c43      	adds	r3, r0, #1
 800c7b6:	d1f3      	bne.n	800c7a0 <__sfputs_r+0xa>
 800c7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7bc <_vfiprintf_r>:
 800c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	b09d      	sub	sp, #116	; 0x74
 800c7c4:	4614      	mov	r4, r2
 800c7c6:	4698      	mov	r8, r3
 800c7c8:	4606      	mov	r6, r0
 800c7ca:	b118      	cbz	r0, 800c7d4 <_vfiprintf_r+0x18>
 800c7cc:	6983      	ldr	r3, [r0, #24]
 800c7ce:	b90b      	cbnz	r3, 800c7d4 <_vfiprintf_r+0x18>
 800c7d0:	f000 fcde 	bl	800d190 <__sinit>
 800c7d4:	4b89      	ldr	r3, [pc, #548]	; (800c9fc <_vfiprintf_r+0x240>)
 800c7d6:	429d      	cmp	r5, r3
 800c7d8:	d11b      	bne.n	800c812 <_vfiprintf_r+0x56>
 800c7da:	6875      	ldr	r5, [r6, #4]
 800c7dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7de:	07d9      	lsls	r1, r3, #31
 800c7e0:	d405      	bmi.n	800c7ee <_vfiprintf_r+0x32>
 800c7e2:	89ab      	ldrh	r3, [r5, #12]
 800c7e4:	059a      	lsls	r2, r3, #22
 800c7e6:	d402      	bmi.n	800c7ee <_vfiprintf_r+0x32>
 800c7e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ea:	f000 fd6f 	bl	800d2cc <__retarget_lock_acquire_recursive>
 800c7ee:	89ab      	ldrh	r3, [r5, #12]
 800c7f0:	071b      	lsls	r3, r3, #28
 800c7f2:	d501      	bpl.n	800c7f8 <_vfiprintf_r+0x3c>
 800c7f4:	692b      	ldr	r3, [r5, #16]
 800c7f6:	b9eb      	cbnz	r3, 800c834 <_vfiprintf_r+0x78>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 fb38 	bl	800ce70 <__swsetup_r>
 800c800:	b1c0      	cbz	r0, 800c834 <_vfiprintf_r+0x78>
 800c802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c804:	07dc      	lsls	r4, r3, #31
 800c806:	d50e      	bpl.n	800c826 <_vfiprintf_r+0x6a>
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	b01d      	add	sp, #116	; 0x74
 800c80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c812:	4b7b      	ldr	r3, [pc, #492]	; (800ca00 <_vfiprintf_r+0x244>)
 800c814:	429d      	cmp	r5, r3
 800c816:	d101      	bne.n	800c81c <_vfiprintf_r+0x60>
 800c818:	68b5      	ldr	r5, [r6, #8]
 800c81a:	e7df      	b.n	800c7dc <_vfiprintf_r+0x20>
 800c81c:	4b79      	ldr	r3, [pc, #484]	; (800ca04 <_vfiprintf_r+0x248>)
 800c81e:	429d      	cmp	r5, r3
 800c820:	bf08      	it	eq
 800c822:	68f5      	ldreq	r5, [r6, #12]
 800c824:	e7da      	b.n	800c7dc <_vfiprintf_r+0x20>
 800c826:	89ab      	ldrh	r3, [r5, #12]
 800c828:	0598      	lsls	r0, r3, #22
 800c82a:	d4ed      	bmi.n	800c808 <_vfiprintf_r+0x4c>
 800c82c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c82e:	f000 fd4e 	bl	800d2ce <__retarget_lock_release_recursive>
 800c832:	e7e9      	b.n	800c808 <_vfiprintf_r+0x4c>
 800c834:	2300      	movs	r3, #0
 800c836:	9309      	str	r3, [sp, #36]	; 0x24
 800c838:	2320      	movs	r3, #32
 800c83a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c842:	2330      	movs	r3, #48	; 0x30
 800c844:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca08 <_vfiprintf_r+0x24c>
 800c848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c84c:	f04f 0901 	mov.w	r9, #1
 800c850:	4623      	mov	r3, r4
 800c852:	469a      	mov	sl, r3
 800c854:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c858:	b10a      	cbz	r2, 800c85e <_vfiprintf_r+0xa2>
 800c85a:	2a25      	cmp	r2, #37	; 0x25
 800c85c:	d1f9      	bne.n	800c852 <_vfiprintf_r+0x96>
 800c85e:	ebba 0b04 	subs.w	fp, sl, r4
 800c862:	d00b      	beq.n	800c87c <_vfiprintf_r+0xc0>
 800c864:	465b      	mov	r3, fp
 800c866:	4622      	mov	r2, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7ff ff93 	bl	800c796 <__sfputs_r>
 800c870:	3001      	adds	r0, #1
 800c872:	f000 80aa 	beq.w	800c9ca <_vfiprintf_r+0x20e>
 800c876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c878:	445a      	add	r2, fp
 800c87a:	9209      	str	r2, [sp, #36]	; 0x24
 800c87c:	f89a 3000 	ldrb.w	r3, [sl]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 80a2 	beq.w	800c9ca <_vfiprintf_r+0x20e>
 800c886:	2300      	movs	r3, #0
 800c888:	f04f 32ff 	mov.w	r2, #4294967295
 800c88c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c890:	f10a 0a01 	add.w	sl, sl, #1
 800c894:	9304      	str	r3, [sp, #16]
 800c896:	9307      	str	r3, [sp, #28]
 800c898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c89c:	931a      	str	r3, [sp, #104]	; 0x68
 800c89e:	4654      	mov	r4, sl
 800c8a0:	2205      	movs	r2, #5
 800c8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a6:	4858      	ldr	r0, [pc, #352]	; (800ca08 <_vfiprintf_r+0x24c>)
 800c8a8:	f7f3 fc82 	bl	80001b0 <memchr>
 800c8ac:	9a04      	ldr	r2, [sp, #16]
 800c8ae:	b9d8      	cbnz	r0, 800c8e8 <_vfiprintf_r+0x12c>
 800c8b0:	06d1      	lsls	r1, r2, #27
 800c8b2:	bf44      	itt	mi
 800c8b4:	2320      	movmi	r3, #32
 800c8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ba:	0713      	lsls	r3, r2, #28
 800c8bc:	bf44      	itt	mi
 800c8be:	232b      	movmi	r3, #43	; 0x2b
 800c8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ca:	d015      	beq.n	800c8f8 <_vfiprintf_r+0x13c>
 800c8cc:	9a07      	ldr	r2, [sp, #28]
 800c8ce:	4654      	mov	r4, sl
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	f04f 0c0a 	mov.w	ip, #10
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8dc:	3b30      	subs	r3, #48	; 0x30
 800c8de:	2b09      	cmp	r3, #9
 800c8e0:	d94e      	bls.n	800c980 <_vfiprintf_r+0x1c4>
 800c8e2:	b1b0      	cbz	r0, 800c912 <_vfiprintf_r+0x156>
 800c8e4:	9207      	str	r2, [sp, #28]
 800c8e6:	e014      	b.n	800c912 <_vfiprintf_r+0x156>
 800c8e8:	eba0 0308 	sub.w	r3, r0, r8
 800c8ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	9304      	str	r3, [sp, #16]
 800c8f4:	46a2      	mov	sl, r4
 800c8f6:	e7d2      	b.n	800c89e <_vfiprintf_r+0xe2>
 800c8f8:	9b03      	ldr	r3, [sp, #12]
 800c8fa:	1d19      	adds	r1, r3, #4
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	9103      	str	r1, [sp, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	bfbb      	ittet	lt
 800c904:	425b      	neglt	r3, r3
 800c906:	f042 0202 	orrlt.w	r2, r2, #2
 800c90a:	9307      	strge	r3, [sp, #28]
 800c90c:	9307      	strlt	r3, [sp, #28]
 800c90e:	bfb8      	it	lt
 800c910:	9204      	strlt	r2, [sp, #16]
 800c912:	7823      	ldrb	r3, [r4, #0]
 800c914:	2b2e      	cmp	r3, #46	; 0x2e
 800c916:	d10c      	bne.n	800c932 <_vfiprintf_r+0x176>
 800c918:	7863      	ldrb	r3, [r4, #1]
 800c91a:	2b2a      	cmp	r3, #42	; 0x2a
 800c91c:	d135      	bne.n	800c98a <_vfiprintf_r+0x1ce>
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	1d1a      	adds	r2, r3, #4
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	9203      	str	r2, [sp, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	bfb8      	it	lt
 800c92a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c92e:	3402      	adds	r4, #2
 800c930:	9305      	str	r3, [sp, #20]
 800c932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca18 <_vfiprintf_r+0x25c>
 800c936:	7821      	ldrb	r1, [r4, #0]
 800c938:	2203      	movs	r2, #3
 800c93a:	4650      	mov	r0, sl
 800c93c:	f7f3 fc38 	bl	80001b0 <memchr>
 800c940:	b140      	cbz	r0, 800c954 <_vfiprintf_r+0x198>
 800c942:	2340      	movs	r3, #64	; 0x40
 800c944:	eba0 000a 	sub.w	r0, r0, sl
 800c948:	fa03 f000 	lsl.w	r0, r3, r0
 800c94c:	9b04      	ldr	r3, [sp, #16]
 800c94e:	4303      	orrs	r3, r0
 800c950:	3401      	adds	r4, #1
 800c952:	9304      	str	r3, [sp, #16]
 800c954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c958:	482c      	ldr	r0, [pc, #176]	; (800ca0c <_vfiprintf_r+0x250>)
 800c95a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c95e:	2206      	movs	r2, #6
 800c960:	f7f3 fc26 	bl	80001b0 <memchr>
 800c964:	2800      	cmp	r0, #0
 800c966:	d03f      	beq.n	800c9e8 <_vfiprintf_r+0x22c>
 800c968:	4b29      	ldr	r3, [pc, #164]	; (800ca10 <_vfiprintf_r+0x254>)
 800c96a:	bb1b      	cbnz	r3, 800c9b4 <_vfiprintf_r+0x1f8>
 800c96c:	9b03      	ldr	r3, [sp, #12]
 800c96e:	3307      	adds	r3, #7
 800c970:	f023 0307 	bic.w	r3, r3, #7
 800c974:	3308      	adds	r3, #8
 800c976:	9303      	str	r3, [sp, #12]
 800c978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c97a:	443b      	add	r3, r7
 800c97c:	9309      	str	r3, [sp, #36]	; 0x24
 800c97e:	e767      	b.n	800c850 <_vfiprintf_r+0x94>
 800c980:	fb0c 3202 	mla	r2, ip, r2, r3
 800c984:	460c      	mov	r4, r1
 800c986:	2001      	movs	r0, #1
 800c988:	e7a5      	b.n	800c8d6 <_vfiprintf_r+0x11a>
 800c98a:	2300      	movs	r3, #0
 800c98c:	3401      	adds	r4, #1
 800c98e:	9305      	str	r3, [sp, #20]
 800c990:	4619      	mov	r1, r3
 800c992:	f04f 0c0a 	mov.w	ip, #10
 800c996:	4620      	mov	r0, r4
 800c998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c99c:	3a30      	subs	r2, #48	; 0x30
 800c99e:	2a09      	cmp	r2, #9
 800c9a0:	d903      	bls.n	800c9aa <_vfiprintf_r+0x1ee>
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0c5      	beq.n	800c932 <_vfiprintf_r+0x176>
 800c9a6:	9105      	str	r1, [sp, #20]
 800c9a8:	e7c3      	b.n	800c932 <_vfiprintf_r+0x176>
 800c9aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e7f0      	b.n	800c996 <_vfiprintf_r+0x1da>
 800c9b4:	ab03      	add	r3, sp, #12
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	462a      	mov	r2, r5
 800c9ba:	4b16      	ldr	r3, [pc, #88]	; (800ca14 <_vfiprintf_r+0x258>)
 800c9bc:	a904      	add	r1, sp, #16
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f3af 8000 	nop.w
 800c9c4:	4607      	mov	r7, r0
 800c9c6:	1c78      	adds	r0, r7, #1
 800c9c8:	d1d6      	bne.n	800c978 <_vfiprintf_r+0x1bc>
 800c9ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9cc:	07d9      	lsls	r1, r3, #31
 800c9ce:	d405      	bmi.n	800c9dc <_vfiprintf_r+0x220>
 800c9d0:	89ab      	ldrh	r3, [r5, #12]
 800c9d2:	059a      	lsls	r2, r3, #22
 800c9d4:	d402      	bmi.n	800c9dc <_vfiprintf_r+0x220>
 800c9d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d8:	f000 fc79 	bl	800d2ce <__retarget_lock_release_recursive>
 800c9dc:	89ab      	ldrh	r3, [r5, #12]
 800c9de:	065b      	lsls	r3, r3, #25
 800c9e0:	f53f af12 	bmi.w	800c808 <_vfiprintf_r+0x4c>
 800c9e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9e6:	e711      	b.n	800c80c <_vfiprintf_r+0x50>
 800c9e8:	ab03      	add	r3, sp, #12
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	462a      	mov	r2, r5
 800c9ee:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <_vfiprintf_r+0x258>)
 800c9f0:	a904      	add	r1, sp, #16
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f000 f880 	bl	800caf8 <_printf_i>
 800c9f8:	e7e4      	b.n	800c9c4 <_vfiprintf_r+0x208>
 800c9fa:	bf00      	nop
 800c9fc:	0800e2e0 	.word	0x0800e2e0
 800ca00:	0800e300 	.word	0x0800e300
 800ca04:	0800e2c0 	.word	0x0800e2c0
 800ca08:	0800e28c 	.word	0x0800e28c
 800ca0c:	0800e296 	.word	0x0800e296
 800ca10:	00000000 	.word	0x00000000
 800ca14:	0800c797 	.word	0x0800c797
 800ca18:	0800e292 	.word	0x0800e292

0800ca1c <_printf_common>:
 800ca1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca20:	4616      	mov	r6, r2
 800ca22:	4699      	mov	r9, r3
 800ca24:	688a      	ldr	r2, [r1, #8]
 800ca26:	690b      	ldr	r3, [r1, #16]
 800ca28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bfb8      	it	lt
 800ca30:	4613      	movlt	r3, r2
 800ca32:	6033      	str	r3, [r6, #0]
 800ca34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca38:	4607      	mov	r7, r0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	b10a      	cbz	r2, 800ca42 <_printf_common+0x26>
 800ca3e:	3301      	adds	r3, #1
 800ca40:	6033      	str	r3, [r6, #0]
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	0699      	lsls	r1, r3, #26
 800ca46:	bf42      	ittt	mi
 800ca48:	6833      	ldrmi	r3, [r6, #0]
 800ca4a:	3302      	addmi	r3, #2
 800ca4c:	6033      	strmi	r3, [r6, #0]
 800ca4e:	6825      	ldr	r5, [r4, #0]
 800ca50:	f015 0506 	ands.w	r5, r5, #6
 800ca54:	d106      	bne.n	800ca64 <_printf_common+0x48>
 800ca56:	f104 0a19 	add.w	sl, r4, #25
 800ca5a:	68e3      	ldr	r3, [r4, #12]
 800ca5c:	6832      	ldr	r2, [r6, #0]
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	42ab      	cmp	r3, r5
 800ca62:	dc26      	bgt.n	800cab2 <_printf_common+0x96>
 800ca64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca68:	1e13      	subs	r3, r2, #0
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	bf18      	it	ne
 800ca6e:	2301      	movne	r3, #1
 800ca70:	0692      	lsls	r2, r2, #26
 800ca72:	d42b      	bmi.n	800cacc <_printf_common+0xb0>
 800ca74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	47c0      	blx	r8
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d01e      	beq.n	800cac0 <_printf_common+0xa4>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	68e5      	ldr	r5, [r4, #12]
 800ca86:	6832      	ldr	r2, [r6, #0]
 800ca88:	f003 0306 	and.w	r3, r3, #6
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	bf08      	it	eq
 800ca90:	1aad      	subeq	r5, r5, r2
 800ca92:	68a3      	ldr	r3, [r4, #8]
 800ca94:	6922      	ldr	r2, [r4, #16]
 800ca96:	bf0c      	ite	eq
 800ca98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca9c:	2500      	movne	r5, #0
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	bfc4      	itt	gt
 800caa2:	1a9b      	subgt	r3, r3, r2
 800caa4:	18ed      	addgt	r5, r5, r3
 800caa6:	2600      	movs	r6, #0
 800caa8:	341a      	adds	r4, #26
 800caaa:	42b5      	cmp	r5, r6
 800caac:	d11a      	bne.n	800cae4 <_printf_common+0xc8>
 800caae:	2000      	movs	r0, #0
 800cab0:	e008      	b.n	800cac4 <_printf_common+0xa8>
 800cab2:	2301      	movs	r3, #1
 800cab4:	4652      	mov	r2, sl
 800cab6:	4649      	mov	r1, r9
 800cab8:	4638      	mov	r0, r7
 800caba:	47c0      	blx	r8
 800cabc:	3001      	adds	r0, #1
 800cabe:	d103      	bne.n	800cac8 <_printf_common+0xac>
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac8:	3501      	adds	r5, #1
 800caca:	e7c6      	b.n	800ca5a <_printf_common+0x3e>
 800cacc:	18e1      	adds	r1, r4, r3
 800cace:	1c5a      	adds	r2, r3, #1
 800cad0:	2030      	movs	r0, #48	; 0x30
 800cad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cad6:	4422      	add	r2, r4
 800cad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cadc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cae0:	3302      	adds	r3, #2
 800cae2:	e7c7      	b.n	800ca74 <_printf_common+0x58>
 800cae4:	2301      	movs	r3, #1
 800cae6:	4622      	mov	r2, r4
 800cae8:	4649      	mov	r1, r9
 800caea:	4638      	mov	r0, r7
 800caec:	47c0      	blx	r8
 800caee:	3001      	adds	r0, #1
 800caf0:	d0e6      	beq.n	800cac0 <_printf_common+0xa4>
 800caf2:	3601      	adds	r6, #1
 800caf4:	e7d9      	b.n	800caaa <_printf_common+0x8e>
	...

0800caf8 <_printf_i>:
 800caf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cafc:	7e0f      	ldrb	r7, [r1, #24]
 800cafe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb00:	2f78      	cmp	r7, #120	; 0x78
 800cb02:	4691      	mov	r9, r2
 800cb04:	4680      	mov	r8, r0
 800cb06:	460c      	mov	r4, r1
 800cb08:	469a      	mov	sl, r3
 800cb0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb0e:	d807      	bhi.n	800cb20 <_printf_i+0x28>
 800cb10:	2f62      	cmp	r7, #98	; 0x62
 800cb12:	d80a      	bhi.n	800cb2a <_printf_i+0x32>
 800cb14:	2f00      	cmp	r7, #0
 800cb16:	f000 80d8 	beq.w	800ccca <_printf_i+0x1d2>
 800cb1a:	2f58      	cmp	r7, #88	; 0x58
 800cb1c:	f000 80a3 	beq.w	800cc66 <_printf_i+0x16e>
 800cb20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb28:	e03a      	b.n	800cba0 <_printf_i+0xa8>
 800cb2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb2e:	2b15      	cmp	r3, #21
 800cb30:	d8f6      	bhi.n	800cb20 <_printf_i+0x28>
 800cb32:	a101      	add	r1, pc, #4	; (adr r1, 800cb38 <_printf_i+0x40>)
 800cb34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb38:	0800cb91 	.word	0x0800cb91
 800cb3c:	0800cba5 	.word	0x0800cba5
 800cb40:	0800cb21 	.word	0x0800cb21
 800cb44:	0800cb21 	.word	0x0800cb21
 800cb48:	0800cb21 	.word	0x0800cb21
 800cb4c:	0800cb21 	.word	0x0800cb21
 800cb50:	0800cba5 	.word	0x0800cba5
 800cb54:	0800cb21 	.word	0x0800cb21
 800cb58:	0800cb21 	.word	0x0800cb21
 800cb5c:	0800cb21 	.word	0x0800cb21
 800cb60:	0800cb21 	.word	0x0800cb21
 800cb64:	0800ccb1 	.word	0x0800ccb1
 800cb68:	0800cbd5 	.word	0x0800cbd5
 800cb6c:	0800cc93 	.word	0x0800cc93
 800cb70:	0800cb21 	.word	0x0800cb21
 800cb74:	0800cb21 	.word	0x0800cb21
 800cb78:	0800ccd3 	.word	0x0800ccd3
 800cb7c:	0800cb21 	.word	0x0800cb21
 800cb80:	0800cbd5 	.word	0x0800cbd5
 800cb84:	0800cb21 	.word	0x0800cb21
 800cb88:	0800cb21 	.word	0x0800cb21
 800cb8c:	0800cc9b 	.word	0x0800cc9b
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	1d1a      	adds	r2, r3, #4
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	602a      	str	r2, [r5, #0]
 800cb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cba0:	2301      	movs	r3, #1
 800cba2:	e0a3      	b.n	800ccec <_printf_i+0x1f4>
 800cba4:	6820      	ldr	r0, [r4, #0]
 800cba6:	6829      	ldr	r1, [r5, #0]
 800cba8:	0606      	lsls	r6, r0, #24
 800cbaa:	f101 0304 	add.w	r3, r1, #4
 800cbae:	d50a      	bpl.n	800cbc6 <_printf_i+0xce>
 800cbb0:	680e      	ldr	r6, [r1, #0]
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	2e00      	cmp	r6, #0
 800cbb6:	da03      	bge.n	800cbc0 <_printf_i+0xc8>
 800cbb8:	232d      	movs	r3, #45	; 0x2d
 800cbba:	4276      	negs	r6, r6
 800cbbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbc0:	485e      	ldr	r0, [pc, #376]	; (800cd3c <_printf_i+0x244>)
 800cbc2:	230a      	movs	r3, #10
 800cbc4:	e019      	b.n	800cbfa <_printf_i+0x102>
 800cbc6:	680e      	ldr	r6, [r1, #0]
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cbce:	bf18      	it	ne
 800cbd0:	b236      	sxthne	r6, r6
 800cbd2:	e7ef      	b.n	800cbb4 <_printf_i+0xbc>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	6820      	ldr	r0, [r4, #0]
 800cbd8:	1d19      	adds	r1, r3, #4
 800cbda:	6029      	str	r1, [r5, #0]
 800cbdc:	0601      	lsls	r1, r0, #24
 800cbde:	d501      	bpl.n	800cbe4 <_printf_i+0xec>
 800cbe0:	681e      	ldr	r6, [r3, #0]
 800cbe2:	e002      	b.n	800cbea <_printf_i+0xf2>
 800cbe4:	0646      	lsls	r6, r0, #25
 800cbe6:	d5fb      	bpl.n	800cbe0 <_printf_i+0xe8>
 800cbe8:	881e      	ldrh	r6, [r3, #0]
 800cbea:	4854      	ldr	r0, [pc, #336]	; (800cd3c <_printf_i+0x244>)
 800cbec:	2f6f      	cmp	r7, #111	; 0x6f
 800cbee:	bf0c      	ite	eq
 800cbf0:	2308      	moveq	r3, #8
 800cbf2:	230a      	movne	r3, #10
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbfa:	6865      	ldr	r5, [r4, #4]
 800cbfc:	60a5      	str	r5, [r4, #8]
 800cbfe:	2d00      	cmp	r5, #0
 800cc00:	bfa2      	ittt	ge
 800cc02:	6821      	ldrge	r1, [r4, #0]
 800cc04:	f021 0104 	bicge.w	r1, r1, #4
 800cc08:	6021      	strge	r1, [r4, #0]
 800cc0a:	b90e      	cbnz	r6, 800cc10 <_printf_i+0x118>
 800cc0c:	2d00      	cmp	r5, #0
 800cc0e:	d04d      	beq.n	800ccac <_printf_i+0x1b4>
 800cc10:	4615      	mov	r5, r2
 800cc12:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc16:	fb03 6711 	mls	r7, r3, r1, r6
 800cc1a:	5dc7      	ldrb	r7, [r0, r7]
 800cc1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc20:	4637      	mov	r7, r6
 800cc22:	42bb      	cmp	r3, r7
 800cc24:	460e      	mov	r6, r1
 800cc26:	d9f4      	bls.n	800cc12 <_printf_i+0x11a>
 800cc28:	2b08      	cmp	r3, #8
 800cc2a:	d10b      	bne.n	800cc44 <_printf_i+0x14c>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	07de      	lsls	r6, r3, #31
 800cc30:	d508      	bpl.n	800cc44 <_printf_i+0x14c>
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	6861      	ldr	r1, [r4, #4]
 800cc36:	4299      	cmp	r1, r3
 800cc38:	bfde      	ittt	le
 800cc3a:	2330      	movle	r3, #48	; 0x30
 800cc3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc40:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc44:	1b52      	subs	r2, r2, r5
 800cc46:	6122      	str	r2, [r4, #16]
 800cc48:	f8cd a000 	str.w	sl, [sp]
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	aa03      	add	r2, sp, #12
 800cc50:	4621      	mov	r1, r4
 800cc52:	4640      	mov	r0, r8
 800cc54:	f7ff fee2 	bl	800ca1c <_printf_common>
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d14c      	bne.n	800ccf6 <_printf_i+0x1fe>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	b004      	add	sp, #16
 800cc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc66:	4835      	ldr	r0, [pc, #212]	; (800cd3c <_printf_i+0x244>)
 800cc68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc6c:	6829      	ldr	r1, [r5, #0]
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc74:	6029      	str	r1, [r5, #0]
 800cc76:	061d      	lsls	r5, r3, #24
 800cc78:	d514      	bpl.n	800cca4 <_printf_i+0x1ac>
 800cc7a:	07df      	lsls	r7, r3, #31
 800cc7c:	bf44      	itt	mi
 800cc7e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc82:	6023      	strmi	r3, [r4, #0]
 800cc84:	b91e      	cbnz	r6, 800cc8e <_printf_i+0x196>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	f023 0320 	bic.w	r3, r3, #32
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	2310      	movs	r3, #16
 800cc90:	e7b0      	b.n	800cbf4 <_printf_i+0xfc>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	f043 0320 	orr.w	r3, r3, #32
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	2378      	movs	r3, #120	; 0x78
 800cc9c:	4828      	ldr	r0, [pc, #160]	; (800cd40 <_printf_i+0x248>)
 800cc9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cca2:	e7e3      	b.n	800cc6c <_printf_i+0x174>
 800cca4:	0659      	lsls	r1, r3, #25
 800cca6:	bf48      	it	mi
 800cca8:	b2b6      	uxthmi	r6, r6
 800ccaa:	e7e6      	b.n	800cc7a <_printf_i+0x182>
 800ccac:	4615      	mov	r5, r2
 800ccae:	e7bb      	b.n	800cc28 <_printf_i+0x130>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	6826      	ldr	r6, [r4, #0]
 800ccb4:	6961      	ldr	r1, [r4, #20]
 800ccb6:	1d18      	adds	r0, r3, #4
 800ccb8:	6028      	str	r0, [r5, #0]
 800ccba:	0635      	lsls	r5, r6, #24
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	d501      	bpl.n	800ccc4 <_printf_i+0x1cc>
 800ccc0:	6019      	str	r1, [r3, #0]
 800ccc2:	e002      	b.n	800ccca <_printf_i+0x1d2>
 800ccc4:	0670      	lsls	r0, r6, #25
 800ccc6:	d5fb      	bpl.n	800ccc0 <_printf_i+0x1c8>
 800ccc8:	8019      	strh	r1, [r3, #0]
 800ccca:	2300      	movs	r3, #0
 800cccc:	6123      	str	r3, [r4, #16]
 800ccce:	4615      	mov	r5, r2
 800ccd0:	e7ba      	b.n	800cc48 <_printf_i+0x150>
 800ccd2:	682b      	ldr	r3, [r5, #0]
 800ccd4:	1d1a      	adds	r2, r3, #4
 800ccd6:	602a      	str	r2, [r5, #0]
 800ccd8:	681d      	ldr	r5, [r3, #0]
 800ccda:	6862      	ldr	r2, [r4, #4]
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4628      	mov	r0, r5
 800cce0:	f7f3 fa66 	bl	80001b0 <memchr>
 800cce4:	b108      	cbz	r0, 800ccea <_printf_i+0x1f2>
 800cce6:	1b40      	subs	r0, r0, r5
 800cce8:	6060      	str	r0, [r4, #4]
 800ccea:	6863      	ldr	r3, [r4, #4]
 800ccec:	6123      	str	r3, [r4, #16]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf4:	e7a8      	b.n	800cc48 <_printf_i+0x150>
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	47d0      	blx	sl
 800cd00:	3001      	adds	r0, #1
 800cd02:	d0ab      	beq.n	800cc5c <_printf_i+0x164>
 800cd04:	6823      	ldr	r3, [r4, #0]
 800cd06:	079b      	lsls	r3, r3, #30
 800cd08:	d413      	bmi.n	800cd32 <_printf_i+0x23a>
 800cd0a:	68e0      	ldr	r0, [r4, #12]
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	4298      	cmp	r0, r3
 800cd10:	bfb8      	it	lt
 800cd12:	4618      	movlt	r0, r3
 800cd14:	e7a4      	b.n	800cc60 <_printf_i+0x168>
 800cd16:	2301      	movs	r3, #1
 800cd18:	4632      	mov	r2, r6
 800cd1a:	4649      	mov	r1, r9
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	47d0      	blx	sl
 800cd20:	3001      	adds	r0, #1
 800cd22:	d09b      	beq.n	800cc5c <_printf_i+0x164>
 800cd24:	3501      	adds	r5, #1
 800cd26:	68e3      	ldr	r3, [r4, #12]
 800cd28:	9903      	ldr	r1, [sp, #12]
 800cd2a:	1a5b      	subs	r3, r3, r1
 800cd2c:	42ab      	cmp	r3, r5
 800cd2e:	dcf2      	bgt.n	800cd16 <_printf_i+0x21e>
 800cd30:	e7eb      	b.n	800cd0a <_printf_i+0x212>
 800cd32:	2500      	movs	r5, #0
 800cd34:	f104 0619 	add.w	r6, r4, #25
 800cd38:	e7f5      	b.n	800cd26 <_printf_i+0x22e>
 800cd3a:	bf00      	nop
 800cd3c:	0800e29d 	.word	0x0800e29d
 800cd40:	0800e2ae 	.word	0x0800e2ae

0800cd44 <_sbrk_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4d06      	ldr	r5, [pc, #24]	; (800cd60 <_sbrk_r+0x1c>)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	602b      	str	r3, [r5, #0]
 800cd50:	f7f4 f814 	bl	8000d7c <_sbrk>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_sbrk_r+0x1a>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_sbrk_r+0x1a>
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	200009bc 	.word	0x200009bc

0800cd64 <sniprintf>:
 800cd64:	b40c      	push	{r2, r3}
 800cd66:	b530      	push	{r4, r5, lr}
 800cd68:	4b17      	ldr	r3, [pc, #92]	; (800cdc8 <sniprintf+0x64>)
 800cd6a:	1e0c      	subs	r4, r1, #0
 800cd6c:	681d      	ldr	r5, [r3, #0]
 800cd6e:	b09d      	sub	sp, #116	; 0x74
 800cd70:	da08      	bge.n	800cd84 <sniprintf+0x20>
 800cd72:	238b      	movs	r3, #139	; 0x8b
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7a:	b01d      	add	sp, #116	; 0x74
 800cd7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd80:	b002      	add	sp, #8
 800cd82:	4770      	bx	lr
 800cd84:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd88:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd8c:	bf14      	ite	ne
 800cd8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd92:	4623      	moveq	r3, r4
 800cd94:	9304      	str	r3, [sp, #16]
 800cd96:	9307      	str	r3, [sp, #28]
 800cd98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd9c:	9002      	str	r0, [sp, #8]
 800cd9e:	9006      	str	r0, [sp, #24]
 800cda0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cda4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cda6:	ab21      	add	r3, sp, #132	; 0x84
 800cda8:	a902      	add	r1, sp, #8
 800cdaa:	4628      	mov	r0, r5
 800cdac:	9301      	str	r3, [sp, #4]
 800cdae:	f000 fba5 	bl	800d4fc <_svfiprintf_r>
 800cdb2:	1c43      	adds	r3, r0, #1
 800cdb4:	bfbc      	itt	lt
 800cdb6:	238b      	movlt	r3, #139	; 0x8b
 800cdb8:	602b      	strlt	r3, [r5, #0]
 800cdba:	2c00      	cmp	r4, #0
 800cdbc:	d0dd      	beq.n	800cd7a <sniprintf+0x16>
 800cdbe:	9b02      	ldr	r3, [sp, #8]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	701a      	strb	r2, [r3, #0]
 800cdc4:	e7d9      	b.n	800cd7a <sniprintf+0x16>
 800cdc6:	bf00      	nop
 800cdc8:	20000040 	.word	0x20000040

0800cdcc <__swbuf_r>:
 800cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdce:	460e      	mov	r6, r1
 800cdd0:	4614      	mov	r4, r2
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	b118      	cbz	r0, 800cdde <__swbuf_r+0x12>
 800cdd6:	6983      	ldr	r3, [r0, #24]
 800cdd8:	b90b      	cbnz	r3, 800cdde <__swbuf_r+0x12>
 800cdda:	f000 f9d9 	bl	800d190 <__sinit>
 800cdde:	4b21      	ldr	r3, [pc, #132]	; (800ce64 <__swbuf_r+0x98>)
 800cde0:	429c      	cmp	r4, r3
 800cde2:	d12b      	bne.n	800ce3c <__swbuf_r+0x70>
 800cde4:	686c      	ldr	r4, [r5, #4]
 800cde6:	69a3      	ldr	r3, [r4, #24]
 800cde8:	60a3      	str	r3, [r4, #8]
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	071a      	lsls	r2, r3, #28
 800cdee:	d52f      	bpl.n	800ce50 <__swbuf_r+0x84>
 800cdf0:	6923      	ldr	r3, [r4, #16]
 800cdf2:	b36b      	cbz	r3, 800ce50 <__swbuf_r+0x84>
 800cdf4:	6923      	ldr	r3, [r4, #16]
 800cdf6:	6820      	ldr	r0, [r4, #0]
 800cdf8:	1ac0      	subs	r0, r0, r3
 800cdfa:	6963      	ldr	r3, [r4, #20]
 800cdfc:	b2f6      	uxtb	r6, r6
 800cdfe:	4283      	cmp	r3, r0
 800ce00:	4637      	mov	r7, r6
 800ce02:	dc04      	bgt.n	800ce0e <__swbuf_r+0x42>
 800ce04:	4621      	mov	r1, r4
 800ce06:	4628      	mov	r0, r5
 800ce08:	f000 f92e 	bl	800d068 <_fflush_r>
 800ce0c:	bb30      	cbnz	r0, 800ce5c <__swbuf_r+0x90>
 800ce0e:	68a3      	ldr	r3, [r4, #8]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	60a3      	str	r3, [r4, #8]
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	6022      	str	r2, [r4, #0]
 800ce1a:	701e      	strb	r6, [r3, #0]
 800ce1c:	6963      	ldr	r3, [r4, #20]
 800ce1e:	3001      	adds	r0, #1
 800ce20:	4283      	cmp	r3, r0
 800ce22:	d004      	beq.n	800ce2e <__swbuf_r+0x62>
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	07db      	lsls	r3, r3, #31
 800ce28:	d506      	bpl.n	800ce38 <__swbuf_r+0x6c>
 800ce2a:	2e0a      	cmp	r6, #10
 800ce2c:	d104      	bne.n	800ce38 <__swbuf_r+0x6c>
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4628      	mov	r0, r5
 800ce32:	f000 f919 	bl	800d068 <_fflush_r>
 800ce36:	b988      	cbnz	r0, 800ce5c <__swbuf_r+0x90>
 800ce38:	4638      	mov	r0, r7
 800ce3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <__swbuf_r+0x9c>)
 800ce3e:	429c      	cmp	r4, r3
 800ce40:	d101      	bne.n	800ce46 <__swbuf_r+0x7a>
 800ce42:	68ac      	ldr	r4, [r5, #8]
 800ce44:	e7cf      	b.n	800cde6 <__swbuf_r+0x1a>
 800ce46:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <__swbuf_r+0xa0>)
 800ce48:	429c      	cmp	r4, r3
 800ce4a:	bf08      	it	eq
 800ce4c:	68ec      	ldreq	r4, [r5, #12]
 800ce4e:	e7ca      	b.n	800cde6 <__swbuf_r+0x1a>
 800ce50:	4621      	mov	r1, r4
 800ce52:	4628      	mov	r0, r5
 800ce54:	f000 f80c 	bl	800ce70 <__swsetup_r>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d0cb      	beq.n	800cdf4 <__swbuf_r+0x28>
 800ce5c:	f04f 37ff 	mov.w	r7, #4294967295
 800ce60:	e7ea      	b.n	800ce38 <__swbuf_r+0x6c>
 800ce62:	bf00      	nop
 800ce64:	0800e2e0 	.word	0x0800e2e0
 800ce68:	0800e300 	.word	0x0800e300
 800ce6c:	0800e2c0 	.word	0x0800e2c0

0800ce70 <__swsetup_r>:
 800ce70:	4b32      	ldr	r3, [pc, #200]	; (800cf3c <__swsetup_r+0xcc>)
 800ce72:	b570      	push	{r4, r5, r6, lr}
 800ce74:	681d      	ldr	r5, [r3, #0]
 800ce76:	4606      	mov	r6, r0
 800ce78:	460c      	mov	r4, r1
 800ce7a:	b125      	cbz	r5, 800ce86 <__swsetup_r+0x16>
 800ce7c:	69ab      	ldr	r3, [r5, #24]
 800ce7e:	b913      	cbnz	r3, 800ce86 <__swsetup_r+0x16>
 800ce80:	4628      	mov	r0, r5
 800ce82:	f000 f985 	bl	800d190 <__sinit>
 800ce86:	4b2e      	ldr	r3, [pc, #184]	; (800cf40 <__swsetup_r+0xd0>)
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	d10f      	bne.n	800ceac <__swsetup_r+0x3c>
 800ce8c:	686c      	ldr	r4, [r5, #4]
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce94:	0719      	lsls	r1, r3, #28
 800ce96:	d42c      	bmi.n	800cef2 <__swsetup_r+0x82>
 800ce98:	06dd      	lsls	r5, r3, #27
 800ce9a:	d411      	bmi.n	800cec0 <__swsetup_r+0x50>
 800ce9c:	2309      	movs	r3, #9
 800ce9e:	6033      	str	r3, [r6, #0]
 800cea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cea4:	81a3      	strh	r3, [r4, #12]
 800cea6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceaa:	e03e      	b.n	800cf2a <__swsetup_r+0xba>
 800ceac:	4b25      	ldr	r3, [pc, #148]	; (800cf44 <__swsetup_r+0xd4>)
 800ceae:	429c      	cmp	r4, r3
 800ceb0:	d101      	bne.n	800ceb6 <__swsetup_r+0x46>
 800ceb2:	68ac      	ldr	r4, [r5, #8]
 800ceb4:	e7eb      	b.n	800ce8e <__swsetup_r+0x1e>
 800ceb6:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <__swsetup_r+0xd8>)
 800ceb8:	429c      	cmp	r4, r3
 800ceba:	bf08      	it	eq
 800cebc:	68ec      	ldreq	r4, [r5, #12]
 800cebe:	e7e6      	b.n	800ce8e <__swsetup_r+0x1e>
 800cec0:	0758      	lsls	r0, r3, #29
 800cec2:	d512      	bpl.n	800ceea <__swsetup_r+0x7a>
 800cec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cec6:	b141      	cbz	r1, 800ceda <__swsetup_r+0x6a>
 800cec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cecc:	4299      	cmp	r1, r3
 800cece:	d002      	beq.n	800ced6 <__swsetup_r+0x66>
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff fb69 	bl	800c5a8 <_free_r>
 800ced6:	2300      	movs	r3, #0
 800ced8:	6363      	str	r3, [r4, #52]	; 0x34
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cee0:	81a3      	strh	r3, [r4, #12]
 800cee2:	2300      	movs	r3, #0
 800cee4:	6063      	str	r3, [r4, #4]
 800cee6:	6923      	ldr	r3, [r4, #16]
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	89a3      	ldrh	r3, [r4, #12]
 800ceec:	f043 0308 	orr.w	r3, r3, #8
 800cef0:	81a3      	strh	r3, [r4, #12]
 800cef2:	6923      	ldr	r3, [r4, #16]
 800cef4:	b94b      	cbnz	r3, 800cf0a <__swsetup_r+0x9a>
 800cef6:	89a3      	ldrh	r3, [r4, #12]
 800cef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cefc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf00:	d003      	beq.n	800cf0a <__swsetup_r+0x9a>
 800cf02:	4621      	mov	r1, r4
 800cf04:	4630      	mov	r0, r6
 800cf06:	f000 fa09 	bl	800d31c <__smakebuf_r>
 800cf0a:	89a0      	ldrh	r0, [r4, #12]
 800cf0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf10:	f010 0301 	ands.w	r3, r0, #1
 800cf14:	d00a      	beq.n	800cf2c <__swsetup_r+0xbc>
 800cf16:	2300      	movs	r3, #0
 800cf18:	60a3      	str	r3, [r4, #8]
 800cf1a:	6963      	ldr	r3, [r4, #20]
 800cf1c:	425b      	negs	r3, r3
 800cf1e:	61a3      	str	r3, [r4, #24]
 800cf20:	6923      	ldr	r3, [r4, #16]
 800cf22:	b943      	cbnz	r3, 800cf36 <__swsetup_r+0xc6>
 800cf24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf28:	d1ba      	bne.n	800cea0 <__swsetup_r+0x30>
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	0781      	lsls	r1, r0, #30
 800cf2e:	bf58      	it	pl
 800cf30:	6963      	ldrpl	r3, [r4, #20]
 800cf32:	60a3      	str	r3, [r4, #8]
 800cf34:	e7f4      	b.n	800cf20 <__swsetup_r+0xb0>
 800cf36:	2000      	movs	r0, #0
 800cf38:	e7f7      	b.n	800cf2a <__swsetup_r+0xba>
 800cf3a:	bf00      	nop
 800cf3c:	20000040 	.word	0x20000040
 800cf40:	0800e2e0 	.word	0x0800e2e0
 800cf44:	0800e300 	.word	0x0800e300
 800cf48:	0800e2c0 	.word	0x0800e2c0

0800cf4c <abort>:
 800cf4c:	b508      	push	{r3, lr}
 800cf4e:	2006      	movs	r0, #6
 800cf50:	f000 fbfc 	bl	800d74c <raise>
 800cf54:	2001      	movs	r0, #1
 800cf56:	f7f3 fe9a 	bl	8000c8e <_exit>
	...

0800cf5c <__sflush_r>:
 800cf5c:	898a      	ldrh	r2, [r1, #12]
 800cf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf62:	4605      	mov	r5, r0
 800cf64:	0710      	lsls	r0, r2, #28
 800cf66:	460c      	mov	r4, r1
 800cf68:	d458      	bmi.n	800d01c <__sflush_r+0xc0>
 800cf6a:	684b      	ldr	r3, [r1, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	dc05      	bgt.n	800cf7c <__sflush_r+0x20>
 800cf70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dc02      	bgt.n	800cf7c <__sflush_r+0x20>
 800cf76:	2000      	movs	r0, #0
 800cf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf7e:	2e00      	cmp	r6, #0
 800cf80:	d0f9      	beq.n	800cf76 <__sflush_r+0x1a>
 800cf82:	2300      	movs	r3, #0
 800cf84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf88:	682f      	ldr	r7, [r5, #0]
 800cf8a:	602b      	str	r3, [r5, #0]
 800cf8c:	d032      	beq.n	800cff4 <__sflush_r+0x98>
 800cf8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	075a      	lsls	r2, r3, #29
 800cf94:	d505      	bpl.n	800cfa2 <__sflush_r+0x46>
 800cf96:	6863      	ldr	r3, [r4, #4]
 800cf98:	1ac0      	subs	r0, r0, r3
 800cf9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf9c:	b10b      	cbz	r3, 800cfa2 <__sflush_r+0x46>
 800cf9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfa0:	1ac0      	subs	r0, r0, r3
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfa8:	6a21      	ldr	r1, [r4, #32]
 800cfaa:	4628      	mov	r0, r5
 800cfac:	47b0      	blx	r6
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	d106      	bne.n	800cfc2 <__sflush_r+0x66>
 800cfb4:	6829      	ldr	r1, [r5, #0]
 800cfb6:	291d      	cmp	r1, #29
 800cfb8:	d82c      	bhi.n	800d014 <__sflush_r+0xb8>
 800cfba:	4a2a      	ldr	r2, [pc, #168]	; (800d064 <__sflush_r+0x108>)
 800cfbc:	40ca      	lsrs	r2, r1
 800cfbe:	07d6      	lsls	r6, r2, #31
 800cfc0:	d528      	bpl.n	800d014 <__sflush_r+0xb8>
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	6062      	str	r2, [r4, #4]
 800cfc6:	04d9      	lsls	r1, r3, #19
 800cfc8:	6922      	ldr	r2, [r4, #16]
 800cfca:	6022      	str	r2, [r4, #0]
 800cfcc:	d504      	bpl.n	800cfd8 <__sflush_r+0x7c>
 800cfce:	1c42      	adds	r2, r0, #1
 800cfd0:	d101      	bne.n	800cfd6 <__sflush_r+0x7a>
 800cfd2:	682b      	ldr	r3, [r5, #0]
 800cfd4:	b903      	cbnz	r3, 800cfd8 <__sflush_r+0x7c>
 800cfd6:	6560      	str	r0, [r4, #84]	; 0x54
 800cfd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfda:	602f      	str	r7, [r5, #0]
 800cfdc:	2900      	cmp	r1, #0
 800cfde:	d0ca      	beq.n	800cf76 <__sflush_r+0x1a>
 800cfe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfe4:	4299      	cmp	r1, r3
 800cfe6:	d002      	beq.n	800cfee <__sflush_r+0x92>
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f7ff fadd 	bl	800c5a8 <_free_r>
 800cfee:	2000      	movs	r0, #0
 800cff0:	6360      	str	r0, [r4, #52]	; 0x34
 800cff2:	e7c1      	b.n	800cf78 <__sflush_r+0x1c>
 800cff4:	6a21      	ldr	r1, [r4, #32]
 800cff6:	2301      	movs	r3, #1
 800cff8:	4628      	mov	r0, r5
 800cffa:	47b0      	blx	r6
 800cffc:	1c41      	adds	r1, r0, #1
 800cffe:	d1c7      	bne.n	800cf90 <__sflush_r+0x34>
 800d000:	682b      	ldr	r3, [r5, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d0c4      	beq.n	800cf90 <__sflush_r+0x34>
 800d006:	2b1d      	cmp	r3, #29
 800d008:	d001      	beq.n	800d00e <__sflush_r+0xb2>
 800d00a:	2b16      	cmp	r3, #22
 800d00c:	d101      	bne.n	800d012 <__sflush_r+0xb6>
 800d00e:	602f      	str	r7, [r5, #0]
 800d010:	e7b1      	b.n	800cf76 <__sflush_r+0x1a>
 800d012:	89a3      	ldrh	r3, [r4, #12]
 800d014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d018:	81a3      	strh	r3, [r4, #12]
 800d01a:	e7ad      	b.n	800cf78 <__sflush_r+0x1c>
 800d01c:	690f      	ldr	r7, [r1, #16]
 800d01e:	2f00      	cmp	r7, #0
 800d020:	d0a9      	beq.n	800cf76 <__sflush_r+0x1a>
 800d022:	0793      	lsls	r3, r2, #30
 800d024:	680e      	ldr	r6, [r1, #0]
 800d026:	bf08      	it	eq
 800d028:	694b      	ldreq	r3, [r1, #20]
 800d02a:	600f      	str	r7, [r1, #0]
 800d02c:	bf18      	it	ne
 800d02e:	2300      	movne	r3, #0
 800d030:	eba6 0807 	sub.w	r8, r6, r7
 800d034:	608b      	str	r3, [r1, #8]
 800d036:	f1b8 0f00 	cmp.w	r8, #0
 800d03a:	dd9c      	ble.n	800cf76 <__sflush_r+0x1a>
 800d03c:	6a21      	ldr	r1, [r4, #32]
 800d03e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d040:	4643      	mov	r3, r8
 800d042:	463a      	mov	r2, r7
 800d044:	4628      	mov	r0, r5
 800d046:	47b0      	blx	r6
 800d048:	2800      	cmp	r0, #0
 800d04a:	dc06      	bgt.n	800d05a <__sflush_r+0xfe>
 800d04c:	89a3      	ldrh	r3, [r4, #12]
 800d04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	e78e      	b.n	800cf78 <__sflush_r+0x1c>
 800d05a:	4407      	add	r7, r0
 800d05c:	eba8 0800 	sub.w	r8, r8, r0
 800d060:	e7e9      	b.n	800d036 <__sflush_r+0xda>
 800d062:	bf00      	nop
 800d064:	20400001 	.word	0x20400001

0800d068 <_fflush_r>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	690b      	ldr	r3, [r1, #16]
 800d06c:	4605      	mov	r5, r0
 800d06e:	460c      	mov	r4, r1
 800d070:	b913      	cbnz	r3, 800d078 <_fflush_r+0x10>
 800d072:	2500      	movs	r5, #0
 800d074:	4628      	mov	r0, r5
 800d076:	bd38      	pop	{r3, r4, r5, pc}
 800d078:	b118      	cbz	r0, 800d082 <_fflush_r+0x1a>
 800d07a:	6983      	ldr	r3, [r0, #24]
 800d07c:	b90b      	cbnz	r3, 800d082 <_fflush_r+0x1a>
 800d07e:	f000 f887 	bl	800d190 <__sinit>
 800d082:	4b14      	ldr	r3, [pc, #80]	; (800d0d4 <_fflush_r+0x6c>)
 800d084:	429c      	cmp	r4, r3
 800d086:	d11b      	bne.n	800d0c0 <_fflush_r+0x58>
 800d088:	686c      	ldr	r4, [r5, #4]
 800d08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d0ef      	beq.n	800d072 <_fflush_r+0xa>
 800d092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d094:	07d0      	lsls	r0, r2, #31
 800d096:	d404      	bmi.n	800d0a2 <_fflush_r+0x3a>
 800d098:	0599      	lsls	r1, r3, #22
 800d09a:	d402      	bmi.n	800d0a2 <_fflush_r+0x3a>
 800d09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d09e:	f000 f915 	bl	800d2cc <__retarget_lock_acquire_recursive>
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	f7ff ff59 	bl	800cf5c <__sflush_r>
 800d0aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0ac:	07da      	lsls	r2, r3, #31
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	d4e0      	bmi.n	800d074 <_fflush_r+0xc>
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	059b      	lsls	r3, r3, #22
 800d0b6:	d4dd      	bmi.n	800d074 <_fflush_r+0xc>
 800d0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0ba:	f000 f908 	bl	800d2ce <__retarget_lock_release_recursive>
 800d0be:	e7d9      	b.n	800d074 <_fflush_r+0xc>
 800d0c0:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <_fflush_r+0x70>)
 800d0c2:	429c      	cmp	r4, r3
 800d0c4:	d101      	bne.n	800d0ca <_fflush_r+0x62>
 800d0c6:	68ac      	ldr	r4, [r5, #8]
 800d0c8:	e7df      	b.n	800d08a <_fflush_r+0x22>
 800d0ca:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <_fflush_r+0x74>)
 800d0cc:	429c      	cmp	r4, r3
 800d0ce:	bf08      	it	eq
 800d0d0:	68ec      	ldreq	r4, [r5, #12]
 800d0d2:	e7da      	b.n	800d08a <_fflush_r+0x22>
 800d0d4:	0800e2e0 	.word	0x0800e2e0
 800d0d8:	0800e300 	.word	0x0800e300
 800d0dc:	0800e2c0 	.word	0x0800e2c0

0800d0e0 <std>:
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	b510      	push	{r4, lr}
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0ee:	6083      	str	r3, [r0, #8]
 800d0f0:	8181      	strh	r1, [r0, #12]
 800d0f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d0f4:	81c2      	strh	r2, [r0, #14]
 800d0f6:	6183      	str	r3, [r0, #24]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	2208      	movs	r2, #8
 800d0fc:	305c      	adds	r0, #92	; 0x5c
 800d0fe:	f7ff fa4b 	bl	800c598 <memset>
 800d102:	4b05      	ldr	r3, [pc, #20]	; (800d118 <std+0x38>)
 800d104:	6263      	str	r3, [r4, #36]	; 0x24
 800d106:	4b05      	ldr	r3, [pc, #20]	; (800d11c <std+0x3c>)
 800d108:	62a3      	str	r3, [r4, #40]	; 0x28
 800d10a:	4b05      	ldr	r3, [pc, #20]	; (800d120 <std+0x40>)
 800d10c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d10e:	4b05      	ldr	r3, [pc, #20]	; (800d124 <std+0x44>)
 800d110:	6224      	str	r4, [r4, #32]
 800d112:	6323      	str	r3, [r4, #48]	; 0x30
 800d114:	bd10      	pop	{r4, pc}
 800d116:	bf00      	nop
 800d118:	0800d785 	.word	0x0800d785
 800d11c:	0800d7a7 	.word	0x0800d7a7
 800d120:	0800d7df 	.word	0x0800d7df
 800d124:	0800d803 	.word	0x0800d803

0800d128 <_cleanup_r>:
 800d128:	4901      	ldr	r1, [pc, #4]	; (800d130 <_cleanup_r+0x8>)
 800d12a:	f000 b8af 	b.w	800d28c <_fwalk_reent>
 800d12e:	bf00      	nop
 800d130:	0800d069 	.word	0x0800d069

0800d134 <__sfmoreglue>:
 800d134:	b570      	push	{r4, r5, r6, lr}
 800d136:	2268      	movs	r2, #104	; 0x68
 800d138:	1e4d      	subs	r5, r1, #1
 800d13a:	4355      	muls	r5, r2
 800d13c:	460e      	mov	r6, r1
 800d13e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d142:	f7ff fa9d 	bl	800c680 <_malloc_r>
 800d146:	4604      	mov	r4, r0
 800d148:	b140      	cbz	r0, 800d15c <__sfmoreglue+0x28>
 800d14a:	2100      	movs	r1, #0
 800d14c:	e9c0 1600 	strd	r1, r6, [r0]
 800d150:	300c      	adds	r0, #12
 800d152:	60a0      	str	r0, [r4, #8]
 800d154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d158:	f7ff fa1e 	bl	800c598 <memset>
 800d15c:	4620      	mov	r0, r4
 800d15e:	bd70      	pop	{r4, r5, r6, pc}

0800d160 <__sfp_lock_acquire>:
 800d160:	4801      	ldr	r0, [pc, #4]	; (800d168 <__sfp_lock_acquire+0x8>)
 800d162:	f000 b8b3 	b.w	800d2cc <__retarget_lock_acquire_recursive>
 800d166:	bf00      	nop
 800d168:	200009b9 	.word	0x200009b9

0800d16c <__sfp_lock_release>:
 800d16c:	4801      	ldr	r0, [pc, #4]	; (800d174 <__sfp_lock_release+0x8>)
 800d16e:	f000 b8ae 	b.w	800d2ce <__retarget_lock_release_recursive>
 800d172:	bf00      	nop
 800d174:	200009b9 	.word	0x200009b9

0800d178 <__sinit_lock_acquire>:
 800d178:	4801      	ldr	r0, [pc, #4]	; (800d180 <__sinit_lock_acquire+0x8>)
 800d17a:	f000 b8a7 	b.w	800d2cc <__retarget_lock_acquire_recursive>
 800d17e:	bf00      	nop
 800d180:	200009ba 	.word	0x200009ba

0800d184 <__sinit_lock_release>:
 800d184:	4801      	ldr	r0, [pc, #4]	; (800d18c <__sinit_lock_release+0x8>)
 800d186:	f000 b8a2 	b.w	800d2ce <__retarget_lock_release_recursive>
 800d18a:	bf00      	nop
 800d18c:	200009ba 	.word	0x200009ba

0800d190 <__sinit>:
 800d190:	b510      	push	{r4, lr}
 800d192:	4604      	mov	r4, r0
 800d194:	f7ff fff0 	bl	800d178 <__sinit_lock_acquire>
 800d198:	69a3      	ldr	r3, [r4, #24]
 800d19a:	b11b      	cbz	r3, 800d1a4 <__sinit+0x14>
 800d19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a0:	f7ff bff0 	b.w	800d184 <__sinit_lock_release>
 800d1a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1a8:	6523      	str	r3, [r4, #80]	; 0x50
 800d1aa:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <__sinit+0x68>)
 800d1ac:	4a13      	ldr	r2, [pc, #76]	; (800d1fc <__sinit+0x6c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1b2:	42a3      	cmp	r3, r4
 800d1b4:	bf04      	itt	eq
 800d1b6:	2301      	moveq	r3, #1
 800d1b8:	61a3      	streq	r3, [r4, #24]
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f000 f820 	bl	800d200 <__sfp>
 800d1c0:	6060      	str	r0, [r4, #4]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f000 f81c 	bl	800d200 <__sfp>
 800d1c8:	60a0      	str	r0, [r4, #8]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 f818 	bl	800d200 <__sfp>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	60e0      	str	r0, [r4, #12]
 800d1d4:	2104      	movs	r1, #4
 800d1d6:	6860      	ldr	r0, [r4, #4]
 800d1d8:	f7ff ff82 	bl	800d0e0 <std>
 800d1dc:	68a0      	ldr	r0, [r4, #8]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	2109      	movs	r1, #9
 800d1e2:	f7ff ff7d 	bl	800d0e0 <std>
 800d1e6:	68e0      	ldr	r0, [r4, #12]
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	2112      	movs	r1, #18
 800d1ec:	f7ff ff78 	bl	800d0e0 <std>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	61a3      	str	r3, [r4, #24]
 800d1f4:	e7d2      	b.n	800d19c <__sinit+0xc>
 800d1f6:	bf00      	nop
 800d1f8:	0800e288 	.word	0x0800e288
 800d1fc:	0800d129 	.word	0x0800d129

0800d200 <__sfp>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	4607      	mov	r7, r0
 800d204:	f7ff ffac 	bl	800d160 <__sfp_lock_acquire>
 800d208:	4b1e      	ldr	r3, [pc, #120]	; (800d284 <__sfp+0x84>)
 800d20a:	681e      	ldr	r6, [r3, #0]
 800d20c:	69b3      	ldr	r3, [r6, #24]
 800d20e:	b913      	cbnz	r3, 800d216 <__sfp+0x16>
 800d210:	4630      	mov	r0, r6
 800d212:	f7ff ffbd 	bl	800d190 <__sinit>
 800d216:	3648      	adds	r6, #72	; 0x48
 800d218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	d503      	bpl.n	800d228 <__sfp+0x28>
 800d220:	6833      	ldr	r3, [r6, #0]
 800d222:	b30b      	cbz	r3, 800d268 <__sfp+0x68>
 800d224:	6836      	ldr	r6, [r6, #0]
 800d226:	e7f7      	b.n	800d218 <__sfp+0x18>
 800d228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d22c:	b9d5      	cbnz	r5, 800d264 <__sfp+0x64>
 800d22e:	4b16      	ldr	r3, [pc, #88]	; (800d288 <__sfp+0x88>)
 800d230:	60e3      	str	r3, [r4, #12]
 800d232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d236:	6665      	str	r5, [r4, #100]	; 0x64
 800d238:	f000 f847 	bl	800d2ca <__retarget_lock_init_recursive>
 800d23c:	f7ff ff96 	bl	800d16c <__sfp_lock_release>
 800d240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d248:	6025      	str	r5, [r4, #0]
 800d24a:	61a5      	str	r5, [r4, #24]
 800d24c:	2208      	movs	r2, #8
 800d24e:	4629      	mov	r1, r5
 800d250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d254:	f7ff f9a0 	bl	800c598 <memset>
 800d258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d25c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d260:	4620      	mov	r0, r4
 800d262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d264:	3468      	adds	r4, #104	; 0x68
 800d266:	e7d9      	b.n	800d21c <__sfp+0x1c>
 800d268:	2104      	movs	r1, #4
 800d26a:	4638      	mov	r0, r7
 800d26c:	f7ff ff62 	bl	800d134 <__sfmoreglue>
 800d270:	4604      	mov	r4, r0
 800d272:	6030      	str	r0, [r6, #0]
 800d274:	2800      	cmp	r0, #0
 800d276:	d1d5      	bne.n	800d224 <__sfp+0x24>
 800d278:	f7ff ff78 	bl	800d16c <__sfp_lock_release>
 800d27c:	230c      	movs	r3, #12
 800d27e:	603b      	str	r3, [r7, #0]
 800d280:	e7ee      	b.n	800d260 <__sfp+0x60>
 800d282:	bf00      	nop
 800d284:	0800e288 	.word	0x0800e288
 800d288:	ffff0001 	.word	0xffff0001

0800d28c <_fwalk_reent>:
 800d28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d290:	4606      	mov	r6, r0
 800d292:	4688      	mov	r8, r1
 800d294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d298:	2700      	movs	r7, #0
 800d29a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d29e:	f1b9 0901 	subs.w	r9, r9, #1
 800d2a2:	d505      	bpl.n	800d2b0 <_fwalk_reent+0x24>
 800d2a4:	6824      	ldr	r4, [r4, #0]
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	d1f7      	bne.n	800d29a <_fwalk_reent+0xe>
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2b0:	89ab      	ldrh	r3, [r5, #12]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d907      	bls.n	800d2c6 <_fwalk_reent+0x3a>
 800d2b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	d003      	beq.n	800d2c6 <_fwalk_reent+0x3a>
 800d2be:	4629      	mov	r1, r5
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	47c0      	blx	r8
 800d2c4:	4307      	orrs	r7, r0
 800d2c6:	3568      	adds	r5, #104	; 0x68
 800d2c8:	e7e9      	b.n	800d29e <_fwalk_reent+0x12>

0800d2ca <__retarget_lock_init_recursive>:
 800d2ca:	4770      	bx	lr

0800d2cc <__retarget_lock_acquire_recursive>:
 800d2cc:	4770      	bx	lr

0800d2ce <__retarget_lock_release_recursive>:
 800d2ce:	4770      	bx	lr

0800d2d0 <__swhatbuf_r>:
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	460e      	mov	r6, r1
 800d2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d8:	2900      	cmp	r1, #0
 800d2da:	b096      	sub	sp, #88	; 0x58
 800d2dc:	4614      	mov	r4, r2
 800d2de:	461d      	mov	r5, r3
 800d2e0:	da08      	bge.n	800d2f4 <__swhatbuf_r+0x24>
 800d2e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	602a      	str	r2, [r5, #0]
 800d2ea:	061a      	lsls	r2, r3, #24
 800d2ec:	d410      	bmi.n	800d310 <__swhatbuf_r+0x40>
 800d2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2f2:	e00e      	b.n	800d312 <__swhatbuf_r+0x42>
 800d2f4:	466a      	mov	r2, sp
 800d2f6:	f000 faab 	bl	800d850 <_fstat_r>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	dbf1      	blt.n	800d2e2 <__swhatbuf_r+0x12>
 800d2fe:	9a01      	ldr	r2, [sp, #4]
 800d300:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d304:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d308:	425a      	negs	r2, r3
 800d30a:	415a      	adcs	r2, r3
 800d30c:	602a      	str	r2, [r5, #0]
 800d30e:	e7ee      	b.n	800d2ee <__swhatbuf_r+0x1e>
 800d310:	2340      	movs	r3, #64	; 0x40
 800d312:	2000      	movs	r0, #0
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	b016      	add	sp, #88	; 0x58
 800d318:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d31c <__smakebuf_r>:
 800d31c:	898b      	ldrh	r3, [r1, #12]
 800d31e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d320:	079d      	lsls	r5, r3, #30
 800d322:	4606      	mov	r6, r0
 800d324:	460c      	mov	r4, r1
 800d326:	d507      	bpl.n	800d338 <__smakebuf_r+0x1c>
 800d328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	6123      	str	r3, [r4, #16]
 800d330:	2301      	movs	r3, #1
 800d332:	6163      	str	r3, [r4, #20]
 800d334:	b002      	add	sp, #8
 800d336:	bd70      	pop	{r4, r5, r6, pc}
 800d338:	ab01      	add	r3, sp, #4
 800d33a:	466a      	mov	r2, sp
 800d33c:	f7ff ffc8 	bl	800d2d0 <__swhatbuf_r>
 800d340:	9900      	ldr	r1, [sp, #0]
 800d342:	4605      	mov	r5, r0
 800d344:	4630      	mov	r0, r6
 800d346:	f7ff f99b 	bl	800c680 <_malloc_r>
 800d34a:	b948      	cbnz	r0, 800d360 <__smakebuf_r+0x44>
 800d34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d350:	059a      	lsls	r2, r3, #22
 800d352:	d4ef      	bmi.n	800d334 <__smakebuf_r+0x18>
 800d354:	f023 0303 	bic.w	r3, r3, #3
 800d358:	f043 0302 	orr.w	r3, r3, #2
 800d35c:	81a3      	strh	r3, [r4, #12]
 800d35e:	e7e3      	b.n	800d328 <__smakebuf_r+0xc>
 800d360:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <__smakebuf_r+0x7c>)
 800d362:	62b3      	str	r3, [r6, #40]	; 0x28
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	6020      	str	r0, [r4, #0]
 800d368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d36c:	81a3      	strh	r3, [r4, #12]
 800d36e:	9b00      	ldr	r3, [sp, #0]
 800d370:	6163      	str	r3, [r4, #20]
 800d372:	9b01      	ldr	r3, [sp, #4]
 800d374:	6120      	str	r0, [r4, #16]
 800d376:	b15b      	cbz	r3, 800d390 <__smakebuf_r+0x74>
 800d378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d37c:	4630      	mov	r0, r6
 800d37e:	f000 fa79 	bl	800d874 <_isatty_r>
 800d382:	b128      	cbz	r0, 800d390 <__smakebuf_r+0x74>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f023 0303 	bic.w	r3, r3, #3
 800d38a:	f043 0301 	orr.w	r3, r3, #1
 800d38e:	81a3      	strh	r3, [r4, #12]
 800d390:	89a0      	ldrh	r0, [r4, #12]
 800d392:	4305      	orrs	r5, r0
 800d394:	81a5      	strh	r5, [r4, #12]
 800d396:	e7cd      	b.n	800d334 <__smakebuf_r+0x18>
 800d398:	0800d129 	.word	0x0800d129

0800d39c <memmove>:
 800d39c:	4288      	cmp	r0, r1
 800d39e:	b510      	push	{r4, lr}
 800d3a0:	eb01 0402 	add.w	r4, r1, r2
 800d3a4:	d902      	bls.n	800d3ac <memmove+0x10>
 800d3a6:	4284      	cmp	r4, r0
 800d3a8:	4623      	mov	r3, r4
 800d3aa:	d807      	bhi.n	800d3bc <memmove+0x20>
 800d3ac:	1e43      	subs	r3, r0, #1
 800d3ae:	42a1      	cmp	r1, r4
 800d3b0:	d008      	beq.n	800d3c4 <memmove+0x28>
 800d3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3ba:	e7f8      	b.n	800d3ae <memmove+0x12>
 800d3bc:	4402      	add	r2, r0
 800d3be:	4601      	mov	r1, r0
 800d3c0:	428a      	cmp	r2, r1
 800d3c2:	d100      	bne.n	800d3c6 <memmove+0x2a>
 800d3c4:	bd10      	pop	{r4, pc}
 800d3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3ce:	e7f7      	b.n	800d3c0 <memmove+0x24>

0800d3d0 <__malloc_lock>:
 800d3d0:	4801      	ldr	r0, [pc, #4]	; (800d3d8 <__malloc_lock+0x8>)
 800d3d2:	f7ff bf7b 	b.w	800d2cc <__retarget_lock_acquire_recursive>
 800d3d6:	bf00      	nop
 800d3d8:	200009b8 	.word	0x200009b8

0800d3dc <__malloc_unlock>:
 800d3dc:	4801      	ldr	r0, [pc, #4]	; (800d3e4 <__malloc_unlock+0x8>)
 800d3de:	f7ff bf76 	b.w	800d2ce <__retarget_lock_release_recursive>
 800d3e2:	bf00      	nop
 800d3e4:	200009b8 	.word	0x200009b8

0800d3e8 <_realloc_r>:
 800d3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ec:	4680      	mov	r8, r0
 800d3ee:	4614      	mov	r4, r2
 800d3f0:	460e      	mov	r6, r1
 800d3f2:	b921      	cbnz	r1, 800d3fe <_realloc_r+0x16>
 800d3f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	f7ff b941 	b.w	800c680 <_malloc_r>
 800d3fe:	b92a      	cbnz	r2, 800d40c <_realloc_r+0x24>
 800d400:	f7ff f8d2 	bl	800c5a8 <_free_r>
 800d404:	4625      	mov	r5, r4
 800d406:	4628      	mov	r0, r5
 800d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40c:	f000 fa54 	bl	800d8b8 <_malloc_usable_size_r>
 800d410:	4284      	cmp	r4, r0
 800d412:	4607      	mov	r7, r0
 800d414:	d802      	bhi.n	800d41c <_realloc_r+0x34>
 800d416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d41a:	d812      	bhi.n	800d442 <_realloc_r+0x5a>
 800d41c:	4621      	mov	r1, r4
 800d41e:	4640      	mov	r0, r8
 800d420:	f7ff f92e 	bl	800c680 <_malloc_r>
 800d424:	4605      	mov	r5, r0
 800d426:	2800      	cmp	r0, #0
 800d428:	d0ed      	beq.n	800d406 <_realloc_r+0x1e>
 800d42a:	42bc      	cmp	r4, r7
 800d42c:	4622      	mov	r2, r4
 800d42e:	4631      	mov	r1, r6
 800d430:	bf28      	it	cs
 800d432:	463a      	movcs	r2, r7
 800d434:	f7ff f8a2 	bl	800c57c <memcpy>
 800d438:	4631      	mov	r1, r6
 800d43a:	4640      	mov	r0, r8
 800d43c:	f7ff f8b4 	bl	800c5a8 <_free_r>
 800d440:	e7e1      	b.n	800d406 <_realloc_r+0x1e>
 800d442:	4635      	mov	r5, r6
 800d444:	e7df      	b.n	800d406 <_realloc_r+0x1e>

0800d446 <__ssputs_r>:
 800d446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d44a:	688e      	ldr	r6, [r1, #8]
 800d44c:	429e      	cmp	r6, r3
 800d44e:	4682      	mov	sl, r0
 800d450:	460c      	mov	r4, r1
 800d452:	4690      	mov	r8, r2
 800d454:	461f      	mov	r7, r3
 800d456:	d838      	bhi.n	800d4ca <__ssputs_r+0x84>
 800d458:	898a      	ldrh	r2, [r1, #12]
 800d45a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d45e:	d032      	beq.n	800d4c6 <__ssputs_r+0x80>
 800d460:	6825      	ldr	r5, [r4, #0]
 800d462:	6909      	ldr	r1, [r1, #16]
 800d464:	eba5 0901 	sub.w	r9, r5, r1
 800d468:	6965      	ldr	r5, [r4, #20]
 800d46a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d46e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d472:	3301      	adds	r3, #1
 800d474:	444b      	add	r3, r9
 800d476:	106d      	asrs	r5, r5, #1
 800d478:	429d      	cmp	r5, r3
 800d47a:	bf38      	it	cc
 800d47c:	461d      	movcc	r5, r3
 800d47e:	0553      	lsls	r3, r2, #21
 800d480:	d531      	bpl.n	800d4e6 <__ssputs_r+0xa0>
 800d482:	4629      	mov	r1, r5
 800d484:	f7ff f8fc 	bl	800c680 <_malloc_r>
 800d488:	4606      	mov	r6, r0
 800d48a:	b950      	cbnz	r0, 800d4a2 <__ssputs_r+0x5c>
 800d48c:	230c      	movs	r3, #12
 800d48e:	f8ca 3000 	str.w	r3, [sl]
 800d492:	89a3      	ldrh	r3, [r4, #12]
 800d494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d498:	81a3      	strh	r3, [r4, #12]
 800d49a:	f04f 30ff 	mov.w	r0, #4294967295
 800d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a2:	6921      	ldr	r1, [r4, #16]
 800d4a4:	464a      	mov	r2, r9
 800d4a6:	f7ff f869 	bl	800c57c <memcpy>
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4b4:	81a3      	strh	r3, [r4, #12]
 800d4b6:	6126      	str	r6, [r4, #16]
 800d4b8:	6165      	str	r5, [r4, #20]
 800d4ba:	444e      	add	r6, r9
 800d4bc:	eba5 0509 	sub.w	r5, r5, r9
 800d4c0:	6026      	str	r6, [r4, #0]
 800d4c2:	60a5      	str	r5, [r4, #8]
 800d4c4:	463e      	mov	r6, r7
 800d4c6:	42be      	cmp	r6, r7
 800d4c8:	d900      	bls.n	800d4cc <__ssputs_r+0x86>
 800d4ca:	463e      	mov	r6, r7
 800d4cc:	6820      	ldr	r0, [r4, #0]
 800d4ce:	4632      	mov	r2, r6
 800d4d0:	4641      	mov	r1, r8
 800d4d2:	f7ff ff63 	bl	800d39c <memmove>
 800d4d6:	68a3      	ldr	r3, [r4, #8]
 800d4d8:	1b9b      	subs	r3, r3, r6
 800d4da:	60a3      	str	r3, [r4, #8]
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	4433      	add	r3, r6
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	e7db      	b.n	800d49e <__ssputs_r+0x58>
 800d4e6:	462a      	mov	r2, r5
 800d4e8:	f7ff ff7e 	bl	800d3e8 <_realloc_r>
 800d4ec:	4606      	mov	r6, r0
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d1e1      	bne.n	800d4b6 <__ssputs_r+0x70>
 800d4f2:	6921      	ldr	r1, [r4, #16]
 800d4f4:	4650      	mov	r0, sl
 800d4f6:	f7ff f857 	bl	800c5a8 <_free_r>
 800d4fa:	e7c7      	b.n	800d48c <__ssputs_r+0x46>

0800d4fc <_svfiprintf_r>:
 800d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d500:	4698      	mov	r8, r3
 800d502:	898b      	ldrh	r3, [r1, #12]
 800d504:	061b      	lsls	r3, r3, #24
 800d506:	b09d      	sub	sp, #116	; 0x74
 800d508:	4607      	mov	r7, r0
 800d50a:	460d      	mov	r5, r1
 800d50c:	4614      	mov	r4, r2
 800d50e:	d50e      	bpl.n	800d52e <_svfiprintf_r+0x32>
 800d510:	690b      	ldr	r3, [r1, #16]
 800d512:	b963      	cbnz	r3, 800d52e <_svfiprintf_r+0x32>
 800d514:	2140      	movs	r1, #64	; 0x40
 800d516:	f7ff f8b3 	bl	800c680 <_malloc_r>
 800d51a:	6028      	str	r0, [r5, #0]
 800d51c:	6128      	str	r0, [r5, #16]
 800d51e:	b920      	cbnz	r0, 800d52a <_svfiprintf_r+0x2e>
 800d520:	230c      	movs	r3, #12
 800d522:	603b      	str	r3, [r7, #0]
 800d524:	f04f 30ff 	mov.w	r0, #4294967295
 800d528:	e0d1      	b.n	800d6ce <_svfiprintf_r+0x1d2>
 800d52a:	2340      	movs	r3, #64	; 0x40
 800d52c:	616b      	str	r3, [r5, #20]
 800d52e:	2300      	movs	r3, #0
 800d530:	9309      	str	r3, [sp, #36]	; 0x24
 800d532:	2320      	movs	r3, #32
 800d534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d538:	f8cd 800c 	str.w	r8, [sp, #12]
 800d53c:	2330      	movs	r3, #48	; 0x30
 800d53e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d6e8 <_svfiprintf_r+0x1ec>
 800d542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d546:	f04f 0901 	mov.w	r9, #1
 800d54a:	4623      	mov	r3, r4
 800d54c:	469a      	mov	sl, r3
 800d54e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d552:	b10a      	cbz	r2, 800d558 <_svfiprintf_r+0x5c>
 800d554:	2a25      	cmp	r2, #37	; 0x25
 800d556:	d1f9      	bne.n	800d54c <_svfiprintf_r+0x50>
 800d558:	ebba 0b04 	subs.w	fp, sl, r4
 800d55c:	d00b      	beq.n	800d576 <_svfiprintf_r+0x7a>
 800d55e:	465b      	mov	r3, fp
 800d560:	4622      	mov	r2, r4
 800d562:	4629      	mov	r1, r5
 800d564:	4638      	mov	r0, r7
 800d566:	f7ff ff6e 	bl	800d446 <__ssputs_r>
 800d56a:	3001      	adds	r0, #1
 800d56c:	f000 80aa 	beq.w	800d6c4 <_svfiprintf_r+0x1c8>
 800d570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d572:	445a      	add	r2, fp
 800d574:	9209      	str	r2, [sp, #36]	; 0x24
 800d576:	f89a 3000 	ldrb.w	r3, [sl]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 80a2 	beq.w	800d6c4 <_svfiprintf_r+0x1c8>
 800d580:	2300      	movs	r3, #0
 800d582:	f04f 32ff 	mov.w	r2, #4294967295
 800d586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d58a:	f10a 0a01 	add.w	sl, sl, #1
 800d58e:	9304      	str	r3, [sp, #16]
 800d590:	9307      	str	r3, [sp, #28]
 800d592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d596:	931a      	str	r3, [sp, #104]	; 0x68
 800d598:	4654      	mov	r4, sl
 800d59a:	2205      	movs	r2, #5
 800d59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a0:	4851      	ldr	r0, [pc, #324]	; (800d6e8 <_svfiprintf_r+0x1ec>)
 800d5a2:	f7f2 fe05 	bl	80001b0 <memchr>
 800d5a6:	9a04      	ldr	r2, [sp, #16]
 800d5a8:	b9d8      	cbnz	r0, 800d5e2 <_svfiprintf_r+0xe6>
 800d5aa:	06d0      	lsls	r0, r2, #27
 800d5ac:	bf44      	itt	mi
 800d5ae:	2320      	movmi	r3, #32
 800d5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5b4:	0711      	lsls	r1, r2, #28
 800d5b6:	bf44      	itt	mi
 800d5b8:	232b      	movmi	r3, #43	; 0x2b
 800d5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5be:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c4:	d015      	beq.n	800d5f2 <_svfiprintf_r+0xf6>
 800d5c6:	9a07      	ldr	r2, [sp, #28]
 800d5c8:	4654      	mov	r4, sl
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	f04f 0c0a 	mov.w	ip, #10
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d6:	3b30      	subs	r3, #48	; 0x30
 800d5d8:	2b09      	cmp	r3, #9
 800d5da:	d94e      	bls.n	800d67a <_svfiprintf_r+0x17e>
 800d5dc:	b1b0      	cbz	r0, 800d60c <_svfiprintf_r+0x110>
 800d5de:	9207      	str	r2, [sp, #28]
 800d5e0:	e014      	b.n	800d60c <_svfiprintf_r+0x110>
 800d5e2:	eba0 0308 	sub.w	r3, r0, r8
 800d5e6:	fa09 f303 	lsl.w	r3, r9, r3
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	9304      	str	r3, [sp, #16]
 800d5ee:	46a2      	mov	sl, r4
 800d5f0:	e7d2      	b.n	800d598 <_svfiprintf_r+0x9c>
 800d5f2:	9b03      	ldr	r3, [sp, #12]
 800d5f4:	1d19      	adds	r1, r3, #4
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	9103      	str	r1, [sp, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	bfbb      	ittet	lt
 800d5fe:	425b      	neglt	r3, r3
 800d600:	f042 0202 	orrlt.w	r2, r2, #2
 800d604:	9307      	strge	r3, [sp, #28]
 800d606:	9307      	strlt	r3, [sp, #28]
 800d608:	bfb8      	it	lt
 800d60a:	9204      	strlt	r2, [sp, #16]
 800d60c:	7823      	ldrb	r3, [r4, #0]
 800d60e:	2b2e      	cmp	r3, #46	; 0x2e
 800d610:	d10c      	bne.n	800d62c <_svfiprintf_r+0x130>
 800d612:	7863      	ldrb	r3, [r4, #1]
 800d614:	2b2a      	cmp	r3, #42	; 0x2a
 800d616:	d135      	bne.n	800d684 <_svfiprintf_r+0x188>
 800d618:	9b03      	ldr	r3, [sp, #12]
 800d61a:	1d1a      	adds	r2, r3, #4
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	9203      	str	r2, [sp, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	bfb8      	it	lt
 800d624:	f04f 33ff 	movlt.w	r3, #4294967295
 800d628:	3402      	adds	r4, #2
 800d62a:	9305      	str	r3, [sp, #20]
 800d62c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d6f8 <_svfiprintf_r+0x1fc>
 800d630:	7821      	ldrb	r1, [r4, #0]
 800d632:	2203      	movs	r2, #3
 800d634:	4650      	mov	r0, sl
 800d636:	f7f2 fdbb 	bl	80001b0 <memchr>
 800d63a:	b140      	cbz	r0, 800d64e <_svfiprintf_r+0x152>
 800d63c:	2340      	movs	r3, #64	; 0x40
 800d63e:	eba0 000a 	sub.w	r0, r0, sl
 800d642:	fa03 f000 	lsl.w	r0, r3, r0
 800d646:	9b04      	ldr	r3, [sp, #16]
 800d648:	4303      	orrs	r3, r0
 800d64a:	3401      	adds	r4, #1
 800d64c:	9304      	str	r3, [sp, #16]
 800d64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d652:	4826      	ldr	r0, [pc, #152]	; (800d6ec <_svfiprintf_r+0x1f0>)
 800d654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d658:	2206      	movs	r2, #6
 800d65a:	f7f2 fda9 	bl	80001b0 <memchr>
 800d65e:	2800      	cmp	r0, #0
 800d660:	d038      	beq.n	800d6d4 <_svfiprintf_r+0x1d8>
 800d662:	4b23      	ldr	r3, [pc, #140]	; (800d6f0 <_svfiprintf_r+0x1f4>)
 800d664:	bb1b      	cbnz	r3, 800d6ae <_svfiprintf_r+0x1b2>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	3307      	adds	r3, #7
 800d66a:	f023 0307 	bic.w	r3, r3, #7
 800d66e:	3308      	adds	r3, #8
 800d670:	9303      	str	r3, [sp, #12]
 800d672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d674:	4433      	add	r3, r6
 800d676:	9309      	str	r3, [sp, #36]	; 0x24
 800d678:	e767      	b.n	800d54a <_svfiprintf_r+0x4e>
 800d67a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d67e:	460c      	mov	r4, r1
 800d680:	2001      	movs	r0, #1
 800d682:	e7a5      	b.n	800d5d0 <_svfiprintf_r+0xd4>
 800d684:	2300      	movs	r3, #0
 800d686:	3401      	adds	r4, #1
 800d688:	9305      	str	r3, [sp, #20]
 800d68a:	4619      	mov	r1, r3
 800d68c:	f04f 0c0a 	mov.w	ip, #10
 800d690:	4620      	mov	r0, r4
 800d692:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d696:	3a30      	subs	r2, #48	; 0x30
 800d698:	2a09      	cmp	r2, #9
 800d69a:	d903      	bls.n	800d6a4 <_svfiprintf_r+0x1a8>
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0c5      	beq.n	800d62c <_svfiprintf_r+0x130>
 800d6a0:	9105      	str	r1, [sp, #20]
 800d6a2:	e7c3      	b.n	800d62c <_svfiprintf_r+0x130>
 800d6a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e7f0      	b.n	800d690 <_svfiprintf_r+0x194>
 800d6ae:	ab03      	add	r3, sp, #12
 800d6b0:	9300      	str	r3, [sp, #0]
 800d6b2:	462a      	mov	r2, r5
 800d6b4:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <_svfiprintf_r+0x1f8>)
 800d6b6:	a904      	add	r1, sp, #16
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	f3af 8000 	nop.w
 800d6be:	1c42      	adds	r2, r0, #1
 800d6c0:	4606      	mov	r6, r0
 800d6c2:	d1d6      	bne.n	800d672 <_svfiprintf_r+0x176>
 800d6c4:	89ab      	ldrh	r3, [r5, #12]
 800d6c6:	065b      	lsls	r3, r3, #25
 800d6c8:	f53f af2c 	bmi.w	800d524 <_svfiprintf_r+0x28>
 800d6cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6ce:	b01d      	add	sp, #116	; 0x74
 800d6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d4:	ab03      	add	r3, sp, #12
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	462a      	mov	r2, r5
 800d6da:	4b06      	ldr	r3, [pc, #24]	; (800d6f4 <_svfiprintf_r+0x1f8>)
 800d6dc:	a904      	add	r1, sp, #16
 800d6de:	4638      	mov	r0, r7
 800d6e0:	f7ff fa0a 	bl	800caf8 <_printf_i>
 800d6e4:	e7eb      	b.n	800d6be <_svfiprintf_r+0x1c2>
 800d6e6:	bf00      	nop
 800d6e8:	0800e28c 	.word	0x0800e28c
 800d6ec:	0800e296 	.word	0x0800e296
 800d6f0:	00000000 	.word	0x00000000
 800d6f4:	0800d447 	.word	0x0800d447
 800d6f8:	0800e292 	.word	0x0800e292

0800d6fc <_raise_r>:
 800d6fc:	291f      	cmp	r1, #31
 800d6fe:	b538      	push	{r3, r4, r5, lr}
 800d700:	4604      	mov	r4, r0
 800d702:	460d      	mov	r5, r1
 800d704:	d904      	bls.n	800d710 <_raise_r+0x14>
 800d706:	2316      	movs	r3, #22
 800d708:	6003      	str	r3, [r0, #0]
 800d70a:	f04f 30ff 	mov.w	r0, #4294967295
 800d70e:	bd38      	pop	{r3, r4, r5, pc}
 800d710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d712:	b112      	cbz	r2, 800d71a <_raise_r+0x1e>
 800d714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d718:	b94b      	cbnz	r3, 800d72e <_raise_r+0x32>
 800d71a:	4620      	mov	r0, r4
 800d71c:	f000 f830 	bl	800d780 <_getpid_r>
 800d720:	462a      	mov	r2, r5
 800d722:	4601      	mov	r1, r0
 800d724:	4620      	mov	r0, r4
 800d726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d72a:	f000 b817 	b.w	800d75c <_kill_r>
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d00a      	beq.n	800d748 <_raise_r+0x4c>
 800d732:	1c59      	adds	r1, r3, #1
 800d734:	d103      	bne.n	800d73e <_raise_r+0x42>
 800d736:	2316      	movs	r3, #22
 800d738:	6003      	str	r3, [r0, #0]
 800d73a:	2001      	movs	r0, #1
 800d73c:	e7e7      	b.n	800d70e <_raise_r+0x12>
 800d73e:	2400      	movs	r4, #0
 800d740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d744:	4628      	mov	r0, r5
 800d746:	4798      	blx	r3
 800d748:	2000      	movs	r0, #0
 800d74a:	e7e0      	b.n	800d70e <_raise_r+0x12>

0800d74c <raise>:
 800d74c:	4b02      	ldr	r3, [pc, #8]	; (800d758 <raise+0xc>)
 800d74e:	4601      	mov	r1, r0
 800d750:	6818      	ldr	r0, [r3, #0]
 800d752:	f7ff bfd3 	b.w	800d6fc <_raise_r>
 800d756:	bf00      	nop
 800d758:	20000040 	.word	0x20000040

0800d75c <_kill_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4d07      	ldr	r5, [pc, #28]	; (800d77c <_kill_r+0x20>)
 800d760:	2300      	movs	r3, #0
 800d762:	4604      	mov	r4, r0
 800d764:	4608      	mov	r0, r1
 800d766:	4611      	mov	r1, r2
 800d768:	602b      	str	r3, [r5, #0]
 800d76a:	f7f3 fa80 	bl	8000c6e <_kill>
 800d76e:	1c43      	adds	r3, r0, #1
 800d770:	d102      	bne.n	800d778 <_kill_r+0x1c>
 800d772:	682b      	ldr	r3, [r5, #0]
 800d774:	b103      	cbz	r3, 800d778 <_kill_r+0x1c>
 800d776:	6023      	str	r3, [r4, #0]
 800d778:	bd38      	pop	{r3, r4, r5, pc}
 800d77a:	bf00      	nop
 800d77c:	200009bc 	.word	0x200009bc

0800d780 <_getpid_r>:
 800d780:	f7f3 ba6d 	b.w	8000c5e <_getpid>

0800d784 <__sread>:
 800d784:	b510      	push	{r4, lr}
 800d786:	460c      	mov	r4, r1
 800d788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d78c:	f000 f89c 	bl	800d8c8 <_read_r>
 800d790:	2800      	cmp	r0, #0
 800d792:	bfab      	itete	ge
 800d794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d796:	89a3      	ldrhlt	r3, [r4, #12]
 800d798:	181b      	addge	r3, r3, r0
 800d79a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d79e:	bfac      	ite	ge
 800d7a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7a2:	81a3      	strhlt	r3, [r4, #12]
 800d7a4:	bd10      	pop	{r4, pc}

0800d7a6 <__swrite>:
 800d7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7aa:	461f      	mov	r7, r3
 800d7ac:	898b      	ldrh	r3, [r1, #12]
 800d7ae:	05db      	lsls	r3, r3, #23
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	4616      	mov	r6, r2
 800d7b6:	d505      	bpl.n	800d7c4 <__swrite+0x1e>
 800d7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7bc:	2302      	movs	r3, #2
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f000 f868 	bl	800d894 <_lseek_r>
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7ce:	81a3      	strh	r3, [r4, #12]
 800d7d0:	4632      	mov	r2, r6
 800d7d2:	463b      	mov	r3, r7
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7da:	f000 b817 	b.w	800d80c <_write_r>

0800d7de <__sseek>:
 800d7de:	b510      	push	{r4, lr}
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e6:	f000 f855 	bl	800d894 <_lseek_r>
 800d7ea:	1c43      	adds	r3, r0, #1
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	bf15      	itete	ne
 800d7f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d7f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d7f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d7fa:	81a3      	strheq	r3, [r4, #12]
 800d7fc:	bf18      	it	ne
 800d7fe:	81a3      	strhne	r3, [r4, #12]
 800d800:	bd10      	pop	{r4, pc}

0800d802 <__sclose>:
 800d802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d806:	f000 b813 	b.w	800d830 <_close_r>
	...

0800d80c <_write_r>:
 800d80c:	b538      	push	{r3, r4, r5, lr}
 800d80e:	4d07      	ldr	r5, [pc, #28]	; (800d82c <_write_r+0x20>)
 800d810:	4604      	mov	r4, r0
 800d812:	4608      	mov	r0, r1
 800d814:	4611      	mov	r1, r2
 800d816:	2200      	movs	r2, #0
 800d818:	602a      	str	r2, [r5, #0]
 800d81a:	461a      	mov	r2, r3
 800d81c:	f7f3 fa5e 	bl	8000cdc <_write>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d102      	bne.n	800d82a <_write_r+0x1e>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b103      	cbz	r3, 800d82a <_write_r+0x1e>
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	200009bc 	.word	0x200009bc

0800d830 <_close_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d06      	ldr	r5, [pc, #24]	; (800d84c <_close_r+0x1c>)
 800d834:	2300      	movs	r3, #0
 800d836:	4604      	mov	r4, r0
 800d838:	4608      	mov	r0, r1
 800d83a:	602b      	str	r3, [r5, #0]
 800d83c:	f7f3 fa6a 	bl	8000d14 <_close>
 800d840:	1c43      	adds	r3, r0, #1
 800d842:	d102      	bne.n	800d84a <_close_r+0x1a>
 800d844:	682b      	ldr	r3, [r5, #0]
 800d846:	b103      	cbz	r3, 800d84a <_close_r+0x1a>
 800d848:	6023      	str	r3, [r4, #0]
 800d84a:	bd38      	pop	{r3, r4, r5, pc}
 800d84c:	200009bc 	.word	0x200009bc

0800d850 <_fstat_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4d07      	ldr	r5, [pc, #28]	; (800d870 <_fstat_r+0x20>)
 800d854:	2300      	movs	r3, #0
 800d856:	4604      	mov	r4, r0
 800d858:	4608      	mov	r0, r1
 800d85a:	4611      	mov	r1, r2
 800d85c:	602b      	str	r3, [r5, #0]
 800d85e:	f7f3 fa65 	bl	8000d2c <_fstat>
 800d862:	1c43      	adds	r3, r0, #1
 800d864:	d102      	bne.n	800d86c <_fstat_r+0x1c>
 800d866:	682b      	ldr	r3, [r5, #0]
 800d868:	b103      	cbz	r3, 800d86c <_fstat_r+0x1c>
 800d86a:	6023      	str	r3, [r4, #0]
 800d86c:	bd38      	pop	{r3, r4, r5, pc}
 800d86e:	bf00      	nop
 800d870:	200009bc 	.word	0x200009bc

0800d874 <_isatty_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	4d06      	ldr	r5, [pc, #24]	; (800d890 <_isatty_r+0x1c>)
 800d878:	2300      	movs	r3, #0
 800d87a:	4604      	mov	r4, r0
 800d87c:	4608      	mov	r0, r1
 800d87e:	602b      	str	r3, [r5, #0]
 800d880:	f7f3 fa64 	bl	8000d4c <_isatty>
 800d884:	1c43      	adds	r3, r0, #1
 800d886:	d102      	bne.n	800d88e <_isatty_r+0x1a>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	b103      	cbz	r3, 800d88e <_isatty_r+0x1a>
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	bd38      	pop	{r3, r4, r5, pc}
 800d890:	200009bc 	.word	0x200009bc

0800d894 <_lseek_r>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	4d07      	ldr	r5, [pc, #28]	; (800d8b4 <_lseek_r+0x20>)
 800d898:	4604      	mov	r4, r0
 800d89a:	4608      	mov	r0, r1
 800d89c:	4611      	mov	r1, r2
 800d89e:	2200      	movs	r2, #0
 800d8a0:	602a      	str	r2, [r5, #0]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f7f3 fa5d 	bl	8000d62 <_lseek>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_lseek_r+0x1e>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_lseek_r+0x1e>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	200009bc 	.word	0x200009bc

0800d8b8 <_malloc_usable_size_r>:
 800d8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8bc:	1f18      	subs	r0, r3, #4
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	bfbc      	itt	lt
 800d8c2:	580b      	ldrlt	r3, [r1, r0]
 800d8c4:	18c0      	addlt	r0, r0, r3
 800d8c6:	4770      	bx	lr

0800d8c8 <_read_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4d07      	ldr	r5, [pc, #28]	; (800d8e8 <_read_r+0x20>)
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	4608      	mov	r0, r1
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	602a      	str	r2, [r5, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	f7f3 f9e3 	bl	8000ca2 <_read>
 800d8dc:	1c43      	adds	r3, r0, #1
 800d8de:	d102      	bne.n	800d8e6 <_read_r+0x1e>
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	b103      	cbz	r3, 800d8e6 <_read_r+0x1e>
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	bd38      	pop	{r3, r4, r5, pc}
 800d8e8:	200009bc 	.word	0x200009bc

0800d8ec <_init>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	bf00      	nop
 800d8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f2:	bc08      	pop	{r3}
 800d8f4:	469e      	mov	lr, r3
 800d8f6:	4770      	bx	lr

0800d8f8 <_fini>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	bf00      	nop
 800d8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fe:	bc08      	pop	{r3}
 800d900:	469e      	mov	lr, r3
 800d902:	4770      	bx	lr
