
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009474  08009474  00019474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000008  08009478  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 SYSTEM_DRIVER_CONTEXT 00000011  2000002c  0800949c  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000528  20000040  080094ad  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00002800  20000568  080094ad  00020568  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 13 .debug_line   0002f83f  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00030cf2  00000000  00000000  0004f8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006189  00000000  00000000  0008059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028e0  00000000  00000000  00086728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010fe89  00000000  00000000  00089008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002668  00000000  00000000  00198e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002dc92  00000000  00000000  0019b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c9192  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a6f0  00000000  00000000  001c91e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000040 	.word	0x20000040
 8000158:	00000000 	.word	0x00000000
 800015c:	08008c0c 	.word	0x08008c0c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000044 	.word	0x20000044
 8000178:	08008c0c 	.word	0x08008c0c

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000190:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000192:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000194:	3304      	adds	r3, #4

08000196 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000196:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000198:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800019a:	d3f9      	bcc.n	8000190 <CopyDataInit>
  bx lr
 800019c:	4770      	bx	lr

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800019e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80001a0:	3004      	adds	r0, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80001a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>
  bx lr
 80001a6:	4770      	bx	lr

080001a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001a8:	480c      	ldr	r0, [pc, #48]	; (80001dc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80001aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001ac:	f002 fe04 	bl	8002db8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80001b0:	480b      	ldr	r0, [pc, #44]	; (80001e0 <LoopForever+0x8>)
 80001b2:	490c      	ldr	r1, [pc, #48]	; (80001e4 <LoopForever+0xc>)
 80001b4:	4a0c      	ldr	r2, [pc, #48]	; (80001e8 <LoopForever+0x10>)
 80001b6:	2300      	movs	r3, #0
 80001b8:	f7ff ffed 	bl	8000196 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <LoopForever+0x14>)
 80001be:	490c      	ldr	r1, [pc, #48]	; (80001f0 <LoopForever+0x18>)
 80001c0:	2300      	movs	r3, #0
 80001c2:	f7ff ffee 	bl	80001a2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001c6:	480b      	ldr	r0, [pc, #44]	; (80001f4 <LoopForever+0x1c>)
 80001c8:	490b      	ldr	r1, [pc, #44]	; (80001f8 <LoopForever+0x20>)
 80001ca:	2300      	movs	r3, #0
 80001cc:	f7ff ffe9 	bl	80001a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001d0:	f008 fce2 	bl	8008b98 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001d4:	f002 f91c 	bl	8002410 <main>

080001d8 <LoopForever>:

LoopForever:
  b LoopForever
 80001d8:	e7fe      	b.n	80001d8 <LoopForever>
 80001da:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001dc:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 80001e0:	20000008 	.word	0x20000008
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08009478 	.word	0x08009478
  INIT_BSS _sbss, _ebss
 80001ec:	20000040 	.word	0x20000040
 80001f0:	20000568 	.word	0x20000568
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001f4:	200300e8 	.word	0x200300e8
 80001f8:	20030c6a 	.word	0x20030c6a

080001fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001fc:	e7fe      	b.n	80001fc <ADC1_IRQHandler>

080001fe <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b084      	sub	sp, #16
 8000202:	af00      	add	r7, sp, #0
 8000204:	60f8      	str	r0, [r7, #12]
 8000206:	60b9      	str	r1, [r7, #8]
 8000208:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 800020a:	2300      	movs	r3, #0
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	68b9      	ldr	r1, [r7, #8]
 8000210:	68f8      	ldr	r0, [r7, #12]
 8000212:	f006 fbca 	bl	80069aa <otCoapSendResponseWithParameters>
 8000216:	4603      	mov	r3, r0
}
 8000218:	4618      	mov	r0, r3
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_THREAD_INIT_1 */

  /* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000226:	2101      	movs	r1, #1
 8000228:	2002      	movs	r0, #2
 800022a:	f008 f963 	bl	80084f4 <UTIL_LPM_SetStopMode>
  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 800022e:	f000 fa09 	bl	8000644 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000232:	4816      	ldr	r0, [pc, #88]	; (800028c <APP_THREAD_Init+0x6c>)
 8000234:	f000 fb9a 	bl	800096c <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	2002      	movs	r0, #2
 800023c:	f008 f98a 	bl	8008554 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8000240:	f000 fc46 	bl	8000ad0 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000244:	f000 fc3c 	bl	8000ac0 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000248:	f007 fbc8 	bl	80079dc <SHCI_C2_THREAD_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <APP_THREAD_Init+0x70>)
 8000252:	2100      	movs	r1, #0
 8000254:	2001      	movs	r0, #1
 8000256:	f008 fadf 	bl	8008818 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN INIT TASKS */
  //UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
  /* USER CODE END INIT TASKS */
  APP_THREAD_SetSleepyEndDeviceMode();
 800025a:	f000 f8d5 	bl	8000408 <APP_THREAD_SetSleepyEndDeviceMode>
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 800025e:	f000 f927 	bl	80004b0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &TimerID, hw_ts_SingleShot, APP_THREAD_TimingElapsed);
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <APP_THREAD_Init+0x74>)
 8000264:	2200      	movs	r2, #0
 8000266:	490c      	ldr	r1, [pc, #48]	; (8000298 <APP_THREAD_Init+0x78>)
 8000268:	2000      	movs	r0, #0
 800026a:	f001 fe7b 	bl	8001f64 <HW_TS_Create>

  APP_THREAD_InitPayloadWrite();
 800026e:	f000 fb23 	bl	80008b8 <APP_THREAD_InitPayloadWrite>
  /* USER CODE END APP_THREAD_INIT_2 */
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000272:	2100      	movs	r1, #0
 8000274:	2002      	movs	r0, #2
 8000276:	f008 f93d 	bl	80084f4 <UTIL_LPM_SetStopMode>

  /* Allow the 800_15_4 IP to enter in low power mode */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 800027a:	2101      	movs	r1, #1
 800027c:	2001      	movs	r0, #1
 800027e:	f007 fbd9 	bl	8007a34 <SHCI_C2_RADIO_AllowLowPower>
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	200300e8 	.word	0x200300e8
 8000290:	08000b65 	.word	0x08000b65
 8000294:	080008ed 	.word	0x080008ed
 8000298:	2000007a 	.word	0x2000007a

0800029c <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b16      	cmp	r3, #22
 80002aa:	f200 8081 	bhi.w	80003b0 <APP_THREAD_Error+0x114>
 80002ae:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <APP_THREAD_Error+0x18>)
 80002b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b4:	08000311 	.word	0x08000311
 80002b8:	0800031b 	.word	0x0800031b
 80002bc:	08000325 	.word	0x08000325
 80002c0:	0800032f 	.word	0x0800032f
 80002c4:	08000339 	.word	0x08000339
 80002c8:	08000343 	.word	0x08000343
 80002cc:	0800034d 	.word	0x0800034d
 80002d0:	08000357 	.word	0x08000357
 80002d4:	0800036b 	.word	0x0800036b
 80002d8:	08000375 	.word	0x08000375
 80002dc:	0800037f 	.word	0x0800037f
 80002e0:	08000389 	.word	0x08000389
 80002e4:	080003b1 	.word	0x080003b1
 80002e8:	08000393 	.word	0x08000393
 80002ec:	0800039d 	.word	0x0800039d
 80002f0:	080003b1 	.word	0x080003b1
 80002f4:	080003b1 	.word	0x080003b1
 80002f8:	080003b1 	.word	0x080003b1
 80002fc:	080003b1 	.word	0x080003b1
 8000300:	080003b1 	.word	0x080003b1
 8000304:	080003a7 	.word	0x080003a7
 8000308:	080003b1 	.word	0x080003b1
 800030c:	08000361 	.word	0x08000361
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000310:	6839      	ldr	r1, [r7, #0]
 8000312:	482c      	ldr	r0, [pc, #176]	; (80003c4 <APP_THREAD_Error+0x128>)
 8000314:	f000 f982 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000318:	e04f      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800031a:	6839      	ldr	r1, [r7, #0]
 800031c:	482a      	ldr	r0, [pc, #168]	; (80003c8 <APP_THREAD_Error+0x12c>)
 800031e:	f000 f97d 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000322:	e04a      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8000324:	6839      	ldr	r1, [r7, #0]
 8000326:	4829      	ldr	r0, [pc, #164]	; (80003cc <APP_THREAD_Error+0x130>)
 8000328:	f000 f978 	bl	800061c <APP_THREAD_TraceError>
    break;
 800032c:	e045      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800032e:	6839      	ldr	r1, [r7, #0]
 8000330:	4827      	ldr	r0, [pc, #156]	; (80003d0 <APP_THREAD_Error+0x134>)
 8000332:	f000 f973 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000336:	e040      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8000338:	6839      	ldr	r1, [r7, #0]
 800033a:	4826      	ldr	r0, [pc, #152]	; (80003d4 <APP_THREAD_Error+0x138>)
 800033c:	f000 f96e 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000340:	e03b      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000342:	6839      	ldr	r1, [r7, #0]
 8000344:	4824      	ldr	r0, [pc, #144]	; (80003d8 <APP_THREAD_Error+0x13c>)
 8000346:	f000 f969 	bl	800061c <APP_THREAD_TraceError>
    break;
 800034a:	e036      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800034c:	6839      	ldr	r1, [r7, #0]
 800034e:	4823      	ldr	r0, [pc, #140]	; (80003dc <APP_THREAD_Error+0x140>)
 8000350:	f000 f964 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000354:	e031      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 8000356:	6839      	ldr	r1, [r7, #0]
 8000358:	4821      	ldr	r0, [pc, #132]	; (80003e0 <APP_THREAD_Error+0x144>)
 800035a:	f000 f95f 	bl	800061c <APP_THREAD_TraceError>
    break;
 800035e:	e02c      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8000360:	6839      	ldr	r1, [r7, #0]
 8000362:	4820      	ldr	r0, [pc, #128]	; (80003e4 <APP_THREAD_Error+0x148>)
 8000364:	f000 f95a 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000368:	e027      	b.n	80003ba <APP_THREAD_Error+0x11e>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 800036a:	6839      	ldr	r1, [r7, #0]
 800036c:	481e      	ldr	r0, [pc, #120]	; (80003e8 <APP_THREAD_Error+0x14c>)
 800036e:	f000 f955 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000372:	e022      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8000374:	6839      	ldr	r1, [r7, #0]
 8000376:	481d      	ldr	r0, [pc, #116]	; (80003ec <APP_THREAD_Error+0x150>)
 8000378:	f000 f950 	bl	800061c <APP_THREAD_TraceError>
    break;
 800037c:	e01d      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 800037e:	6839      	ldr	r1, [r7, #0]
 8000380:	481b      	ldr	r0, [pc, #108]	; (80003f0 <APP_THREAD_Error+0x154>)
 8000382:	f000 f94b 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000386:	e018      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 8000388:	6839      	ldr	r1, [r7, #0]
 800038a:	481a      	ldr	r0, [pc, #104]	; (80003f4 <APP_THREAD_Error+0x158>)
 800038c:	f000 f946 	bl	800061c <APP_THREAD_TraceError>
    break;
 8000390:	e013      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 8000392:	6839      	ldr	r1, [r7, #0]
 8000394:	4818      	ldr	r0, [pc, #96]	; (80003f8 <APP_THREAD_Error+0x15c>)
 8000396:	f000 f941 	bl	800061c <APP_THREAD_TraceError>
    break;
 800039a:	e00e      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	4817      	ldr	r0, [pc, #92]	; (80003fc <APP_THREAD_Error+0x160>)
 80003a0:	f000 f93c 	bl	800061c <APP_THREAD_TraceError>
    break;
 80003a4:	e009      	b.n	80003ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MSG_COMPARE_FAILED:
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",ErrCode);
 80003a6:	6839      	ldr	r1, [r7, #0]
 80003a8:	4815      	ldr	r0, [pc, #84]	; (8000400 <APP_THREAD_Error+0x164>)
 80003aa:	f000 f937 	bl	800061c <APP_THREAD_TraceError>
    break;
 80003ae:	e004      	b.n	80003ba <APP_THREAD_Error+0x11e>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 80003b0:	2100      	movs	r1, #0
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <APP_THREAD_Error+0x168>)
 80003b4:	f000 f932 	bl	800061c <APP_THREAD_TraceError>
    break;
 80003b8:	bf00      	nop
  }
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	08008c3c 	.word	0x08008c3c
 80003c8:	08008c60 	.word	0x08008c60
 80003cc:	08008c84 	.word	0x08008c84
 80003d0:	08008ca4 	.word	0x08008ca4
 80003d4:	08008cc4 	.word	0x08008cc4
 80003d8:	08008ce4 	.word	0x08008ce4
 80003dc:	08008d00 	.word	0x08008d00
 80003e0:	08008d2c 	.word	0x08008d2c
 80003e4:	08008d50 	.word	0x08008d50
 80003e8:	08008d74 	.word	0x08008d74
 80003ec:	08008d94 	.word	0x08008d94
 80003f0:	08008dbc 	.word	0x08008dbc
 80003f4:	08008de0 	.word	0x08008de0
 80003f8:	08008e08 	.word	0x08008e08
 80003fc:	08008e28 	.word	0x08008e28
 8000400:	08008e50 	.word	0x08008e50
 8000404:	08008e78 	.word	0x08008e78

08000408 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 800040e:	2300      	movs	r3, #0
 8000410:	71fb      	strb	r3, [r7, #7]

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(NULL, 15000);
 8000412:	f643 2198 	movw	r1, #15000	; 0x3a98
 8000416:	2000      	movs	r0, #0
 8000418:	f006 fc3b 	bl	8006c92 <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 800041c:	4a22      	ldr	r2, [pc, #136]	; (80004a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 800041e:	7813      	ldrb	r3, [r2, #0]
 8000420:	f36f 0300 	bfc	r3, #0, #1
 8000424:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 8000426:	4a20      	ldr	r2, [pc, #128]	; (80004a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000428:	7813      	ldrb	r3, [r2, #0]
 800042a:	f36f 0341 	bfc	r3, #1, #1
 800042e:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 1U;
 8000430:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000432:	7813      	ldrb	r3, [r2, #0]
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(NULL,OT_LinkMode);
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 800043c:	7819      	ldrb	r1, [r3, #0]
 800043e:	2000      	movs	r0, #0
 8000440:	f007 fd28 	bl	8007e94 <otThreadSetLinkMode>
 8000444:	4603      	mov	r3, r0
 8000446:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d004      	beq.n	8000458 <APP_THREAD_SetSleepyEndDeviceMode+0x50>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	4619      	mov	r1, r3
 8000452:	2011      	movs	r0, #17
 8000454:	f7ff ff22 	bl	800029c <APP_THREAD_Error>
   * to modify its mode to MTD.
   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
   * then reattach.
   *
   */
  if (sleepyEndDeviceFlag == FALSE)
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d11e      	bne.n	800049e <APP_THREAD_SetSleepyEndDeviceMode+0x96>
  {
    error = otThreadSetEnabled(NULL, false);
 8000460:	2100      	movs	r1, #0
 8000462:	2000      	movs	r0, #0
 8000464:	f007 fce6 	bl	8007e34 <otThreadSetEnabled>
 8000468:	4603      	mov	r3, r0
 800046a:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d004      	beq.n	800047c <APP_THREAD_SetSleepyEndDeviceMode+0x74>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4619      	mov	r1, r3
 8000476:	2011      	movs	r0, #17
 8000478:	f7ff ff10 	bl	800029c <APP_THREAD_Error>
    error = otThreadSetEnabled(NULL, true);
 800047c:	2101      	movs	r1, #1
 800047e:	2000      	movs	r0, #0
 8000480:	f007 fcd8 	bl	8007e34 <otThreadSetEnabled>
 8000484:	4603      	mov	r3, r0
 8000486:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d004      	beq.n	8000498 <APP_THREAD_SetSleepyEndDeviceMode+0x90>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4619      	mov	r1, r3
 8000492:	2011      	movs	r0, #17
 8000494:	f7ff ff02 	bl	800029c <APP_THREAD_Error>
    sleepyEndDeviceFlag = TRUE;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 800049a:	2201      	movs	r2, #1
 800049c:	601a      	str	r2, [r3, #0]
  }

}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2000005c 	.word	0x2000005c
 80004ac:	20000060 	.word	0x20000060

080004b0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
  otError error;
  otNetworkKey networkKey = {{***REMOVED***
 80004b6:	4b42      	ldr	r3, [pc, #264]	; (80005c0 <APP_THREAD_DeviceConfig+0x110>)
 80004b8:	1d3c      	adds	r4, r7, #4
 80004ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          0xca, 0x86, 0x85, 0xab, 0x99, 0xda, 0xc9, 0x51}};

  error = otInstanceErasePersistentInfo(NULL);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f006 fb2d 	bl	8006b20 <otInstanceErasePersistentInfo>
 80004c6:	4603      	mov	r3, r0
 80004c8:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80004ca:	7dfb      	ldrb	r3, [r7, #23]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d004      	beq.n	80004da <APP_THREAD_DeviceConfig+0x2a>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80004d0:	7dfb      	ldrb	r3, [r7, #23]
 80004d2:	4619      	mov	r1, r3
 80004d4:	2006      	movs	r0, #6
 80004d6:	f7ff fee1 	bl	800029c <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80004da:	2000      	movs	r0, #0
 80004dc:	f006 fac3 	bl	8006a66 <otInstanceFinalize>
  otInstanceInitSingle();
 80004e0:	f006 fa9a 	bl	8006a18 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80004e4:	2200      	movs	r2, #0
 80004e6:	4937      	ldr	r1, [pc, #220]	; (80005c4 <APP_THREAD_DeviceConfig+0x114>)
 80004e8:	2000      	movs	r0, #0
 80004ea:	f006 fae3 	bl	8006ab4 <otSetStateChangedCallback>
 80004ee:	4603      	mov	r3, r0
 80004f0:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80004f2:	7dfb      	ldrb	r3, [r7, #23]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d004      	beq.n	8000502 <APP_THREAD_DeviceConfig+0x52>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80004f8:	7dfb      	ldrb	r3, [r7, #23]
 80004fa:	4619      	mov	r1, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff fecd 	bl	800029c <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8000502:	210e      	movs	r1, #14
 8000504:	2000      	movs	r0, #0
 8000506:	f006 fb64 	bl	8006bd2 <otLinkSetChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 800050e:	7dfb      	ldrb	r3, [r7, #23]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d004      	beq.n	800051e <APP_THREAD_DeviceConfig+0x6e>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8000514:	7dfb      	ldrb	r3, [r7, #23]
 8000516:	4619      	mov	r1, r3
 8000518:	2002      	movs	r0, #2
 800051a:	f7ff febf 	bl	800029c <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 800051e:	f241 1111 	movw	r1, #4369	; 0x1111
 8000522:	2000      	movs	r0, #0
 8000524:	f006 fb85 	bl	8006c32 <otLinkSetPanId>
 8000528:	4603      	mov	r3, r0
 800052a:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 800052c:	7dfb      	ldrb	r3, [r7, #23]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d004      	beq.n	800053c <APP_THREAD_DeviceConfig+0x8c>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	4619      	mov	r1, r3
 8000536:	2003      	movs	r0, #3
 8000538:	f7ff feb0 	bl	800029c <APP_THREAD_Error>
  }
  error = otThreadSetNetworkKey(NULL, &networkKey);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	2000      	movs	r0, #0
 8000542:	f007 fce8 	bl	8007f16 <otThreadSetNetworkKey>
 8000546:	4603      	mov	r3, r0
 8000548:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 800054a:	7dfb      	ldrb	r3, [r7, #23]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d004      	beq.n	800055a <APP_THREAD_DeviceConfig+0xaa>
  {
    APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	4619      	mov	r1, r3
 8000554:	2007      	movs	r0, #7
 8000556:	f7ff fea1 	bl	800029c <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800055a:	2101      	movs	r1, #1
 800055c:	2000      	movs	r0, #0
 800055e:	f006 fb08 	bl	8006b72 <otIp6SetEnabled>
 8000562:	4603      	mov	r3, r0
 8000564:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d004      	beq.n	8000576 <APP_THREAD_DeviceConfig+0xc6>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4619      	mov	r1, r3
 8000570:	2004      	movs	r0, #4
 8000572:	f7ff fe93 	bl	800029c <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8000576:	2101      	movs	r1, #1
 8000578:	2000      	movs	r0, #0
 800057a:	f007 fc5b 	bl	8007e34 <otThreadSetEnabled>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d004      	beq.n	8000592 <APP_THREAD_DeviceConfig+0xe2>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	4619      	mov	r1, r3
 800058c:	2005      	movs	r0, #5
 800058e:	f7ff fe85 	bl	800029c <APP_THREAD_Error>
  }
  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8000592:	f241 6133 	movw	r1, #5683	; 0x1633
 8000596:	2000      	movs	r0, #0
 8000598:	f006 f9ab 	bl	80068f2 <otCoapStart>
 800059c:	4603      	mov	r3, r0
 800059e:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d004      	beq.n	80005b0 <APP_THREAD_DeviceConfig+0x100>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 80005a6:	7dfb      	ldrb	r3, [r7, #23]
 80005a8:	4619      	mov	r1, r3
 80005aa:	2008      	movs	r0, #8
 80005ac:	f7ff fe76 	bl	800029c <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(NULL, &OT_Ressource);
 80005b0:	4905      	ldr	r1, [pc, #20]	; (80005c8 <APP_THREAD_DeviceConfig+0x118>)
 80005b2:	2000      	movs	r0, #0
 80005b4:	f006 f9cd 	bl	8006952 <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 80005b8:	bf00      	nop
 80005ba:	371c      	adds	r7, #28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	08008e88 	.word	0x08008e88
 80005c4:	080005cd 	.word	0x080005cd
 80005c8:	20000008 	.word	0x20000008

080005cc <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d016      	beq.n	800060e <APP_THREAD_StateNotif+0x42>
  {
    switch (otThreadGetDeviceRole(NULL))
 80005e0:	2000      	movs	r0, #0
 80005e2:	f007 fcc7 	bl	8007f74 <otThreadGetDeviceRole>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d812      	bhi.n	8000612 <APP_THREAD_StateNotif+0x46>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <APP_THREAD_StateNotif+0x28>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000613 	.word	0x08000613
 80005f8:	08000613 	.word	0x08000613
 80005fc:	08000609 	.word	0x08000609
 8000600:	08000613 	.word	0x08000613
 8000604:	08000613 	.word	0x08000613
       /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */

       break;
    case OT_DEVICE_ROLE_CHILD:
       /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SetSleepyEndDeviceMode();
 8000608:	f7ff fefe 	bl	8000408 <APP_THREAD_SetSleepyEndDeviceMode>
       break;
 800060c:	e002      	b.n	8000614 <APP_THREAD_StateNotif+0x48>
    default:
       /* USER CODE BEGIN DEFAULT */
       /* USER CODE END DEFAULT */
       break;
    }
  }
 800060e:	bf00      	nop
 8000610:	e000      	b.n	8000614 <APP_THREAD_StateNotif+0x48>
       break;
 8000612:	bf00      	nop
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <APP_THREAD_TraceError+0x24>)
 800062e:	2101      	movs	r1, #1
 8000630:	2000      	movs	r0, #0
 8000632:	f002 fbb1 	bl	8002d98 <logApplication>

  /* USER CODE END TRACE_ERROR */
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	08008e98 	.word	0x08008e98

08000644 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800064e:	6978      	ldr	r0, [r7, #20]
 8000650:	f007 fa0e 	bl	8007a70 <SHCI_GetWirelessFwInfo>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d004      	beq.n	8000664 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800065a:	2101      	movs	r1, #1
 800065c:	2016      	movs	r0, #22
 800065e:	f7ff fe1d 	bl	800029c <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8000662:	e07c      	b.n	800075e <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
    APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8000664:	4a40      	ldr	r2, [pc, #256]	; (8000768 <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 8000666:	2101      	movs	r1, #1
 8000668:	2000      	movs	r0, #0
 800066a:	f002 fb95 	bl	8002d98 <logApplication>
    APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	461a      	mov	r2, r3
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	460b      	mov	r3, r1
 8000684:	4a39      	ldr	r2, [pc, #228]	; (800076c <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 8000686:	2101      	movs	r1, #1
 8000688:	2000      	movs	r0, #0
 800068a:	f002 fb85 	bl	8002d98 <logApplication>
    APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	4a37      	ldr	r2, [pc, #220]	; (8000770 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8000694:	2101      	movs	r1, #1
 8000696:	2000      	movs	r0, #0
 8000698:	f002 fb7e 	bl	8002d98 <logApplication>
    APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	4a34      	ldr	r2, [pc, #208]	; (8000774 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 80006a2:	2101      	movs	r1, #1
 80006a4:	2000      	movs	r0, #0
 80006a6:	f002 fb77 	bl	8002d98 <logApplication>
    APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	7a9b      	ldrb	r3, [r3, #10]
 80006ae:	4619      	mov	r1, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	7adb      	ldrb	r3, [r3, #11]
 80006b4:	461a      	mov	r2, r3
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	7b1b      	ldrb	r3, [r3, #12]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	460b      	mov	r3, r1
 80006c0:	4a2d      	ldr	r2, [pc, #180]	; (8000778 <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 80006c2:	2101      	movs	r1, #1
 80006c4:	2000      	movs	r0, #0
 80006c6:	f002 fb67 	bl	8002d98 <logApplication>
    APP_DBG("Stack type: %d", p_wireless_info->StackType);
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	7a5b      	ldrb	r3, [r3, #9]
 80006ce:	4a2b      	ldr	r2, [pc, #172]	; (800077c <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	2000      	movs	r0, #0
 80006d4:	f002 fb60 	bl	8002d98 <logApplication>
    APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	7a1b      	ldrb	r3, [r3, #8]
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 80006de:	2101      	movs	r1, #1
 80006e0:	2000      	movs	r0, #0
 80006e2:	f002 fb59 	bl	8002d98 <logApplication>
    APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	79db      	ldrb	r3, [r3, #7]
 80006ea:	4a26      	ldr	r2, [pc, #152]	; (8000784 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	2000      	movs	r0, #0
 80006f0:	f002 fb52 	bl	8002d98 <logApplication>
    APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	799b      	ldrb	r3, [r3, #6]
 80006f8:	4a23      	ldr	r2, [pc, #140]	; (8000788 <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 80006fa:	2101      	movs	r1, #1
 80006fc:	2000      	movs	r0, #0
 80006fe:	f002 fb4b 	bl	8002d98 <logApplication>
    APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	795b      	ldrb	r3, [r3, #5]
 8000706:	4a21      	ldr	r2, [pc, #132]	; (800078c <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8000708:	2101      	movs	r1, #1
 800070a:	2000      	movs	r0, #0
 800070c:	f002 fb44 	bl	8002d98 <logApplication>
    switch(p_wireless_info->StackType)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	7a5b      	ldrb	r3, [r3, #9]
 8000714:	2b50      	cmp	r3, #80	; 0x50
 8000716:	d012      	beq.n	800073e <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8000718:	2b50      	cmp	r3, #80	; 0x50
 800071a:	dc16      	bgt.n	800074a <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 800071c:	2b10      	cmp	r3, #16
 800071e:	d002      	beq.n	8000726 <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8000720:	2b11      	cmp	r3, #17
 8000722:	d006      	beq.n	8000732 <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 8000724:	e011      	b.n	800074a <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
      APP_DBG("FW Type : Thread FTD");
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 8000728:	2101      	movs	r1, #1
 800072a:	2000      	movs	r0, #0
 800072c:	f002 fb34 	bl	8002d98 <logApplication>
      break;
 8000730:	e010      	b.n	8000754 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Thread MTD");
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 8000734:	2101      	movs	r1, #1
 8000736:	2000      	movs	r0, #0
 8000738:	f002 fb2e 	bl	8002d98 <logApplication>
      break;
 800073c:	e00a      	b.n	8000754 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8000740:	2101      	movs	r1, #1
 8000742:	2000      	movs	r0, #0
 8000744:	f002 fb28 	bl	8002d98 <logApplication>
      break;
 8000748:	e004      	b.n	8000754 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800074a:	2101      	movs	r1, #1
 800074c:	2016      	movs	r0, #22
 800074e:	f7ff fda5 	bl	800029c <APP_THREAD_Error>
      break;
 8000752:	bf00      	nop
    APP_DBG("**********************************************************");
 8000754:	4a11      	ldr	r2, [pc, #68]	; (800079c <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 8000756:	2101      	movs	r1, #1
 8000758:	2000      	movs	r0, #0
 800075a:	f002 fb1d 	bl	8002d98 <logApplication>
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	08008ebc 	.word	0x08008ebc
 800076c:	08008ef8 	.word	0x08008ef8
 8000770:	08008f14 	.word	0x08008f14
 8000774:	08008f30 	.word	0x08008f30
 8000778:	08008f48 	.word	0x08008f48
 800077c:	08008f64 	.word	0x08008f64
 8000780:	08008f74 	.word	0x08008f74
 8000784:	08008f88 	.word	0x08008f88
 8000788:	08008f9c 	.word	0x08008f9c
 800078c:	08008fb0 	.word	0x08008fb0
 8000790:	08008fc4 	.word	0x08008fc4
 8000794:	08008fdc 	.word	0x08008fdc
 8000798:	08008ff4 	.word	0x08008ff4
 800079c:	08009020 	.word	0x08009020

080007a0 <APP_THREAD_CoapRequestHandler>:
 */
static void APP_THREAD_CoapRequestHandler(void                 * pContext,
                                          otMessage            * pMessage,
                                          const otMessageInfo  * pMessageInfo)

{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  static uint8_t flagToggle = FALSE;
  
  APP_DBG(" Received CoAP request (context = %s)",pContext);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <APP_THREAD_CoapRequestHandler+0x78>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	2000      	movs	r0, #0
 80007b4:	f002 faf0 	bl	8002d98 <logApplication>
  /* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
  if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &PayloadRead, sizeof(PayloadRead)) != sizeof(PayloadRead))
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f006 fac6 	bl	8006d4a <otMessageGetOffset>
 80007be:	4603      	mov	r3, r0
 80007c0:	4619      	mov	r1, r3
 80007c2:	2302      	movs	r3, #2
 80007c4:	4a15      	ldr	r2, [pc, #84]	; (800081c <APP_THREAD_CoapRequestHandler+0x7c>)
 80007c6:	68b8      	ldr	r0, [r7, #8]
 80007c8:	f006 faef 	bl	8006daa <otMessageRead>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d003      	beq.n	80007da <APP_THREAD_CoapRequestHandler+0x3a>
  {
    APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	200a      	movs	r0, #10
 80007d6:	f7ff fd61 	bl	800029c <APP_THREAD_Error>
  }

  if (APP_THREAD_CheckMsgValidity() == true)
 80007da:	f000 f895 	bl	8000908 <APP_THREAD_CheckMsgValidity>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00a      	beq.n	80007fa <APP_THREAD_CoapRequestHandler+0x5a>
  {
    if (flagToggle == FALSE)
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <APP_THREAD_CoapRequestHandler+0x80>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d103      	bne.n	80007f4 <APP_THREAD_CoapRequestHandler+0x54>
    {

        flagToggle = TRUE;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <APP_THREAD_CoapRequestHandler+0x80>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	e002      	b.n	80007fa <APP_THREAD_CoapRequestHandler+0x5a>
    }
    else
    {

        flagToggle = FALSE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <APP_THREAD_CoapRequestHandler+0x80>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END APP_THREAD_CoapRequestHandler */

  /* If Message is Confirmable, send response */
  if (otCoapMessageGetType(pMessage) == OT_COAP_TYPE_CONFIRMABLE)
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	f006 f84b 	bl	8006896 <otCoapMessageGetType>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d103      	bne.n	800080e <APP_THREAD_CoapRequestHandler+0x6e>
  {
    APP_THREAD_CoapSendDataResponse(pMessage, pMessageInfo);
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f000 f80b 	bl	8000824 <APP_THREAD_CoapSendDataResponse>
  }
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	08009144 	.word	0x08009144
 800081c:	20000078 	.word	0x20000078
 8000820:	2000007b 	.word	0x2000007b

08000824 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otMessage  * pMessage,
    const otMessageInfo * pMessageInfo)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <APP_THREAD_CoapSendDataResponse+0x88>)
 8000834:	2101      	movs	r1, #1
 8000836:	2000      	movs	r0, #0
 8000838:	f002 faae 	bl	8002d98 <logApplication>

    pOT_MessageResponse = otCoapNewMessage(NULL, NULL);
 800083c:	2100      	movs	r1, #0
 800083e:	2000      	movs	r0, #0
 8000840:	f005 ffbd 	bl	80067be <otCoapNewMessage>
 8000844:	4603      	mov	r3, r0
 8000846:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000848:	6013      	str	r3, [r2, #0]
    if (pOT_MessageResponse == NULL)
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <APP_THREAD_CoapSendDataResponse+0x8c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d106      	bne.n	8000860 <APP_THREAD_CoapSendDataResponse+0x3c>
    {
      APP_DBG("WARNING : pOT_MessageResponse = NULL ! -> exit now");
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <APP_THREAD_CoapSendDataResponse+0x90>)
 8000854:	2101      	movs	r1, #1
 8000856:	2000      	movs	r0, #0
 8000858:	f002 fa9e 	bl	8002d98 <logApplication>
      break;
 800085c:	bf00      	nop
    {
      otMessageFree(pOT_MessageResponse);
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 800085e:	e020      	b.n	80008a2 <APP_THREAD_CoapSendDataResponse+0x7e>
    otCoapMessageInitResponse(pOT_MessageResponse,
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	2343      	movs	r3, #67	; 0x43
 8000866:	2202      	movs	r2, #2
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	f005 ffd6 	bl	800681a <otCoapMessageInitResponse>
    error = otCoapSendResponse(NULL, pOT_MessageResponse, pMessageInfo);
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fcc1 	bl	80001fe <otCoapSendResponse>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_MessageResponse != NULL)
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00d      	beq.n	80008a2 <APP_THREAD_CoapSendDataResponse+0x7e>
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d009      	beq.n	80008a2 <APP_THREAD_CoapSendDataResponse+0x7e>
      otMessageFree(pOT_MessageResponse);
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f006 fa2c 	bl	8006cf0 <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4619      	mov	r1, r3
 800089c:	200f      	movs	r0, #15
 800089e:	f7ff fcfd 	bl	800029c <APP_THREAD_Error>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	0800916c 	.word	0x0800916c
 80008b0:	20000070 	.word	0x20000070
 80008b4:	080091a4 	.word	0x080091a4

080008b8 <APP_THREAD_InitPayloadWrite>:
 * @brief Initialize CoAP write buffer.
 * @param  None
 * @retval None
 */
static void APP_THREAD_InitPayloadWrite(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	e006      	b.n	80008d2 <APP_THREAD_InitPayloadWrite+0x1a>
  {
    PayloadWrite[i] = 0xFF;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <APP_THREAD_InitPayloadWrite+0x30>)
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	3301      	adds	r3, #1
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d9f5      	bls.n	80008c4 <APP_THREAD_InitPayloadWrite+0xc>
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000074 	.word	0x20000074

080008ec <APP_THREAD_TimingElapsed>:
      APP_THREAD_CoapDataRespHandler,
      NULL);
}

static void APP_THREAD_TimingElapsed(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  APP_DBG("--- APP_THREAD_TimingElapsed ---");
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <APP_THREAD_TimingElapsed+0x18>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	2000      	movs	r0, #0
 80008f6:	f002 fa4f 	bl	8002d98 <logApplication>
  UTIL_SEQ_SetEvt(EVENT_TIMER);
 80008fa:	2008      	movs	r0, #8
 80008fc:	f007 ffda 	bl	80088b4 <UTIL_SEQ_SetEvt>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	080092c8 	.word	0x080092c8

08000908 <APP_THREAD_CheckMsgValidity>:
 * @brief  Compare the message received versus the original message.
 * @param  None
 * @retval None
 */
static bool APP_THREAD_CheckMsgValidity(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  bool valid = true;
 800090e:	2301      	movs	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	e00e      	b.n	8000936 <APP_THREAD_CheckMsgValidity+0x2e>
  {
    if(PayloadRead[i] != PayloadWrite[i])
 8000918:	4a11      	ldr	r2, [pc, #68]	; (8000960 <APP_THREAD_CheckMsgValidity+0x58>)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	4413      	add	r3, r2
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4910      	ldr	r1, [pc, #64]	; (8000964 <APP_THREAD_CheckMsgValidity+0x5c>)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	440b      	add	r3, r1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	d001      	beq.n	8000930 <APP_THREAD_CheckMsgValidity+0x28>
    {
      valid = false;
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d9ed      	bls.n	8000918 <APP_THREAD_CheckMsgValidity+0x10>
    }
  }

  if(valid == true)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d005      	beq.n	800094e <APP_THREAD_CheckMsgValidity+0x46>
  {
    APP_DBG("PAYLOAD Comparison OK!");
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <APP_THREAD_CheckMsgValidity+0x60>)
 8000944:	2101      	movs	r1, #1
 8000946:	2000      	movs	r0, #0
 8000948:	f002 fa26 	bl	8002d98 <logApplication>
 800094c:	e003      	b.n	8000956 <APP_THREAD_CheckMsgValidity+0x4e>
  }else
  {
    APP_THREAD_Error(ERR_THREAD_MSG_COMPARE_FAILED, 0);
 800094e:	2100      	movs	r1, #0
 8000950:	2014      	movs	r0, #20
 8000952:	f7ff fca3 	bl	800029c <APP_THREAD_Error>
  }
  return valid;
 8000956:	79fb      	ldrb	r3, [r7, #7]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000078 	.word	0x20000078
 8000964:	20000074 	.word	0x20000074
 8000968:	080092ec 	.word	0x080092ec

0800096c <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000064 	.word	0x20000064

0800098c <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	330c      	adds	r3, #12
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000064 	.word	0x20000064

080009a4 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	330b      	adds	r3, #11
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000064 	.word	0x20000064

080009bc <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	330b      	adds	r3, #11
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000068 	.word	0x20000068

080009d4 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <Ot_Cmd_Transfer_Common+0x44>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2200      	movs	r2, #0
 80009e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80009e4:	725a      	strb	r2, [r3, #9]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f042 0202 	orr.w	r2, r2, #2
 80009ec:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <Ot_Cmd_Transfer_Common+0x44>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	330c      	adds	r3, #12
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	3302      	adds	r3, #2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <Ot_Cmd_Transfer_Common+0x44>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8000a06:	f007 fbf7 	bl	80081f8 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8000a0a:	f000 f834 	bl	8000a76 <Wait_Getting_Ack_From_M0>

}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000064 	.word	0x20000064

08000a1c <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 8000a20:	f7ff ffd8 	bl	80009d4 <Ot_Cmd_Transfer_Common>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8000a30:	f000 f828 	bl	8000a84 <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <TL_OT_CmdEvtReceived+0x1c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000080 	.word	0x20000080

08000a48 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <TL_THREAD_NotReceived+0x1c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8000a56:	f000 f81d 	bl	8000a94 <Receive_Notification_From_M0>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000068 	.word	0x20000068

08000a68 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8000a6c:	2004      	movs	r0, #4
 8000a6e:	f007 ff41 	bl	80088f4 <UTIL_SEQ_WaitEvt>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f007 ff3a 	bl	80088f4 <UTIL_SEQ_WaitEvt>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f007 ff13 	bl	80088b4 <UTIL_SEQ_SetEvt>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <Receive_Notification_From_M0+0x1c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <Receive_Notification_From_M0+0x1c>)
 8000aa0:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f007 fed9 	bl	800885c <UTIL_SEQ_SetTask>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000006c 	.word	0x2000006c

08000ab4 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8000ab8:	f007 fbba 	bl	8008230 <TL_THREAD_CliSendAck>

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000adc:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <APP_THREAD_TL_THREAD_INIT+0x30>)
 8000ade:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8000ae4:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <APP_THREAD_TL_THREAD_INIT+0x38>)
 8000aea:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000aee:	f007 fb63 	bl	80081b8 <TL_THREAD_Init>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20030028 	.word	0x20030028
 8000afc:	200300e8 	.word	0x200300e8
 8000b00:	200301f4 	.word	0x200301f4
 8000b04:	20030300 	.word	0x20030300
 8000b08:	2003040c 	.word	0x2003040c

08000b0c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	7adb      	ldrb	r3, [r3, #11]
 8000b1c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	330c      	adds	r3, #12
 8000b22:	490b      	ldr	r1, [pc, #44]	; (8000b50 <TL_THREAD_CliNotReceived+0x44>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb29 	bl	800017c <strcmp>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d009      	beq.n	8000b44 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f103 010c 	add.w	r1, r3, #12
 8000b36:	7afb      	ldrb	r3, [r7, #11]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <TL_THREAD_CliNotReceived+0x48>)
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f001 fba3 	bl	8002288 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 8000b42:	e001      	b.n	8000b48 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8000b44:	f7ff ffb6 	bl	8000ab4 <Send_CLI_Ack_For_OT>
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08009304 	.word	0x08009304
 8000b54:	08000b59 	.word	0x08000b59

08000b58 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8000b5c:	f7ff ffaa 	bl	8000ab4 <Send_CLI_Ack_For_OT>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00d      	beq.n	8000b8c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d904      	bls.n	8000b82 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fb8e 	bl	800029c <APP_THREAD_Error>
 8000b80:	e001      	b.n	8000b86 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8000b82:	f006 f951 	bl	8006e28 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8000b86:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000006c 	.word	0x2000006c

08000b94 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <LL_PWR_EnableBootC2+0x1c>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <LL_PWR_EnableBootC2+0x1c>)
 8000b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	58000400 	.word	0x58000400

08000bb4 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8000bbe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000bc2:	4905      	ldr	r1, [pc, #20]	; (8000bd8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	58000800 	.word	0x58000800

08000bdc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000be6:	6a1a      	ldr	r2, [r3, #32]
 8000be8:	4904      	ldr	r1, [pc, #16]	; (8000bfc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	620b      	str	r3, [r1, #32]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	58000800 	.word	0x58000800

08000c00 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8000c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8000c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c52:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	605a      	str	r2, [r3, #4]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	041b      	lsls	r3, r3, #16
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	605a      	str	r2, [r3, #4]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	605a      	str	r2, [r3, #4]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	605a      	str	r2, [r3, #4]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	609a      	str	r2, [r3, #8]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	041a      	lsls	r2, r3, #16
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	4013      	ands	r3, r2
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d101      	bne.n	8000d90 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69da      	ldr	r2, [r3, #28]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	4013      	ands	r3, r2
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d101      	bne.n	8000dba <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8000dcc:	2102      	movs	r1, #2
 8000dce:	482a      	ldr	r0, [pc, #168]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000dd0:	f7ff ffe5 	bl	8000d9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d009      	beq.n	8000dee <HW_IPCC_Rx_Handler+0x26>
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8000de8:	f000 f8f8 	bl	8000fdc <HW_IPCC_SYS_EvtHandler>
 8000dec:	e041      	b.n	8000e72 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8000dee:	2104      	movs	r1, #4
 8000df0:	4821      	ldr	r0, [pc, #132]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000df2:	f7ff ffd4 	bl	8000d9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d009      	beq.n	8000e10 <HW_IPCC_Rx_Handler+0x48>
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8000e0a:	f000 f937 	bl	800107c <HW_IPCC_THREAD_NotEvtHandler>
 8000e0e:	e030      	b.n	8000e72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8000e10:	2110      	movs	r1, #16
 8000e12:	4819      	ldr	r0, [pc, #100]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000e14:	f7ff ffc3 	bl	8000d9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d009      	beq.n	8000e32 <HW_IPCC_Rx_Handler+0x6a>
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8000e2c:	f000 f932 	bl	8001094 <HW_IPCC_THREAD_CliNotEvtHandler>
 8000e30:	e01f      	b.n	8000e72 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8000e32:	2101      	movs	r1, #1
 8000e34:	4810      	ldr	r0, [pc, #64]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000e36:	f7ff ffb2 	bl	8000d9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d008      	beq.n	8000e52 <HW_IPCC_Rx_Handler+0x8a>
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8000e4c:	f000 f88a 	bl	8000f64 <HW_IPCC_BLE_EvtHandler>
 8000e50:	e00f      	b.n	8000e72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8000e52:	2108      	movs	r1, #8
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000e56:	f7ff ffa2 	bl	8000d9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <HW_IPCC_Rx_Handler+0xac>
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HW_IPCC_Rx_Handler+0xb0>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8000e6e:	f000 f95d 	bl	800112c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
}
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58000c00 	.word	0x58000c00

08000e7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8000e80:	2102      	movs	r1, #2
 8000e82:	4822      	ldr	r0, [pc, #136]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000e84:	f7ff ff76 	bl	8000d74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d109      	bne.n	8000ea2 <HW_IPCC_Tx_Handler+0x26>
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8000e9c:	f000 f892 	bl	8000fc4 <HW_IPCC_SYS_CmdEvtHandler>
 8000ea0:	e031      	b.n	8000f06 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4819      	ldr	r0, [pc, #100]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000ea6:	f7ff ff65 	bl	8000d74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d109      	bne.n	8000ec4 <HW_IPCC_Tx_Handler+0x48>
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8000ebe:	f000 f8d1 	bl	8001064 <HW_IPCC_OT_CmdEvtHandler>
 8000ec2:	e020      	b.n	8000f06 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000ec8:	f7ff ff54 	bl	8000d74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d109      	bne.n	8000ee6 <HW_IPCC_Tx_Handler+0x6a>
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8000ee0:	f000 f906 	bl	80010f0 <HW_IPCC_MM_FreeBufHandler>
 8000ee4:	e00f      	b.n	8000f06 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4808      	ldr	r0, [pc, #32]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000eea:	f7ff ff43 	bl	8000d74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <HW_IPCC_Tx_Handler+0x8c>
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HW_IPCC_Tx_Handler+0x90>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8000f02:	f000 f83b 	bl	8000f7c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
}
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	58000c00 	.word	0x58000c00

08000f10 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8000f14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f18:	f7ff fe8b 	bl	8000c32 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8000f1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f20:	f7ff fe5c 	bl	8000bdc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8000f24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f28:	f7ff fe44 	bl	8000bb4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8000f2c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8000f2e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8000f30:	f7ff fe30 	bl	8000b94 <LL_PWR_EnableBootC2>

  return;
 8000f34:	bf00      	nop
}
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8000f3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f40:	f7ff fe5e 	bl	8000c00 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8000f44:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HW_IPCC_Init+0x28>)
 8000f46:	f7ff fea0 	bl	8000c8a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HW_IPCC_Init+0x28>)
 8000f4c:	f7ff fe8d 	bl	8000c6a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000f50:	202c      	movs	r0, #44	; 0x2c
 8000f52:	f002 f998 	bl	8003286 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000f56:	202d      	movs	r0, #45	; 0x2d
 8000f58:	f002 f995 	bl	8003286 <HAL_NVIC_EnableIRQ>

  return;
 8000f5c:	bf00      	nop
}
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58000c00 	.word	0x58000c00

08000f64 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8000f68:	f007 f86e 	bl	8008048 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4802      	ldr	r0, [pc, #8]	; (8000f78 <HW_IPCC_BLE_EvtHandler+0x14>)
 8000f70:	f7ff fee3 	bl	8000d3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8000f74:	bf00      	nop
}
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	58000c00 	.word	0x58000c00

08000f7c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8000f80:	2120      	movs	r1, #32
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8000f84:	f7ff fea4 	bl	8000cd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8000f88:	f007 f88e 	bl	80080a8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8000f8c:	bf00      	nop
}
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58000c00 	.word	0x58000c00

08000f94 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <HW_IPCC_SYS_Init+0x10>)
 8000f9c:	f7ff feaa 	bl	8000cf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8000fa0:	bf00      	nop
}
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58000c00 	.word	0x58000c00

08000fa8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8000fac:	2102      	movs	r1, #2
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <HW_IPCC_SYS_SendCmd+0x18>)
 8000fb0:	f7ff fed1 	bl	8000d56 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <HW_IPCC_SYS_SendCmd+0x18>)
 8000fb8:	f7ff fe77 	bl	8000caa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8000fbc:	bf00      	nop
}
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58000c00 	.word	0x58000c00

08000fc4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8000fcc:	f7ff fe80 	bl	8000cd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8000fd0:	f007 f8ba 	bl	8008148 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8000fd4:	bf00      	nop
}
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58000c00 	.word	0x58000c00

08000fdc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8000fe0:	f007 f8c8 	bl	8008174 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8000fe8:	f7ff fea7 	bl	8000d3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8000fec:	bf00      	nop
}
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58000c00 	.word	0x58000c00

08000ff4 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <HW_IPCC_THREAD_Init+0x18>)
 8000ffc:	f7ff fe7a 	bl	8000cf4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001000:	2110      	movs	r1, #16
 8001002:	4802      	ldr	r0, [pc, #8]	; (800100c <HW_IPCC_THREAD_Init+0x18>)
 8001004:	f7ff fe76 	bl	8000cf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001008:	bf00      	nop
}
 800100a:	bd80      	pop	{r7, pc}
 800100c:	58000c00 	.word	0x58000c00

08001010 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001014:	2104      	movs	r1, #4
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <HW_IPCC_OT_SendCmd+0x18>)
 8001018:	f7ff fe9d 	bl	8000d56 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800101c:	2104      	movs	r1, #4
 800101e:	4802      	ldr	r0, [pc, #8]	; (8001028 <HW_IPCC_OT_SendCmd+0x18>)
 8001020:	f7ff fe43 	bl	8000caa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001024:	bf00      	nop
}
 8001026:	bd80      	pop	{r7, pc}
 8001028:	58000c00 	.word	0x58000c00

0800102c <HW_IPCC_THREAD_SendAck>:

  return;
}

void HW_IPCC_THREAD_SendAck( void )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001030:	2104      	movs	r1, #4
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <HW_IPCC_THREAD_SendAck+0x18>)
 8001034:	f7ff fe81 	bl	8000d3a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001038:	2104      	movs	r1, #4
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <HW_IPCC_THREAD_SendAck+0x18>)
 800103c:	f7ff fe5a 	bl	8000cf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001040:	bf00      	nop
}
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58000c00 	.word	0x58000c00

08001048 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800104c:	2110      	movs	r1, #16
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001050:	f7ff fe73 	bl	8000d3a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001054:	2110      	movs	r1, #16
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001058:	f7ff fe4c 	bl	8000cf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800105c:	bf00      	nop
}
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58000c00 	.word	0x58000c00

08001064 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001068:	2104      	movs	r1, #4
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800106c:	f7ff fe30 	bl	8000cd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001070:	f007 f8ec 	bl	800824c <HW_IPCC_OT_CmdEvtNot>

  return;
 8001074:	bf00      	nop
}
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58000c00 	.word	0x58000c00

0800107c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001080:	2104      	movs	r1, #4
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001084:	f7ff fe48 	bl	8000d18 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001088:	f007 f8ec 	bl	8008264 <HW_IPCC_THREAD_EvtNot>

  return;
 800108c:	bf00      	nop
}
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58000c00 	.word	0x58000c00

08001094 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001098:	2110      	movs	r1, #16
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800109c:	f7ff fe3c 	bl	8000d18 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80010a0:	f007 f8ec 	bl	800827c <HW_IPCC_THREAD_CliEvtNot>

  return;
 80010a4:	bf00      	nop
}
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58000c00 	.word	0x58000c00

080010ac <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80010b4:	2108      	movs	r1, #8
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80010b8:	f7ff fe5c 	bl	8000d74 <LL_C1_IPCC_IsActiveFlag_CHx>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HW_IPCC_MM_SendFreeBuf+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80010c8:	2108      	movs	r1, #8
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80010cc:	f7ff fded 	bl	8000caa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80010d0:	e006      	b.n	80010e0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80010d6:	2108      	movs	r1, #8
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80010da:	f7ff fe3c 	bl	8000d56 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80010de:	bf00      	nop
}
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	58000c00 	.word	0x58000c00
 80010ec:	2000007c 	.word	0x2000007c

080010f0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80010f4:	2108      	movs	r1, #8
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80010f8:	f7ff fdea 	bl	8000cd0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001102:	2108      	movs	r1, #8
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001106:	f7ff fe26 	bl	8000d56 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800110a:	bf00      	nop
}
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	58000c00 	.word	0x58000c00
 8001114:	2000007c 	.word	0x2000007c

08001118 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800111c:	2108      	movs	r1, #8
 800111e:	4802      	ldr	r0, [pc, #8]	; (8001128 <HW_IPCC_TRACES_Init+0x10>)
 8001120:	f7ff fde8 	bl	8000cf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001124:	bf00      	nop
}
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58000c00 	.word	0x58000c00

0800112c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001130:	f007 f936 	bl	80083a0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001134:	2108      	movs	r1, #8
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001138:	f7ff fdff 	bl	8000d3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800113c:	bf00      	nop
}
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58000c00 	.word	0x58000c00

08001144 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <LL_C2_PWR_SetPowerMode+0x28>)
 800114e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001152:	f023 0207 	bic.w	r2, r3, #7
 8001156:	4905      	ldr	r1, [pc, #20]	; (800116c <LL_C2_PWR_SetPowerMode+0x28>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4313      	orrs	r3, r2
 800115c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	58000400 	.word	0x58000400

08001170 <LL_EXTI_EnableIT_32_63>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <LL_EXTI_EnableIT_32_63+0x24>)
 800117a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800117e:	4905      	ldr	r1, [pc, #20]	; (8001194 <LL_EXTI_EnableIT_32_63+0x24>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4313      	orrs	r3, r2
 8001184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	58000800 	.word	0x58000800

08001198 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011b2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011be:	4313      	orrs	r3, r2
 80011c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	cafecafe 	.word	0xcafecafe

080011d4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80011e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	22ca      	movs	r2, #202	; 0xca
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2253      	movs	r2, #83	; 0x53
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 0207 	bic.w	r2, r3, #7
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <MX_APPE_Config+0x18>)
 8001262:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001266:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001268:	f000 f82c 	bl	80012c4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800126c:	f000 f831 	bl	80012d2 <Config_HSE>

  return;
 8001270:	bf00      	nop
}
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58004000 	.word	0x58004000

08001278 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800127c:	f000 f83d 	bl	80012fa <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001280:	f000 f856 	bl	8001330 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <MX_APPE_Init+0x2c>)
 8001286:	2000      	movs	r0, #0
 8001288:	f000 fd92 	bl	8001db0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //Init_Debug();
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800128c:	2101      	movs	r1, #1
 800128e:	2001      	movs	r0, #1
 8001290:	f007 f930 	bl	80084f4 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001294:	2101      	movs	r1, #1
 8001296:	2001      	movs	r0, #1
 8001298:	f007 f95c 	bl	8008554 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800129c:	f000 f856 	bl	800134c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80012a0:	bf00      	nop
}
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000350 	.word	0x20000350

080012a8 <Init_Smps>:

void Init_Smps(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80012ac:	bf00      	nop
}
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <Init_Exti>:

void Init_Exti(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80012ba:	2050      	movs	r0, #80	; 0x50
 80012bc:	f7ff ff58 	bl	8001170 <LL_EXTI_EnableIT_32_63>

  return;
 80012c0:	bf00      	nop
}
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80012c8:	bf00      	nop
}
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012d8:	2000      	movs	r0, #0
 80012da:	f007 f8d1 	bl	8008480 <OTP_Read>
 80012de:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	799b      	ldrb	r3, [r3, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff54 	bl	8001198 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
}
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <System_Init>:

static void System_Init(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  Init_Smps();
 80012fe:	f7ff ffd3 	bl	80012a8 <Init_Smps>

  Init_Exti();
 8001302:	f7ff ffd8 	bl	80012b6 <Init_Exti>

  Init_Rtc();
 8001306:	f000 f803 	bl	8001310 <Init_Rtc>

  return;
 800130a:	bf00      	nop
}
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <Init_Rtc+0x1c>)
 8001316:	f7ff ff7e 	bl	8001216 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800131a:	2100      	movs	r1, #0
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <Init_Rtc+0x1c>)
 800131e:	f7ff ff8a 	bl	8001236 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001322:	4802      	ldr	r0, [pc, #8]	; (800132c <Init_Rtc+0x1c>)
 8001324:	f7ff ff6a 	bl	80011fc <LL_RTC_EnableWriteProtection>

  return;
 8001328:	bf00      	nop
}
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40002800 	.word	0x40002800

08001330 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001334:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001338:	f7ff ff4c 	bl	80011d4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800133c:	f007 f8c8 	bl	80084d0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001340:	2004      	movs	r0, #4
 8001342:	f7ff feff 	bl	8001144 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001346:	bf00      	nop
}
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001352:	f006 fe3f 	bl	8007fd4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001356:	4a11      	ldr	r2, [pc, #68]	; (800139c <appe_Tl_Init+0x50>)
 8001358:	2100      	movs	r1, #0
 800135a:	2004      	movs	r0, #4
 800135c:	f007 fa5c 	bl	8008818 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <appe_Tl_Init+0x54>)
 8001362:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <appe_Tl_Init+0x58>)
 8001366:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <appe_Tl_Init+0x5c>)
 800136e:	f006 fc2d 	bl	8007bcc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <appe_Tl_Init+0x60>)
 8001378:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <appe_Tl_Init+0x64>)
 800137c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800137e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001382:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	4618      	mov	r0, r3
 800138a:	f006 ff83 	bl	8008294 <TL_MM_Init>

  TL_Enable();
 800138e:	f006 fe1a 	bl	8007fc6 <TL_Enable>

  return;
 8001392:	bf00      	nop
}
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08007c05 	.word	0x08007c05
 80013a0:	20030a54 	.word	0x20030a54
 80013a4:	080013b5 	.word	0x080013b5
 80013a8:	080013cb 	.word	0x080013cb
 80013ac:	20030b60 	.word	0x20030b60
 80013b0:	20030518 	.word	0x20030518

080013b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013be:	bf00      	nop
}
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	330b      	adds	r3, #11
 80013d8:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80013e4:	d004      	beq.n	80013f0 <APPE_SysUserEvtRx+0x26>
 80013e6:	f249 2201 	movw	r2, #37377	; 0x9201
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d003      	beq.n	80013f6 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80013ee:	e008      	b.n	8001402 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 80013f0:	f000 f834 	bl	800145c <APPE_SysEvtReadyProcessing>
         break;
 80013f4:	e005      	b.n	8001402 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f806 	bl	800140c <APPE_SysEvtError>
         break;
 8001400:	bf00      	nop
  }
  return;
 8001402:	bf00      	nop
}
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b7d      	cmp	r3, #125	; 0x7d
 800141a:	d002      	beq.n	8001422 <APPE_SysEvtError+0x16>
 800141c:	2b7e      	cmp	r3, #126	; 0x7e
 800141e:	d006      	beq.n	800142e <APPE_SysEvtError+0x22>
 8001420:	e00b      	b.n	800143a <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <APPE_SysEvtError+0x44>)
 8001424:	2101      	movs	r1, #1
 8001426:	2000      	movs	r0, #0
 8001428:	f001 fcb6 	bl	8002d98 <logApplication>
       break;
 800142c:	e00c      	b.n	8001448 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <APPE_SysEvtError+0x48>)
 8001430:	2101      	movs	r1, #1
 8001432:	2000      	movs	r0, #0
 8001434:	f001 fcb0 	bl	8002d98 <logApplication>
       break;
 8001438:	e006      	b.n	8001448 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <APPE_SysEvtError+0x4c>)
 800143e:	2101      	movs	r1, #1
 8001440:	2000      	movs	r0, #0
 8001442:	f001 fca9 	bl	8002d98 <logApplication>
       break;
 8001446:	bf00      	nop
  }
  return;
 8001448:	bf00      	nop
}
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08009308 	.word	0x08009308
 8001454:	0800932c 	.word	0x0800932c
 8001458:	0800934c 	.word	0x0800934c

0800145c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8001460:	f006 ff8c 	bl	800837c <TL_TRACES_Init>

  APP_THREAD_Init();
 8001464:	f7fe fedc 	bl	8000220 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001468:	2100      	movs	r1, #0
 800146a:	2001      	movs	r0, #1
 800146c:	f007 f842 	bl	80084f4 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001470:	2100      	movs	r1, #0
 8001472:	2001      	movs	r0, #1
 8001474:	f007 f86e 	bl	8008554 <UTIL_LPM_SetOffMode>
  return;
 8001478:	bf00      	nop
}
 800147a:	bd80      	pop	{r7, pc}

0800147c <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f007 f8cc 	bl	8008620 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8001490:	f007 f890 	bl	80085b4 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001494:	bf00      	nop
}
 8001496:	bd80      	pop	{r7, pc}

08001498 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d003      	beq.n	80014b0 <UTIL_SEQ_EvtIdle+0x18>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d00c      	beq.n	80014c8 <UTIL_SEQ_EvtIdle+0x30>
 80014ae:	e012      	b.n	80014d6 <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <UTIL_SEQ_EvtIdle+0x50>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d103      	bne.n	80014c0 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f007 f8b1 	bl	8008620 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 80014be:	e00f      	b.n	80014e0 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f007 f8ad 	bl	8008620 <UTIL_SEQ_Run>
    break;
 80014c6:	e00b      	b.n	80014e0 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80014c8:	2004      	movs	r0, #4
 80014ca:	f007 f9f3 	bl	80088b4 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f007 f8a6 	bl	8008620 <UTIL_SEQ_Run>
    break;
 80014d4:	e004      	b.n	80014e0 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014d6:	f04f 30ff 	mov.w	r0, #4294967295
 80014da:	f007 f8a1 	bl	8008620 <UTIL_SEQ_Run>
    break;
 80014de:	bf00      	nop
  }
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000080 	.word	0x20000080

080014ec <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 80014f4:	2100      	movs	r1, #0
 80014f6:	2004      	movs	r0, #4
 80014f8:	f007 f9b0 	bl	800885c <UTIL_SEQ_SetTask>
  return;
 80014fc:	bf00      	nop
}
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800150c:	2001      	movs	r0, #1
 800150e:	f007 f9d1 	bl	80088b4 <UTIL_SEQ_SetEvt>
  return;
 8001512:	bf00      	nop
}
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8001522:	2001      	movs	r0, #1
 8001524:	f007 f9e6 	bl	80088f4 <UTIL_SEQ_WaitEvt>
  return;
 8001528:	bf00      	nop
}
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f006 fee7 	bl	800830c <TL_MM_EvtDone>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001556:	2101      	movs	r1, #1
 8001558:	2000      	movs	r0, #0
 800155a:	f001 fc1d 	bl	8002d98 <logApplication>
  switch(GPIO_Pin)
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001564:	d003      	beq.n	800156e <HAL_GPIO_EXTI_Callback+0x26>
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800156a:	d005      	beq.n	8001578 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 800156c:	e005      	b.n	800157a <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 800156e:	2101      	movs	r1, #1
 8001570:	2008      	movs	r0, #8
 8001572:	f007 f973 	bl	800885c <UTIL_SEQ_SetTask>
        break;
 8001576:	e000      	b.n	800157a <HAL_GPIO_EXTI_Callback+0x32>
        break;
 8001578:	bf00      	nop
  }
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	0800936c 	.word	0x0800936c

08001588 <LL_EXTI_EnableIT_0_31>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <LL_EXTI_EnableIT_0_31+0x24>)
 8001592:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001596:	4905      	ldr	r1, [pc, #20]	; (80015ac <LL_EXTI_EnableIT_0_31+0x24>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4313      	orrs	r3, r2
 800159c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	58000800 	.word	0x58000800

080015b0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4904      	ldr	r1, [pc, #16]	; (80015d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	58000800 	.word	0x58000800

080015d4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <ReadRtcSsrValue+0x3c>)
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	b29b      	uxth	r3, r3
 80015e0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <ReadRtcSsrValue+0x3c>)
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80015ea:	e005      	b.n	80015f8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <ReadRtcSsrValue+0x3c>)
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1f5      	bne.n	80015ec <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001600:	683b      	ldr	r3, [r7, #0]
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40002800 	.word	0x40002800

08001614 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	460a      	mov	r2, r1
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	4613      	mov	r3, r2
 8001622:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001624:	79ba      	ldrb	r2, [r7, #6]
 8001626:	491d      	ldr	r1, [pc, #116]	; (800169c <LinkTimerAfter+0x88>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3315      	adds	r3, #21
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	2b06      	cmp	r3, #6
 800163c:	d009      	beq.n	8001652 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <LinkTimerAfter+0x88>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3314      	adds	r3, #20
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	4911      	ldr	r1, [pc, #68]	; (800169c <LinkTimerAfter+0x88>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3315      	adds	r3, #21
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <LinkTimerAfter+0x88>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3314      	adds	r3, #20
 8001676:	79ba      	ldrb	r2, [r7, #6]
 8001678:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800167a:	79ba      	ldrb	r2, [r7, #6]
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <LinkTimerAfter+0x88>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3315      	adds	r3, #21
 800168a:	79fa      	ldrb	r2, [r7, #7]
 800168c:	701a      	strb	r2, [r3, #0]

  return;
 800168e:	bf00      	nop
}
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000084 	.word	0x20000084

080016a0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	460a      	mov	r2, r1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <LinkTimerBefore+0xb8>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	79ba      	ldrb	r2, [r7, #6]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d032      	beq.n	8001722 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80016bc:	79ba      	ldrb	r2, [r7, #6]
 80016be:	4927      	ldr	r1, [pc, #156]	; (800175c <LinkTimerBefore+0xbc>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3314      	adds	r3, #20
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	4922      	ldr	r1, [pc, #136]	; (800175c <LinkTimerBefore+0xbc>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3315      	adds	r3, #21
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	491d      	ldr	r1, [pc, #116]	; (800175c <LinkTimerBefore+0xbc>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3315      	adds	r3, #21
 80016f4:	79ba      	ldrb	r2, [r7, #6]
 80016f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	4918      	ldr	r1, [pc, #96]	; (800175c <LinkTimerBefore+0xbc>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3314      	adds	r3, #20
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800170c:	79ba      	ldrb	r2, [r7, #6]
 800170e:	4913      	ldr	r1, [pc, #76]	; (800175c <LinkTimerBefore+0xbc>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3314      	adds	r3, #20
 800171c:	79fa      	ldrb	r2, [r7, #7]
 800171e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001720:	e014      	b.n	800174c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	490d      	ldr	r1, [pc, #52]	; (800175c <LinkTimerBefore+0xbc>)
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3315      	adds	r3, #21
 8001732:	79ba      	ldrb	r2, [r7, #6]
 8001734:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	4908      	ldr	r1, [pc, #32]	; (800175c <LinkTimerBefore+0xbc>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3314      	adds	r3, #20
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	701a      	strb	r2, [r3, #0]
  return;
 800174a:	bf00      	nop
}
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000114 	.word	0x20000114
 800175c:	20000084 	.word	0x20000084

08001760 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <linkTimer+0x144>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b06      	cmp	r3, #6
 8001772:	d118      	bne.n	80017a6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <linkTimer+0x144>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <linkTimer+0x148>)
 800177c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800177e:	4a49      	ldr	r2, [pc, #292]	; (80018a4 <linkTimer+0x144>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	4949      	ldr	r1, [pc, #292]	; (80018ac <linkTimer+0x14c>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3315      	adds	r3, #21
 8001794:	2206      	movs	r2, #6
 8001796:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001798:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <linkTimer+0x150>)
 800179a:	f04f 32ff 	mov.w	r2, #4294967295
 800179e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	81fb      	strh	r3, [r7, #14]
 80017a4:	e078      	b.n	8001898 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80017a6:	f000 f909 	bl	80019bc <ReturnTimeElapsed>
 80017aa:	4603      	mov	r3, r0
 80017ac:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	493e      	ldr	r1, [pc, #248]	; (80018ac <linkTimer+0x14c>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	3308      	adds	r3, #8
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4419      	add	r1, r3
 80017c6:	4839      	ldr	r0, [pc, #228]	; (80018ac <linkTimer+0x14c>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4403      	add	r3, r0
 80017d2:	3308      	adds	r3, #8
 80017d4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	4934      	ldr	r1, [pc, #208]	; (80018ac <linkTimer+0x14c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3308      	adds	r3, #8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <linkTimer+0x144>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	4a2e      	ldr	r2, [pc, #184]	; (80018ac <linkTimer+0x14c>)
 80017f4:	460b      	mov	r3, r1
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	440b      	add	r3, r1
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	3308      	adds	r3, #8
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d337      	bcc.n	8001878 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <linkTimer+0x144>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800180e:	7b7a      	ldrb	r2, [r7, #13]
 8001810:	4926      	ldr	r1, [pc, #152]	; (80018ac <linkTimer+0x14c>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3315      	adds	r3, #21
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001822:	e013      	b.n	800184c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001824:	7b7a      	ldrb	r2, [r7, #13]
 8001826:	4921      	ldr	r1, [pc, #132]	; (80018ac <linkTimer+0x14c>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3315      	adds	r3, #21
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001838:	7b7a      	ldrb	r2, [r7, #13]
 800183a:	491c      	ldr	r1, [pc, #112]	; (80018ac <linkTimer+0x14c>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3315      	adds	r3, #21
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800184c:	7b3b      	ldrb	r3, [r7, #12]
 800184e:	2b06      	cmp	r3, #6
 8001850:	d00b      	beq.n	800186a <linkTimer+0x10a>
 8001852:	7b3a      	ldrb	r2, [r7, #12]
 8001854:	4915      	ldr	r1, [pc, #84]	; (80018ac <linkTimer+0x14c>)
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3308      	adds	r3, #8
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	d2dc      	bcs.n	8001824 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800186a:	7b7a      	ldrb	r2, [r7, #13]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fecf 	bl	8001614 <LinkTimerAfter>
 8001876:	e00f      	b.n	8001898 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <linkTimer+0x144>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff0c 	bl	80016a0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <linkTimer+0x144>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <linkTimer+0x148>)
 8001890:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <linkTimer+0x144>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001898:	89fb      	ldrh	r3, [r7, #14]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000114 	.word	0x20000114
 80018a8:	20000115 	.word	0x20000115
 80018ac:	20000084 	.word	0x20000084
 80018b0:	20000118 	.word	0x20000118

080018b4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	4613      	mov	r3, r2
 80018c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <UnlinkTimer+0xf8>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d111      	bne.n	80018f4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <UnlinkTimer+0xf8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <UnlinkTimer+0xfc>)
 80018d8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	4935      	ldr	r1, [pc, #212]	; (80019b4 <UnlinkTimer+0x100>)
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	3315      	adds	r3, #21
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <UnlinkTimer+0xf8>)
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e03e      	b.n	8001972 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80018f4:	79fa      	ldrb	r2, [r7, #7]
 80018f6:	492f      	ldr	r1, [pc, #188]	; (80019b4 <UnlinkTimer+0x100>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3314      	adds	r3, #20
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	492a      	ldr	r1, [pc, #168]	; (80019b4 <UnlinkTimer+0x100>)
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3315      	adds	r3, #21
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800191c:	79f9      	ldrb	r1, [r7, #7]
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	4824      	ldr	r0, [pc, #144]	; (80019b4 <UnlinkTimer+0x100>)
 8001922:	460b      	mov	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	440b      	add	r3, r1
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4403      	add	r3, r0
 800192c:	3315      	adds	r3, #21
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2d8      	uxtb	r0, r3
 8001932:	4920      	ldr	r1, [pc, #128]	; (80019b4 <UnlinkTimer+0x100>)
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	3315      	adds	r3, #21
 8001940:	4602      	mov	r2, r0
 8001942:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	2b06      	cmp	r3, #6
 8001948:	d013      	beq.n	8001972 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800194a:	79f9      	ldrb	r1, [r7, #7]
 800194c:	7bba      	ldrb	r2, [r7, #14]
 800194e:	4819      	ldr	r0, [pc, #100]	; (80019b4 <UnlinkTimer+0x100>)
 8001950:	460b      	mov	r3, r1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	440b      	add	r3, r1
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4403      	add	r3, r0
 800195a:	3314      	adds	r3, #20
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2d8      	uxtb	r0, r3
 8001960:	4914      	ldr	r1, [pc, #80]	; (80019b4 <UnlinkTimer+0x100>)
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	3314      	adds	r3, #20
 800196e:	4602      	mov	r2, r0
 8001970:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001972:	79fa      	ldrb	r2, [r7, #7]
 8001974:	490f      	ldr	r1, [pc, #60]	; (80019b4 <UnlinkTimer+0x100>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	330c      	adds	r3, #12
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <UnlinkTimer+0xf8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b06      	cmp	r3, #6
 800198e:	d107      	bne.n	80019a0 <UnlinkTimer+0xec>
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d104      	bne.n	80019a0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <UnlinkTimer+0x104>)
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	601a      	str	r2, [r3, #0]
  }

  return;
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
}
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	20000114 	.word	0x20000114
 80019b0:	20000115 	.word	0x20000115
 80019b4:	20000084 	.word	0x20000084
 80019b8:	20000118 	.word	0x20000118

080019bc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <ReturnTimeElapsed+0x70>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ca:	d026      	beq.n	8001a1a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80019cc:	f7ff fe02 	bl	80015d4 <ReadRtcSsrValue>
 80019d0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <ReturnTimeElapsed+0x70>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d805      	bhi.n	80019e8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <ReturnTimeElapsed+0x70>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	e00a      	b.n	80019fe <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <ReturnTimeElapsed+0x74>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <ReturnTimeElapsed+0x70>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <ReturnTimeElapsed+0x78>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <ReturnTimeElapsed+0x7c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	40d3      	lsrs	r3, r2
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	b29b      	uxth	r3, r3
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000118 	.word	0x20000118
 8001a30:	20000120 	.word	0x20000120
 8001a34:	2000011e 	.word	0x2000011e
 8001a38:	2000011d 	.word	0x2000011d

08001a3c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a4c:	f7ff fdc2 	bl	80015d4 <ReadRtcSsrValue>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <RestartWakeupCounter+0x9c>)
 8001a54:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a56:	2003      	movs	r0, #3
 8001a58:	f001 fc41 	bl	80032de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a5c:	e039      	b.n	8001ad2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d803      	bhi.n	8001a6c <RestartWakeupCounter+0x30>
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <RestartWakeupCounter+0xa0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d002      	beq.n	8001a72 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a72:	bf00      	nop
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <RestartWakeupCounter+0xa4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f8      	beq.n	8001a74 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <RestartWakeupCounter+0xa4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <RestartWakeupCounter+0xa4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a92:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <RestartWakeupCounter+0xa8>)
 8001a96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a9a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f001 fc2c 	bl	80032fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <RestartWakeupCounter+0xac>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <RestartWakeupCounter+0xac>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ab2:	f7ff fd8f 	bl	80015d4 <ReadRtcSsrValue>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <RestartWakeupCounter+0x9c>)
 8001aba:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <RestartWakeupCounter+0xa4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <RestartWakeupCounter+0xa4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aca:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001acc:	f3af 8000 	nop.w
  return ;
 8001ad0:	bf00      	nop
}
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000118 	.word	0x20000118
 8001adc:	2000011d 	.word	0x2000011d
 8001ae0:	20000350 	.word	0x20000350
 8001ae4:	58000800 	.word	0x58000800
 8001ae8:	40002800 	.word	0x40002800

08001aec <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001af2:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <RescheduleTimerList+0x11c>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d107      	bne.n	8001b10 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b00:	bf00      	nop
 8001b02:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <RescheduleTimerList+0x120>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f8      	bne.n	8001b02 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b10:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <RescheduleTimerList+0x120>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <RescheduleTimerList+0x120>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <RescheduleTimerList+0x124>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	493a      	ldr	r1, [pc, #232]	; (8001c14 <RescheduleTimerList+0x128>)
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3308      	adds	r3, #8
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001b3a:	f7ff ff3f 	bl	80019bc <ReturnTimeElapsed>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d205      	bcs.n	8001b56 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b4e:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <RescheduleTimerList+0x12c>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e04d      	b.n	8001bf2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <RescheduleTimerList+0x130>)
 8001b5a:	8812      	ldrh	r2, [r2, #0]
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	4413      	add	r3, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d906      	bls.n	8001b76 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <RescheduleTimerList+0x130>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <RescheduleTimerList+0x12c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e03d      	b.n	8001bf2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <RescheduleTimerList+0x12c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b86:	e034      	b.n	8001bf2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	4922      	ldr	r1, [pc, #136]	; (8001c14 <RescheduleTimerList+0x128>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3308      	adds	r3, #8
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d20a      	bcs.n	8001bb6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	491c      	ldr	r1, [pc, #112]	; (8001c14 <RescheduleTimerList+0x128>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3308      	adds	r3, #8
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e013      	b.n	8001bde <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <RescheduleTimerList+0x128>)
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3308      	adds	r3, #8
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	1ac9      	subs	r1, r1, r3
 8001bce:	4811      	ldr	r0, [pc, #68]	; (8001c14 <RescheduleTimerList+0x128>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4403      	add	r3, r0
 8001bda:	3308      	adds	r3, #8
 8001bdc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <RescheduleTimerList+0x128>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3315      	adds	r3, #21
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d1c7      	bne.n	8001b88 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001bf8:	89bb      	ldrh	r3, [r7, #12]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff1e 	bl	8001a3c <RestartWakeupCounter>

  return ;
 8001c00:	bf00      	nop
}
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40002800 	.word	0x40002800
 8001c0c:	20000350 	.word	0x20000350
 8001c10:	20000114 	.word	0x20000114
 8001c14:	20000084 	.word	0x20000084
 8001c18:	2000011c 	.word	0x2000011c
 8001c1c:	20000122 	.word	0x20000122

08001c20 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c26:	f3ef 8310 	mrs	r3, PRIMASK
 8001c2a:	617b      	str	r3, [r7, #20]
  return(result);
 8001c2c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	22ca      	movs	r2, #202	; 0xca
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2253      	movs	r2, #83	; 0x53
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001c44:	4b55      	ldr	r3, [pc, #340]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c52:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c54:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c5c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c60:	4950      	ldr	r1, [pc, #320]	; (8001da4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d16e      	bne.n	8001d54 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c7a:	494a      	ldr	r1, [pc, #296]	; (8001da4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c8a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c8e:	4945      	ldr	r1, [pc, #276]	; (8001da4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3310      	adds	r3, #16
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d04c      	beq.n	8001d44 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001caa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001cae:	493d      	ldr	r1, [pc, #244]	; (8001da4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	330d      	adds	r3, #13
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d124      	bne.n	8001d0e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fdf2 	bl	80018b4 <UnlinkTimer>
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f383 8810 	msr	PRIMASK, r3
}
 8001cda:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001cdc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ce0:	4930      	ldr	r1, [pc, #192]	; (8001da4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	3304      	adds	r3, #4
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fa32 	bl	8002160 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	22ca      	movs	r2, #202	; 0xca
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2253      	movs	r2, #83	; 0x53
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d0c:	e012      	b.n	8001d34 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f383 8810 	msr	PRIMASK, r3
}
 8001d18:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f99a 	bl	8002058 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	22ca      	movs	r2, #202	; 0xca
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2253      	movs	r2, #83	; 0x53
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	69b8      	ldr	r0, [r7, #24]
 8001d3e:	f000 fa95 	bl	800226c <HW_TS_RTC_Int_AppNot>
 8001d42:	e022      	b.n	8001d8a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001d44:	f7ff fed2 	bl	8001aec <RescheduleTimerList>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f383 8810 	msr	PRIMASK, r3
}
 8001d52:	e01a      	b.n	8001d8a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d54:	bf00      	nop
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f8      	beq.n	8001d56 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d74:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f383 8810 	msr	PRIMASK, r3
}
 8001d88:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	22ff      	movs	r2, #255	; 0xff
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001d92:	bf00      	nop
}
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000350 	.word	0x20000350
 8001da0:	20000114 	.word	0x20000114
 8001da4:	20000084 	.word	0x20000084
 8001da8:	2000011c 	.word	0x2000011c
 8001dac:	58000800 	.word	0x58000800

08001db0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dbc:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <HW_TS_Init+0x188>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	22ca      	movs	r2, #202	; 0xca
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
 8001dc4:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HW_TS_Init+0x188>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2253      	movs	r2, #83	; 0x53
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001dcc:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HW_TS_Init+0x18c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a5a      	ldr	r2, [pc, #360]	; (8001f3c <HW_TS_Init+0x18c>)
 8001dd2:	f043 0320 	orr.w	r3, r3, #32
 8001dd6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001dd8:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HW_TS_Init+0x18c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f1c3 0304 	rsb	r3, r3, #4
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b55      	ldr	r3, [pc, #340]	; (8001f40 <HW_TS_Init+0x190>)
 8001dec:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001dee:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HW_TS_Init+0x18c>)
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001df6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001dfa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	fa92 f2a2 	rbit	r2, r2
 8001e02:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d101      	bne.n	8001e12 <HW_TS_Init+0x62>
  {
    return 32U;
 8001e0e:	2220      	movs	r2, #32
 8001e10:	e003      	b.n	8001e1a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	fab2 f282 	clz	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	40d3      	lsrs	r3, r2
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b48      	ldr	r3, [pc, #288]	; (8001f44 <HW_TS_Init+0x194>)
 8001e24:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001e26:	4b45      	ldr	r3, [pc, #276]	; (8001f3c <HW_TS_Init+0x18c>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HW_TS_Init+0x198>)
 8001e38:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HW_TS_Init+0x198>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	4a40      	ldr	r2, [pc, #256]	; (8001f44 <HW_TS_Init+0x194>)
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HW_TS_Init+0x190>)
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	40d3      	lsrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d904      	bls.n	8001e68 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HW_TS_Init+0x19c>)
 8001e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	e003      	b.n	8001e70 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HW_TS_Init+0x19c>)
 8001e6e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e74:	f7ff fb9c 	bl	80015b0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e7c:	f7ff fb84 	bl	8001588 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d13d      	bne.n	8001f02 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <HW_TS_Init+0x1a0>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <HW_TS_Init+0x1a4>)
 8001e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e92:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	77fb      	strb	r3, [r7, #31]
 8001e98:	e00c      	b.n	8001eb4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001e9a:	7ffa      	ldrb	r2, [r7, #31]
 8001e9c:	492e      	ldr	r1, [pc, #184]	; (8001f58 <HW_TS_Init+0x1a8>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	77fb      	strb	r3, [r7, #31]
 8001eb4:	7ffb      	ldrb	r3, [r7, #31]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d9ef      	bls.n	8001e9a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001eba:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HW_TS_Init+0x1ac>)
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HW_TS_Init+0x188>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HW_TS_Init+0x188>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ece:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HW_TS_Init+0x188>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HW_TS_Init+0x188>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ee0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HW_TS_Init+0x1b0>)
 8001ee4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ee8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001eea:	2003      	movs	r0, #3
 8001eec:	f001 fa05 	bl	80032fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HW_TS_Init+0x188>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HW_TS_Init+0x188>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e009      	b.n	8001f16 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HW_TS_Init+0x188>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f001 f9e4 	bl	80032de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HW_TS_Init+0x188>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2103      	movs	r1, #3
 8001f22:	2003      	movs	r0, #3
 8001f24:	f001 f995 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f001 f9ac 	bl	8003286 <HAL_NVIC_EnableIRQ>

  return;
 8001f2e:	bf00      	nop
}
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000350 	.word	0x20000350
 8001f3c:	40002800 	.word	0x40002800
 8001f40:	2000011d 	.word	0x2000011d
 8001f44:	2000011e 	.word	0x2000011e
 8001f48:	20000120 	.word	0x20000120
 8001f4c:	20000122 	.word	0x20000122
 8001f50:	2000011c 	.word	0x2000011c
 8001f54:	20000118 	.word	0x20000118
 8001f58:	20000084 	.word	0x20000084
 8001f5c:	20000114 	.word	0x20000114
 8001f60:	58000800 	.word	0x58000800

08001f64 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f80:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f88:	e004      	b.n	8001f94 <HW_TS_Create+0x30>
  {
    loop++;
 8001f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d80c      	bhi.n	8001fb6 <HW_TS_Create+0x52>
 8001f9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fa0:	492c      	ldr	r1, [pc, #176]	; (8002054 <HW_TS_Create+0xf0>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	330c      	adds	r3, #12
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e9      	bne.n	8001f8a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d038      	beq.n	8002030 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001fbe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fc2:	4924      	ldr	r1, [pc, #144]	; (8002054 <HW_TS_Create+0xf0>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	330c      	adds	r3, #12
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f383 8810 	msr	PRIMASK, r3
}
 8001fde:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001fe0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fe4:	491b      	ldr	r1, [pc, #108]	; (8002054 <HW_TS_Create+0xf0>)
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001ff6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ffa:	4916      	ldr	r1, [pc, #88]	; (8002054 <HW_TS_Create+0xf0>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	330d      	adds	r3, #13
 8002008:	79fa      	ldrb	r2, [r7, #7]
 800200a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800200c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002010:	4910      	ldr	r1, [pc, #64]	; (8002054 <HW_TS_Create+0xf0>)
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002026:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800202e:	e008      	b.n	8002042 <HW_TS_Create+0xde>
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f383 8810 	msr	PRIMASK, r3
}
 800203a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002046:	4618      	mov	r0, r3
 8002048:	372c      	adds	r7, #44	; 0x2c
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000084 	.word	0x20000084

08002058 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002062:	f3ef 8310 	mrs	r3, PRIMASK
 8002066:	60fb      	str	r3, [r7, #12]
  return(result);
 8002068:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800206a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002070:	2003      	movs	r0, #3
 8002072:	f001 f916 	bl	80032a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HW_TS_Stop+0xf0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	22ca      	movs	r2, #202	; 0xca
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HW_TS_Stop+0xf0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2253      	movs	r2, #83	; 0x53
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002086:	79fa      	ldrb	r2, [r7, #7]
 8002088:	4930      	ldr	r1, [pc, #192]	; (800214c <HW_TS_Stop+0xf4>)
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	330c      	adds	r3, #12
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d142      	bne.n	8002124 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc06 	bl	80018b4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HW_TS_Stop+0xf8>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b06      	cmp	r3, #6
 80020b2:	d12f      	bne.n	8002114 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HW_TS_Stop+0xfc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	d107      	bne.n	80020d2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020c2:	bf00      	nop
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HW_TS_Stop+0xf0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f8      	bne.n	80020c4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HW_TS_Stop+0xf0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HW_TS_Stop+0xf0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80020e2:	bf00      	nop
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HW_TS_Stop+0xf0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f8      	beq.n	80020e4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HW_TS_Stop+0xf0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HW_TS_Stop+0xf0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002102:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HW_TS_Stop+0x100>)
 8002106:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800210a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800210c:	2003      	movs	r0, #3
 800210e:	f001 f8f4 	bl	80032fa <HAL_NVIC_ClearPendingIRQ>
 8002112:	e007      	b.n	8002124 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HW_TS_Stop+0x104>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	7cfa      	ldrb	r2, [r7, #19]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002120:	f7ff fce4 	bl	8001aec <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HW_TS_Stop+0xf0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	22ff      	movs	r2, #255	; 0xff
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800212c:	2003      	movs	r0, #3
 800212e:	f001 f8aa 	bl	8003286 <HAL_NVIC_EnableIRQ>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f383 8810 	msr	PRIMASK, r3
}
 800213c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800213e:	bf00      	nop
}
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000350 	.word	0x20000350
 800214c:	20000084 	.word	0x20000084
 8002150:	20000114 	.word	0x20000114
 8002154:	40002800 	.word	0x40002800
 8002158:	58000800 	.word	0x58000800
 800215c:	20000115 	.word	0x20000115

08002160 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800216c:	79fa      	ldrb	r2, [r7, #7]
 800216e:	493b      	ldr	r1, [pc, #236]	; (800225c <HW_TS_Start+0xfc>)
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	330c      	adds	r3, #12
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d103      	bne.n	800218c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff66 	bl	8002058 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218c:	f3ef 8310 	mrs	r3, PRIMASK
 8002190:	60fb      	str	r3, [r7, #12]
  return(result);
 8002192:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002196:	b672      	cpsid	i
}
 8002198:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800219a:	2003      	movs	r0, #3
 800219c:	f001 f881 	bl	80032a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HW_TS_Start+0x100>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	22ca      	movs	r2, #202	; 0xca
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HW_TS_Start+0x100>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2253      	movs	r2, #83	; 0x53
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	492a      	ldr	r1, [pc, #168]	; (800225c <HW_TS_Start+0xfc>)
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	330c      	adds	r3, #12
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	4925      	ldr	r1, [pc, #148]	; (800225c <HW_TS_Start+0xfc>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3308      	adds	r3, #8
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4920      	ldr	r1, [pc, #128]	; (800225c <HW_TS_Start+0xfc>)
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	3304      	adds	r3, #4
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fab6 	bl	8001760 <linkTimer>
 80021f4:	4603      	mov	r3, r0
 80021f6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HW_TS_Start+0x104>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HW_TS_Start+0x108>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	7c7a      	ldrb	r2, [r7, #17]
 8002206:	429a      	cmp	r2, r3
 8002208:	d002      	beq.n	8002210 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800220a:	f7ff fc6f 	bl	8001aec <RescheduleTimerList>
 800220e:	e013      	b.n	8002238 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002210:	79fa      	ldrb	r2, [r7, #7]
 8002212:	4912      	ldr	r1, [pc, #72]	; (800225c <HW_TS_Start+0xfc>)
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	3308      	adds	r3, #8
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	8a7b      	ldrh	r3, [r7, #18]
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	1ac9      	subs	r1, r1, r3
 8002228:	480c      	ldr	r0, [pc, #48]	; (800225c <HW_TS_Start+0xfc>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4403      	add	r3, r0
 8002234:	3308      	adds	r3, #8
 8002236:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HW_TS_Start+0x100>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	22ff      	movs	r2, #255	; 0xff
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002240:	2003      	movs	r0, #3
 8002242:	f001 f820 	bl	8003286 <HAL_NVIC_EnableIRQ>
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f383 8810 	msr	PRIMASK, r3
}
 8002250:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002252:	bf00      	nop
}
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000084 	.word	0x20000084
 8002260:	20000350 	.word	0x20000350
 8002264:	20000114 	.word	0x20000114
 8002268:	20000115 	.word	0x20000115

0800226c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	460b      	mov	r3, r1
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4798      	blx	r3

  return;
 800227e:	bf00      	nop
}
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	4613      	mov	r3, r2
 8002298:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HW_UART_Transmit_IT+0x1e>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d00d      	beq.n	80022c0 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80022a4:	e019      	b.n	80022da <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HW_UART_Transmit_IT+0x5c>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HW_UART_Transmit_IT+0x60>)
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <HW_UART_Transmit_IT+0x64>)
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	89bb      	ldrh	r3, [r7, #12]
 80022b4:	461a      	mov	r2, r3
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	480b      	ldr	r0, [pc, #44]	; (80022e8 <HW_UART_Transmit_IT+0x60>)
 80022ba:	f003 fc4b 	bl	8005b54 <HAL_UART_Transmit_IT>
            break;
 80022be:	e00c      	b.n	80022da <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HW_UART_Transmit_IT+0x68>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HW_UART_Transmit_IT+0x6c>)
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <HW_UART_Transmit_IT+0x70>)
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	89bb      	ldrh	r3, [r7, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	4808      	ldr	r0, [pc, #32]	; (80022f4 <HW_UART_Transmit_IT+0x6c>)
 80022d4:	f003 fc3e 	bl	8005b54 <HAL_UART_Transmit_IT>
            break;
 80022d8:	bf00      	nop
    }

    return;
 80022da:	bf00      	nop
}
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000124 	.word	0x20000124
 80022e8:	200001fc 	.word	0x200001fc
 80022ec:	40013800 	.word	0x40013800
 80022f0:	20000128 	.word	0x20000128
 80022f4:	20000168 	.word	0x20000168
 80022f8:	40008000 	.word	0x40008000

080022fc <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_UART_TxCpltCallback+0x4c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00a      	beq.n	8002324 <HAL_UART_TxCpltCallback+0x28>
 800230e:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_UART_TxCpltCallback+0x50>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d10f      	bne.n	8002334 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_UART_TxCpltCallback+0x54>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_UART_TxCpltCallback+0x54>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4798      	blx	r3
            }
            break;
 8002322:	e009      	b.n	8002338 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_UART_TxCpltCallback+0x58>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_UART_TxCpltCallback+0x58>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4798      	blx	r3
            }
            break;
 8002332:	e003      	b.n	800233c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002334:	bf00      	nop
 8002336:	e002      	b.n	800233e <HAL_UART_TxCpltCallback+0x42>
            break;
 8002338:	bf00      	nop
 800233a:	e000      	b.n	800233e <HAL_UART_TxCpltCallback+0x42>
            break;
 800233c:	bf00      	nop
    }

    return;
 800233e:	bf00      	nop
}
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40008000 	.word	0x40008000
 800234c:	40013800 	.word	0x40013800
 8002350:	20000124 	.word	0x20000124
 8002354:	20000128 	.word	0x20000128

08002358 <LL_RCC_LSE_SetDriveCapability>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f023 0218 	bic.w	r2, r3, #24
 800236c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_AHB1_GRP1_EnableClock>:
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4313      	orrs	r3, r2
 800239a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_AHB2_GRP1_EnableClock>:
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_AHB2_GRP1_DisableClock>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023fe:	4013      	ands	r3, r2
 8002400:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002416:	f000 fd25 	bl	8002e64 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800241a:	f7fe ff1f 	bl	800125c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800241e:	f000 f83b 	bl	8002498 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002422:	f000 f895 	bl	8002550 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002426:	f000 f8af 	bl	8002588 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800242a:	f000 f917 	bl	800265c <MX_GPIO_Init>
  MX_DMA_Init();
 800242e:	f000 f8fb 	bl	8002628 <MX_DMA_Init>
  MX_RF_Init();
 8002432:	f000 f8bd 	bl	80025b0 <MX_RF_Init>
  MX_RTC_Init();
 8002436:	f000 f8c3 	bl	80025c0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800243a:	f7fe ff1d 	bl	8001278 <MX_APPE_Init>


  GPIO_InitTypeDef gpio_config = {0};
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]

   gpio_config.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
   gpio_config.Mode = GPIO_MODE_ANALOG;
 8002450:	2303      	movs	r3, #3
 8002452:	60bb      	str	r3, [r7, #8]

   gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002458:	607b      	str	r3, [r7, #4]

   __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2002      	movs	r0, #2
 800245c:	f7ff ffab 	bl	80023b6 <LL_AHB2_GRP1_EnableClock>
   HAL_GPIO_Init(GPIOB, &gpio_config);
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	4619      	mov	r1, r3
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <main+0x80>)
 8002466:	f001 f981 	bl	800376c <HAL_GPIO_Init>
   __HAL_RCC_GPIOB_CLK_DISABLE();
 800246a:	2002      	movs	r0, #2
 800246c:	f7ff ffbc 	bl	80023e8 <LL_AHB2_GRP1_DisableClock>
   gpio_config.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8002470:	230f      	movs	r3, #15
 8002472:	607b      	str	r3, [r7, #4]
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8002474:	2004      	movs	r0, #4
 8002476:	f7ff ff9e 	bl	80023b6 <LL_AHB2_GRP1_EnableClock>
   HAL_GPIO_Init(GPIOC, &gpio_config);
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <main+0x84>)
 8002480:	f001 f974 	bl	800376c <HAL_GPIO_Init>
   __HAL_RCC_GPIOC_CLK_DISABLE();
 8002484:	2004      	movs	r0, #4
 8002486:	f7ff ffaf 	bl	80023e8 <LL_AHB2_GRP1_DisableClock>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800248a:	f7fe fff7 	bl	800147c <MX_APPE_Process>
 800248e:	e7fc      	b.n	800248a <main+0x7a>
 8002490:	48000400 	.word	0x48000400
 8002494:	48000800 	.word	0x48000800

08002498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b09a      	sub	sp, #104	; 0x68
 800249c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	2248      	movs	r2, #72	; 0x48
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 fba8 	bl	8008bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	615a      	str	r2, [r3, #20]
 80024bc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024be:	f001 fb87 	bl	8003bd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7ff ff48 	bl	8002358 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <SystemClock_Config+0xb4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d0:	4a1e      	ldr	r2, [pc, #120]	; (800254c <SystemClock_Config+0xb4>)
 80024d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <SystemClock_Config+0xb4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80024e4:	2307      	movs	r3, #7
 80024e6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024ee:	2301      	movs	r3, #1
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f8:	2340      	movs	r3, #64	; 0x40
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002500:	f107 0320 	add.w	r3, r7, #32
 8002504:	4618      	mov	r0, r3
 8002506:	f001 ff5d 	bl	80043c4 <HAL_RCC_OscConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002510:	f000 f8b1 	bl	8002676 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002514:	236f      	movs	r3, #111	; 0x6f
 8002516:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002518:	2302      	movs	r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f002 fab9 	bl	8004aac <HAL_RCC_ClockConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002540:	f000 f899 	bl	8002676 <Error_Handler>
  }
}
 8002544:	bf00      	nop
 8002546:	3768      	adds	r7, #104	; 0x68
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	58000400 	.word	0x58000400

08002550 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b094      	sub	sp, #80	; 0x50
 8002554:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002556:	463b      	mov	r3, r7
 8002558:	2250      	movs	r2, #80	; 0x50
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f006 fb4d 	bl	8008bfc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 8002562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002566:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800256c:	647b      	str	r3, [r7, #68]	; 0x44
  //PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 // PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256e:	463b      	mov	r3, r7
 8002570:	4618      	mov	r0, r3
 8002572:	f002 feac 	bl	80052ce <HAL_RCCEx_PeriphCLKConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 800257c:	f000 f87b 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002580:	bf00      	nop
 8002582:	3750      	adds	r7, #80	; 0x50
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_IPCC_Init+0x20>)
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <MX_IPCC_Init+0x24>)
 8002590:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_IPCC_Init+0x20>)
 8002594:	f001 fa96 	bl	8003ac4 <HAL_IPCC_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800259e:	f000 f86a 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000012c 	.word	0x2000012c
 80025ac:	58000c00 	.word	0x58000c00

080025b0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <MX_RTC_Init+0x60>)
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <MX_RTC_Init+0x64>)
 80025c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_RTC_Init+0x60>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <MX_RTC_Init+0x60>)
 80025d2:	220f      	movs	r2, #15
 80025d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <MX_RTC_Init+0x60>)
 80025d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80025dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_RTC_Init+0x60>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_RTC_Init+0x60>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <MX_RTC_Init+0x60>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MX_RTC_Init+0x60>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025f6:	480a      	ldr	r0, [pc, #40]	; (8002620 <MX_RTC_Init+0x60>)
 80025f8:	f003 f8f0 	bl	80057dc <HAL_RTC_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002602:	f000 f838 	bl	8002676 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_RTC_Init+0x60>)
 800260c:	f003 f9e6 	bl	80059dc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002616:	f000 f82e 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000350 	.word	0x20000350
 8002624:	40002800 	.word	0x40002800

08002628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800262c:	2004      	movs	r0, #4
 800262e:	f7ff fea9 	bl	8002384 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fea6 	bl	8002384 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	200b      	movs	r0, #11
 800263e:	f000 fe08 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002642:	200b      	movs	r0, #11
 8002644:	f000 fe1f 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	200c      	movs	r0, #12
 800264e:	f000 fe00 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002652:	200c      	movs	r0, #12
 8002654:	f000 fe17 	bl	8003286 <HAL_NVIC_EnableIRQ>

}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}

0800265c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002660:	2004      	movs	r0, #4
 8002662:	f7ff fea8 	bl	80023b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	2001      	movs	r0, #1
 8002668:	f7ff fea5 	bl	80023b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266c:	2002      	movs	r0, #2
 800266e:	f7ff fea2 	bl	80023b6 <LL_AHB2_GRP1_EnableClock>

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}

08002676 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_PWR_SetPowerMode>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <LL_PWR_SetPowerMode+0x24>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 0207 	bic.w	r2, r3, #7
 8002694:	4904      	ldr	r1, [pc, #16]	; (80026a8 <LL_PWR_SetPowerMode+0x24>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	58000400 	.word	0x58000400

080026ac <LL_C2_PWR_SetPowerMode>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80026b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4905      	ldr	r1, [pc, #20]	; (80026d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	58000400 	.word	0x58000400

080026d8 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <LL_PWR_ClearFlag_WU+0x14>)
 80026de:	221f      	movs	r2, #31
 80026e0:	619a      	str	r2, [r3, #24]
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	58000400 	.word	0x58000400

080026f0 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	d101      	bne.n	8002708 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	58000400 	.word	0x58000400

08002718 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <LL_PWR_IsActiveFlag_C2DS+0x24>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272a:	d101      	bne.n	8002730 <LL_PWR_IsActiveFlag_C2DS+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58000400 	.word	0x58000400

08002740 <LL_RCC_HSE_Enable>:
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_RCC_HSE_IsReady>:
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002770:	d101      	bne.n	8002776 <LL_RCC_HSE_IsReady+0x18>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <LL_RCC_HSE_IsReady+0x1a>
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_RCC_HSI_Enable>:
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_RCC_HSI_IsReady>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d101      	bne.n	80027b8 <LL_RCC_HSI_IsReady+0x18>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_RCC_HSI_IsReady+0x1a>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_SetSysClkSource>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_RCC_GetSysClkSource>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f023 0203 	bic.w	r2, r3, #3
 8002816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4313      	orrs	r3, r2
 800281e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <LL_LPM_EnableSleep+0x1c>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <LL_LPM_EnableSleep+0x1c>)
 8002836:	f023 0304 	bic.w	r3, r3, #4
 800283a:	6113      	str	r3, [r2, #16]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <LL_LPM_EnableDeepSleep+0x1c>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <LL_LPM_EnableDeepSleep+0x1c>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	6113      	str	r3, [r2, #16]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	3220      	adds	r2, #32
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	4a05      	ldr	r2, [pc, #20]	; (8002898 <LL_HSEM_1StepLock+0x2c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d001      	beq.n	800288a <LL_HSEM_1StepLock+0x1e>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_HSEM_1StepLock+0x20>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	80000400 	.word	0x80000400

0800289c <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 80028c6:	f000 fb53 	bl	8002f70 <HAL_SuspendTick>

  EnterLowPower();
 80028ca:	f000 f839 	bl	8002940 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 80028ce:	f7ff ff03 	bl	80026d8 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f7ff fed6 	bl	8002684 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80028d8:	f7ff ffb8 	bl	800284c <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80028dc:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 80028de:	bf00      	nop
}
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 80028e6:	f000 fb53 	bl	8002f90 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 80028ea:	bf00      	nop
}
 80028ec:	bd80      	pop	{r7, pc}

080028ee <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 80028f2:	f000 fb3d 	bl	8002f70 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 80028f6:	f000 f823 	bl	8002940 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/

  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 80028fa:	2002      	movs	r0, #2
 80028fc:	f7ff fec2 	bl	8002684 <LL_PWR_SetPowerMode>

  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002900:	2004      	movs	r0, #4
 8002902:	f7ff fed3 	bl	80026ac <LL_C2_PWR_SetPowerMode>
  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002906:	f7ff ffa1 	bl	800284c <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800290a:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 800290c:	bf00      	nop
}
 800290e:	bd80      	pop	{r7, pc}

08002910 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8002914:	f000 f850 	bl	80029b8 <ExitLowPower>

  HAL_ResumeTick();
 8002918:	f000 fb3a 	bl	8002f90 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 800291c:	bf00      	nop
}
 800291e:	bd80      	pop	{r7, pc}

08002920 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8002924:	f000 fb24 	bl	8002f70 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002928:	f7ff ff80 	bl	800282c <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800292c:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 800292e:	bf00      	nop
}
 8002930:	bd80      	pop	{r7, pc}

08002932 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8002936:	f000 fb2b 	bl	8002f90 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800293a:	bf00      	nop
}
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002944:	bf00      	nop
 8002946:	2103      	movs	r1, #3
 8002948:	4819      	ldr	r0, [pc, #100]	; (80029b0 <EnterLowPower+0x70>)
 800294a:	f7ff ff8f 	bl	800286c <LL_HSEM_1StepLock>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f8      	bne.n	8002946 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8002954:	2104      	movs	r1, #4
 8002956:	4816      	ldr	r0, [pc, #88]	; (80029b0 <EnterLowPower+0x70>)
 8002958:	f7ff ff88 	bl	800286c <LL_HSEM_1StepLock>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d117      	bne.n	8002992 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8002962:	f7ff fed9 	bl	8002718 <LL_PWR_IsActiveFlag_C2DS>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <EnterLowPower+0x36>
 800296c:	f7ff fec0 	bl	80026f0 <LL_PWR_IsActiveFlag_C2SB>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d015      	beq.n	80029a2 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2104      	movs	r1, #4
 800297a:	480d      	ldr	r0, [pc, #52]	; (80029b0 <EnterLowPower+0x70>)
 800297c:	f7ff ff8e 	bl	800289c <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8002980:	f000 f852 	bl	8002a28 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <EnterLowPower+0x74>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <EnterLowPower+0x74>)
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e007      	b.n	80029a2 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8002992:	f000 f849 	bl	8002a28 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <EnterLowPower+0x74>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <EnterLowPower+0x74>)
 800299c:	f023 0307 	bic.w	r3, r3, #7
 80029a0:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2103      	movs	r1, #3
 80029a6:	4802      	ldr	r0, [pc, #8]	; (80029b0 <EnterLowPower+0x70>)
 80029a8:	f7ff ff78 	bl	800289c <LL_HSEM_ReleaseLock>

  return;
 80029ac:	bf00      	nop
}
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	58001400 	.word	0x58001400
 80029b4:	58004000 	.word	0x58004000

080029b8 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2104      	movs	r1, #4
 80029c0:	4817      	ldr	r0, [pc, #92]	; (8002a20 <ExitLowPower+0x68>)
 80029c2:	f7ff ff6b 	bl	800289c <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80029c6:	bf00      	nop
 80029c8:	2103      	movs	r1, #3
 80029ca:	4815      	ldr	r0, [pc, #84]	; (8002a20 <ExitLowPower+0x68>)
 80029cc:	f7ff ff4e 	bl	800286c <LL_HSEM_1StepLock>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f8      	bne.n	80029c8 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80029d6:	f7ff ff09 	bl	80027ec <LL_RCC_GetSysClkSource>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d118      	bne.n	8002a12 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 80029e0:	f7ff feae 	bl	8002740 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <ExitLowPower+0x6c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 0307 	bic.w	r3, r3, #7
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <ExitLowPower+0x6c>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 80029f4:	bf00      	nop
 80029f6:	f7ff feb2 	bl	800275e <LL_RCC_HSE_IsReady>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0fa      	beq.n	80029f6 <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8002a00:	2002      	movs	r0, #2
 8002a02:	f7ff fedf 	bl	80027c4 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8002a06:	bf00      	nop
 8002a08:	f7ff fef0 	bl	80027ec <LL_RCC_GetSysClkSource>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d1fa      	bne.n	8002a08 <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2103      	movs	r1, #3
 8002a16:	4802      	ldr	r0, [pc, #8]	; (8002a20 <ExitLowPower+0x68>)
 8002a18:	f7ff ff40 	bl	800289c <LL_HSEM_ReleaseLock>

  return;
 8002a1c:	bf00      	nop
}
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	58001400 	.word	0x58001400
 8002a24:	58004000 	.word	0x58004000

08002a28 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8002a2c:	f7ff fea9 	bl	8002782 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8002a30:	bf00      	nop
 8002a32:	f7ff feb5 	bl	80027a0 <LL_RCC_HSI_IsReady>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0fa      	beq.n	8002a32 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7ff fec1 	bl	80027c4 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7ff fede 	bl	8002804 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8002a48:	bf00      	nop
 8002a4a:	f7ff fecf 	bl	80027ec <LL_RCC_GetSysClkSource>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d1fa      	bne.n	8002a4a <Switch_On_HSI+0x22>
  return;
 8002a54:	bf00      	nop
}
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_AHB3_GRP1_EnableClock>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_APB1_GRP1_EnableClock>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002afc:	68fb      	ldr	r3, [r7, #12]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002b0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b12:	f7ff ffc8 	bl	8002aa6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f000 fb99 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8002b20:	2001      	movs	r0, #1
 8002b22:	f000 fbb0 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2004      	movs	r0, #4
 8002b2c:	f000 fb91 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002b30:	2004      	movs	r0, #4
 8002b32:	f000 fba8 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2005      	movs	r0, #5
 8002b3c:	f000 fb89 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002b40:	2005      	movs	r0, #5
 8002b42:	f000 fba0 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2015      	movs	r0, #21
 8002b4c:	f000 fb81 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8002b50:	2015      	movs	r0, #21
 8002b52:	f000 fb98 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	202b      	movs	r0, #43	; 0x2b
 8002b5c:	f000 fb79 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8002b60:	202b      	movs	r0, #43	; 0x2b
 8002b62:	f000 fb90 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	202e      	movs	r0, #46	; 0x2e
 8002b6c:	f000 fb71 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b70:	202e      	movs	r0, #46	; 0x2e
 8002b72:	f000 fb88 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2036      	movs	r0, #54	; 0x36
 8002b7c:	f000 fb69 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002b80:	2036      	movs	r0, #54	; 0x36
 8002b82:	f000 fb80 	bl	8003286 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <HAL_IPCC_MspInit+0x44>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d113      	bne.n	8002bc6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ba2:	f7ff ff80 	bl	8002aa6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	202c      	movs	r0, #44	; 0x2c
 8002bac:	f000 fb51 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002bb0:	202c      	movs	r0, #44	; 0x2c
 8002bb2:	f000 fb68 	bl	8003286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	202d      	movs	r0, #45	; 0x2d
 8002bbc:	f000 fb49 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002bc0:	202d      	movs	r0, #45	; 0x2d
 8002bc2:	f000 fb60 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	58000c00 	.word	0x58000c00

08002bd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b096      	sub	sp, #88	; 0x58
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	2250      	movs	r2, #80	; 0x50
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f006 f809 	bl	8008bfc <memset>
  if(hrtc->Instance==RTC)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_RTC_MspInit+0x80>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d12b      	bne.n	8002c4c <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002bf4:	f000 ffec 	bl	8003bd0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8002bf8:	f000 ffea 	bl	8003bd0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8002bfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c00:	f7ff ff2a 	bl	8002a58 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c08:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c10:	f107 0308 	add.w	r3, r7, #8
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fb5a 	bl	80052ce <HAL_RCCEx_PeriphCLKConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002c20:	f7ff fd29 	bl	8002676 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c24:	f7ff ff2e 	bl	8002a84 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c2c:	f7ff ff54 	bl	8002ad8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 fb0c 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f000 fb23 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_RTC_MspInit+0x80>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a03      	ldr	r2, [pc, #12]	; (8002c54 <HAL_RTC_MspInit+0x80>)
 8002c46:	f023 0307 	bic.w	r3, r3, #7
 8002c4a:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3758      	adds	r7, #88	; 0x58
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40002800 	.word	0x40002800

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler+0x4>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cac:	f000 f934 	bl	8002f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8002cb8:	f000 fff0 	bl	8003c9c <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002cc4:	f7fe ffac 	bl	8001c20 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002cd0:	f000 fc8e 	bl	80035f0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <DMA1_Channel1_IRQHandler+0x10>)
 8002cee:	f000 fbd0 	bl	8003492 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000290 	.word	0x20000290

08002cfc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <DMA1_Channel2_IRQHandler+0x10>)
 8002d02:	f000 fbc6 	bl	8003492 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200002f0 	.word	0x200002f0

08002d10 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <USART1_IRQHandler+0x10>)
 8002d26:	f002 ffa9 	bl	8005c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200001fc 	.word	0x200001fc

08002d34 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <LPUART1_IRQHandler+0x10>)
 8002d3a:	f002 ff9f 	bl	8005c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000168 	.word	0x20000168

08002d48 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002d5a:	f7fe f835 	bl	8000dc8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002d66:	f7fe f889 	bl	8000e7c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002d72:	f000 fe83 	bl	8003a7c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8002d8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d90:	f000 fe5c 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002d98:	b40c      	push	{r2, r3}
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	460a      	mov	r2, r1
 8002da4:	71fb      	strb	r3, [r7, #7]
 8002da6:	4613      	mov	r3, r2
 8002da8:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	b002      	add	sp, #8
 8002db6:	4770      	bx	lr

08002db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <SystemInit+0xa0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002dc2:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <SystemInit+0xa0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <SystemInit+0xa0>)
 8002dca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002dea:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <SystemInit+0xa4>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e08:	f023 0305 	bic.w	r3, r3, #5
 8002e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <SystemInit+0xa8>)
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <SystemInit+0xa8>)
 8002e32:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00
 8002e5c:	faf6fefb 	.word	0xfaf6fefb
 8002e60:	22041000 	.word	0x22041000

08002e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_Init+0x3c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <HAL_Init+0x3c>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7a:	2003      	movs	r0, #3
 8002e7c:	f000 f9de 	bl	800323c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e80:	2000      	movs	r0, #0
 8002e82:	f000 f80f 	bl	8002ea4 <HAL_InitTick>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	71fb      	strb	r3, [r7, #7]
 8002e90:	e001      	b.n	8002e96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e92:	f7ff fe3a 	bl	8002b0a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e96:	79fb      	ldrb	r3, [r7, #7]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	58004000 	.word	0x58004000

08002ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_InitTick+0x6c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d024      	beq.n	8002f02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002eb8:	f001 ffa4 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_InitTick+0x6c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f9f8 	bl	80032c6 <HAL_SYSTICK_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	d809      	bhi.n	8002ef6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eea:	f000 f9b2 	bl	8003252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_InitTick+0x70>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	e004      	b.n	8002f06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e001      	b.n	8002f06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000020 	.word	0x20000020
 8002f14:	2000001c 	.word	0x2000001c

08002f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_IncTick+0x24>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_IncTick+0x24>)
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000020 	.word	0x20000020
 8002f3c:	20000374 	.word	0x20000374

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_GetTick+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000374 	.word	0x20000374

08002f58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_GetTickPrio+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	2000001c 	.word	0x2000001c

08002f70 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_SuspendTick+0x1c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_SuspendTick+0x1c>)
 8002f7a:	f023 0302 	bic.w	r3, r3, #2
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_ResumeTick+0x1c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_ResumeTick+0x1c>)
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e010 	.word	0xe000e010

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <__NVIC_EnableIRQ+0x38>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db12      	blt.n	8003088 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	490a      	ldr	r1, [pc, #40]	; (8003094 <__NVIC_DisableIRQ+0x44>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2001      	movs	r0, #1
 8003072:	fa00 f202 	lsl.w	r2, r0, r2
 8003076:	3320      	adds	r3, #32
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800307c:	f3bf 8f4f 	dsb	sy
}
 8003080:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003082:	f3bf 8f6f 	isb	sy
}
 8003086:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0c      	blt.n	80030c4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	; (80030d0 <__NVIC_SetPendingIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	3340      	adds	r3, #64	; 0x40
 80030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0c      	blt.n	8003100 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_ClearPendingIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	3360      	adds	r3, #96	; 0x60
 80030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80031d0:	f3bf 8f4f 	dsb	sy
}
 80031d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <__NVIC_SystemReset+0x24>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031de:	4904      	ldr	r1, [pc, #16]	; (80031f0 <__NVIC_SystemReset+0x24>)
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <__NVIC_SystemReset+0x28>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80031e6:	f3bf 8f4f 	dsb	sy
}
 80031ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <__NVIC_SystemReset+0x20>
 80031f0:	e000ed00 	.word	0xe000ed00
 80031f4:	05fa0004 	.word	0x05fa0004

080031f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003208:	d301      	bcc.n	800320e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <SysTick_Config+0x40>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003216:	210f      	movs	r1, #15
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	f7ff ff78 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <SysTick_Config+0x40>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <SysTick_Config+0x40>)
 8003228:	2207      	movs	r2, #7
 800322a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	e000e010 	.word	0xe000e010

0800323c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff feb3 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003260:	f7ff feca 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 8003264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff ff7a 	bl	8003164 <NVIC_EncodePriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff49 	bl	8003110 <__NVIC_SetPriority>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff febd 	bl	8003014 <__NVIC_EnableIRQ>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fecd 	bl	8003050 <__NVIC_DisableIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80032c2:	f7ff ff83 	bl	80031cc <__NVIC_SystemReset>

080032c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff92 	bl	80031f8 <SysTick_Config>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fed3 	bl	8003098 <__NVIC_SetPendingIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fee3 	bl	80030d4 <__NVIC_ClearPendingIRQ>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04f      	b.n	80033c8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d008      	beq.n	8003346 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2204      	movs	r2, #4
 8003338:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e040      	b.n	80033c8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 020e 	bic.w	r2, r2, #14
 8003354:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f003 021c 	and.w	r2, r3, #28
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f202 	lsl.w	r2, r1, r2
 8003388:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003392:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d005      	beq.n	80033f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2204      	movs	r2, #4
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e047      	b.n	8003488 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 020e 	bic.w	r2, r2, #14
 8003406:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f003 021c 	and.w	r2, r3, #28
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2101      	movs	r1, #1
 8003436:	fa01 f202 	lsl.w	r2, r1, r2
 800343a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003444:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003466:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
    }
  }
  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f003 031c 	and.w	r3, r3, #28
 80034b2:	2204      	movs	r2, #4
 80034b4:	409a      	lsls	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d026      	beq.n	800350c <HAL_DMA_IRQHandler+0x7a>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d021      	beq.n	800350c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0204 	bic.w	r2, r2, #4
 80034e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f003 021c 	and.w	r2, r3, #28
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2104      	movs	r1, #4
 80034f4:	fa01 f202 	lsl.w	r2, r1, r2
 80034f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d071      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800350a:	e06c      	b.n	80035e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f003 031c 	and.w	r3, r3, #28
 8003514:	2202      	movs	r2, #2
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02e      	beq.n	800357e <HAL_DMA_IRQHandler+0xec>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d029      	beq.n	800357e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020a 	bic.w	r2, r2, #10
 8003546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f003 021c 	and.w	r2, r3, #28
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2102      	movs	r1, #2
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d038      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800357c:	e033      	b.n	80035e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f003 031c 	and.w	r3, r3, #28
 8003586:	2208      	movs	r2, #8
 8003588:	409a      	lsls	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02a      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x156>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d025      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 020e 	bic.w	r2, r2, #14
 80035aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f003 021c 	and.w	r2, r3, #28
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f202 	lsl.w	r2, r1, r2
 80035be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
}
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80035fc:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003604:	4013      	ands	r3, r2
 8003606:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8003608:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	43db      	mvns	r3, r3
 8003612:	493c      	ldr	r1, [pc, #240]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 8003614:	4013      	ands	r3, r2
 8003616:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <HAL_FLASH_IRQHandler+0x11c>)
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8003624:	4b38      	ldr	r3, [pc, #224]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	e008      	b.n	800363e <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800362c:	4b36      	ldr	r3, [pc, #216]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8003638:	4b33      	ldr	r3, [pc, #204]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d022      	beq.n	800368a <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 800364e:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_FLASH_IRQHandler+0x7a>
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003664:	4927      	ldr	r1, [pc, #156]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 8003666:	4313      	orrs	r3, r2
 8003668:	618b      	str	r3, [r1, #24]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <HAL_FLASH_IRQHandler+0x8e>
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800367c:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f84d 	bl	8003724 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d124      	bne.n	80036e0 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 8003698:	2201      	movs	r2, #1
 800369a:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d117      	bne.n	80036d4 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036ac:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	3301      	adds	r3, #1
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036be:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f837 	bl	8003738 <FLASH_PageErase>
 80036ca:	e006      	b.n	80036da <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	e002      	b.n	80036da <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f818 	bl	8003710 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d108      	bne.n	80036fa <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	4a05      	ldr	r2, [pc, #20]	; (8003704 <HAL_FLASH_IRQHandler+0x114>)
 80036ee:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80036f2:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <HAL_FLASH_IRQHandler+0x118>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
  }
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	58004000 	.word	0x58004000
 8003708:	20000378 	.word	0x20000378
 800370c:	00040001 	.word	0x00040001

08003710 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <FLASH_PageErase+0x30>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4313      	orrs	r3, r2
 800374e:	4a06      	ldr	r2, [pc, #24]	; (8003768 <FLASH_PageErase+0x30>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	6153      	str	r3, [r2, #20]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	58004000 	.word	0x58004000

0800376c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800377a:	e14c      	b.n	8003a16 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 813e 	beq.w	8003a10 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d005      	beq.n	80037ac <HAL_GPIO_Init+0x40>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d130      	bne.n	800380e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037e2:	2201      	movs	r2, #1
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0201 	and.w	r2, r3, #1
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b03      	cmp	r3, #3
 8003818:	d017      	beq.n	800384a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d123      	bne.n	800389e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	08da      	lsrs	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3208      	adds	r2, #8
 800385e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	220f      	movs	r2, #15
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	08da      	lsrs	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3208      	adds	r2, #8
 8003898:	6939      	ldr	r1, [r7, #16]
 800389a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0203 	and.w	r2, r3, #3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8098 	beq.w	8003a10 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80038e0:	4a54      	ldr	r2, [pc, #336]	; (8003a34 <HAL_GPIO_Init+0x2c8>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800390a:	d019      	beq.n	8003940 <HAL_GPIO_Init+0x1d4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <HAL_GPIO_Init+0x2cc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <HAL_GPIO_Init+0x1d0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <HAL_GPIO_Init+0x2d0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00d      	beq.n	8003938 <HAL_GPIO_Init+0x1cc>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a48      	ldr	r2, [pc, #288]	; (8003a40 <HAL_GPIO_Init+0x2d4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x1c8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a47      	ldr	r2, [pc, #284]	; (8003a44 <HAL_GPIO_Init+0x2d8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_GPIO_Init+0x1c4>
 800392c:	2304      	movs	r3, #4
 800392e:	e008      	b.n	8003942 <HAL_GPIO_Init+0x1d6>
 8003930:	2307      	movs	r3, #7
 8003932:	e006      	b.n	8003942 <HAL_GPIO_Init+0x1d6>
 8003934:	2303      	movs	r3, #3
 8003936:	e004      	b.n	8003942 <HAL_GPIO_Init+0x1d6>
 8003938:	2302      	movs	r3, #2
 800393a:	e002      	b.n	8003942 <HAL_GPIO_Init+0x1d6>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_GPIO_Init+0x1d6>
 8003940:	2300      	movs	r3, #0
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	f002 0203 	and.w	r2, r2, #3
 8003948:	0092      	lsls	r2, r2, #2
 800394a:	4093      	lsls	r3, r2
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003952:	4938      	ldr	r1, [pc, #224]	; (8003a34 <HAL_GPIO_Init+0x2c8>)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800398a:	4b2f      	ldr	r3, [pc, #188]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ae:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039b4:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 80039b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a08:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f47f aeab 	bne.w	800377c <HAL_GPIO_Init+0x10>
  }
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40010000 	.word	0x40010000
 8003a38:	48000400 	.word	0x48000400
 8003a3c:	48000800 	.word	0x48000800
 8003a40:	48000c00 	.word	0x48000c00
 8003a44:	48001000 	.word	0x48001000
 8003a48:	58000800 	.word	0x58000800

08003a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fd6c 	bl	8001548 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58000800 	.word	0x58000800

08003a7c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	4906      	ldr	r1, [pc, #24]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f807 	bl	8003ab0 <HAL_HSEM_FreeCallback>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	58001500 	.word	0x58001500

08003ab0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01e      	beq.n	8003b14 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <HAL_IPCC_Init+0x60>)
 8003ad8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff f850 	bl	8002b8c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003aec:	68b8      	ldr	r0, [r7, #8]
 8003aee:	f000 f85b 	bl	8003ba8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f82c 	bl	8003b5c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003b12:	e001      	b.n	8003b18 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	58000c00 	.word	0x58000c00

08003b28 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e00f      	b.n	8003b8a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <IPCC_SetDefaultCallbacks+0x44>)
 8003b74:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3306      	adds	r3, #6
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <IPCC_SetDefaultCallbacks+0x48>)
 8003b82:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d9ec      	bls.n	8003b6a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	08003b29 	.word	0x08003b29
 8003ba4:	08003b43 	.word	0x08003b43

08003ba8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	223f      	movs	r2, #63	; 0x3f
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	58000400 	.word	0x58000400

08003bf0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <LL_EXTI_ReadFlag_0_31+0x1c>)
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4013      	ands	r3, r2
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	58000800 	.word	0x58000800

08003c20 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <LL_EXTI_ReadFlag_32_63+0x1c>)
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4013      	ands	r3, r2
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	58000800 	.word	0x58000800

08003c40 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60d3      	str	r3, [r2, #12]
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	58000800 	.word	0x58000800

08003c60 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	58000800 	.word	0x58000800

08003c80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	58000400 	.word	0x58000400

08003c9c <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8003ca0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ca4:	f7ff ffac 	bl	8003c00 <LL_EXTI_ReadFlag_0_31>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003cae:	f7ff ff9f 	bl	8003bf0 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003cb2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003cb6:	f7ff ffc3 	bl	8003c40 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8003cba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003cbe:	f7ff ff9f 	bl	8003c00 <LL_EXTI_ReadFlag_0_31>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8003cc8:	f000 f811 	bl	8003cee <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8003ccc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003cd0:	f7ff ffb6 	bl	8003c40 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	f7ff ffa3 	bl	8003c20 <LL_EXTI_ReadFlag_32_63>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8003ce0:	f000 f80c 	bl	8003cfc <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f7ff ffbb 	bl	8003c60 <LL_EXTI_ClearFlag_32_63>
  }
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1c:	d101      	bne.n	8003d22 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_RCC_HSE_Enable>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_RCC_HSE_Disable>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_HSE_IsReady>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d7c:	d101      	bne.n	8003d82 <LL_RCC_HSE_IsReady+0x18>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <LL_RCC_HSE_IsReady+0x1a>
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_RCC_HSI_Enable>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_RCC_HSI_Disable>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_RCC_HSI_IsReady>:
{
 8003dca:	b480      	push	{r7}
 8003dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ddc:	d101      	bne.n	8003de2 <LL_RCC_HSI_IsReady+0x18>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <LL_RCC_HSI_IsReady+0x1a>
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_RCC_HSI_SetCalibTrimming>:
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_HSI48_Enable>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_HSI48_Disable>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_HSI48_IsReady>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d101      	bne.n	8003e74 <LL_RCC_HSI48_IsReady+0x18>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <LL_RCC_HSI48_IsReady+0x1a>
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_RCC_LSE_Enable>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_LSE_Disable>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_RCC_LSE_EnableBypass>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_LSE_DisableBypass>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_LSE_IsReady>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d101      	bne.n	8003f20 <LL_RCC_LSE_IsReady+0x18>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <LL_RCC_LSE_IsReady+0x1a>
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_LSI1_Enable>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_LSI1_Disable>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_LSI1_IsReady>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d101      	bne.n	8003f88 <LL_RCC_LSI1_IsReady+0x18>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <LL_RCC_LSI1_IsReady+0x1a>
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_RCC_LSI2_Enable>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa4:	f043 0304 	orr.w	r3, r3, #4
 8003fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_LSI2_Disable>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc6:	f023 0304 	bic.w	r3, r3, #4
 8003fca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_RCC_LSI2_IsReady>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d101      	bne.n	8003ff0 <LL_RCC_LSI2_IsReady+0x18>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <LL_RCC_LSI2_IsReady+0x1a>
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_RCC_LSI2_SetTrimming>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_RCC_MSI_Enable>:
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6013      	str	r3, [r2, #0]
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_RCC_MSI_Disable>:
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_RCC_MSI_IsReady>:
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d101      	bne.n	800407c <LL_RCC_MSI_IsReady+0x16>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <LL_RCC_MSI_IsReady+0x18>
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_MSI_SetRange>:
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_RCC_MSI_GetRange>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2bb0      	cmp	r3, #176	; 0xb0
 80040c6:	d901      	bls.n	80040cc <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80040c8:	23b0      	movs	r3, #176	; 0xb0
 80040ca:	607b      	str	r3, [r7, #4]
  return msiRange;
 80040cc:	687b      	ldr	r3, [r7, #4]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <LL_RCC_MSI_SetCalibTrimming>:
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <LL_RCC_SetSysClkSource>:
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_RCC_GetSysClkSource>:
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_RCC_SetAHBPrescaler>:
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_C2_RCC_SetAHBPrescaler>:
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800417c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_SetAHB4Prescaler>:
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041a8:	f023 020f 	bic.w	r2, r3, #15
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_RCC_SetAPB1Prescaler>:
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_SetAPB2Prescaler>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <LL_RCC_GetAHBPrescaler>:
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_RCC_GetAHB4Prescaler>:
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800425c:	6013      	str	r3, [r2, #0]
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800428a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004298:	d101      	bne.n	800429e <LL_RCC_PLL_IsReady+0x18>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <LL_RCC_PLL_IsReady+0x1a>
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431e:	d101      	bne.n	8004324 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004344:	d101      	bne.n	800434a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d101      	bne.n	8004370 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800438e:	d101      	bne.n	8004394 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80043a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b2:	d101      	bne.n	80043b8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b08d      	sub	sp, #52	; 0x34
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e363      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 808d 	beq.w	80044fe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e4:	f7ff fea2 	bl	800412c <LL_RCC_GetSysClkSource>
 80043e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ea:	f7ff ff83 	bl	80042f4 <LL_RCC_PLL_GetMainSource>
 80043ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x3e>
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d147      	bne.n	800448c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d144      	bne.n	800448c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e347      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004412:	f7ff fe4d 	bl	80040b0 <LL_RCC_MSI_GetRange>
 8004416:	4603      	mov	r3, r0
 8004418:	429c      	cmp	r4, r3
 800441a:	d914      	bls.n	8004446 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd03 	bl	8004e2c <RCC_SetFlashLatencyFromMSIRange>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e336      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fe27 	bl	8004088 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fe4b 	bl	80040da <LL_RCC_MSI_SetCalibTrimming>
 8004444:	e013      	b.n	800446e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fe1c 	bl	8004088 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fe40 	bl	80040da <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fce4 	bl	8004e2c <RCC_SetFlashLatencyFromMSIRange>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e317      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800446e:	f000 fcc9 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004472:	4603      	mov	r3, r0
 8004474:	4aa4      	ldr	r2, [pc, #656]	; (8004708 <HAL_RCC_OscConfig+0x344>)
 8004476:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004478:	4ba4      	ldr	r3, [pc, #656]	; (800470c <HAL_RCC_OscConfig+0x348>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fd11 	bl	8002ea4 <HAL_InitTick>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d039      	beq.n	80044fc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e308      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01e      	beq.n	80044d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004494:	f7ff fdc9 	bl	800402a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004498:	f7fe fd52 	bl	8002f40 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a0:	f7fe fd4e 	bl	8002f40 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e2f5      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80044b2:	f7ff fdd8 	bl	8004066 <LL_RCC_MSI_IsReady>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f1      	beq.n	80044a0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fde1 	bl	8004088 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fe05 	bl	80040da <LL_RCC_MSI_SetCalibTrimming>
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044d2:	f7ff fdb9 	bl	8004048 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d6:	f7fe fd33 	bl	8002f40 <HAL_GetTick>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044de:	f7fe fd2f 	bl	8002f40 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e2d6      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80044f0:	f7ff fdb9 	bl	8004066 <LL_RCC_MSI_IsReady>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f1      	bne.n	80044de <HAL_RCC_OscConfig+0x11a>
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044fc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d047      	beq.n	800459a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450a:	f7ff fe0f 	bl	800412c <LL_RCC_GetSysClkSource>
 800450e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004510:	f7ff fef0 	bl	80042f4 <LL_RCC_PLL_GetMainSource>
 8004514:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d005      	beq.n	8004528 <HAL_RCC_OscConfig+0x164>
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d108      	bne.n	8004534 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d134      	bne.n	800459a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e2b4      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d102      	bne.n	8004544 <HAL_RCC_OscConfig+0x180>
 800453e:	f7ff fbf6 	bl	8003d2e <LL_RCC_HSE_Enable>
 8004542:	e001      	b.n	8004548 <HAL_RCC_OscConfig+0x184>
 8004544:	f7ff fc02 	bl	8003d4c <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d012      	beq.n	8004576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fe fcf6 	bl	8002f40 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fe fcf2 	bl	8002f40 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e299      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800456a:	f7ff fbfe 	bl	8003d6a <LL_RCC_HSE_IsReady>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f1      	beq.n	8004558 <HAL_RCC_OscConfig+0x194>
 8004574:	e011      	b.n	800459a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fe fce3 	bl	8002f40 <HAL_GetTick>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457e:	f7fe fcdf 	bl	8002f40 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e286      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004590:	f7ff fbeb 	bl	8003d6a <LL_RCC_HSE_IsReady>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f1      	bne.n	800457e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d04c      	beq.n	8004640 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a6:	f7ff fdc1 	bl	800412c <LL_RCC_GetSysClkSource>
 80045aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ac:	f7ff fea2 	bl	80042f4 <LL_RCC_PLL_GetMainSource>
 80045b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_OscConfig+0x200>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d10e      	bne.n	80045dc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d10b      	bne.n	80045dc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e266      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fc0a 	bl	8003dee <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045da:	e031      	b.n	8004640 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d019      	beq.n	8004618 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	f7ff fbd3 	bl	8003d8e <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fe fcaa 	bl	8002f40 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fe fca6 	bl	8002f40 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e24d      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004602:	f7ff fbe2 	bl	8003dca <LL_RCC_HSI_IsReady>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f1      	beq.n	80045f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fbec 	bl	8003dee <LL_RCC_HSI_SetCalibTrimming>
 8004616:	e013      	b.n	8004640 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004618:	f7ff fbc8 	bl	8003dac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe fc90 	bl	8002f40 <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004624:	f7fe fc8c 	bl	8002f40 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e233      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004636:	f7ff fbc8 	bl	8003dca <LL_RCC_HSI_IsReady>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f1      	bne.n	8004624 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a3 	beq.w	80047a0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d076      	beq.n	8004750 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	d046      	beq.n	80046fc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800466e:	f7ff fc7f 	bl	8003f70 <LL_RCC_LSI1_IsReady>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004678:	f7ff fc58 	bl	8003f2c <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800467c:	f7fe fc60 	bl	8002f40 <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004684:	f7fe fc5c 	bl	8002f40 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e203      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004696:	f7ff fc6b 	bl	8003f70 <LL_RCC_LSI1_IsReady>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f1      	beq.n	8004684 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80046a0:	f7ff fc78 	bl	8003f94 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe fc4c 	bl	8002f40 <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046ac:	f7fe fc48 	bl	8002f40 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1ef      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046be:	f7ff fc8b 	bl	8003fd8 <LL_RCC_LSI2_IsReady>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f1      	beq.n	80046ac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fc95 	bl	8003ffc <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046d2:	f7ff fc3c 	bl	8003f4e <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fe fc33 	bl	8002f40 <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046de:	f7fe fc2f 	bl	8002f40 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1d6      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046f0:	f7ff fc3e 	bl	8003f70 <LL_RCC_LSI1_IsReady>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f1      	bne.n	80046de <HAL_RCC_OscConfig+0x31a>
 80046fa:	e051      	b.n	80047a0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80046fc:	f7ff fc16 	bl	8003f2c <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fe fc1e 	bl	8002f40 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004706:	e00c      	b.n	8004722 <HAL_RCC_OscConfig+0x35e>
 8004708:	20000018 	.word	0x20000018
 800470c:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004710:	f7fe fc16 	bl	8002f40 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1bd      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004722:	f7ff fc25 	bl	8003f70 <LL_RCC_LSI1_IsReady>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f1      	beq.n	8004710 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800472c:	f7ff fc43 	bl	8003fb6 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004732:	f7fe fc05 	bl	8002f40 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b03      	cmp	r3, #3
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1ac      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004744:	f7ff fc48 	bl	8003fd8 <LL_RCC_LSI2_IsReady>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f1      	bne.n	8004732 <HAL_RCC_OscConfig+0x36e>
 800474e:	e027      	b.n	80047a0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004750:	f7ff fc31 	bl	8003fb6 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fe fbf4 	bl	8002f40 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800475c:	f7fe fbf0 	bl	8002f40 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e197      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800476e:	f7ff fc33 	bl	8003fd8 <LL_RCC_LSI2_IsReady>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f1      	bne.n	800475c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004778:	f7ff fbe9 	bl	8003f4e <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fe fbe0 	bl	8002f40 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004784:	f7fe fbdc 	bl	8002f40 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e183      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004796:	f7ff fbeb 	bl	8003f70 <LL_RCC_LSI1_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d05b      	beq.n	8004864 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ac:	4ba7      	ldr	r3, [pc, #668]	; (8004a4c <HAL_RCC_OscConfig+0x688>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d114      	bne.n	80047e2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80047b8:	f7ff fa0a 	bl	8003bd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047bc:	f7fe fbc0 	bl	8002f40 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c4:	f7fe fbbc 	bl	8002f40 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e163      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d6:	4b9d      	ldr	r3, [pc, #628]	; (8004a4c <HAL_RCC_OscConfig+0x688>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d102      	bne.n	80047f0 <HAL_RCC_OscConfig+0x42c>
 80047ea:	f7ff fb49 	bl	8003e80 <LL_RCC_LSE_Enable>
 80047ee:	e00c      	b.n	800480a <HAL_RCC_OscConfig+0x446>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d104      	bne.n	8004802 <HAL_RCC_OscConfig+0x43e>
 80047f8:	f7ff fb64 	bl	8003ec4 <LL_RCC_LSE_EnableBypass>
 80047fc:	f7ff fb40 	bl	8003e80 <LL_RCC_LSE_Enable>
 8004800:	e003      	b.n	800480a <HAL_RCC_OscConfig+0x446>
 8004802:	f7ff fb4e 	bl	8003ea2 <LL_RCC_LSE_Disable>
 8004806:	f7ff fb6e 	bl	8003ee6 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d014      	beq.n	800483c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fe fb95 	bl	8002f40 <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fe fb91 	bl	8002f40 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e136      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004830:	f7ff fb6a 	bl	8003f08 <LL_RCC_LSE_IsReady>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ef      	beq.n	800481a <HAL_RCC_OscConfig+0x456>
 800483a:	e013      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fe fb80 	bl	8002f40 <HAL_GetTick>
 8004840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fe fb7c 	bl	8002f40 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e121      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800485a:	f7ff fb55 	bl	8003f08 <LL_RCC_LSE_IsReady>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ef      	bne.n	8004844 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d02c      	beq.n	80048ca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d014      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004878:	f7ff face 	bl	8003e18 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fe fb60 	bl	8002f40 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004884:	f7fe fb5c 	bl	8002f40 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e103      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004896:	f7ff fae1 	bl	8003e5c <LL_RCC_HSI48_IsReady>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f1      	beq.n	8004884 <HAL_RCC_OscConfig+0x4c0>
 80048a0:	e013      	b.n	80048ca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048a2:	f7ff faca 	bl	8003e3a <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a6:	f7fe fb4b 	bl	8002f40 <HAL_GetTick>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ae:	f7fe fb47 	bl	8002f40 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0ee      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048c0:	f7ff facc 	bl	8003e5c <LL_RCC_HSI48_IsReady>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f1      	bne.n	80048ae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80e4 	beq.w	8004a9c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d4:	f7ff fc2a 	bl	800412c <LL_RCC_GetSysClkSource>
 80048d8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	f040 80b4 	bne.w	8004a54 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0203 	and.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d123      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d11c      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d114      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d10d      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d05d      	beq.n	80049fe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d058      	beq.n	80049fa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0a1      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800495a:	f7ff fc85 	bl	8004268 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800495e:	f7fe faef 	bl	8002f40 <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004966:	f7fe faeb 	bl	8002f40 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e092      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ef      	bne.n	8004966 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <HAL_RCC_OscConfig+0x68c>)
 800498e:	4013      	ands	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004998:	4311      	orrs	r1, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800499e:	0212      	lsls	r2, r2, #8
 80049a0:	4311      	orrs	r1, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049ac:	4311      	orrs	r1, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049bc:	f7ff fc45 	bl	800424a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049d0:	f7fe fab6 	bl	8002f40 <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d8:	f7fe fab2 	bl	8002f40 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e059      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f8:	e050      	b.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e04f      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d147      	bne.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a0c:	f7ff fc1d 	bl	800424a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a20:	f7fe fa8e 	bl	8002f40 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fe fa8a 	bl	8002f40 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e031      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ef      	beq.n	8004a28 <HAL_RCC_OscConfig+0x664>
 8004a48:	e028      	b.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
 8004a4a:	bf00      	nop
 8004a4c:	58000400 	.word	0x58000400
 8004a50:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d01e      	beq.n	8004a98 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5a:	f7ff fc05 	bl	8004268 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fe fa6f 	bl	8002f40 <HAL_GetTick>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fe fa6b 	bl	8002f40 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e012      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ef      	bne.n	8004a66 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_OscConfig+0x6e4>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
 8004a96:	e001      	b.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3734      	adds	r7, #52	; 0x34
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd90      	pop	{r4, r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	eefefffc 	.word	0xeefefffc

08004aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e12d      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b98      	ldr	r3, [pc, #608]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d91b      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b95      	ldr	r3, [pc, #596]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 0207 	bic.w	r2, r3, #7
 8004ad6:	4993      	ldr	r1, [pc, #588]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ade:	f7fe fa2f 	bl	8002f40 <HAL_GetTick>
 8004ae2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ae6:	f7fe fa2b 	bl	8002f40 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e111      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af8:	4b8a      	ldr	r3, [pc, #552]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d1ef      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fb14 	bl	8004144 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b1c:	f7fe fa10 	bl	8002f40 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b24:	f7fe fa0c 	bl	8002f40 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e0f2      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b36:	f7ff fbe9 	bl	800430c <LL_RCC_IsActiveFlag_HPRE>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f1      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fb0b 	bl	800416c <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b56:	f7fe f9f3 	bl	8002f40 <HAL_GetTick>
 8004b5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b5e:	f7fe f9ef 	bl	8002f40 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0d5      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b70:	f7ff fbde 	bl	8004330 <LL_RCC_IsActiveFlag_C2HPRE>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f1      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fb04 	bl	8004198 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b90:	f7fe f9d6 	bl	8002f40 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b98:	f7fe f9d2 	bl	8002f40 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e0b8      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004baa:	f7ff fbd4 	bl	8004356 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f1      	beq.n	8004b98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d016      	beq.n	8004bee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fafe 	bl	80041c6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bca:	f7fe f9b9 	bl	8002f40 <HAL_GetTick>
 8004bce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bd2:	f7fe f9b5 	bl	8002f40 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e09b      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004be4:	f7ff fbca 	bl	800437c <LL_RCC_IsActiveFlag_PPRE1>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f1      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d017      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff faf4 	bl	80041ee <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c06:	f7fe f99b 	bl	8002f40 <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c0e:	f7fe f997 	bl	8002f40 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e07d      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c20:	f7ff fbbe 	bl	80043a0 <LL_RCC_IsActiveFlag_PPRE2>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f1      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d043      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c3e:	f7ff f894 	bl	8003d6a <LL_RCC_HSE_IsReady>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11e      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e067      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d106      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004c54:	f7ff fb17 	bl	8004286 <LL_RCC_PLL_IsReady>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d113      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e05c      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c6a:	f7ff f9fc 	bl	8004066 <LL_RCC_MSI_IsReady>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e051      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c78:	f7ff f8a7 	bl	8003dca <LL_RCC_HSI_IsReady>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e04a      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fa3a 	bl	8004104 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c90:	f7fe f956 	bl	8002f40 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fe f952 	bl	8002f40 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e036      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	f7ff fa3d 	bl	800412c <LL_RCC_GetSysClkSource>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d1ec      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d21b      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 0207 	bic.w	r2, r3, #7
 8004cd4:	4913      	ldr	r1, [pc, #76]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cdc:	f7fe f930 	bl	8002f40 <HAL_GetTick>
 8004ce0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ce4:	f7fe f92c 	bl	8002f40 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e012      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d1ef      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d04:	f000 f87e 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <HAL_RCC_ClockConfig+0x27c>)
 8004d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004d0e:	f7fe f923 	bl	8002f58 <HAL_GetTickPrio>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe f8c5 	bl	8002ea4 <HAL_InitTick>
 8004d1a:	4603      	mov	r3, r0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	58004000 	.word	0x58004000
 8004d28:	20000018 	.word	0x20000018

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	f7ff f9fb 	bl	800412c <LL_RCC_GetSysClkSource>
 8004d36:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d3e:	f7ff f9b7 	bl	80040b0 <LL_RCC_MSI_GetRange>
 8004d42:	4603      	mov	r3, r0
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e04b      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d102      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e045      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d66:	f7fe ffd0 	bl	8003d0a <LL_RCC_HSE_IsEnabledDiv2>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d70:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e03a      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d76:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e037      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d7c:	f7ff faba 	bl	80042f4 <LL_RCC_PLL_GetMainSource>
 8004d80:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d003      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x64>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x6a>
 8004d8e:	e00d      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d92:	60bb      	str	r3, [r7, #8]
        break;
 8004d94:	e015      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d96:	f7fe ffb8 	bl	8003d0a <LL_RCC_HSE_IsEnabledDiv2>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004da0:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004da2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004da4:	e00d      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004da6:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004da8:	60bb      	str	r3, [r7, #8]
        break;
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004dac:	f7ff f980 	bl	80040b0 <LL_RCC_MSI_GetRange>
 8004db0:	4603      	mov	r3, r0
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbe:	60bb      	str	r3, [r7, #8]
        break;
 8004dc0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004dc2:	f7ff fa72 	bl	80042aa <LL_RCC_PLL_GetN>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	fb03 f402 	mul.w	r4, r3, r2
 8004dce:	f7ff fa85 	bl	80042dc <LL_RCC_PLL_GetDivider>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ddc:	f7ff fa72 	bl	80042c4 <LL_RCC_PLL_GetR>
 8004de0:	4603      	mov	r3, r0
 8004de2:	0f5b      	lsrs	r3, r3, #29
 8004de4:	3301      	adds	r3, #1
 8004de6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004dea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	08009420 	.word	0x08009420
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	01e84800 	.word	0x01e84800

08004e04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e04:	b598      	push	{r3, r4, r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e08:	f7ff ff90 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	f7ff fa02 	bl	8004216 <LL_RCC_GetAHBPrescaler>
 8004e12:	4603      	mov	r3, r0
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <HAL_RCC_GetHCLKFreq+0x24>)
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd98      	pop	{r3, r4, r7, pc}
 8004e28:	080093e0 	.word	0x080093e0

08004e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2bb0      	cmp	r3, #176	; 0xb0
 8004e38:	d903      	bls.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e007      	b.n	8004e52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004e52:	f7ff f9ec 	bl	800422e <LL_RCC_GetAHB4Prescaler>
 8004e56:	4603      	mov	r3, r0
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	4a0d      	ldr	r2, [pc, #52]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	0c9c      	lsrs	r4, r3, #18
 8004e76:	f7fe ff03 	bl	8003c80 <HAL_PWREx_GetVoltageRange>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 f80c 	bl	8004e9c <RCC_SetFlashLatency>
 8004e84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd90      	pop	{r4, r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	08009420 	.word	0x08009420
 8004e94:	080093e0 	.word	0x080093e0
 8004e98:	431bde83 	.word	0x431bde83

08004e9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b093      	sub	sp, #76	; 0x4c
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <RCC_SetFlashLatency+0xe8>)
 8004ea8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004eb2:	4a35      	ldr	r2, [pc, #212]	; (8004f88 <RCC_SetFlashLatency+0xec>)
 8004eb4:	f107 031c 	add.w	r3, r7, #28
 8004eb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004eba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004ebe:	4b33      	ldr	r3, [pc, #204]	; (8004f8c <RCC_SetFlashLatency+0xf0>)
 8004ec0:	f107 040c 	add.w	r4, r7, #12
 8004ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004eca:	2300      	movs	r3, #0
 8004ecc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed4:	d11a      	bne.n	8004f0c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eda:	e013      	b.n	8004f04 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	3348      	adds	r3, #72	; 0x48
 8004ee2:	443b      	add	r3, r7
 8004ee4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d807      	bhi.n	8004efe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	3348      	adds	r3, #72	; 0x48
 8004ef4:	443b      	add	r3, r7
 8004ef6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004efa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004efc:	e020      	b.n	8004f40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f00:	3301      	adds	r3, #1
 8004f02:	643b      	str	r3, [r7, #64]	; 0x40
 8004f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d9e8      	bls.n	8004edc <RCC_SetFlashLatency+0x40>
 8004f0a:	e019      	b.n	8004f40 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f10:	e013      	b.n	8004f3a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	3348      	adds	r3, #72	; 0x48
 8004f18:	443b      	add	r3, r7
 8004f1a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d807      	bhi.n	8004f34 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	3348      	adds	r3, #72	; 0x48
 8004f2a:	443b      	add	r3, r7
 8004f2c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f32:	e005      	b.n	8004f40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	3301      	adds	r3, #1
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d9e8      	bls.n	8004f12 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <RCC_SetFlashLatency+0xf4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 0207 	bic.w	r2, r3, #7
 8004f48:	4911      	ldr	r1, [pc, #68]	; (8004f90 <RCC_SetFlashLatency+0xf4>)
 8004f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f50:	f7fd fff6 	bl	8002f40 <HAL_GetTick>
 8004f54:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f56:	e008      	b.n	8004f6a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f58:	f7fd fff2 	bl	8002f40 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e007      	b.n	8004f7a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <RCC_SetFlashLatency+0xf4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1ef      	bne.n	8004f58 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	374c      	adds	r7, #76	; 0x4c
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd90      	pop	{r4, r7, pc}
 8004f82:	bf00      	nop
 8004f84:	0800939c 	.word	0x0800939c
 8004f88:	080093ac 	.word	0x080093ac
 8004f8c:	080093b8 	.word	0x080093b8
 8004f90:	58004000 	.word	0x58004000

08004f94 <LL_RCC_LSE_IsEnabled>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <LL_RCC_LSE_IsEnabled+0x18>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <LL_RCC_LSE_IsEnabled+0x1a>
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_LSE_IsReady>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d101      	bne.n	8004fd0 <LL_RCC_LSE_IsReady+0x18>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <LL_RCC_LSE_IsReady+0x1a>
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_RCC_SetRFWKPClockSource>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_RCC_SetSMPSClockSource>:
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4313      	orrs	r3, r2
 8005022:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <LL_RCC_SetSMPSPrescaler>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4313      	orrs	r3, r2
 800504a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <LL_RCC_SetUSARTClockSource>:
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f023 0203 	bic.w	r2, r3, #3
 800506c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_RCC_SetLPUARTClockSource>:
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800508c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <LL_RCC_SetI2CClockSource>:
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80050b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80050d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_RCC_SetLPTIMClockSource>:
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	041b      	lsls	r3, r3, #16
 8005100:	43db      	mvns	r3, r3
 8005102:	401a      	ands	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_RCC_SetSAIClockSource>:
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_RCC_SetRNGClockSource>:
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800515e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_RCC_SetCLK48ClockSource>:
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800518a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <LL_RCC_SetUSBClockSource>:
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ffe3 	bl	8005176 <LL_RCC_SetCLK48ClockSource>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <LL_RCC_SetADCClockSource>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_RCC_SetRTCClockSource>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_RCC_GetRTCClockSource>:
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <LL_RCC_ForceBackupDomainReset>:
{
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_RCC_ReleaseBackupDomainReset>:
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <LL_RCC_PLLSAI1_Enable>:
{
 800526e:	b480      	push	{r7}
 8005270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800527c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005280:	6013      	str	r3, [r2, #0]
}
 8005282:	bf00      	nop
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <LL_RCC_PLLSAI1_Disable>:
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800529a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800529e:	6013      	str	r3, [r2, #0]
}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_RCC_PLLSAI1_IsReady>:
{
 80052aa:	b480      	push	{r7}
 80052ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052bc:	d101      	bne.n	80052c2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b088      	sub	sp, #32
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80052d6:	2300      	movs	r3, #0
 80052d8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80052da:	2300      	movs	r3, #0
 80052dc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d034      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052f2:	d021      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80052f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052f8:	d81b      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052fe:	d01d      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005304:	d815      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800530a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800530e:	d110      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800531a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005320:	e00d      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f947 	bl	80055ba <RCCEx_PLLSAI1_ConfigNP>
 800532c:	4603      	mov	r3, r0
 800532e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005330:	e005      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	77fb      	strb	r3, [r7, #31]
        break;
 8005336:	e002      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005338:	bf00      	nop
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800533c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533e:	7ffb      	ldrb	r3, [r7, #31]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fee8 	bl	800511e <LL_RCC_SetSAIClockSource>
 800534e:	e001      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7ffb      	ldrb	r3, [r7, #31]
 8005352:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800535c:	2b00      	cmp	r3, #0
 800535e:	d046      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005360:	f7ff ff56 	bl	8005210 <LL_RCC_GetRTCClockSource>
 8005364:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	429a      	cmp	r2, r3
 800536e:	d03c      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005370:	f7fe fc2e 	bl	8003bd0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff ff30 	bl	80051e4 <LL_RCC_SetRTCClockSource>
 8005384:	e02e      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005390:	f7ff ff4b 	bl	800522a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005394:	f7ff ff5a 	bl	800524c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80053a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80053b0:	f7ff fdf0 	bl	8004f94 <LL_RCC_LSE_IsEnabled>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d114      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053ba:	f7fd fdc1 	bl	8002f40 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80053c0:	e00b      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c2:	f7fd fdbd 	bl	8002f40 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d902      	bls.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	77fb      	strb	r3, [r7, #31]
              break;
 80053d8:	e004      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80053da:	f7ff fded 	bl	8004fb8 <LL_RCC_LSE_IsReady>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d1ee      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
 80053e6:	77bb      	strb	r3, [r7, #30]
 80053e8:	e001      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	7ffb      	ldrb	r3, [r7, #31]
 80053ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fe2a 	bl	8005058 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fe35 	bl	8005084 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fe5d 	bl	80050ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fe52 	bl	80050ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fe2a 	bl	80050b0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fe1f 	bl	80050b0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d022      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff fe8d 	bl	80051a2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005490:	d107      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800549c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054aa:	d10b      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 f8dd 	bl	8005670 <RCCEx_PLLSAI1_ConfigNQ>
 80054b6:	4603      	mov	r3, r0
 80054b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
 80054c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d008      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054e2:	d003      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fe2a 	bl	800514a <LL_RCC_SetRNGClockSource>
 80054f6:	e00a      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x240>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	2000      	movs	r0, #0
 8005504:	f7ff fe21 	bl	800514a <LL_RCC_SetRNGClockSource>
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff fe34 	bl	8005176 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005516:	d107      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005530:	2b00      	cmp	r3, #0
 8005532:	d022      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fe3d 	bl	80051b8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005546:	d107      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005556:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005560:	d10b      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f8dd 	bl	8005726 <RCCEx_PLLSAI1_ConfigNR>
 800556c:	4603      	mov	r3, r0
 800556e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005570:	7ffb      	ldrb	r3, [r7, #31]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005576:	7ffb      	ldrb	r3, [r7, #31]
 8005578:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fd26 	bl	8004fdc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fd45 	bl	8005030 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fd2c 	bl	8005008 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80055b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055c6:	f7ff fe61 	bl	800528c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055ca:	f7fd fcb9 	bl	8002f40 <HAL_GetTick>
 80055ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055d0:	e009      	b.n	80055e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055d2:	f7fd fcb5 	bl	8002f40 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d902      	bls.n	80055e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	73fb      	strb	r3, [r7, #15]
      break;
 80055e4:	e004      	b.n	80055f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055e6:	f7ff fe60 	bl	80052aa <LL_RCC_PLLSAI1_IsReady>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f0      	bne.n	80055d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d137      	bne.n	8005666 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800560a:	4313      	orrs	r3, r2
 800560c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005620:	4313      	orrs	r3, r2
 8005622:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005624:	f7ff fe23 	bl	800526e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005628:	f7fd fc8a 	bl	8002f40 <HAL_GetTick>
 800562c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800562e:	e009      	b.n	8005644 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005630:	f7fd fc86 	bl	8002f40 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d902      	bls.n	8005644 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	73fb      	strb	r3, [r7, #15]
        break;
 8005642:	e004      	b.n	800564e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005644:	f7ff fe31 	bl	80052aa <LL_RCC_PLLSAI1_IsReady>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d1f0      	bne.n	8005630 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005662:	4313      	orrs	r3, r2
 8005664:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800567c:	f7ff fe06 	bl	800528c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005680:	f7fd fc5e 	bl	8002f40 <HAL_GetTick>
 8005684:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005686:	e009      	b.n	800569c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005688:	f7fd fc5a 	bl	8002f40 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d902      	bls.n	800569c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	73fb      	strb	r3, [r7, #15]
      break;
 800569a:	e004      	b.n	80056a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800569c:	f7ff fe05 	bl	80052aa <LL_RCC_PLLSAI1_IsReady>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d137      	bne.n	800571c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c0:	4313      	orrs	r3, r2
 80056c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d6:	4313      	orrs	r3, r2
 80056d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056da:	f7ff fdc8 	bl	800526e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056de:	f7fd fc2f 	bl	8002f40 <HAL_GetTick>
 80056e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056e4:	e009      	b.n	80056fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056e6:	f7fd fc2b 	bl	8002f40 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d902      	bls.n	80056fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	73fb      	strb	r3, [r7, #15]
        break;
 80056f8:	e004      	b.n	8005704 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056fa:	f7ff fdd6 	bl	80052aa <LL_RCC_PLLSAI1_IsReady>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b01      	cmp	r3, #1
 8005702:	d1f0      	bne.n	80056e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005718:	4313      	orrs	r3, r2
 800571a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005732:	f7ff fdab 	bl	800528c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005736:	f7fd fc03 	bl	8002f40 <HAL_GetTick>
 800573a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800573c:	e009      	b.n	8005752 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800573e:	f7fd fbff 	bl	8002f40 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d902      	bls.n	8005752 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	e004      	b.n	800575c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005752:	f7ff fdaa 	bl	80052aa <LL_RCC_PLLSAI1_IsReady>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f0      	bne.n	800573e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d137      	bne.n	80057d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800577a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800578c:	4313      	orrs	r3, r2
 800578e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005790:	f7ff fd6d 	bl	800526e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005794:	f7fd fbd4 	bl	8002f40 <HAL_GetTick>
 8005798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800579a:	e009      	b.n	80057b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800579c:	f7fd fbd0 	bl	8002f40 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d902      	bls.n	80057b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	73fb      	strb	r3, [r7, #15]
        break;
 80057ae:	e004      	b.n	80057ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057b0:	f7ff fd7b 	bl	80052aa <LL_RCC_PLLSAI1_IsReady>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d1f0      	bne.n	800579c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ce:	4313      	orrs	r3, r2
 80057d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e09f      	b.n	800592e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fd f9e6 	bl	8002bd4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005810:	4b49      	ldr	r3, [pc, #292]	; (8005938 <HAL_RTC_Init+0x15c>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d07e      	beq.n	800591a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	22ca      	movs	r2, #202	; 0xca
 8005822:	625a      	str	r2, [r3, #36]	; 0x24
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2253      	movs	r2, #83	; 0x53
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f8ab 	bl	8005988 <RTC_EnterInitMode>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	22ff      	movs	r2, #255	; 0xff
 800583e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2204      	movs	r2, #4
 8005844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	e067      	b.n	800591e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800585c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005860:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6899      	ldr	r1, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68d2      	ldr	r2, [r2, #12]
 8005888:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6919      	ldr	r1, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	041a      	lsls	r2, r3, #16
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ac:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0203 	bic.w	r2, r2, #3
 80058bc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d113      	bne.n	800590c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f829 	bl	800593c <HAL_RTC_WaitForSynchro>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2204      	movs	r2, #4
 80058fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e010      	b.n	800592e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	22ff      	movs	r2, #255	; 0xff
 8005912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e001      	b.n	800591e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40002800 	.word	0x40002800

0800593c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005952:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005954:	f7fd faf4 	bl	8002f40 <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800595a:	e009      	b.n	8005970 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800595c:	f7fd faf0 	bl	8002f40 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800596a:	d901      	bls.n	8005970 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e007      	b.n	8005980 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0ee      	beq.n	800595c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d119      	bne.n	80059d2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80059a8:	f7fd faca 	bl	8002f40 <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059ae:	e009      	b.n	80059c4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80059b0:	f7fd fac6 	bl	8002f40 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059be:	d901      	bls.n	80059c4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e007      	b.n	80059d4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ee      	beq.n	80059b0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e0a8      	b.n	8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2202      	movs	r2, #2
 8005a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	22ca      	movs	r2, #202	; 0xca
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2253      	movs	r2, #83	; 0x53
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d020      	beq.n	8005a66 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005a24:	f7fd fa8c 	bl	8002f40 <HAL_GetTick>
 8005a28:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005a2a:	e015      	b.n	8005a58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a2c:	f7fd fa88 	bl	8002f40 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a3a:	d90d      	bls.n	8005a58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	22ff      	movs	r2, #255	; 0xff
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2203      	movs	r2, #3
 8005a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e077      	b.n	8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e2      	bne.n	8005a2c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a74:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005a86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005a88:	f7fd fa5a 	bl	8002f40 <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005a8e:	e015      	b.n	8005abc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a90:	f7fd fa56 	bl	8002f40 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a9e:	d90d      	bls.n	8005abc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2203      	movs	r2, #3
 8005aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e045      	b.n	8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0e2      	beq.n	8005a90 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0207 	bic.w	r2, r2, #7
 8005ae0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6899      	ldr	r1, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005af2:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af8:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005afa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005afe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a12      	ldr	r2, [pc, #72]	; (8005b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b0c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b2c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	22ff      	movs	r2, #255	; 0xff
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	58000800 	.word	0x58000800

08005b54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b091      	sub	sp, #68	; 0x44
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d178      	bne.n	8005c5e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_UART_Transmit_IT+0x24>
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e071      	b.n	8005c60 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	88fa      	ldrh	r2, [r7, #6]
 8005b8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2221      	movs	r2, #33	; 0x21
 8005ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb0:	d12a      	bne.n	8005c08 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d107      	bne.n	8005bcc <HAL_UART_Transmit_IT+0x78>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a29      	ldr	r2, [pc, #164]	; (8005c6c <HAL_UART_Transmit_IT+0x118>)
 8005bc8:	679a      	str	r2, [r3, #120]	; 0x78
 8005bca:	e002      	b.n	8005bd2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <HAL_UART_Transmit_IT+0x11c>)
 8005bd0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf2:	637a      	str	r2, [r7, #52]	; 0x34
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <HAL_UART_Transmit_IT+0x7e>
 8005c06:	e028      	b.n	8005c5a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c10:	d107      	bne.n	8005c22 <HAL_UART_Transmit_IT+0xce>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <HAL_UART_Transmit_IT+0x120>)
 8005c1e:	679a      	str	r2, [r3, #120]	; 0x78
 8005c20:	e002      	b.n	8005c28 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <HAL_UART_Transmit_IT+0x124>)
 8005c26:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	613b      	str	r3, [r7, #16]
   return(result);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3744      	adds	r7, #68	; 0x44
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	08006643 	.word	0x08006643
 8005c70:	08006563 	.word	0x08006563
 8005c74:	080064a1 	.word	0x080064a1
 8005c78:	080063e9 	.word	0x080063e9

08005c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b0ba      	sub	sp, #232	; 0xe8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ca2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ca6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005caa:	4013      	ands	r3, r2
 8005cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d015      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 82e3 	beq.w	80062ac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
      }
      return;
 8005cee:	e2dd      	b.n	80062ac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8123 	beq.w	8005f40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005cfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005cfe:	4b8d      	ldr	r3, [pc, #564]	; (8005f34 <HAL_UART_IRQHandler+0x2b8>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d0a:	4b8b      	ldr	r3, [pc, #556]	; (8005f38 <HAL_UART_IRQHandler+0x2bc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8116 	beq.w	8005f40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d011      	beq.n	8005d44 <HAL_UART_IRQHandler+0xc8>
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d011      	beq.n	8005d74 <HAL_UART_IRQHandler+0xf8>
 8005d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2202      	movs	r2, #2
 8005d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f043 0204 	orr.w	r2, r3, #4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d011      	beq.n	8005da4 <HAL_UART_IRQHandler+0x128>
 8005d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2204      	movs	r2, #4
 8005d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9a:	f043 0202 	orr.w	r2, r3, #2
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d017      	beq.n	8005de0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dc0:	4b5c      	ldr	r3, [pc, #368]	; (8005f34 <HAL_UART_IRQHandler+0x2b8>)
 8005dc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <HAL_UART_IRQHandler+0x196>
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00c      	beq.n	8005e12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8249 	beq.w	80062b0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d013      	beq.n	8005e52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d054      	beq.n	8005f20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fa3a 	bl	80062f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d146      	bne.n	8005f18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1d9      	bne.n	8005e8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d017      	beq.n	8005f10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_UART_IRQHandler+0x2c0>)
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fd fa6f 	bl	80033d4 <HAL_DMA_Abort_IT>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d019      	beq.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0e:	e00f      	b.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f9d7 	bl	80062c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f16:	e00b      	b.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f9d3 	bl	80062c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1e:	e007      	b.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9cf 	bl	80062c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005f2e:	e1bf      	b.n	80062b0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	bf00      	nop
    return;
 8005f32:	e1bd      	b.n	80062b0 <HAL_UART_IRQHandler+0x634>
 8005f34:	10000001 	.word	0x10000001
 8005f38:	04000120 	.word	0x04000120
 8005f3c:	080063bd 	.word	0x080063bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f040 8153 	bne.w	80061f0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 814c 	beq.w	80061f0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8145 	beq.w	80061f0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	f040 80bb 	bne.w	80060f4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 818f 	beq.w	80062b4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	f080 8187 	bcs.w	80062b4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 8087 	bne.w	80060d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ff2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1da      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800601e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800603a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e1      	bne.n	800600e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800605a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800606e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800607c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e3      	bne.n	800604a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800609e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a0:	f023 0310 	bic.w	r3, r3, #16
 80060a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e4      	bne.n	8006090 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd f922 	bl	8003316 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8f3 	bl	80062d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f2:	e0df      	b.n	80062b4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006100:	b29b      	uxth	r3, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80d1 	beq.w	80062b8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80cc 	beq.w	80062b8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006142:	647b      	str	r3, [r7, #68]	; 0x44
 8006144:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e4      	bne.n	8006120 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	623b      	str	r3, [r7, #32]
   return(result);
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800617e:	633a      	str	r2, [r7, #48]	; 0x30
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e1      	bne.n	8006156 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0310 	bic.w	r3, r3, #16
 80061ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	69b9      	ldr	r1, [r7, #24]
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	617b      	str	r3, [r7, #20]
   return(result);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e4      	bne.n	80061a6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f875 	bl	80062d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ee:	e063      	b.n	80062b8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <HAL_UART_IRQHandler+0x59e>
 80061fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fab5 	bl	8006782 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006218:	e051      	b.n	80062be <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d014      	beq.n	8006250 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006242:	2b00      	cmp	r3, #0
 8006244:	d03a      	beq.n	80062bc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
    }
    return;
 800624e:	e035      	b.n	80062bc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_UART_IRQHandler+0x5f4>
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fa5f 	bl	800672c <UART_EndTransmit_IT>
    return;
 800626e:	e026      	b.n	80062be <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d009      	beq.n	8006290 <HAL_UART_IRQHandler+0x614>
 800627c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa8e 	bl	80067aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800628e:	e016      	b.n	80062be <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d010      	beq.n	80062be <HAL_UART_IRQHandler+0x642>
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da0c      	bge.n	80062be <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa76 	bl	8006796 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062aa:	e008      	b.n	80062be <HAL_UART_IRQHandler+0x642>
      return;
 80062ac:	bf00      	nop
 80062ae:	e006      	b.n	80062be <HAL_UART_IRQHandler+0x642>
    return;
 80062b0:	bf00      	nop
 80062b2:	e004      	b.n	80062be <HAL_UART_IRQHandler+0x642>
      return;
 80062b4:	bf00      	nop
 80062b6:	e002      	b.n	80062be <HAL_UART_IRQHandler+0x642>
      return;
 80062b8:	bf00      	nop
 80062ba:	e000      	b.n	80062be <HAL_UART_IRQHandler+0x642>
    return;
 80062bc:	bf00      	nop
  }
}
 80062be:	37e8      	adds	r7, #232	; 0xe8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b095      	sub	sp, #84	; 0x54
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006316:	643b      	str	r3, [r7, #64]	; 0x40
 8006318:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800631c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e6      	bne.n	80062f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	61fb      	str	r3, [r7, #28]
   return(result);
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	64bb      	str	r3, [r7, #72]	; 0x48
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e3      	bne.n	800632a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d118      	bne.n	800639c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60bb      	str	r3, [r7, #8]
   return(result);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	647b      	str	r3, [r7, #68]	; 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e6      	bne.n	800636a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063b0:	bf00      	nop
 80063b2:	3754      	adds	r7, #84	; 0x54
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff ff72 	bl	80062c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b08f      	sub	sp, #60	; 0x3c
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f6:	2b21      	cmp	r3, #33	; 0x21
 80063f8:	d14c      	bne.n	8006494 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d132      	bne.n	800646c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	61fb      	str	r3, [r7, #28]
   return(result);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006426:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800642a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	60bb      	str	r3, [r7, #8]
   return(result);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644c:	633b      	str	r3, [r7, #48]	; 0x30
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6979      	ldr	r1, [r7, #20]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e6      	bne.n	8006438 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800646a:	e013      	b.n	8006494 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006494:	bf00      	nop
 8006496:	373c      	adds	r7, #60	; 0x3c
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b091      	sub	sp, #68	; 0x44
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ae:	2b21      	cmp	r3, #33	; 0x21
 80064b0:	d151      	bne.n	8006556 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d132      	bne.n	8006524 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	623b      	str	r3, [r7, #32]
   return(result);
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	633b      	str	r3, [r7, #48]	; 0x30
 80064de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	69b9      	ldr	r1, [r7, #24]
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	617b      	str	r3, [r7, #20]
   return(result);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e6      	bne.n	80064f0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006522:	e018      	b.n	8006556 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800652a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006538:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006556:	bf00      	nop
 8006558:	3744      	adds	r7, #68	; 0x44
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006562:	b480      	push	{r7}
 8006564:	b091      	sub	sp, #68	; 0x44
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	2b21      	cmp	r3, #33	; 0x21
 8006572:	d160      	bne.n	8006636 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800657a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800657c:	e057      	b.n	800662e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d133      	bne.n	80065f2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	623b      	str	r3, [r7, #32]
   return(result);
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065aa:	633a      	str	r2, [r7, #48]	; 0x30
 80065ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e5      	bne.n	800658a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80065f0:	e021      	b.n	8006636 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006628:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800662a:	3b01      	subs	r3, #1
 800662c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800662e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1a4      	bne.n	800657e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006634:	e7ff      	b.n	8006636 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006636:	bf00      	nop
 8006638:	3744      	adds	r7, #68	; 0x44
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006642:	b480      	push	{r7}
 8006644:	b091      	sub	sp, #68	; 0x44
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	2b21      	cmp	r3, #33	; 0x21
 8006652:	d165      	bne.n	8006720 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800665a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800665c:	e05c      	b.n	8006718 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d133      	bne.n	80066d2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	61fb      	str	r3, [r7, #28]
   return(result);
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e5      	bne.n	800666a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6979      	ldr	r1, [r7, #20]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e6      	bne.n	800669e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80066d0:	e026      	b.n	8006720 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d018      	beq.n	8006712 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	1c9a      	adds	r2, r3, #2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006712:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006714:	3b01      	subs	r3, #1
 8006716:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006718:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800671a:	2b00      	cmp	r3, #0
 800671c:	d19f      	bne.n	800665e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800671e:	e7ff      	b.n	8006720 <UART_TxISR_16BIT_FIFOEN+0xde>
 8006720:	bf00      	nop
 8006722:	3744      	adds	r7, #68	; 0x44
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	60bb      	str	r3, [r7, #8]
   return(result);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006748:	61fb      	str	r3, [r7, #28]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6979      	ldr	r1, [r7, #20]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	613b      	str	r3, [r7, #16]
   return(result);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e6      	bne.n	8006734 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fb fdc1 	bl	80022fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677a:	bf00      	nop
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80067c8:	f7fa f94e 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80067cc:	f7fa f8de 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 80067d0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f062 0208 	orn	r2, r2, #8
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	2200      	movs	r2, #0
 80067de:	705a      	strb	r2, [r3, #1]
 80067e0:	2200      	movs	r2, #0
 80067e2:	709a      	strb	r2, [r3, #2]
 80067e4:	2200      	movs	r2, #0
 80067e6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f042 0201 	orr.w	r2, r2, #1
 80067f0:	711a      	strb	r2, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	715a      	strb	r2, [r3, #5]
 80067f6:	2200      	movs	r2, #0
 80067f8:	719a      	strb	r2, [r3, #6]
 80067fa:	2200      	movs	r2, #0
 80067fc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006804:	f7fa f90a 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006808:	f7fa f8cc 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800680c:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]

}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <otCoapMessageInitResponse>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b086      	sub	sp, #24
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	4611      	mov	r1, r2
 8006826:	461a      	mov	r2, r3
 8006828:	460b      	mov	r3, r1
 800682a:	71fb      	strb	r3, [r7, #7]
 800682c:	4613      	mov	r3, r2
 800682e:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8006830:	f7fa f91a 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006834:	f7fa f8aa 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006838:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2200      	movs	r2, #0
 800683e:	f062 0227 	orn	r2, r2, #39	; 0x27
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	2200      	movs	r2, #0
 8006846:	705a      	strb	r2, [r3, #1]
 8006848:	2200      	movs	r2, #0
 800684a:	709a      	strb	r2, [r3, #2]
 800684c:	2200      	movs	r2, #0
 800684e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2200      	movs	r2, #0
 8006854:	f042 0204 	orr.w	r2, r2, #4
 8006858:	711a      	strb	r2, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	715a      	strb	r2, [r3, #5]
 800685e:	2200      	movs	r2, #0
 8006860:	719a      	strb	r2, [r3, #6]
 8006862:	2200      	movs	r2, #0
 8006864:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 8006872:	79fa      	ldrb	r2, [r7, #7]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 8006878:	79ba      	ldrb	r2, [r7, #6]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800687e:	f7fa f8cd 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006882:	f7fa f88f 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006886:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	b2db      	uxtb	r3, r3
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <otCoapMessageGetType>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otCoapType otCoapMessageGetType(const otMessage *aMessage)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800689e:	f7fa f8e3 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80068a2:	f7fa f873 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 80068a6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TYPE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f062 0218 	orn	r2, r2, #24
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	705a      	strb	r2, [r3, #1]
 80068b6:	2200      	movs	r2, #0
 80068b8:	709a      	strb	r2, [r3, #2]
 80068ba:	2200      	movs	r2, #0
 80068bc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	711a      	strb	r2, [r3, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	715a      	strb	r2, [r3, #5]
 80068cc:	2200      	movs	r2, #0
 80068ce:	719a      	strb	r2, [r3, #6]
 80068d0:	2200      	movs	r2, #0
 80068d2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80068da:	f7fa f89f 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80068de:	f7fa f861 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80068e2:	60f8      	str	r0, [r7, #12]
  return (otCoapType)p_ot_req->Data[0];
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	b2db      	uxtb	r3, r3
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <otCoapStart>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80068fe:	f7fa f8b3 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006902:	f7fa f843 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006906:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f062 0207 	orn	r2, r2, #7
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	705a      	strb	r2, [r3, #1]
 8006916:	2200      	movs	r2, #0
 8006918:	709a      	strb	r2, [r3, #2]
 800691a:	2200      	movs	r2, #0
 800691c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	711a      	strb	r2, [r3, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	715a      	strb	r2, [r3, #5]
 800692c:	2200      	movs	r2, #0
 800692e:	719a      	strb	r2, [r3, #6]
 8006930:	2200      	movs	r2, #0
 8006932:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 8006934:	887a      	ldrh	r2, [r7, #2]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800693a:	f7fa f86f 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800693e:	f7fa f831 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006942:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	b2db      	uxtb	r3, r3
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800695c:	f7fa f884 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006960:	f7fa f814 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006964:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f062 0203 	orn	r2, r2, #3
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	2200      	movs	r2, #0
 8006972:	705a      	strb	r2, [r3, #1]
 8006974:	2200      	movs	r2, #0
 8006976:	709a      	strb	r2, [r3, #2]
 8006978:	2200      	movs	r2, #0
 800697a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	711a      	strb	r2, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	715a      	strb	r2, [r3, #5]
 800698a:	2200      	movs	r2, #0
 800698c:	719a      	strb	r2, [r3, #6]
 800698e:	2200      	movs	r2, #0
 8006990:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006998:	f7fa f840 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800699c:	f7fa f802 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80069a0:	60f8      	str	r0, [r7, #12]
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b086      	sub	sp, #24
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 80069b8:	f7fa f856 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80069bc:	f7f9 ffe6 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 80069c0:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	705a      	strb	r2, [r3, #1]
 80069d0:	2200      	movs	r2, #0
 80069d2:	709a      	strb	r2, [r3, #2]
 80069d4:	2200      	movs	r2, #0
 80069d6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	f042 0203 	orr.w	r2, r2, #3
 80069e0:	711a      	strb	r2, [r3, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	715a      	strb	r2, [r3, #5]
 80069e6:	2200      	movs	r2, #0
 80069e8:	719a      	strb	r2, [r3, #6]
 80069ea:	2200      	movs	r2, #0
 80069ec:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8006a00:	f7fa f80c 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006a04:	f7f9 ffce 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006a08:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	b2db      	uxtb	r3, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 8006a1e:	f7fa f823 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006a22:	f7f9 ffb3 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006a26:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f062 0235 	orn	r2, r2, #53	; 0x35
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	2200      	movs	r2, #0
 8006a34:	705a      	strb	r2, [r3, #1]
 8006a36:	2200      	movs	r2, #0
 8006a38:	709a      	strb	r2, [r3, #2]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	711a      	strb	r2, [r3, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	715a      	strb	r2, [r3, #5]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	719a      	strb	r2, [r3, #6]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8006a50:	f7f9 ffe4 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006a54:	f7f9 ffa6 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006a58:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8006a6e:	f7f9 fffb 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006a72:	f7f9 ff8b 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006a76:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f062 0233 	orn	r2, r2, #51	; 0x33
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	705a      	strb	r2, [r3, #1]
 8006a86:	2200      	movs	r2, #0
 8006a88:	709a      	strb	r2, [r3, #2]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	711a      	strb	r2, [r3, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	715a      	strb	r2, [r3, #5]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	719a      	strb	r2, [r3, #6]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8006aa0:	f7f9 ffbc 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006aa4:	f7f9 ff7e 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006aa8:	60f8      	str	r0, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 8006ac0:	f7f9 ffd2 	bl	8000a68 <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <otSetStateChangedCallback+0x68>)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006aca:	f7f9 ff5f 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006ace:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f062 0232 	orn	r2, r2, #50	; 0x32
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	705a      	strb	r2, [r3, #1]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	709a      	strb	r2, [r3, #2]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	711a      	strb	r2, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	715a      	strb	r2, [r3, #5]
 8006af4:	2200      	movs	r2, #0
 8006af6:	719a      	strb	r2, [r3, #6]
 8006af8:	2200      	movs	r2, #0
 8006afa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006b02:	f7f9 ff8b 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006b06:	f7f9 ff4d 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006b0a:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	b2db      	uxtb	r3, r3
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000390 	.word	0x20000390

08006b20 <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8006b28:	f7f9 ff9e 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006b2c:	f7f9 ff2e 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006b30:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f062 022c 	orn	r2, r2, #44	; 0x2c
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	705a      	strb	r2, [r3, #1]
 8006b40:	2200      	movs	r2, #0
 8006b42:	709a      	strb	r2, [r3, #2]
 8006b44:	2200      	movs	r2, #0
 8006b46:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	711a      	strb	r2, [r3, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	715a      	strb	r2, [r3, #5]
 8006b52:	2200      	movs	r2, #0
 8006b54:	719a      	strb	r2, [r3, #6]
 8006b56:	2200      	movs	r2, #0
 8006b58:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8006b5a:	f7f9 ff5f 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006b5e:	f7f9 ff21 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006b62:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	b2db      	uxtb	r3, r3
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8006b7e:	f7f9 ff73 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006b82:	f7f9 ff03 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006b86:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	705a      	strb	r2, [r3, #1]
 8006b96:	2200      	movs	r2, #0
 8006b98:	709a      	strb	r2, [r3, #2]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	711a      	strb	r2, [r3, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	715a      	strb	r2, [r3, #5]
 8006bac:	2200      	movs	r2, #0
 8006bae:	719a      	strb	r2, [r3, #6]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006bba:	f7f9 ff2f 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006bbe:	f7f9 fef1 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006bc2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	b2db      	uxtb	r3, r3
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8006bde:	f7f9 ff43 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006be2:	f7f9 fed3 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006be6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f042 0207 	orr.w	r2, r2, #7
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	705a      	strb	r2, [r3, #1]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	709a      	strb	r2, [r3, #2]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	711a      	strb	r2, [r3, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	715a      	strb	r2, [r3, #5]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	719a      	strb	r2, [r3, #6]
 8006c10:	2200      	movs	r2, #0
 8006c12:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006c1a:	f7f9 feff 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006c1e:	f7f9 fec1 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006c22:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	b2db      	uxtb	r3, r3
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8006c3e:	f7f9 ff13 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006c42:	f7f9 fea3 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006c46:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f042 020e 	orr.w	r2, r2, #14
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	705a      	strb	r2, [r3, #1]
 8006c56:	2200      	movs	r2, #0
 8006c58:	709a      	strb	r2, [r3, #2]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	711a      	strb	r2, [r3, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	715a      	strb	r2, [r3, #5]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	719a      	strb	r2, [r3, #6]
 8006c70:	2200      	movs	r2, #0
 8006c72:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8006c74:	887a      	ldrh	r2, [r7, #2]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006c7a:	f7f9 fecf 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006c7e:	f7f9 fe91 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006c82:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	b2db      	uxtb	r3, r3
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8006c9c:	f7f9 fee4 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006ca0:	f7f9 fe74 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006ca4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f042 0210 	orr.w	r2, r2, #16
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	705a      	strb	r2, [r3, #1]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	709a      	strb	r2, [r3, #2]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f042 0201 	orr.w	r2, r2, #1
 8006cc4:	711a      	strb	r2, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	715a      	strb	r2, [r3, #5]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	719a      	strb	r2, [r3, #6]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006cd8:	f7f9 fea0 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006cdc:	f7f9 fe62 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006ce0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	b2db      	uxtb	r3, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8006cf8:	f7f9 feb6 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006cfc:	f7f9 fe46 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006d00:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f042 0216 	orr.w	r2, r2, #22
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	705a      	strb	r2, [r3, #1]
 8006d14:	2200      	movs	r2, #0
 8006d16:	709a      	strb	r2, [r3, #2]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	711a      	strb	r2, [r3, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	715a      	strb	r2, [r3, #5]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	719a      	strb	r2, [r3, #6]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006d38:	f7f9 fe70 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006d3c:	f7f9 fe32 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006d40:	60f8      	str	r0, [r7, #12]
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8006d52:	f7f9 fe89 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006d56:	f7f9 fe19 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006d5a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f042 0219 	orr.w	r2, r2, #25
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f042 0201 	orr.w	r2, r2, #1
 8006d6c:	705a      	strb	r2, [r3, #1]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	709a      	strb	r2, [r3, #2]
 8006d72:	2200      	movs	r2, #0
 8006d74:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	711a      	strb	r2, [r3, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	715a      	strb	r2, [r3, #5]
 8006d84:	2200      	movs	r2, #0
 8006d86:	719a      	strb	r2, [r3, #6]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006d92:	f7f9 fe43 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006d96:	f7f9 fe05 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006d9a:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	b29b      	uxth	r3, r3
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <otMessageRead>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	461a      	mov	r2, r3
 8006db6:	460b      	mov	r3, r1
 8006db8:	817b      	strh	r3, [r7, #10]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8006dbe:	f7f9 fe53 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006dc2:	f7f9 fde3 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8006dc6:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f042 021f 	orr.w	r2, r2, #31
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	705a      	strb	r2, [r3, #1]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	709a      	strb	r2, [r3, #2]
 8006dde:	2200      	movs	r2, #0
 8006de0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f042 0204 	orr.w	r2, r2, #4
 8006dea:	711a      	strb	r2, [r3, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	715a      	strb	r2, [r3, #5]
 8006df0:	2200      	movs	r2, #0
 8006df2:	719a      	strb	r2, [r3, #6]
 8006df4:	2200      	movs	r2, #0
 8006df6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8006dfe:	897a      	ldrh	r2, [r7, #10]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8006e0a:	893a      	ldrh	r2, [r7, #8]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8006e10:	f7f9 fe04 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006e14:	f7f9 fdc6 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006e18:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	b29b      	uxth	r3, r3
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8006e28:	b5b0      	push	{r4, r5, r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8006e32:	f7f9 fdc3 	bl	80009bc <THREAD_Get_NotificationPayloadBuffer>
 8006e36:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	2b48      	cmp	r3, #72	; 0x48
 8006e40:	f200 8543 	bhi.w	80078ca <OpenThread_CallBack_Processing+0xaa2>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <OpenThread_CallBack_Processing+0x24>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	080071b7 	.word	0x080071b7
 8006e50:	0800726f 	.word	0x0800726f
 8006e54:	080072c7 	.word	0x080072c7
 8006e58:	08007373 	.word	0x08007373
 8006e5c:	0800737f 	.word	0x0800737f
 8006e60:	0800739d 	.word	0x0800739d
 8006e64:	080078cb 	.word	0x080078cb
 8006e68:	080073c7 	.word	0x080073c7
 8006e6c:	080073e1 	.word	0x080073e1
 8006e70:	08007415 	.word	0x08007415
 8006e74:	08007433 	.word	0x08007433
 8006e78:	08007451 	.word	0x08007451
 8006e7c:	080078cb 	.word	0x080078cb
 8006e80:	0800747b 	.word	0x0800747b
 8006e84:	080074dd 	.word	0x080074dd
 8006e88:	08007503 	.word	0x08007503
 8006e8c:	08007523 	.word	0x08007523
 8006e90:	08007541 	.word	0x08007541
 8006e94:	080078cb 	.word	0x080078cb
 8006e98:	08007569 	.word	0x08007569
 8006e9c:	08007591 	.word	0x08007591
 8006ea0:	080078cb 	.word	0x080078cb
 8006ea4:	080075af 	.word	0x080075af
 8006ea8:	080075d3 	.word	0x080075d3
 8006eac:	080075fd 	.word	0x080075fd
 8006eb0:	08006fdd 	.word	0x08006fdd
 8006eb4:	08007001 	.word	0x08007001
 8006eb8:	08007025 	.word	0x08007025
 8006ebc:	0800704f 	.word	0x0800704f
 8006ec0:	080078cb 	.word	0x080078cb
 8006ec4:	0800761d 	.word	0x0800761d
 8006ec8:	080078cb 	.word	0x080078cb
 8006ecc:	080078cb 	.word	0x080078cb
 8006ed0:	080078cb 	.word	0x080078cb
 8006ed4:	080078cb 	.word	0x080078cb
 8006ed8:	080078cb 	.word	0x080078cb
 8006edc:	080072a5 	.word	0x080072a5
 8006ee0:	08007305 	.word	0x08007305
 8006ee4:	0800732b 	.word	0x0800732b
 8006ee8:	08007351 	.word	0x08007351
 8006eec:	0800763f 	.word	0x0800763f
 8006ef0:	0800767d 	.word	0x0800767d
 8006ef4:	08007695 	.word	0x08007695
 8006ef8:	080071d3 	.word	0x080071d3
 8006efc:	08007239 	.word	0x08007239
 8006f00:	080078cb 	.word	0x080078cb
 8006f04:	08007079 	.word	0x08007079
 8006f08:	08007099 	.word	0x08007099
 8006f0c:	080070b9 	.word	0x080070b9
 8006f10:	080070d9 	.word	0x080070d9
 8006f14:	080070fb 	.word	0x080070fb
 8006f18:	0800711d 	.word	0x0800711d
 8006f1c:	080078cb 	.word	0x080078cb
 8006f20:	080078cb 	.word	0x080078cb
 8006f24:	08006f71 	.word	0x08006f71
 8006f28:	08006f95 	.word	0x08006f95
 8006f2c:	08006fb9 	.word	0x08006fb9
 8006f30:	080078cb 	.word	0x080078cb
 8006f34:	080078cb 	.word	0x080078cb
 8006f38:	0800713f 	.word	0x0800713f
 8006f3c:	0800715d 	.word	0x0800715d
 8006f40:	080078cb 	.word	0x080078cb
 8006f44:	0800718f 	.word	0x0800718f
 8006f48:	08007251 	.word	0x08007251
 8006f4c:	080076c3 	.word	0x080076c3
 8006f50:	080076e1 	.word	0x080076e1
 8006f54:	080076ff 	.word	0x080076ff
 8006f58:	0800777d 	.word	0x0800777d
 8006f5c:	080077ab 	.word	0x080077ab
 8006f60:	080077ef 	.word	0x080077ef
 8006f64:	08007859 	.word	0x08007859
 8006f68:	08007897 	.word	0x08007897
 8006f6c:	08007823 	.word	0x08007823
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 8006f70:	4b9f      	ldr	r3, [pc, #636]	; (80071f0 <OpenThread_CallBack_Processing+0x3c8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 84ab 	beq.w	80078d0 <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8006f7a:	4b9d      	ldr	r3, [pc, #628]	; (80071f0 <OpenThread_CallBack_Processing+0x3c8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	6892      	ldr	r2, [r2, #8]
 8006f82:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8006f88:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8006f8e:	4798      	blx	r3
    }
    break;
 8006f90:	f000 bc9e 	b.w	80078d0 <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8006f94:	4b97      	ldr	r3, [pc, #604]	; (80071f4 <OpenThread_CallBack_Processing+0x3cc>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 849b 	beq.w	80078d4 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8006f9e:	4b95      	ldr	r3, [pc, #596]	; (80071f4 <OpenThread_CallBack_Processing+0x3cc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	6892      	ldr	r2, [r2, #8]
 8006fa6:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8006fac:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8006fb2:	4798      	blx	r3
    }
    break;
 8006fb4:	f000 bc8e 	b.w	80078d4 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8006fb8:	4b8f      	ldr	r3, [pc, #572]	; (80071f8 <OpenThread_CallBack_Processing+0x3d0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 848b 	beq.w	80078d8 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8006fc2:	4b8d      	ldr	r3, [pc, #564]	; (80071f8 <OpenThread_CallBack_Processing+0x3d0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	6892      	ldr	r2, [r2, #8]
 8006fca:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8006fd0:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8006fd6:	4798      	blx	r3
    }
    break;
 8006fd8:	f000 bc7e 	b.w	80078d8 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8006fdc:	4b87      	ldr	r3, [pc, #540]	; (80071fc <OpenThread_CallBack_Processing+0x3d4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 847b 	beq.w	80078dc <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8006fe6:	4b85      	ldr	r3, [pc, #532]	; (80071fc <OpenThread_CallBack_Processing+0x3d4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	6892      	ldr	r2, [r2, #8]
 8006fee:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8006ff4:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8006ffa:	4798      	blx	r3
    }
    break;
 8006ffc:	f000 bc6e 	b.w	80078dc <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 8007000:	4b7f      	ldr	r3, [pc, #508]	; (8007200 <OpenThread_CallBack_Processing+0x3d8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 846b 	beq.w	80078e0 <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800700a:	4b7d      	ldr	r3, [pc, #500]	; (8007200 <OpenThread_CallBack_Processing+0x3d8>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	6892      	ldr	r2, [r2, #8]
 8007012:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8007018:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800701e:	4798      	blx	r3
    }
    break;
 8007020:	f000 bc5e 	b.w	80078e0 <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 8007024:	4b77      	ldr	r3, [pc, #476]	; (8007204 <OpenThread_CallBack_Processing+0x3dc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 845b 	beq.w	80078e4 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800702e:	4b75      	ldr	r3, [pc, #468]	; (8007204 <OpenThread_CallBack_Processing+0x3dc>)
 8007030:	681c      	ldr	r4, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800703c:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8007042:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8007048:	47a0      	blx	r4
    }
    break;
 800704a:	f000 bc4b 	b.w	80078e4 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 800704e:	4b6e      	ldr	r3, [pc, #440]	; (8007208 <OpenThread_CallBack_Processing+0x3e0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8448 	beq.w	80078e8 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8007058:	4b6b      	ldr	r3, [pc, #428]	; (8007208 <OpenThread_CallBack_Processing+0x3e0>)
 800705a:	681c      	ldr	r4, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8007066:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800706c:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8007072:	47a0      	blx	r4
    }
    break;
 8007074:	f000 bc38 	b.w	80078e8 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 8007078:	4b64      	ldr	r3, [pc, #400]	; (800720c <OpenThread_CallBack_Processing+0x3e4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8435 	beq.w	80078ec <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8007082:	4b62      	ldr	r3, [pc, #392]	; (800720c <OpenThread_CallBack_Processing+0x3e4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	6892      	ldr	r2, [r2, #8]
 800708a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8007090:	4611      	mov	r1, r2
 8007092:	4798      	blx	r3
    }
    break;
 8007094:	f000 bc2a 	b.w	80078ec <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 8007098:	4b5d      	ldr	r3, [pc, #372]	; (8007210 <OpenThread_CallBack_Processing+0x3e8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8427 	beq.w	80078f0 <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 80070a2:	4b5b      	ldr	r3, [pc, #364]	; (8007210 <OpenThread_CallBack_Processing+0x3e8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	6892      	ldr	r2, [r2, #8]
 80070aa:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 80070b0:	4611      	mov	r1, r2
 80070b2:	4798      	blx	r3
    }
    break;
 80070b4:	f000 bc1c 	b.w	80078f0 <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 80070b8:	4b56      	ldr	r3, [pc, #344]	; (8007214 <OpenThread_CallBack_Processing+0x3ec>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8419 	beq.w	80078f4 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 80070c2:	4b54      	ldr	r3, [pc, #336]	; (8007214 <OpenThread_CallBack_Processing+0x3ec>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	6892      	ldr	r2, [r2, #8]
 80070ca:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 80070d0:	4611      	mov	r1, r2
 80070d2:	4798      	blx	r3
    }
    break;
 80070d4:	f000 bc0e 	b.w	80078f4 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 80070d8:	4b4f      	ldr	r3, [pc, #316]	; (8007218 <OpenThread_CallBack_Processing+0x3f0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 840b 	beq.w	80078f8 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 80070e2:	4b4d      	ldr	r3, [pc, #308]	; (8007218 <OpenThread_CallBack_Processing+0x3f0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	6892      	ldr	r2, [r2, #8]
 80070ea:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 80070f0:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 80070f6:	4798      	blx	r3
    }
    break;
 80070f8:	e3fe      	b.n	80078f8 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 80070fa:	4b48      	ldr	r3, [pc, #288]	; (800721c <OpenThread_CallBack_Processing+0x3f4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 83fc 	beq.w	80078fc <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 8007104:	4b45      	ldr	r3, [pc, #276]	; (800721c <OpenThread_CallBack_Processing+0x3f4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	6892      	ldr	r2, [r2, #8]
 800710c:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 8007112:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 8007118:	4798      	blx	r3
    }
    break;
 800711a:	e3ef      	b.n	80078fc <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 800711c:	4b3f      	ldr	r3, [pc, #252]	; (800721c <OpenThread_CallBack_Processing+0x3f4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 83ed 	beq.w	8007900 <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 8007126:	4b3e      	ldr	r3, [pc, #248]	; (8007220 <OpenThread_CallBack_Processing+0x3f8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	6892      	ldr	r2, [r2, #8]
 800712e:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 8007134:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800713a:	4798      	blx	r3
    }
    break;
 800713c:	e3e0      	b.n	8007900 <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 800713e:	4b39      	ldr	r3, [pc, #228]	; (8007224 <OpenThread_CallBack_Processing+0x3fc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 83de 	beq.w	8007904 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8007148:	4b36      	ldr	r3, [pc, #216]	; (8007224 <OpenThread_CallBack_Processing+0x3fc>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	6892      	ldr	r2, [r2, #8]
 8007150:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8007156:	4611      	mov	r1, r2
 8007158:	4798      	blx	r3
    }
    break;
 800715a:	e3d3      	b.n	8007904 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 800715c:	4b32      	ldr	r3, [pc, #200]	; (8007228 <OpenThread_CallBack_Processing+0x400>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 83d1 	beq.w	8007908 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 8007166:	4b30      	ldr	r3, [pc, #192]	; (8007228 <OpenThread_CallBack_Processing+0x400>)
 8007168:	681c      	ldr	r4, [r3, #0]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 8007174:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 800717a:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 8007180:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462b      	mov	r3, r5
 800718a:	47a0      	blx	r4
    }
    break;
 800718c:	e3bc      	b.n	8007908 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 800718e:	4b27      	ldr	r3, [pc, #156]	; (800722c <OpenThread_CallBack_Processing+0x404>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 83ba 	beq.w	800790c <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8007198:	4b24      	ldr	r3, [pc, #144]	; (800722c <OpenThread_CallBack_Processing+0x404>)
 800719a:	681c      	ldr	r4, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 80071a6:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 80071ac:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 80071b2:	47a0      	blx	r4
    }
    break;
 80071b4:	e3aa      	b.n	800790c <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 80071b6:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <OpenThread_CallBack_Processing+0x408>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 83a8 	beq.w	8007910 <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 80071c0:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <OpenThread_CallBack_Processing+0x408>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 80071cc:	4611      	mov	r1, r2
 80071ce:	4798      	blx	r3
    }
    break;
 80071d0:	e39e      	b.n	8007910 <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 80071d2:	4b18      	ldr	r3, [pc, #96]	; (8007234 <OpenThread_CallBack_Processing+0x40c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 839c 	beq.w	8007914 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 80071dc:	4b15      	ldr	r3, [pc, #84]	; (8007234 <OpenThread_CallBack_Processing+0x40c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	6892      	ldr	r2, [r2, #8]
 80071e4:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 80071ea:	4611      	mov	r1, r2
 80071ec:	4798      	blx	r3
    }
    break;
 80071ee:	e391      	b.n	8007914 <OpenThread_CallBack_Processing+0xaec>
 80071f0:	20000424 	.word	0x20000424
 80071f4:	2000042c 	.word	0x2000042c
 80071f8:	20000428 	.word	0x20000428
 80071fc:	200003b8 	.word	0x200003b8
 8007200:	200003b4 	.word	0x200003b4
 8007204:	200003bc 	.word	0x200003bc
 8007208:	200003b0 	.word	0x200003b0
 800720c:	20000430 	.word	0x20000430
 8007210:	20000434 	.word	0x20000434
 8007214:	20000438 	.word	0x20000438
 8007218:	20000440 	.word	0x20000440
 800721c:	2000043c 	.word	0x2000043c
 8007220:	20000444 	.word	0x20000444
 8007224:	20000450 	.word	0x20000450
 8007228:	2000044c 	.word	0x2000044c
 800722c:	20000448 	.word	0x20000448
 8007230:	20000390 	.word	0x20000390
 8007234:	200003c0 	.word	0x200003c0
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 8007238:	4b97      	ldr	r3, [pc, #604]	; (8007498 <OpenThread_CallBack_Processing+0x670>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 836b 	beq.w	8007918 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 8007242:	4b95      	ldr	r3, [pc, #596]	; (8007498 <OpenThread_CallBack_Processing+0x670>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	6892      	ldr	r2, [r2, #8]
 800724a:	4610      	mov	r0, r2
 800724c:	4798      	blx	r3
    }
    break;
 800724e:	e363      	b.n	8007918 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 8007250:	4b92      	ldr	r3, [pc, #584]	; (800749c <OpenThread_CallBack_Processing+0x674>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8361 	beq.w	800791c <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800725a:	4b90      	ldr	r3, [pc, #576]	; (800749c <OpenThread_CallBack_Processing+0x674>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	6892      	ldr	r2, [r2, #8]
 8007262:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 8007268:	4611      	mov	r1, r2
 800726a:	4798      	blx	r3
    }
    break;
 800726c:	e356      	b.n	800791c <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	461a      	mov	r2, r3
 8007274:	4b8a      	ldr	r3, [pc, #552]	; (80074a0 <OpenThread_CallBack_Processing+0x678>)
 8007276:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 8007278:	4b89      	ldr	r3, [pc, #548]	; (80074a0 <OpenThread_CallBack_Processing+0x678>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4a89      	ldr	r2, [pc, #548]	; (80074a4 <OpenThread_CallBack_Processing+0x67c>)
 8007280:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 8007282:	4b88      	ldr	r3, [pc, #544]	; (80074a4 <OpenThread_CallBack_Processing+0x67c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 834a 	beq.w	8007920 <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800728c:	4b85      	ldr	r3, [pc, #532]	; (80074a4 <OpenThread_CallBack_Processing+0x67c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a83      	ldr	r2, [pc, #524]	; (80074a0 <OpenThread_CallBack_Processing+0x678>)
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800729a:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 80072a0:	4798      	blx	r3
    }
    break;
 80072a2:	e33d      	b.n	8007920 <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 80072a4:	4b80      	ldr	r3, [pc, #512]	; (80074a8 <OpenThread_CallBack_Processing+0x680>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 833b 	beq.w	8007924 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 80072ae:	4b7e      	ldr	r3, [pc, #504]	; (80074a8 <OpenThread_CallBack_Processing+0x680>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	6892      	ldr	r2, [r2, #8]
 80072b6:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 80072bc:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 80072c2:	4798      	blx	r3
    }
    break;
 80072c4:	e32e      	b.n	8007924 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	461a      	mov	r2, r3
 80072cc:	4b77      	ldr	r3, [pc, #476]	; (80074ac <OpenThread_CallBack_Processing+0x684>)
 80072ce:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 80072d0:	4b76      	ldr	r3, [pc, #472]	; (80074ac <OpenThread_CallBack_Processing+0x684>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4a76      	ldr	r2, [pc, #472]	; (80074b0 <OpenThread_CallBack_Processing+0x688>)
 80072d8:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 80072da:	4b75      	ldr	r3, [pc, #468]	; (80074b0 <OpenThread_CallBack_Processing+0x688>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8322 	beq.w	8007928 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80072e4:	4b72      	ldr	r3, [pc, #456]	; (80074b0 <OpenThread_CallBack_Processing+0x688>)
 80072e6:	681c      	ldr	r4, [r3, #0]
 80072e8:	4b70      	ldr	r3, [pc, #448]	; (80074ac <OpenThread_CallBack_Processing+0x684>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80072f2:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80072f8:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	47a0      	blx	r4
    }
    break;
 8007302:	e311      	b.n	8007928 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 8007304:	4b6b      	ldr	r3, [pc, #428]	; (80074b4 <OpenThread_CallBack_Processing+0x68c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 830f 	beq.w	800792c <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800730e:	4b69      	ldr	r3, [pc, #420]	; (80074b4 <OpenThread_CallBack_Processing+0x68c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	6892      	ldr	r2, [r2, #8]
 8007316:	2a00      	cmp	r2, #0
 8007318:	bf14      	ite	ne
 800731a:	2201      	movne	r2, #1
 800731c:	2200      	moveq	r2, #0
 800731e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8007324:	4611      	mov	r1, r2
 8007326:	4798      	blx	r3
    }
    break;
 8007328:	e300      	b.n	800792c <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800732a:	4b62      	ldr	r3, [pc, #392]	; (80074b4 <OpenThread_CallBack_Processing+0x68c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 82fe 	beq.w	8007930 <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8007334:	4b5f      	ldr	r3, [pc, #380]	; (80074b4 <OpenThread_CallBack_Processing+0x68c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	6892      	ldr	r2, [r2, #8]
 800733c:	2a00      	cmp	r2, #0
 800733e:	bf14      	ite	ne
 8007340:	2201      	movne	r2, #1
 8007342:	2200      	moveq	r2, #0
 8007344:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800734a:	4611      	mov	r1, r2
 800734c:	4798      	blx	r3
    }
    break;
 800734e:	e2ef      	b.n	8007930 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 8007350:	4b59      	ldr	r3, [pc, #356]	; (80074b8 <OpenThread_CallBack_Processing+0x690>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 82ed 	beq.w	8007934 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800735a:	4b57      	ldr	r3, [pc, #348]	; (80074b8 <OpenThread_CallBack_Processing+0x690>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	6892      	ldr	r2, [r2, #8]
 8007362:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8007368:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800736e:	4798      	blx	r3
    }
    break;
 8007370:	e2e0      	b.n	8007934 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 8007372:	2001      	movs	r0, #1
 8007374:	f000 fb45 	bl	8007a02 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 8007378:	f7fb ffa1 	bl	80032be <HAL_NVIC_SystemReset>
    break;
 800737c:	e317      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800737e:	4b4f      	ldr	r3, [pc, #316]	; (80074bc <OpenThread_CallBack_Processing+0x694>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 82d8 	beq.w	8007938 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8007388:	4b4c      	ldr	r3, [pc, #304]	; (80074bc <OpenThread_CallBack_Processing+0x694>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	6892      	ldr	r2, [r2, #8]
 8007390:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8007396:	4611      	mov	r1, r2
 8007398:	4798      	blx	r3
    }
    break;
 800739a:	e2cd      	b.n	8007938 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800739c:	4b48      	ldr	r3, [pc, #288]	; (80074c0 <OpenThread_CallBack_Processing+0x698>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 82cb 	beq.w	800793c <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 80073a6:	4b46      	ldr	r3, [pc, #280]	; (80074c0 <OpenThread_CallBack_Processing+0x698>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	6892      	ldr	r2, [r2, #8]
 80073ae:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 80073b4:	2a00      	cmp	r2, #0
 80073b6:	bf14      	ite	ne
 80073b8:	2201      	movne	r2, #1
 80073ba:	2200      	moveq	r2, #0
 80073bc:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 80073c2:	4798      	blx	r3
    }
    break;
 80073c4:	e2ba      	b.n	800793c <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 80073c6:	4b3f      	ldr	r3, [pc, #252]	; (80074c4 <OpenThread_CallBack_Processing+0x69c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 82b8 	beq.w	8007940 <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 80073d0:	4b3c      	ldr	r3, [pc, #240]	; (80074c4 <OpenThread_CallBack_Processing+0x69c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 80073d8:	4611      	mov	r1, r2
 80073da:	2000      	movs	r0, #0
 80073dc:	4798      	blx	r3
    }
    break;
 80073de:	e2af      	b.n	8007940 <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 80073e0:	4b39      	ldr	r3, [pc, #228]	; (80074c8 <OpenThread_CallBack_Processing+0x6a0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 82ad 	beq.w	8007944 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80073ea:	4b37      	ldr	r3, [pc, #220]	; (80074c8 <OpenThread_CallBack_Processing+0x6a0>)
 80073ec:	681c      	ldr	r4, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80073f8:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80073fe:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8007404:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800740a:	b2db      	uxtb	r3, r3
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	462b      	mov	r3, r5
 8007410:	47a0      	blx	r4
    }
    break;
 8007412:	e297      	b.n	8007944 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 8007414:	4b2d      	ldr	r3, [pc, #180]	; (80074cc <OpenThread_CallBack_Processing+0x6a4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8295 	beq.w	8007948 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800741e:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <OpenThread_CallBack_Processing+0x6a4>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	6892      	ldr	r2, [r2, #8]
 8007426:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800742c:	4611      	mov	r1, r2
 800742e:	4798      	blx	r3
    }
    break;
 8007430:	e28a      	b.n	8007948 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 8007432:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <OpenThread_CallBack_Processing+0x6a8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8288 	beq.w	800794c <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800743c:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <OpenThread_CallBack_Processing+0x6a8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	6892      	ldr	r2, [r2, #8]
 8007444:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800744a:	4611      	mov	r1, r2
 800744c:	4798      	blx	r3
    }
    break;
 800744e:	e27d      	b.n	800794c <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 8007450:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <OpenThread_CallBack_Processing+0x6ac>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 827b 	beq.w	8007950 <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800745a:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <OpenThread_CallBack_Processing+0x6ac>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	6892      	ldr	r2, [r2, #8]
 8007462:	4610      	mov	r0, r2
          p_notification->Data[1],
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8007468:	2a00      	cmp	r2, #0
 800746a:	bf14      	ite	ne
 800746c:	2201      	movne	r2, #1
 800746e:	2200      	moveq	r2, #0
 8007470:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8007476:	4798      	blx	r3
    }
    break;
 8007478:	e26a      	b.n	8007950 <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800747a:	4b17      	ldr	r3, [pc, #92]	; (80074d8 <OpenThread_CallBack_Processing+0x6b0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8268 	beq.w	8007954 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8007484:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <OpenThread_CallBack_Processing+0x6b0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	6892      	ldr	r2, [r2, #8]
 800748c:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8007492:	4611      	mov	r1, r2
 8007494:	4798      	blx	r3
    }
    break;
 8007496:	e25d      	b.n	8007954 <OpenThread_CallBack_Processing+0xb2c>
 8007498:	200003c4 	.word	0x200003c4
 800749c:	200003c8 	.word	0x200003c8
 80074a0:	2000040c 	.word	0x2000040c
 80074a4:	20000400 	.word	0x20000400
 80074a8:	20000404 	.word	0x20000404
 80074ac:	20000410 	.word	0x20000410
 80074b0:	20000408 	.word	0x20000408
 80074b4:	20000418 	.word	0x20000418
 80074b8:	20000414 	.word	0x20000414
 80074bc:	20000398 	.word	0x20000398
 80074c0:	2000039c 	.word	0x2000039c
 80074c4:	20000394 	.word	0x20000394
 80074c8:	200003a0 	.word	0x200003a0
 80074cc:	200003a4 	.word	0x200003a4
 80074d0:	200003a8 	.word	0x200003a8
 80074d4:	200003ac 	.word	0x200003ac
 80074d8:	200003cc 	.word	0x200003cc
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 80074dc:	4b95      	ldr	r3, [pc, #596]	; (8007734 <OpenThread_CallBack_Processing+0x90c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8239 	beq.w	8007958 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80074e6:	4b93      	ldr	r3, [pc, #588]	; (8007734 <OpenThread_CallBack_Processing+0x90c>)
 80074e8:	681c      	ldr	r4, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80074f2:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80074f8:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80074fe:	47a0      	blx	r4
    }
    break;
 8007500:	e22a      	b.n	8007958 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 8007502:	4b8d      	ldr	r3, [pc, #564]	; (8007738 <OpenThread_CallBack_Processing+0x910>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 8228 	beq.w	800795c <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800750c:	4b8a      	ldr	r3, [pc, #552]	; (8007738 <OpenThread_CallBack_Processing+0x910>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	6892      	ldr	r2, [r2, #8]
 8007514:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800751e:	4798      	blx	r3
    }
    break;
 8007520:	e21c      	b.n	800795c <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 8007522:	4b86      	ldr	r3, [pc, #536]	; (800773c <OpenThread_CallBack_Processing+0x914>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 821a 	beq.w	8007960 <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800752c:	4b83      	ldr	r3, [pc, #524]	; (800773c <OpenThread_CallBack_Processing+0x914>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	6892      	ldr	r2, [r2, #8]
 8007534:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800753a:	4611      	mov	r1, r2
 800753c:	4798      	blx	r3
    }
    break;
 800753e:	e20f      	b.n	8007960 <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 8007540:	4b7f      	ldr	r3, [pc, #508]	; (8007740 <OpenThread_CallBack_Processing+0x918>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 820d 	beq.w	8007964 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800754a:	4b7d      	ldr	r3, [pc, #500]	; (8007740 <OpenThread_CallBack_Processing+0x918>)
 800754c:	681c      	ldr	r4, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8007558:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800755e:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8007564:	47a0      	blx	r4
    }
    break;
 8007566:	e1fd      	b.n	8007964 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 8007568:	4b76      	ldr	r3, [pc, #472]	; (8007744 <OpenThread_CallBack_Processing+0x91c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 81fb 	beq.w	8007968 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8007572:	4b74      	ldr	r3, [pc, #464]	; (8007744 <OpenThread_CallBack_Processing+0x91c>)
 8007574:	681c      	ldr	r4, [r3, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8007580:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8007586:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800758c:	47a0      	blx	r4
    }
    break;
 800758e:	e1eb      	b.n	8007968 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 8007590:	4b6d      	ldr	r3, [pc, #436]	; (8007748 <OpenThread_CallBack_Processing+0x920>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 81e9 	beq.w	800796c <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800759a:	4b6b      	ldr	r3, [pc, #428]	; (8007748 <OpenThread_CallBack_Processing+0x920>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	6892      	ldr	r2, [r2, #8]
 80075a2:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 80075a8:	4611      	mov	r1, r2
 80075aa:	4798      	blx	r3
    }
    break;
 80075ac:	e1de      	b.n	800796c <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 80075ae:	4b67      	ldr	r3, [pc, #412]	; (800774c <OpenThread_CallBack_Processing+0x924>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 81dc 	beq.w	8007970 <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80075b8:	4b64      	ldr	r3, [pc, #400]	; (800774c <OpenThread_CallBack_Processing+0x924>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	6892      	ldr	r2, [r2, #8]
 80075c0:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80075c6:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	4798      	blx	r3
    }
    break;
 80075d0:	e1ce      	b.n	8007970 <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 80075d2:	4b5f      	ldr	r3, [pc, #380]	; (8007750 <OpenThread_CallBack_Processing+0x928>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 81cc 	beq.w	8007974 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80075dc:	4b5c      	ldr	r3, [pc, #368]	; (8007750 <OpenThread_CallBack_Processing+0x928>)
 80075de:	681c      	ldr	r4, [r3, #0]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80075ea:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80075f0:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	47a0      	blx	r4
    }
    break;
 80075fa:	e1bb      	b.n	8007974 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 80075fc:	4b55      	ldr	r3, [pc, #340]	; (8007754 <OpenThread_CallBack_Processing+0x92c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 81b9 	beq.w	8007978 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8007606:	4b53      	ldr	r3, [pc, #332]	; (8007754 <OpenThread_CallBack_Processing+0x92c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6892      	ldr	r2, [r2, #8]
 800760e:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8007614:	b252      	sxtb	r2, r2
 8007616:	4611      	mov	r1, r2
 8007618:	4798      	blx	r3
    }
    break;
 800761a:	e1ad      	b.n	8007978 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800761c:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <OpenThread_CallBack_Processing+0x930>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 81ab 	beq.w	800797c <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 8007626:	4b4c      	ldr	r3, [pc, #304]	; (8007758 <OpenThread_CallBack_Processing+0x930>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	6892      	ldr	r2, [r2, #8]
 800762e:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 8007634:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800763a:	4798      	blx	r3
    }
    break;
 800763c:	e19e      	b.n	800797c <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	461a      	mov	r2, r3
 8007644:	4b45      	ldr	r3, [pc, #276]	; (800775c <OpenThread_CallBack_Processing+0x934>)
 8007646:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 8007648:	4b44      	ldr	r3, [pc, #272]	; (800775c <OpenThread_CallBack_Processing+0x934>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	4a44      	ldr	r2, [pc, #272]	; (8007760 <OpenThread_CallBack_Processing+0x938>)
 8007650:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 8007652:	4b43      	ldr	r3, [pc, #268]	; (8007760 <OpenThread_CallBack_Processing+0x938>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8192 	beq.w	8007980 <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800765c:	4b40      	ldr	r3, [pc, #256]	; (8007760 <OpenThread_CallBack_Processing+0x938>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a3e      	ldr	r2, [pc, #248]	; (800775c <OpenThread_CallBack_Processing+0x934>)
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800766a:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	609a      	str	r2, [r3, #8]
      }
      break;
 800767a:	e181      	b.n	8007980 <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800767c:	4b39      	ldr	r3, [pc, #228]	; (8007764 <OpenThread_CallBack_Processing+0x93c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 817f 	beq.w	8007984 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 8007686:	4b37      	ldr	r3, [pc, #220]	; (8007764 <OpenThread_CallBack_Processing+0x93c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	6892      	ldr	r2, [r2, #8]
 800768e:	4610      	mov	r0, r2
 8007690:	4798      	blx	r3
    }
    break;
 8007692:	e177      	b.n	8007984 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 8007694:	4b34      	ldr	r3, [pc, #208]	; (8007768 <OpenThread_CallBack_Processing+0x940>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8175 	beq.w	8007988 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800769e:	4b32      	ldr	r3, [pc, #200]	; (8007768 <OpenThread_CallBack_Processing+0x940>)
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 80076ac:	2200      	movs	r2, #0
 80076ae:	461c      	mov	r4, r3
 80076b0:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4622      	mov	r2, r4
 80076bc:	462b      	mov	r3, r5
 80076be:	4788      	blx	r1
    }
    break;
 80076c0:	e162      	b.n	8007988 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 80076c2:	4b2a      	ldr	r3, [pc, #168]	; (800776c <OpenThread_CallBack_Processing+0x944>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 8160 	beq.w	800798c <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 80076cc:	4b27      	ldr	r3, [pc, #156]	; (800776c <OpenThread_CallBack_Processing+0x944>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	6892      	ldr	r2, [r2, #8]
 80076d4:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 80076da:	4611      	mov	r1, r2
 80076dc:	4798      	blx	r3
    }
    break;
 80076de:	e155      	b.n	800798c <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 80076e0:	4b23      	ldr	r3, [pc, #140]	; (8007770 <OpenThread_CallBack_Processing+0x948>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8153 	beq.w	8007990 <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <OpenThread_CallBack_Processing+0x948>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	6892      	ldr	r2, [r2, #8]
 80076f2:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 80076f8:	4611      	mov	r1, r2
 80076fa:	4798      	blx	r3
    }
    break;
 80076fc:	e148      	b.n	8007990 <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007706:	4a1b      	ldr	r2, [pc, #108]	; (8007774 <OpenThread_CallBack_Processing+0x94c>)
 8007708:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 800770a:	4b1a      	ldr	r3, [pc, #104]	; (8007774 <OpenThread_CallBack_Processing+0x94c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	4a19      	ldr	r2, [pc, #100]	; (8007778 <OpenThread_CallBack_Processing+0x950>)
 8007712:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 8007714:	4b18      	ldr	r3, [pc, #96]	; (8007778 <OpenThread_CallBack_Processing+0x950>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 813b 	beq.w	8007994 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <OpenThread_CallBack_Processing+0x950>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	6892      	ldr	r2, [r2, #8]
 8007726:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	4611      	mov	r1, r2
 8007730:	4798      	blx	r3
    }
    break;
 8007732:	e12f      	b.n	8007994 <OpenThread_CallBack_Processing+0xb6c>
 8007734:	200003d8 	.word	0x200003d8
 8007738:	200003dc 	.word	0x200003dc
 800773c:	200003d0 	.word	0x200003d0
 8007740:	200003d4 	.word	0x200003d4
 8007744:	200003e0 	.word	0x200003e0
 8007748:	200003e4 	.word	0x200003e4
 800774c:	200003e8 	.word	0x200003e8
 8007750:	200003ec 	.word	0x200003ec
 8007754:	200003f0 	.word	0x200003f0
 8007758:	200003f4 	.word	0x200003f4
 800775c:	200003fc 	.word	0x200003fc
 8007760:	200003f8 	.word	0x200003f8
 8007764:	2000041c 	.word	0x2000041c
 8007768:	20000420 	.word	0x20000420
 800776c:	20000454 	.word	0x20000454
 8007770:	20000458 	.word	0x20000458
 8007774:	2000045c 	.word	0x2000045c
 8007778:	20000464 	.word	0x20000464
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007784:	4a8d      	ldr	r2, [pc, #564]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 8007786:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 8007788:	4b8c      	ldr	r3, [pc, #560]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	4a8c      	ldr	r2, [pc, #560]	; (80079c0 <OpenThread_CallBack_Processing+0xb98>)
 8007790:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 8007792:	4b8b      	ldr	r3, [pc, #556]	; (80079c0 <OpenThread_CallBack_Processing+0xb98>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 80fe 	beq.w	8007998 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800779c:	4b88      	ldr	r3, [pc, #544]	; (80079c0 <OpenThread_CallBack_Processing+0xb98>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	6892      	ldr	r2, [r2, #8]
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
    }
    break;
 80077a8:	e0f6      	b.n	8007998 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80077b2:	4a82      	ldr	r2, [pc, #520]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 80077b4:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 80077b6:	4b81      	ldr	r3, [pc, #516]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	4a81      	ldr	r2, [pc, #516]	; (80079c4 <OpenThread_CallBack_Processing+0xb9c>)
 80077be:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 80077c0:	4b80      	ldr	r3, [pc, #512]	; (80079c4 <OpenThread_CallBack_Processing+0xb9c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80e9 	beq.w	800799c <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 80077ca:	4b7e      	ldr	r3, [pc, #504]	; (80079c4 <OpenThread_CallBack_Processing+0xb9c>)
 80077cc:	681c      	ldr	r4, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf14      	ite	ne
 80077e0:	2301      	movne	r3, #1
 80077e2:	2300      	moveq	r3, #0
 80077e4:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 80077ea:	47a0      	blx	r4
    }
    break;
 80077ec:	e0d6      	b.n	800799c <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80077f6:	4a71      	ldr	r2, [pc, #452]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 80077f8:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 80077fa:	4b70      	ldr	r3, [pc, #448]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	4a71      	ldr	r2, [pc, #452]	; (80079c8 <OpenThread_CallBack_Processing+0xba0>)
 8007802:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 8007804:	4b70      	ldr	r3, [pc, #448]	; (80079c8 <OpenThread_CallBack_Processing+0xba0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80c9 	beq.w	80079a0 <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800780e:	4b6e      	ldr	r3, [pc, #440]	; (80079c8 <OpenThread_CallBack_Processing+0xba0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	6892      	ldr	r2, [r2, #8]
 8007816:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800781c:	4611      	mov	r1, r2
 800781e:	4798      	blx	r3
    }
    break;
 8007820:	e0be      	b.n	80079a0 <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800782a:	4a64      	ldr	r2, [pc, #400]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 800782c:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800782e:	4b63      	ldr	r3, [pc, #396]	; (80079bc <OpenThread_CallBack_Processing+0xb94>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	4a65      	ldr	r2, [pc, #404]	; (80079cc <OpenThread_CallBack_Processing+0xba4>)
 8007836:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 8007838:	4b64      	ldr	r3, [pc, #400]	; (80079cc <OpenThread_CallBack_Processing+0xba4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80b1 	beq.w	80079a4 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 8007842:	4b62      	ldr	r3, [pc, #392]	; (80079cc <OpenThread_CallBack_Processing+0xba4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	6892      	ldr	r2, [r2, #8]
 800784a:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 8007854:	4798      	blx	r3
    }
    break;
 8007856:	e0a5      	b.n	80079a4 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	4a5c      	ldr	r2, [pc, #368]	; (80079d0 <OpenThread_CallBack_Processing+0xba8>)
 8007860:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 8007862:	4b5b      	ldr	r3, [pc, #364]	; (80079d0 <OpenThread_CallBack_Processing+0xba8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	4a5a      	ldr	r2, [pc, #360]	; (80079d4 <OpenThread_CallBack_Processing+0xbac>)
 800786a:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800786c:	4b59      	ldr	r3, [pc, #356]	; (80079d4 <OpenThread_CallBack_Processing+0xbac>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8099 	beq.w	80079a8 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 8007876:	4b57      	ldr	r3, [pc, #348]	; (80079d4 <OpenThread_CallBack_Processing+0xbac>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	6892      	ldr	r2, [r2, #8]
 800787e:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 8007884:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800788a:	4798      	blx	r3
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	609a      	str	r2, [r3, #8]
    }
    break;
 8007894:	e088      	b.n	80079a8 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	4a4c      	ldr	r2, [pc, #304]	; (80079d0 <OpenThread_CallBack_Processing+0xba8>)
 800789e:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 80078a0:	4b4b      	ldr	r3, [pc, #300]	; (80079d0 <OpenThread_CallBack_Processing+0xba8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	4a4c      	ldr	r2, [pc, #304]	; (80079d8 <OpenThread_CallBack_Processing+0xbb0>)
 80078a8:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 80078aa:	4b4b      	ldr	r3, [pc, #300]	; (80079d8 <OpenThread_CallBack_Processing+0xbb0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d07c      	beq.n	80079ac <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 80078b2:	4b49      	ldr	r3, [pc, #292]	; (80079d8 <OpenThread_CallBack_Processing+0xbb0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	6892      	ldr	r2, [r2, #8]
 80078ba:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 80078c0:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 80078c6:	4798      	blx	r3
    }
    break;
 80078c8:	e070      	b.n	80079ac <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	71fb      	strb	r3, [r7, #7]
    break;
 80078ce:	e06e      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078d0:	bf00      	nop
 80078d2:	e06c      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078d4:	bf00      	nop
 80078d6:	e06a      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078d8:	bf00      	nop
 80078da:	e068      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078dc:	bf00      	nop
 80078de:	e066      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078e0:	bf00      	nop
 80078e2:	e064      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078e4:	bf00      	nop
 80078e6:	e062      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078e8:	bf00      	nop
 80078ea:	e060      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078ec:	bf00      	nop
 80078ee:	e05e      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078f0:	bf00      	nop
 80078f2:	e05c      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078f4:	bf00      	nop
 80078f6:	e05a      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078f8:	bf00      	nop
 80078fa:	e058      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80078fc:	bf00      	nop
 80078fe:	e056      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007900:	bf00      	nop
 8007902:	e054      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007904:	bf00      	nop
 8007906:	e052      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007908:	bf00      	nop
 800790a:	e050      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800790c:	bf00      	nop
 800790e:	e04e      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007910:	bf00      	nop
 8007912:	e04c      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007914:	bf00      	nop
 8007916:	e04a      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007918:	bf00      	nop
 800791a:	e048      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800791c:	bf00      	nop
 800791e:	e046      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007920:	bf00      	nop
 8007922:	e044      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007924:	bf00      	nop
 8007926:	e042      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007928:	bf00      	nop
 800792a:	e040      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800792c:	bf00      	nop
 800792e:	e03e      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007930:	bf00      	nop
 8007932:	e03c      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007934:	bf00      	nop
 8007936:	e03a      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007938:	bf00      	nop
 800793a:	e038      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800793c:	bf00      	nop
 800793e:	e036      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007940:	bf00      	nop
 8007942:	e034      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007944:	bf00      	nop
 8007946:	e032      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007948:	bf00      	nop
 800794a:	e030      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800794c:	bf00      	nop
 800794e:	e02e      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007950:	bf00      	nop
 8007952:	e02c      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007954:	bf00      	nop
 8007956:	e02a      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007958:	bf00      	nop
 800795a:	e028      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800795c:	bf00      	nop
 800795e:	e026      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007960:	bf00      	nop
 8007962:	e024      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007964:	bf00      	nop
 8007966:	e022      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007968:	bf00      	nop
 800796a:	e020      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800796c:	bf00      	nop
 800796e:	e01e      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007970:	bf00      	nop
 8007972:	e01c      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007974:	bf00      	nop
 8007976:	e01a      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007978:	bf00      	nop
 800797a:	e018      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800797c:	bf00      	nop
 800797e:	e016      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
      break;
 8007980:	bf00      	nop
 8007982:	e014      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007984:	bf00      	nop
 8007986:	e012      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007988:	bf00      	nop
 800798a:	e010      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800798c:	bf00      	nop
 800798e:	e00e      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007990:	bf00      	nop
 8007992:	e00c      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007994:	bf00      	nop
 8007996:	e00a      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 8007998:	bf00      	nop
 800799a:	e008      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 800799c:	bf00      	nop
 800799e:	e006      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80079a0:	bf00      	nop
 80079a2:	e004      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80079a4:	bf00      	nop
 80079a6:	e002      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80079a8:	bf00      	nop
 80079aa:	e000      	b.n	80079ae <OpenThread_CallBack_Processing+0xb86>
    break;
 80079ac:	bf00      	nop
  }

  TL_THREAD_SendAck();
 80079ae:	f000 fc31 	bl	8008214 <TL_THREAD_SendAck>
  return status;
 80079b2:	79fb      	ldrb	r3, [r7, #7]

}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bdb0      	pop	{r4, r5, r7, pc}
 80079bc:	2000045c 	.word	0x2000045c
 80079c0:	20000468 	.word	0x20000468
 80079c4:	2000046c 	.word	0x2000046c
 80079c8:	20000470 	.word	0x20000470
 80079cc:	2000047c 	.word	0x2000047c
 80079d0:	20000460 	.word	0x20000460
 80079d4:	20000474 	.word	0x20000474
 80079d8:	20000478 	.word	0x20000478

080079dc <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80079e2:	1d3b      	adds	r3, r7, #4
 80079e4:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2200      	movs	r2, #0
 80079ea:	2100      	movs	r1, #0
 80079ec:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80079f0:	f000 f956 	bl	8007ca0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	330b      	adds	r3, #11
 80079f8:	78db      	ldrb	r3, [r3, #3]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b088      	sub	sp, #32
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	4603      	mov	r3, r0
 8007a0a:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8007a16:	f107 020c 	add.w	r2, r7, #12
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8007a22:	f000 f93d 	bl	8007ca0 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	330b      	adds	r3, #11
 8007a2a:	78db      	ldrb	r3, [r3, #3]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	460a      	mov	r2, r1
 8007a3e:	71fb      	strb	r3, [r7, #7]
 8007a40:	4613      	mov	r3, r2
 8007a42:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a44:	f107 030c 	add.w	r3, r7, #12
 8007a48:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 8007a4e:	79bb      	ldrb	r3, [r7, #6]
 8007a50:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 8007a52:	f107 020c 	add.w	r2, r7, #12
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2102      	movs	r1, #2
 8007a5a:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 8007a5e:	f000 f91f 	bl	8007ca0 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	330b      	adds	r3, #11
 8007a66:	78db      	ldrb	r3, [r3, #3]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b08b      	sub	sp, #44	; 0x2c
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007a98:	4b4a      	ldr	r3, [pc, #296]	; (8007bc4 <SHCI_GetWirelessFwInfo+0x154>)
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007aa0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007aaa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a44      	ldr	r2, [pc, #272]	; (8007bc8 <SHCI_GetWirelessFwInfo+0x158>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d10f      	bne.n	8007adc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	e01a      	b.n	8007b12 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007ae8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	0e1b      	lsrs	r3, r3, #24
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	0c1b      	lsrs	r3, r3, #16
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	0a1b      	lsrs	r3, r3, #8
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	091b      	lsrs	r3, r3, #4
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 030f 	and.w	r3, r3, #15
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	0e1b      	lsrs	r3, r3, #24
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	0e1b      	lsrs	r3, r3, #24
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	0c1b      	lsrs	r3, r3, #16
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	0e1b      	lsrs	r3, r3, #24
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	372c      	adds	r7, #44	; 0x2c
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	58004000 	.word	0x58004000
 8007bc8:	a94656b9 	.word	0xa94656b9

08007bcc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <shci_init+0x30>)
 8007bdc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007bde:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <shci_init+0x34>)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007be4:	4806      	ldr	r0, [pc, #24]	; (8007c00 <shci_init+0x34>)
 8007be6:	f000 f911 	bl	8007e0c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f894 	bl	8007d1c <TlInit>

  return;
 8007bf4:	bf00      	nop
}
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	200004a0 	.word	0x200004a0
 8007c00:	20000480 	.word	0x20000480

08007c04 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007c0a:	4822      	ldr	r0, [pc, #136]	; (8007c94 <shci_user_evt_proc+0x90>)
 8007c0c:	f000 ff16 	bl	8008a3c <LST_is_empty>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d12b      	bne.n	8007c6e <shci_user_evt_proc+0x6a>
 8007c16:	4b20      	ldr	r3, [pc, #128]	; (8007c98 <shci_user_evt_proc+0x94>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d027      	beq.n	8007c6e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007c1e:	f107 030c 	add.w	r3, r7, #12
 8007c22:	4619      	mov	r1, r3
 8007c24:	481b      	ldr	r0, [pc, #108]	; (8007c94 <shci_user_evt_proc+0x90>)
 8007c26:	f000 ff98 	bl	8008b5a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007c2a:	4b1c      	ldr	r3, [pc, #112]	; (8007c9c <shci_user_evt_proc+0x98>)
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00c      	beq.n	8007c4c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007c36:	2301      	movs	r3, #1
 8007c38:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007c3a:	4b18      	ldr	r3, [pc, #96]	; (8007c9c <shci_user_evt_proc+0x98>)
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	1d3a      	adds	r2, r7, #4
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007c44:	793a      	ldrb	r2, [r7, #4]
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <shci_user_evt_proc+0x94>)
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	e002      	b.n	8007c52 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007c4c:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <shci_user_evt_proc+0x94>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <shci_user_evt_proc+0x94>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fb55 	bl	800830c <TL_MM_EvtDone>
 8007c62:	e004      	b.n	8007c6e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4619      	mov	r1, r3
 8007c68:	480a      	ldr	r0, [pc, #40]	; (8007c94 <shci_user_evt_proc+0x90>)
 8007c6a:	f000 ff09 	bl	8008a80 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007c6e:	4809      	ldr	r0, [pc, #36]	; (8007c94 <shci_user_evt_proc+0x90>)
 8007c70:	f000 fee4 	bl	8008a3c <LST_is_empty>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d107      	bne.n	8007c8a <shci_user_evt_proc+0x86>
 8007c7a:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <shci_user_evt_proc+0x94>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007c82:	4804      	ldr	r0, [pc, #16]	; (8007c94 <shci_user_evt_proc+0x90>)
 8007c84:	f7f9 fc32 	bl	80014ec <shci_notify_asynch_evt>
  }


  return;
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
}
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	2000002c 	.word	0x2000002c
 8007c98:	2000003c 	.word	0x2000003c
 8007c9c:	20000480 	.word	0x20000480

08007ca0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60ba      	str	r2, [r7, #8]
 8007ca8:	607b      	str	r3, [r7, #4]
 8007caa:	4603      	mov	r3, r0
 8007cac:	81fb      	strh	r3, [r7, #14]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f000 f864 	bl	8007d80 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <shci_send+0x74>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	89fa      	ldrh	r2, [r7, #14]
 8007cbe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <shci_send+0x74>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	7b7a      	ldrb	r2, [r7, #13]
 8007cc8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007cca:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <shci_send+0x74>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	7b7a      	ldrb	r2, [r7, #13]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 ff83 	bl	8008be0 <memcpy>

  shciContext.io.Send(0,0);
 8007cda:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <shci_send+0x78>)
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007ce4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007ce8:	f7f9 fc17 	bl	800151a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f103 0008 	add.w	r0, r3, #8
 8007cf2:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <shci_send+0x74>)
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <shci_send+0x74>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	789b      	ldrb	r3, [r3, #2]
 8007cfc:	3303      	adds	r3, #3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f000 ff6e 	bl	8008be0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007d04:	2001      	movs	r0, #1
 8007d06:	f000 f83b 	bl	8007d80 <Cmd_SetStatus>

  return;
 8007d0a:	bf00      	nop
}
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000038 	.word	0x20000038
 8007d18:	20000480 	.word	0x20000480

08007d1c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007d24:	4a10      	ldr	r2, [pc, #64]	; (8007d68 <TlInit+0x4c>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007d2a:	4810      	ldr	r0, [pc, #64]	; (8007d6c <TlInit+0x50>)
 8007d2c:	f000 fe76 	bl	8008a1c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007d30:	2001      	movs	r0, #1
 8007d32:	f000 f825 	bl	8007d80 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007d36:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <TlInit+0x54>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007d3c:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <TlInit+0x58>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00c      	beq.n	8007d5e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <TlInit+0x5c>)
 8007d4a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <TlInit+0x60>)
 8007d4e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007d50:	4b08      	ldr	r3, [pc, #32]	; (8007d74 <TlInit+0x58>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f107 020c 	add.w	r2, r7, #12
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
  }

  return;
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
}
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000038 	.word	0x20000038
 8007d6c:	2000002c 	.word	0x2000002c
 8007d70:	2000003c 	.word	0x2000003c
 8007d74:	20000480 	.word	0x20000480
 8007d78:	08007dd1 	.word	0x08007dd1
 8007d7c:	08007de9 	.word	0x08007de9

08007d80 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007d90:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <Cmd_SetStatus+0x48>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007d98:	4b0b      	ldr	r3, [pc, #44]	; (8007dc8 <Cmd_SetStatus+0x48>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <Cmd_SetStatus+0x4c>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007da6:	e00b      	b.n	8007dc0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007da8:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <Cmd_SetStatus+0x4c>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007dae:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <Cmd_SetStatus+0x48>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007db6:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <Cmd_SetStatus+0x48>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2001      	movs	r0, #1
 8007dbc:	4798      	blx	r3
  return;
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
}
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	200004a0 	.word	0x200004a0
 8007dcc:	20000034 	.word	0x20000034

08007dd0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007dd8:	2000      	movs	r0, #0
 8007dda:	f7f9 fb93 	bl	8001504 <shci_cmd_resp_release>

  return;
 8007dde:	bf00      	nop
}
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4805      	ldr	r0, [pc, #20]	; (8007e08 <TlUserEvtReceived+0x20>)
 8007df4:	f000 fe6a 	bl	8008acc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007df8:	4803      	ldr	r0, [pc, #12]	; (8007e08 <TlUserEvtReceived+0x20>)
 8007dfa:	f7f9 fb77 	bl	80014ec <shci_notify_asynch_evt>

  return;
 8007dfe:	bf00      	nop
}
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	2000002c 	.word	0x2000002c

08007e0c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a05      	ldr	r2, [pc, #20]	; (8007e2c <shci_register_io_bus+0x20>)
 8007e18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a04      	ldr	r2, [pc, #16]	; (8007e30 <shci_register_io_bus+0x24>)
 8007e1e:	611a      	str	r2, [r3, #16]

  return;
 8007e20:	bf00      	nop
}
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	080080bd 	.word	0x080080bd
 8007e30:	08008111 	.word	0x08008111

08007e34 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8007e40:	f7f8 fe12 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8007e44:	f7f8 fda2 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8007e48:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	705a      	strb	r2, [r3, #1]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	709a      	strb	r2, [r3, #2]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f042 0201 	orr.w	r2, r2, #1
 8007e68:	711a      	strb	r2, [r3, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	715a      	strb	r2, [r3, #5]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	719a      	strb	r2, [r3, #6]
 8007e72:	2200      	movs	r2, #0
 8007e74:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8007e7c:	f7f8 fdce 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8007e80:	f7f8 fd90 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8007e84:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	b2db      	uxtb	r3, r3
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8007e9e:	f7f8 fde3 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8007ea2:	f7f8 fd73 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8007ea6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	705a      	strb	r2, [r3, #1]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	709a      	strb	r2, [r3, #2]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f042 0203 	orr.w	r2, r2, #3
 8007ec6:	711a      	strb	r2, [r3, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	715a      	strb	r2, [r3, #5]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	719a      	strb	r2, [r3, #6]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 8007ed4:	783b      	ldrb	r3, [r7, #0]
 8007ed6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 8007ee2:	783b      	ldrb	r3, [r7, #0]
 8007ee4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 8007ef0:	783b      	ldrb	r3, [r7, #0]
 8007ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8007efe:	f7f8 fd8d 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8007f02:	f7f8 fd4f 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8007f06:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	b2db      	uxtb	r3, r3
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8007f20:	f7f8 fda2 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8007f24:	f7f8 fd32 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8007f28:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	2200      	movs	r2, #0
 8007f36:	705a      	strb	r2, [r3, #1]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	709a      	strb	r2, [r3, #2]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	711a      	strb	r2, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	715a      	strb	r2, [r3, #5]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	719a      	strb	r2, [r3, #6]
 8007f52:	2200      	movs	r2, #0
 8007f54:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8007f5c:	f7f8 fd5e 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8007f60:	f7f8 fd20 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8007f64:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	b2db      	uxtb	r3, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8007f7c:	f7f8 fd74 	bl	8000a68 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8007f80:	f7f8 fd04 	bl	800098c <THREAD_Get_OTCmdPayloadBuffer>
 8007f84:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f062 0279 	orn	r2, r2, #121	; 0x79
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	2200      	movs	r2, #0
 8007f92:	705a      	strb	r2, [r3, #1]
 8007f94:	2200      	movs	r2, #0
 8007f96:	709a      	strb	r2, [r3, #2]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	711a      	strb	r2, [r3, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	715a      	strb	r2, [r3, #5]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	719a      	strb	r2, [r3, #6]
 8007faa:	2200      	movs	r2, #0
 8007fac:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8007fae:	f7f8 fd35 	bl	8000a1c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8007fb2:	f7f8 fcf7 	bl	80009a4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8007fb6:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	b2db      	uxtb	r3, r3
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007fca:	f7f8 ffa1 	bl	8000f10 <HW_IPCC_Enable>

  return;
 8007fce:	bf00      	nop
}
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <TL_Init>:


void TL_Init( void )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007fd8:	4b10      	ldr	r3, [pc, #64]	; (800801c <TL_Init+0x48>)
 8007fda:	4a11      	ldr	r2, [pc, #68]	; (8008020 <TL_Init+0x4c>)
 8007fdc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <TL_Init+0x48>)
 8007fe0:	4a10      	ldr	r2, [pc, #64]	; (8008024 <TL_Init+0x50>)
 8007fe2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	; (800801c <TL_Init+0x48>)
 8007fe6:	4a10      	ldr	r2, [pc, #64]	; (8008028 <TL_Init+0x54>)
 8007fe8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <TL_Init+0x48>)
 8007fec:	4a0f      	ldr	r2, [pc, #60]	; (800802c <TL_Init+0x58>)
 8007fee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <TL_Init+0x48>)
 8007ff2:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <TL_Init+0x5c>)
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <TL_Init+0x48>)
 8007ff8:	4a0e      	ldr	r2, [pc, #56]	; (8008034 <TL_Init+0x60>)
 8007ffa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <TL_Init+0x48>)
 8007ffe:	4a0e      	ldr	r2, [pc, #56]	; (8008038 <TL_Init+0x64>)
 8008000:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008002:	4b06      	ldr	r3, [pc, #24]	; (800801c <TL_Init+0x48>)
 8008004:	4a0d      	ldr	r2, [pc, #52]	; (800803c <TL_Init+0x68>)
 8008006:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <TL_Init+0x48>)
 800800a:	4a0d      	ldr	r2, [pc, #52]	; (8008040 <TL_Init+0x6c>)
 800800c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800800e:	4b03      	ldr	r3, [pc, #12]	; (800801c <TL_Init+0x48>)
 8008010:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <TL_Init+0x70>)
 8008012:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008014:	f7f8 ff90 	bl	8000f38 <HW_IPCC_Init>

  return;
 8008018:	bf00      	nop
}
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20030000 	.word	0x20030000
 8008020:	20030038 	.word	0x20030038
 8008024:	20030058 	.word	0x20030058
 8008028:	20030068 	.word	0x20030068
 800802c:	20030078 	.word	0x20030078
 8008030:	20030080 	.word	0x20030080
 8008034:	20030088 	.word	0x20030088
 8008038:	20030090 	.word	0x20030090
 800803c:	200300ac 	.word	0x200300ac
 8008040:	200300b0 	.word	0x200300b0
 8008044:	200300bc 	.word	0x200300bc

08008048 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800804e:	e01c      	b.n	800808a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008050:	1d3b      	adds	r3, r7, #4
 8008052:	4619      	mov	r1, r3
 8008054:	4812      	ldr	r0, [pc, #72]	; (80080a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008056:	f000 fd80 	bl	8008b5a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7a5b      	ldrb	r3, [r3, #9]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d003      	beq.n	800806a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	7a5b      	ldrb	r3, [r3, #9]
 8008066:	2b0e      	cmp	r3, #14
 8008068:	d105      	bne.n	8008076 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4619      	mov	r1, r3
 800806e:	2002      	movs	r0, #2
 8008070:	f000 f9b0 	bl	80083d4 <OutputDbgTrace>
 8008074:	e004      	b.n	8008080 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4619      	mov	r1, r3
 800807a:	2003      	movs	r0, #3
 800807c:	f000 f9aa 	bl	80083d4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008080:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4610      	mov	r0, r2
 8008088:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800808a:	4805      	ldr	r0, [pc, #20]	; (80080a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800808c:	f000 fcd6 	bl	8008a3c <LST_is_empty>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0dc      	beq.n	8008050 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008096:	bf00      	nop
}
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200300d8 	.word	0x200300d8
 80080a4:	200004ac 	.word	0x200004ac

080080a8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80080ac:	4b02      	ldr	r3, [pc, #8]	; (80080b8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4798      	blx	r3

  return;
 80080b2:	bf00      	nop
}
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	200004b0 	.word	0x200004b0

080080bc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80080c8:	480d      	ldr	r0, [pc, #52]	; (8008100 <TL_SYS_Init+0x44>)
 80080ca:	f000 fca7 	bl	8008a1c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <TL_SYS_Init+0x48>)
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4a08      	ldr	r2, [pc, #32]	; (8008100 <TL_SYS_Init+0x44>)
 80080e0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80080e2:	f7f8 ff57 	bl	8000f94 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a07      	ldr	r2, [pc, #28]	; (8008108 <TL_SYS_Init+0x4c>)
 80080ec:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	4a06      	ldr	r2, [pc, #24]	; (800810c <TL_SYS_Init+0x50>)
 80080f4:	6013      	str	r3, [r2, #0]

  return 0;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	200300e0 	.word	0x200300e0
 8008104:	20030000 	.word	0x20030000
 8008108:	200004b4 	.word	0x200004b4
 800810c:	200004b8 	.word	0x200004b8

08008110 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800811c:	4b09      	ldr	r3, [pc, #36]	; (8008144 <TL_SYS_SendCmd+0x34>)
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2210      	movs	r2, #16
 8008124:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008126:	4b07      	ldr	r3, [pc, #28]	; (8008144 <TL_SYS_SendCmd+0x34>)
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	2004      	movs	r0, #4
 8008130:	f000 f950 	bl	80083d4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008134:	f7f8 ff38 	bl	8000fa8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20030000 	.word	0x20030000

08008148 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800814c:	4b07      	ldr	r3, [pc, #28]	; (800816c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4619      	mov	r1, r3
 8008154:	2005      	movs	r0, #5
 8008156:	f000 f93d 	bl	80083d4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a03      	ldr	r2, [pc, #12]	; (800816c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008160:	68d2      	ldr	r2, [r2, #12]
 8008162:	6812      	ldr	r2, [r2, #0]
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3

  return;
 8008168:	bf00      	nop
}
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20030000 	.word	0x20030000
 8008170:	200004b4 	.word	0x200004b4

08008174 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800817a:	e00e      	b.n	800819a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800817c:	1d3b      	adds	r3, r7, #4
 800817e:	4619      	mov	r1, r3
 8008180:	480b      	ldr	r0, [pc, #44]	; (80081b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008182:	f000 fcea 	bl	8008b5a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4619      	mov	r1, r3
 800818a:	2006      	movs	r0, #6
 800818c:	f000 f922 	bl	80083d4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008190:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <HW_IPCC_SYS_EvtNot+0x40>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	4610      	mov	r0, r2
 8008198:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800819a:	4805      	ldr	r0, [pc, #20]	; (80081b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800819c:	f000 fc4e 	bl	8008a3c <LST_is_empty>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0ea      	beq.n	800817c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80081a6:	bf00      	nop
}
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	200300e0 	.word	0x200300e0
 80081b4:	200004b8 	.word	0x200004b8

080081b8 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 80081c0:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <TL_THREAD_Init+0x3c>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 80081e6:	f7f8 ff05 	bl	8000ff4 <HW_IPCC_THREAD_Init>

  return;
 80081ea:	bf00      	nop
}
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20030000 	.word	0x20030000

080081f8 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80081fc:	4b04      	ldr	r3, [pc, #16]	; (8008210 <TL_OT_SendCmd+0x18>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	2208      	movs	r2, #8
 8008204:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8008206:	f7f8 ff03 	bl	8001010 <HW_IPCC_OT_SendCmd>

  return;
 800820a:	bf00      	nop
}
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20030000 	.word	0x20030000

08008214 <TL_THREAD_SendAck>:

  return;
}

void TL_THREAD_SendAck ( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8008218:	4b04      	ldr	r3, [pc, #16]	; (800822c <TL_THREAD_SendAck+0x18>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	220d      	movs	r2, #13
 8008220:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8008222:	f7f8 ff03 	bl	800102c <HW_IPCC_THREAD_SendAck>

  return;
 8008226:	bf00      	nop
}
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20030000 	.word	0x20030000

08008230 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8008234:	4b04      	ldr	r3, [pc, #16]	; (8008248 <TL_THREAD_CliSendAck+0x18>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	220d      	movs	r2, #13
 800823c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800823e:	f7f8 ff03 	bl	8001048 <HW_IPCC_THREAD_CliSendAck>

  return;
 8008242:	bf00      	nop
}
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20030000 	.word	0x20030000

0800824c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8008250:	4b03      	ldr	r3, [pc, #12]	; (8008260 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	4618      	mov	r0, r3
 8008258:	f7f8 fbe6 	bl	8000a28 <TL_OT_CmdEvtReceived>

  return;
 800825c:	bf00      	nop
}
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20030000 	.word	0x20030000

08008264 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8008268:	4b03      	ldr	r3, [pc, #12]	; (8008278 <HW_IPCC_THREAD_EvtNot+0x14>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f7f8 fbea 	bl	8000a48 <TL_THREAD_NotReceived>

  return;
 8008274:	bf00      	nop
}
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20030000 	.word	0x20030000

0800827c <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 8008280:	4b03      	ldr	r3, [pc, #12]	; (8008290 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	4618      	mov	r0, r3
 8008288:	f7f8 fc40 	bl	8000b0c <TL_THREAD_CliNotReceived>

  return;
 800828c:	bf00      	nop
}
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20030000 	.word	0x20030000

08008294 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800829c:	4817      	ldr	r0, [pc, #92]	; (80082fc <TL_MM_Init+0x68>)
 800829e:	f000 fbbd 	bl	8008a1c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80082a2:	4817      	ldr	r0, [pc, #92]	; (8008300 <TL_MM_Init+0x6c>)
 80082a4:	f000 fbba 	bl	8008a1c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80082a8:	4b16      	ldr	r3, [pc, #88]	; (8008304 <TL_MM_Init+0x70>)
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	4a16      	ldr	r2, [pc, #88]	; (8008308 <TL_MM_Init+0x74>)
 80082ae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80082b0:	4b15      	ldr	r3, [pc, #84]	; (8008308 <TL_MM_Init+0x74>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6892      	ldr	r2, [r2, #8]
 80082b8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80082ba:	4b13      	ldr	r3, [pc, #76]	; (8008308 <TL_MM_Init+0x74>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	68d2      	ldr	r2, [r2, #12]
 80082c2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80082c4:	4b10      	ldr	r3, [pc, #64]	; (8008308 <TL_MM_Init+0x74>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a0c      	ldr	r2, [pc, #48]	; (80082fc <TL_MM_Init+0x68>)
 80082ca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80082cc:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <TL_MM_Init+0x74>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80082d6:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <TL_MM_Init+0x74>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6852      	ldr	r2, [r2, #4]
 80082de:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80082e0:	4b09      	ldr	r3, [pc, #36]	; (8008308 <TL_MM_Init+0x74>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6912      	ldr	r2, [r2, #16]
 80082e8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80082ea:	4b07      	ldr	r3, [pc, #28]	; (8008308 <TL_MM_Init+0x74>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6952      	ldr	r2, [r2, #20]
 80082f2:	619a      	str	r2, [r3, #24]

  return;
 80082f4:	bf00      	nop
}
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200300c8 	.word	0x200300c8
 8008300:	200004a4 	.word	0x200004a4
 8008304:	20030000 	.word	0x20030000
 8008308:	200004bc 	.word	0x200004bc

0800830c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	4807      	ldr	r0, [pc, #28]	; (8008334 <TL_MM_EvtDone+0x28>)
 8008318:	f000 fbd8 	bl	8008acc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	2000      	movs	r0, #0
 8008320:	f000 f858 	bl	80083d4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008324:	4804      	ldr	r0, [pc, #16]	; (8008338 <TL_MM_EvtDone+0x2c>)
 8008326:	f7f8 fec1 	bl	80010ac <HW_IPCC_MM_SendFreeBuf>

  return;
 800832a:	bf00      	nop
}
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	200004a4 	.word	0x200004a4
 8008338:	0800833d 	.word	0x0800833d

0800833c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008342:	e00c      	b.n	800835e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008344:	1d3b      	adds	r3, r7, #4
 8008346:	4619      	mov	r1, r3
 8008348:	480a      	ldr	r0, [pc, #40]	; (8008374 <SendFreeBuf+0x38>)
 800834a:	f000 fc06 	bl	8008b5a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800834e:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <SendFreeBuf+0x3c>)
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fbb7 	bl	8008acc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800835e:	4805      	ldr	r0, [pc, #20]	; (8008374 <SendFreeBuf+0x38>)
 8008360:	f000 fb6c 	bl	8008a3c <LST_is_empty>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0ec      	beq.n	8008344 <SendFreeBuf+0x8>
  }

  return;
 800836a:	bf00      	nop
}
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200004a4 	.word	0x200004a4
 8008378:	20030000 	.word	0x20030000

0800837c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008380:	4805      	ldr	r0, [pc, #20]	; (8008398 <TL_TRACES_Init+0x1c>)
 8008382:	f000 fb4b 	bl	8008a1c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008386:	4b05      	ldr	r3, [pc, #20]	; (800839c <TL_TRACES_Init+0x20>)
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	4a03      	ldr	r2, [pc, #12]	; (8008398 <TL_TRACES_Init+0x1c>)
 800838c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800838e:	f7f8 fec3 	bl	8001118 <HW_IPCC_TRACES_Init>

  return;
 8008392:	bf00      	nop
}
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	200300d0 	.word	0x200300d0
 800839c:	20030000 	.word	0x20030000

080083a0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80083a6:	e008      	b.n	80083ba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80083a8:	1d3b      	adds	r3, r7, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4808      	ldr	r0, [pc, #32]	; (80083d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80083ae:	f000 fbd4 	bl	8008b5a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7f9 f8bb 	bl	8001530 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80083ba:	4805      	ldr	r0, [pc, #20]	; (80083d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80083bc:	f000 fb3e 	bl	8008a3c <LST_is_empty>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0f0      	beq.n	80083a8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80083c6:	bf00      	nop
}
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200300d0 	.word	0x200300d0

080083d4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	2b06      	cmp	r3, #6
 80083e4:	d845      	bhi.n	8008472 <OutputDbgTrace+0x9e>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <OutputDbgTrace+0x18>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	08008409 	.word	0x08008409
 80083f0:	0800842d 	.word	0x0800842d
 80083f4:	08008433 	.word	0x08008433
 80083f8:	08008447 	.word	0x08008447
 80083fc:	08008453 	.word	0x08008453
 8008400:	08008459 	.word	0x08008459
 8008404:	08008467 	.word	0x08008467
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	7a5b      	ldrb	r3, [r3, #9]
 8008410:	2bff      	cmp	r3, #255	; 0xff
 8008412:	d005      	beq.n	8008420 <OutputDbgTrace+0x4c>
 8008414:	2bff      	cmp	r3, #255	; 0xff
 8008416:	dc05      	bgt.n	8008424 <OutputDbgTrace+0x50>
 8008418:	2b0e      	cmp	r3, #14
 800841a:	d005      	beq.n	8008428 <OutputDbgTrace+0x54>
 800841c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800841e:	e001      	b.n	8008424 <OutputDbgTrace+0x50>
          break;
 8008420:	bf00      	nop
 8008422:	e027      	b.n	8008474 <OutputDbgTrace+0xa0>
          break;
 8008424:	bf00      	nop
 8008426:	e025      	b.n	8008474 <OutputDbgTrace+0xa0>
          break;
 8008428:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800842a:	e023      	b.n	8008474 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008430:	e020      	b.n	8008474 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	7a5b      	ldrb	r3, [r3, #9]
 800843a:	2b0e      	cmp	r3, #14
 800843c:	d001      	beq.n	8008442 <OutputDbgTrace+0x6e>
 800843e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008440:	e000      	b.n	8008444 <OutputDbgTrace+0x70>
          break;
 8008442:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008444:	e016      	b.n	8008474 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	7a5b      	ldrb	r3, [r3, #9]
 800844e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008450:	e010      	b.n	8008474 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008456:	e00d      	b.n	8008474 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	7a5b      	ldrb	r3, [r3, #9]
 8008460:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008462:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008464:	e006      	b.n	8008474 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	7a5b      	ldrb	r3, [r3, #9]
 800846e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008470:	e000      	b.n	8008474 <OutputDbgTrace+0xa0>

    default:
      break;
 8008472:	bf00      	nop
  }

  return;
 8008474:	bf00      	nop
}
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <OTP_Read+0x48>)
 800848c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800848e:	e002      	b.n	8008496 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3b08      	subs	r3, #8
 8008494:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3307      	adds	r3, #7
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	79fa      	ldrb	r2, [r7, #7]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d003      	beq.n	80084aa <OTP_Read+0x2a>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4a09      	ldr	r2, [pc, #36]	; (80084cc <OTP_Read+0x4c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d1f2      	bne.n	8008490 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3307      	adds	r3, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	79fa      	ldrb	r2, [r7, #7]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d001      	beq.n	80084ba <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80084ba:	68fb      	ldr	r3, [r7, #12]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	1fff73f8 	.word	0x1fff73f8
 80084cc:	1fff7000 	.word	0x1fff7000

080084d0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <UTIL_LPM_Init+0x1c>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <UTIL_LPM_Init+0x20>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80084e0:	bf00      	nop
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	200004c0 	.word	0x200004c0
 80084f0:	200004c4 	.word	0x200004c4

080084f4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008500:	f3ef 8310 	mrs	r3, PRIMASK
 8008504:	613b      	str	r3, [r7, #16]
  return(result);
 8008506:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800850a:	b672      	cpsid	i
}
 800850c:	bf00      	nop

  switch( state )
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <UTIL_LPM_SetStopMode+0x32>
 8008514:	2b01      	cmp	r3, #1
 8008516:	d10e      	bne.n	8008536 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <UTIL_LPM_SetStopMode+0x5c>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4313      	orrs	r3, r2
 8008520:	4a0b      	ldr	r2, [pc, #44]	; (8008550 <UTIL_LPM_SetStopMode+0x5c>)
 8008522:	6013      	str	r3, [r2, #0]
      break;
 8008524:	e008      	b.n	8008538 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	43da      	mvns	r2, r3
 800852a:	4b09      	ldr	r3, [pc, #36]	; (8008550 <UTIL_LPM_SetStopMode+0x5c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4013      	ands	r3, r2
 8008530:	4a07      	ldr	r2, [pc, #28]	; (8008550 <UTIL_LPM_SetStopMode+0x5c>)
 8008532:	6013      	str	r3, [r2, #0]
      break;
 8008534:	e000      	b.n	8008538 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8008536:	bf00      	nop
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f383 8810 	msr	PRIMASK, r3
}
 8008542:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	200004c0 	.word	0x200004c0

08008554 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8310 	mrs	r3, PRIMASK
 8008564:	613b      	str	r3, [r7, #16]
  return(result);
 8008566:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800856a:	b672      	cpsid	i
}
 800856c:	bf00      	nop
  
  switch(state)
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <UTIL_LPM_SetOffMode+0x32>
 8008574:	2b01      	cmp	r3, #1
 8008576:	d10e      	bne.n	8008596 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008578:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <UTIL_LPM_SetOffMode+0x5c>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4313      	orrs	r3, r2
 8008580:	4a0b      	ldr	r2, [pc, #44]	; (80085b0 <UTIL_LPM_SetOffMode+0x5c>)
 8008582:	6013      	str	r3, [r2, #0]
      break;
 8008584:	e008      	b.n	8008598 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	43da      	mvns	r2, r3
 800858a:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <UTIL_LPM_SetOffMode+0x5c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4013      	ands	r3, r2
 8008590:	4a07      	ldr	r2, [pc, #28]	; (80085b0 <UTIL_LPM_SetOffMode+0x5c>)
 8008592:	6013      	str	r3, [r2, #0]
      break;
 8008594:	e000      	b.n	8008598 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008596:	bf00      	nop
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f383 8810 	msr	PRIMASK, r3
}
 80085a2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80085a4:	bf00      	nop
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	200004c4 	.word	0x200004c4

080085b4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ba:	f3ef 8310 	mrs	r3, PRIMASK
 80085be:	60bb      	str	r3, [r7, #8]
  return(result);
 80085c0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 80085c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80085c4:	b672      	cpsid	i
}
 80085c6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80085c8:	4b12      	ldr	r3, [pc, #72]	; (8008614 <UTIL_LPM_EnterLowPower+0x60>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80085d0:	4b11      	ldr	r3, [pc, #68]	; (8008618 <UTIL_LPM_EnterLowPower+0x64>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80085d6:	4b10      	ldr	r3, [pc, #64]	; (8008618 <UTIL_LPM_EnterLowPower+0x64>)
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	4798      	blx	r3
 80085dc:	e010      	b.n	8008600 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80085de:	4b0f      	ldr	r3, [pc, #60]	; (800861c <UTIL_LPM_EnterLowPower+0x68>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d006      	beq.n	80085f4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <UTIL_LPM_EnterLowPower+0x64>)
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <UTIL_LPM_EnterLowPower+0x64>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	4798      	blx	r3
 80085f2:	e005      	b.n	8008600 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 80085f4:	4b08      	ldr	r3, [pc, #32]	; (8008618 <UTIL_LPM_EnterLowPower+0x64>)
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <UTIL_LPM_EnterLowPower+0x64>)
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	4798      	blx	r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f383 8810 	msr	PRIMASK, r3
}
 800860a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800860c:	bf00      	nop
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200004c0 	.word	0x200004c0
 8008618:	080093c8 	.word	0x080093c8
 800861c:	200004c4 	.word	0x200004c4

08008620 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b090      	sub	sp, #64	; 0x40
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008628:	4b73      	ldr	r3, [pc, #460]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800862e:	4b72      	ldr	r3, [pc, #456]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4013      	ands	r3, r2
 8008636:	4a70      	ldr	r2, [pc, #448]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 8008638:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800863a:	4b70      	ldr	r3, [pc, #448]	; (80087fc <UTIL_SEQ_Run+0x1dc>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8008640:	4b6f      	ldr	r3, [pc, #444]	; (8008800 <UTIL_SEQ_Run+0x1e0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8008646:	4b6f      	ldr	r3, [pc, #444]	; (8008804 <UTIL_SEQ_Run+0x1e4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800864c:	4b6e      	ldr	r3, [pc, #440]	; (8008808 <UTIL_SEQ_Run+0x1e8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008652:	e08d      	b.n	8008770 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008658:	e002      	b.n	8008660 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800865a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865c:	3301      	adds	r3, #1
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008660:	4a6a      	ldr	r2, [pc, #424]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 8008662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008664:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	401a      	ands	r2, r3
 800866c:	4b62      	ldr	r3, [pc, #392]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4013      	ands	r3, r2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f1      	beq.n	800865a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008676:	4a65      	ldr	r2, [pc, #404]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 8008678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	401a      	ands	r2, r3
 8008682:	4b5d      	ldr	r3, [pc, #372]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4013      	ands	r3, r2
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800868a:	4a60      	ldr	r2, [pc, #384]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 800868c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	4413      	add	r3, r2
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	4013      	ands	r3, r2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800869c:	4a5b      	ldr	r2, [pc, #364]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 800869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4413      	add	r3, r2
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80086aa:	4a58      	ldr	r2, [pc, #352]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 80086ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	4413      	add	r3, r2
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	4013      	ands	r3, r2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f973 	bl	80089a4 <SEQ_BitPosition>
 80086be:	4603      	mov	r3, r0
 80086c0:	461a      	mov	r2, r3
 80086c2:	4b53      	ldr	r3, [pc, #332]	; (8008810 <UTIL_SEQ_Run+0x1f0>)
 80086c4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80086c6:	4a51      	ldr	r2, [pc, #324]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	4413      	add	r3, r2
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	4b4f      	ldr	r3, [pc, #316]	; (8008810 <UTIL_SEQ_Run+0x1f0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2101      	movs	r1, #1
 80086d6:	fa01 f303 	lsl.w	r3, r1, r3
 80086da:	43db      	mvns	r3, r3
 80086dc:	401a      	ands	r2, r3
 80086de:	494b      	ldr	r1, [pc, #300]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 80086e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	440b      	add	r3, r1
 80086e6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086e8:	f3ef 8310 	mrs	r3, PRIMASK
 80086ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80086ee:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80086f2:	b672      	cpsid	i
}
 80086f4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80086f6:	4b46      	ldr	r3, [pc, #280]	; (8008810 <UTIL_SEQ_Run+0x1f0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2201      	movs	r2, #1
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	43da      	mvns	r2, r3
 8008702:	4b3e      	ldr	r3, [pc, #248]	; (80087fc <UTIL_SEQ_Run+0x1dc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4013      	ands	r3, r2
 8008708:	4a3c      	ldr	r2, [pc, #240]	; (80087fc <UTIL_SEQ_Run+0x1dc>)
 800870a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800870c:	2302      	movs	r3, #2
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008710:	e013      	b.n	800873a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008714:	3b01      	subs	r3, #1
 8008716:	4a3d      	ldr	r2, [pc, #244]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 8008718:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800871c:	4b3c      	ldr	r3, [pc, #240]	; (8008810 <UTIL_SEQ_Run+0x1f0>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2201      	movs	r2, #1
 8008722:	fa02 f303 	lsl.w	r3, r2, r3
 8008726:	43da      	mvns	r2, r3
 8008728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872a:	3b01      	subs	r3, #1
 800872c:	400a      	ands	r2, r1
 800872e:	4937      	ldr	r1, [pc, #220]	; (800880c <UTIL_SEQ_Run+0x1ec>)
 8008730:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008736:	3b01      	subs	r3, #1
 8008738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e8      	bne.n	8008712 <UTIL_SEQ_Run+0xf2>
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800874c:	4b30      	ldr	r3, [pc, #192]	; (8008810 <UTIL_SEQ_Run+0x1f0>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a30      	ldr	r2, [pc, #192]	; (8008814 <UTIL_SEQ_Run+0x1f4>)
 8008752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008756:	4798      	blx	r3

    local_taskset = TaskSet;
 8008758:	4b28      	ldr	r3, [pc, #160]	; (80087fc <UTIL_SEQ_Run+0x1dc>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800875e:	4b28      	ldr	r3, [pc, #160]	; (8008800 <UTIL_SEQ_Run+0x1e0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8008764:	4b27      	ldr	r3, [pc, #156]	; (8008804 <UTIL_SEQ_Run+0x1e4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800876a:	4b27      	ldr	r3, [pc, #156]	; (8008808 <UTIL_SEQ_Run+0x1e8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	401a      	ands	r2, r3
 8008776:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <UTIL_SEQ_Run+0x16c>
 8008780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	4013      	ands	r3, r2
 8008786:	2b00      	cmp	r3, #0
 8008788:	f43f af64 	beq.w	8008654 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800878c:	4b20      	ldr	r3, [pc, #128]	; (8008810 <UTIL_SEQ_Run+0x1f0>)
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008794:	f000 f8f8 	bl	8008988 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008798:	f3ef 8310 	mrs	r3, PRIMASK
 800879c:	613b      	str	r3, [r7, #16]
  return(result);
 800879e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80087a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80087a2:	b672      	cpsid	i
}
 80087a4:	bf00      	nop
  local_taskset = TaskSet;
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <UTIL_SEQ_Run+0x1dc>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80087ac:	4b14      	ldr	r3, [pc, #80]	; (8008800 <UTIL_SEQ_Run+0x1e0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80087b2:	4b14      	ldr	r3, [pc, #80]	; (8008804 <UTIL_SEQ_Run+0x1e4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80087b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	401a      	ands	r2, r3
 80087be:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d107      	bne.n	80087d8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80087c8:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <UTIL_SEQ_Run+0x1e8>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80087d4:	f7f8 fe5a 	bl	800148c <UTIL_SEQ_Idle>
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f383 8810 	msr	PRIMASK, r3
}
 80087e2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80087e4:	f000 f8d7 	bl	8008996 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80087e8:	4a03      	ldr	r2, [pc, #12]	; (80087f8 <UTIL_SEQ_Run+0x1d8>)
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	6013      	str	r3, [r2, #0]

  return;
 80087ee:	bf00      	nop
}
 80087f0:	3740      	adds	r7, #64	; 0x40
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000028 	.word	0x20000028
 80087fc:	200004c8 	.word	0x200004c8
 8008800:	200004cc 	.word	0x200004cc
 8008804:	20000024 	.word	0x20000024
 8008808:	200004d0 	.word	0x200004d0
 800880c:	20000558 	.word	0x20000558
 8008810:	200004d4 	.word	0x200004d4
 8008814:	200004d8 	.word	0x200004d8

08008818 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008824:	f3ef 8310 	mrs	r3, PRIMASK
 8008828:	617b      	str	r3, [r7, #20]
  return(result);
 800882a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800882c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800882e:	b672      	cpsid	i
}
 8008830:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 f8b6 	bl	80089a4 <SEQ_BitPosition>
 8008838:	4603      	mov	r3, r0
 800883a:	4619      	mov	r1, r3
 800883c:	4a06      	ldr	r2, [pc, #24]	; (8008858 <UTIL_SEQ_RegTask+0x40>)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f383 8810 	msr	PRIMASK, r3
}
 800884e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008850:	bf00      	nop
}
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	200004d8 	.word	0x200004d8

0800885c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008866:	f3ef 8310 	mrs	r3, PRIMASK
 800886a:	60fb      	str	r3, [r7, #12]
  return(result);
 800886c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800886e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008870:	b672      	cpsid	i
}
 8008872:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008874:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <UTIL_SEQ_SetTask+0x50>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4313      	orrs	r3, r2
 800887c:	4a0b      	ldr	r2, [pc, #44]	; (80088ac <UTIL_SEQ_SetTask+0x50>)
 800887e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008880:	4a0b      	ldr	r2, [pc, #44]	; (80088b0 <UTIL_SEQ_SetTask+0x54>)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	431a      	orrs	r2, r3
 800888c:	4908      	ldr	r1, [pc, #32]	; (80088b0 <UTIL_SEQ_SetTask+0x54>)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f383 8810 	msr	PRIMASK, r3
}
 800889e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80088a0:	bf00      	nop
}
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	200004c8 	.word	0x200004c8
 80088b0:	20000558 	.word	0x20000558

080088b4 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088bc:	f3ef 8310 	mrs	r3, PRIMASK
 80088c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80088c2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80088c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088c6:	b672      	cpsid	i
}
 80088c8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <UTIL_SEQ_SetEvt+0x3c>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	4a07      	ldr	r2, [pc, #28]	; (80088f0 <UTIL_SEQ_SetEvt+0x3c>)
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f383 8810 	msr	PRIMASK, r3
}
 80088e0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80088e2:	bf00      	nop
}
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	200004cc 	.word	0x200004cc

080088f4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80088fc:	4b1f      	ldr	r3, [pc, #124]	; (800897c <UTIL_SEQ_WaitEvt+0x88>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008902:	4b1e      	ldr	r3, [pc, #120]	; (800897c <UTIL_SEQ_WaitEvt+0x88>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890a:	d102      	bne.n	8008912 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]
 8008910:	e005      	b.n	800891e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008912:	4b1a      	ldr	r3, [pc, #104]	; (800897c <UTIL_SEQ_WaitEvt+0x88>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800891e:	4b18      	ldr	r3, [pc, #96]	; (8008980 <UTIL_SEQ_WaitEvt+0x8c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008924:	4a16      	ldr	r2, [pc, #88]	; (8008980 <UTIL_SEQ_WaitEvt+0x8c>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800892a:	e003      	b.n	8008934 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	69f8      	ldr	r0, [r7, #28]
 8008930:	f7f8 fdb2 	bl	8001498 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008934:	4b13      	ldr	r3, [pc, #76]	; (8008984 <UTIL_SEQ_WaitEvt+0x90>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f5      	beq.n	800892c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008940:	4a0e      	ldr	r2, [pc, #56]	; (800897c <UTIL_SEQ_WaitEvt+0x88>)
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008946:	f3ef 8310 	mrs	r3, PRIMASK
 800894a:	60bb      	str	r3, [r7, #8]
  return(result);
 800894c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800894e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008950:	b672      	cpsid	i
}
 8008952:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	43da      	mvns	r2, r3
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <UTIL_SEQ_WaitEvt+0x90>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4013      	ands	r3, r2
 800895e:	4a09      	ldr	r2, [pc, #36]	; (8008984 <UTIL_SEQ_WaitEvt+0x90>)
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f383 8810 	msr	PRIMASK, r3
}
 800896c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800896e:	4a04      	ldr	r2, [pc, #16]	; (8008980 <UTIL_SEQ_WaitEvt+0x8c>)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6013      	str	r3, [r2, #0]
  return;
 8008974:	bf00      	nop
}
 8008976:	3720      	adds	r7, #32
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	200004d4 	.word	0x200004d4
 8008980:	200004d0 	.word	0x200004d0
 8008984:	200004cc 	.word	0x200004cc

08008988 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008988:	b480      	push	{r7}
 800898a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800898c:	bf00      	nop
}
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008996:	b480      	push	{r7}
 8008998:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800899a:	bf00      	nop
}
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	0c1b      	lsrs	r3, r3, #16
 80089b8:	041b      	lsls	r3, r3, #16
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <SEQ_BitPosition+0x24>
 80089be:	2310      	movs	r3, #16
 80089c0:	73fb      	strb	r3, [r7, #15]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	041b      	lsls	r3, r3, #16
 80089c6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d105      	bne.n	80089de <SEQ_BitPosition+0x3a>
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	3308      	adds	r3, #8
 80089d6:	73fb      	strb	r3, [r7, #15]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d105      	bne.n	80089f4 <SEQ_BitPosition+0x50>
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	3304      	adds	r3, #4
 80089ec:	73fb      	strb	r3, [r7, #15]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	0f1b      	lsrs	r3, r3, #28
 80089f8:	4a07      	ldr	r2, [pc, #28]	; (8008a18 <SEQ_BitPosition+0x74>)
 80089fa:	5cd2      	ldrb	r2, [r2, r3]
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	4413      	add	r3, r2
 8008a00:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	f1c3 031f 	rsb	r3, r3, #31
 8008a08:	b2db      	uxtb	r3, r3
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	08009460 	.word	0x08009460

08008a1c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	605a      	str	r2, [r3, #4]
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a44:	f3ef 8310 	mrs	r3, PRIMASK
 8008a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a4e:	b672      	cpsid	i
}
 8008a50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d102      	bne.n	8008a62 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	75fb      	strb	r3, [r7, #23]
 8008a60:	e001      	b.n	8008a66 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f383 8810 	msr	PRIMASK, r3
}
 8008a70:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	371c      	adds	r7, #28
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a90:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a94:	b672      	cpsid	i
}
 8008a96:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f383 8810 	msr	PRIMASK, r3
}
 8008abe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ac0:	bf00      	nop
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8008ada:	60fb      	str	r3, [r7, #12]
  return(result);
 8008adc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ade:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ae0:	b672      	cpsid	i
}
 8008ae2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f383 8810 	msr	PRIMASK, r3
}
 8008b0a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b20:	f3ef 8310 	mrs	r3, PRIMASK
 8008b24:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b2a:	b672      	cpsid	i
}
 8008b2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6852      	ldr	r2, [r2, #4]
 8008b40:	605a      	str	r2, [r3, #4]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f383 8810 	msr	PRIMASK, r3
}
 8008b4c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b4e:	bf00      	nop
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b086      	sub	sp, #24
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b64:	f3ef 8310 	mrs	r3, PRIMASK
 8008b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b6e:	b672      	cpsid	i
}
 8008b70:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff ffca 	bl	8008b18 <LST_remove_node>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f383 8810 	msr	PRIMASK, r3
}
 8008b8e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b90:	bf00      	nop
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <__libc_init_array>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	4d0d      	ldr	r5, [pc, #52]	; (8008bd0 <__libc_init_array+0x38>)
 8008b9c:	4c0d      	ldr	r4, [pc, #52]	; (8008bd4 <__libc_init_array+0x3c>)
 8008b9e:	1b64      	subs	r4, r4, r5
 8008ba0:	10a4      	asrs	r4, r4, #2
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	42a6      	cmp	r6, r4
 8008ba6:	d109      	bne.n	8008bbc <__libc_init_array+0x24>
 8008ba8:	4d0b      	ldr	r5, [pc, #44]	; (8008bd8 <__libc_init_array+0x40>)
 8008baa:	4c0c      	ldr	r4, [pc, #48]	; (8008bdc <__libc_init_array+0x44>)
 8008bac:	f000 f82e 	bl	8008c0c <_init>
 8008bb0:	1b64      	subs	r4, r4, r5
 8008bb2:	10a4      	asrs	r4, r4, #2
 8008bb4:	2600      	movs	r6, #0
 8008bb6:	42a6      	cmp	r6, r4
 8008bb8:	d105      	bne.n	8008bc6 <__libc_init_array+0x2e>
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc0:	4798      	blx	r3
 8008bc2:	3601      	adds	r6, #1
 8008bc4:	e7ee      	b.n	8008ba4 <__libc_init_array+0xc>
 8008bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bca:	4798      	blx	r3
 8008bcc:	3601      	adds	r6, #1
 8008bce:	e7f2      	b.n	8008bb6 <__libc_init_array+0x1e>
 8008bd0:	08009470 	.word	0x08009470
 8008bd4:	08009470 	.word	0x08009470
 8008bd8:	08009470 	.word	0x08009470
 8008bdc:	08009474 	.word	0x08009474

08008be0 <memcpy>:
 8008be0:	440a      	add	r2, r1
 8008be2:	4291      	cmp	r1, r2
 8008be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008be8:	d100      	bne.n	8008bec <memcpy+0xc>
 8008bea:	4770      	bx	lr
 8008bec:	b510      	push	{r4, lr}
 8008bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bf6:	4291      	cmp	r1, r2
 8008bf8:	d1f9      	bne.n	8008bee <memcpy+0xe>
 8008bfa:	bd10      	pop	{r4, pc}

08008bfc <memset>:
 8008bfc:	4402      	add	r2, r0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d100      	bne.n	8008c06 <memset+0xa>
 8008c04:	4770      	bx	lr
 8008c06:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0a:	e7f9      	b.n	8008c00 <memset+0x4>

08008c0c <_init>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr

08008c18 <_fini>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr
