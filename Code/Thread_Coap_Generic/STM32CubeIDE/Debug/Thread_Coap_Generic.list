
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d540  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800d680  0800d680  0001d680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800df9c  0800df9c  0001df9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dfa0  0800dfa0  0001dfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800dfa4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000090  0800e02c  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000017e8  200000a4  0800e03d  000200a4  2**2
                  ALLOC
  9 ._user_heap_stack 00002804  2000188c  0800e03d  0002188c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 14 .debug_info   00035067  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006d38  00000000  00000000  00055138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002cc0  00000000  00000000  0005be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000029e8  00000000  00000000  0005eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000106bc  00000000  00000000  00061518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036a23  00000000  00000000  00071bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112a89  00000000  00000000  000a85f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001bb080  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c1bc  00000000  00000000  001bb0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a4 	.word	0x200000a4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d668 	.word	0x0800d668

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a8 	.word	0x200000a8
 800017c:	0800d668 	.word	0x0800d668

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <sensirion_i2c_init+0x1c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200000c0 	.word	0x200000c0

08000564 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000564:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000566:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000568:	3304      	adds	r3, #4

0800056a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800056e:	d3f9      	bcc.n	8000564 <CopyDataInit>
  bx lr
 8000570:	4770      	bx	lr

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000572:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000574:	3004      	adds	r0, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000576:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>
  bx lr
 800057a:	4770      	bx	lr

0800057c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800057e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000580:	f003 f926 	bl	80037d0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <LoopForever+0x8>)
 8000586:	490c      	ldr	r1, [pc, #48]	; (80005b8 <LoopForever+0xc>)
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <LoopForever+0x10>)
 800058a:	2300      	movs	r3, #0
 800058c:	f7ff ffed 	bl	800056a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopForever+0x14>)
 8000592:	490c      	ldr	r1, [pc, #48]	; (80005c4 <LoopForever+0x18>)
 8000594:	2300      	movs	r3, #0
 8000596:	f7ff ffee 	bl	8000576 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <LoopForever+0x1c>)
 800059c:	490b      	ldr	r1, [pc, #44]	; (80005cc <LoopForever+0x20>)
 800059e:	2300      	movs	r3, #0
 80005a0:	f7ff ffe9 	bl	8000576 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a4:	f00b fe7c 	bl	800c2a0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80005a8:	f002 fb08 	bl	8002bbc <main>

080005ac <LoopForever>:

LoopForever:
  b LoopForever
 80005ac:	e7fe      	b.n	80005ac <LoopForever>
 80005ae:	0000      	.short	0x0000
  ldr   r0, =_estack
 80005b0:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000090 	.word	0x20000090
 80005bc:	0800dfa4 	.word	0x0800dfa4
  INIT_BSS _sbss, _ebss
 80005c0:	200000a4 	.word	0x200000a4
 80005c4:	2000188c 	.word	0x2000188c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005c8:	200300e8 	.word	0x200300e8
 80005cc:	20030c6a 	.word	0x20030c6a

080005d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_IRQHandler>

080005d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e00a      	b.n	80005fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005e4:	f3af 8000 	nop.w
 80005e8:	4601      	mov	r1, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	60ba      	str	r2, [r7, #8]
 80005f0:	b2ca      	uxtb	r2, r1
 80005f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3301      	adds	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dbf0      	blt.n	80005e4 <_read+0x12>
  }

  return len;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_close>:
  }
  return len;
}

int _close(int file)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000634:	605a      	str	r2, [r3, #4]
  return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_isatty>:

int _isatty(int file)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800064c:	2301      	movs	r3, #1
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800065a:	b480      	push	{r7}
 800065c:	b085      	sub	sp, #20
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f00b fdf6 	bl	800c294 <__errno>
 80006a8:	4603      	mov	r3, r0
 80006aa:	220c      	movs	r2, #12
 80006ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20024000 	.word	0x20024000
 80006d4:	00002000 	.word	0x00002000
 80006d8:	200000c4 	.word	0x200000c4
 80006dc:	20001890 	.word	0x20001890

080006e0 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 80006ec:	2300      	movs	r3, #0
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	68f8      	ldr	r0, [r7, #12]
 80006f4:	f009 f80e 	bl	8009714 <otCoapSendResponseWithParameters>
 80006f8:	4603      	mov	r3, r0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <APP_THREAD_Init>:
char resource_name[32];
otIp6Address brAddr;
/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_THREAD_INIT_1 */

  /* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800070a:	2101      	movs	r1, #1
 800070c:	2002      	movs	r0, #2
 800070e:	f00a fea3 	bl	800b458 <UTIL_LPM_SetStopMode>
  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8000712:	f000 fa17 	bl	8000b44 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000716:	481c      	ldr	r0, [pc, #112]	; (8000788 <APP_THREAD_Init+0x84>)
 8000718:	f000 fb6c 	bl	8000df4 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800071c:	2101      	movs	r1, #1
 800071e:	2002      	movs	r0, #2
 8000720:	f00a feca 	bl	800b4b8 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8000724:	f000 fc8c 	bl	8001040 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000728:	f000 fc72 	bl	8001010 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800072c:	f00a f844 	bl	800a7b8 <SHCI_C2_THREAD_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8000734:	4a15      	ldr	r2, [pc, #84]	; (800078c <APP_THREAD_Init+0x88>)
 8000736:	2100      	movs	r1, #0
 8000738:	2001      	movs	r0, #1
 800073a:	f00a ffe9 	bl	800b710 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN INIT TASKS */
  APP_THREAD_SetSleepyEndDeviceMode();
 800073e:	f000 f8e3 	bl	8000908 <APP_THREAD_SetSleepyEndDeviceMode>
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 8000742:	f000 f935 	bl	80009b0 <APP_THREAD_DeviceConfig>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	4811      	ldr	r0, [pc, #68]	; (8000790 <APP_THREAD_Init+0x8c>)
 800074c:	f004 f846 	bl	80047dc <HAL_GPIO_WritePin>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated, APP_THREAD_SendCoapMsg);
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <APP_THREAD_Init+0x90>)
 8000752:	2201      	movs	r2, #1
 8000754:	4910      	ldr	r1, [pc, #64]	; (8000798 <APP_THREAD_Init+0x94>)
 8000756:	2000      	movs	r0, #0
 8000758:	f001 ff0e 	bl	8002578 <HW_TS_Create>
  HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <APP_THREAD_Init+0x94>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f642 0205 	movw	r2, #10245	; 0x2805
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f804 	bl	8002774 <HW_TS_Start>
  APP_THREAD_InitPayloadWrite();
 800076c:	f000 fb1c 	bl	8000da8 <APP_THREAD_InitPayloadWrite>


  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000770:	2100      	movs	r1, #0
 8000772:	2002      	movs	r0, #2
 8000774:	f00a fe70 	bl	800b458 <UTIL_LPM_SetStopMode>

  /* Allow the 802_15_4 IP to enter in low power mode */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 8000778:	2101      	movs	r1, #1
 800077a:	2001      	movs	r0, #1
 800077c:	f00a f848 	bl	800a810 <SHCI_C2_RADIO_AllowLowPower>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200300e8 	.word	0x200300e8
 800078c:	080010d5 	.word	0x080010d5
 8000790:	48000800 	.word	0x48000800
 8000794:	08000ddd 	.word	0x08000ddd
 8000798:	200002e2 	.word	0x200002e2

0800079c <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b16      	cmp	r3, #22
 80007aa:	f200 8081 	bhi.w	80008b0 <APP_THREAD_Error+0x114>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <APP_THREAD_Error+0x18>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	08000811 	.word	0x08000811
 80007b8:	0800081b 	.word	0x0800081b
 80007bc:	08000825 	.word	0x08000825
 80007c0:	0800082f 	.word	0x0800082f
 80007c4:	08000839 	.word	0x08000839
 80007c8:	08000843 	.word	0x08000843
 80007cc:	0800084d 	.word	0x0800084d
 80007d0:	08000857 	.word	0x08000857
 80007d4:	0800086b 	.word	0x0800086b
 80007d8:	08000875 	.word	0x08000875
 80007dc:	0800087f 	.word	0x0800087f
 80007e0:	08000889 	.word	0x08000889
 80007e4:	080008b1 	.word	0x080008b1
 80007e8:	08000893 	.word	0x08000893
 80007ec:	0800089d 	.word	0x0800089d
 80007f0:	080008b1 	.word	0x080008b1
 80007f4:	080008b1 	.word	0x080008b1
 80007f8:	080008b1 	.word	0x080008b1
 80007fc:	080008b1 	.word	0x080008b1
 8000800:	080008b1 	.word	0x080008b1
 8000804:	080008a7 	.word	0x080008a7
 8000808:	080008b1 	.word	0x080008b1
 800080c:	08000861 	.word	0x08000861
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000810:	6839      	ldr	r1, [r7, #0]
 8000812:	482c      	ldr	r0, [pc, #176]	; (80008c4 <APP_THREAD_Error+0x128>)
 8000814:	f000 f982 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000818:	e04f      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800081a:	6839      	ldr	r1, [r7, #0]
 800081c:	482a      	ldr	r0, [pc, #168]	; (80008c8 <APP_THREAD_Error+0x12c>)
 800081e:	f000 f97d 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000822:	e04a      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8000824:	6839      	ldr	r1, [r7, #0]
 8000826:	4829      	ldr	r0, [pc, #164]	; (80008cc <APP_THREAD_Error+0x130>)
 8000828:	f000 f978 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 800082c:	e045      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800082e:	6839      	ldr	r1, [r7, #0]
 8000830:	4827      	ldr	r0, [pc, #156]	; (80008d0 <APP_THREAD_Error+0x134>)
 8000832:	f000 f973 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000836:	e040      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	4826      	ldr	r0, [pc, #152]	; (80008d4 <APP_THREAD_Error+0x138>)
 800083c:	f000 f96e 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000840:	e03b      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000842:	6839      	ldr	r1, [r7, #0]
 8000844:	4824      	ldr	r0, [pc, #144]	; (80008d8 <APP_THREAD_Error+0x13c>)
 8000846:	f000 f969 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 800084a:	e036      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800084c:	6839      	ldr	r1, [r7, #0]
 800084e:	4823      	ldr	r0, [pc, #140]	; (80008dc <APP_THREAD_Error+0x140>)
 8000850:	f000 f964 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000854:	e031      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 8000856:	6839      	ldr	r1, [r7, #0]
 8000858:	4821      	ldr	r0, [pc, #132]	; (80008e0 <APP_THREAD_Error+0x144>)
 800085a:	f000 f95f 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 800085e:	e02c      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	4820      	ldr	r0, [pc, #128]	; (80008e4 <APP_THREAD_Error+0x148>)
 8000864:	f000 f95a 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000868:	e027      	b.n	80008ba <APP_THREAD_Error+0x11e>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 800086a:	6839      	ldr	r1, [r7, #0]
 800086c:	481e      	ldr	r0, [pc, #120]	; (80008e8 <APP_THREAD_Error+0x14c>)
 800086e:	f000 f955 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000872:	e022      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8000874:	6839      	ldr	r1, [r7, #0]
 8000876:	481d      	ldr	r0, [pc, #116]	; (80008ec <APP_THREAD_Error+0x150>)
 8000878:	f000 f950 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 800087c:	e01d      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 800087e:	6839      	ldr	r1, [r7, #0]
 8000880:	481b      	ldr	r0, [pc, #108]	; (80008f0 <APP_THREAD_Error+0x154>)
 8000882:	f000 f94b 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000886:	e018      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	481a      	ldr	r0, [pc, #104]	; (80008f4 <APP_THREAD_Error+0x158>)
 800088c:	f000 f946 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 8000890:	e013      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	4818      	ldr	r0, [pc, #96]	; (80008f8 <APP_THREAD_Error+0x15c>)
 8000896:	f000 f941 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 800089a:	e00e      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 800089c:	6839      	ldr	r1, [r7, #0]
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <APP_THREAD_Error+0x160>)
 80008a0:	f000 f93c 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 80008a4:	e009      	b.n	80008ba <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MSG_COMPARE_FAILED:
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",ErrCode);
 80008a6:	6839      	ldr	r1, [r7, #0]
 80008a8:	4815      	ldr	r0, [pc, #84]	; (8000900 <APP_THREAD_Error+0x164>)
 80008aa:	f000 f937 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 80008ae:	e004      	b.n	80008ba <APP_THREAD_Error+0x11e>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 80008b0:	2100      	movs	r1, #0
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <APP_THREAD_Error+0x168>)
 80008b4:	f000 f932 	bl	8000b1c <APP_THREAD_TraceError>
    break;
 80008b8:	bf00      	nop
  }
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	0800d694 	.word	0x0800d694
 80008c8:	0800d6b8 	.word	0x0800d6b8
 80008cc:	0800d6dc 	.word	0x0800d6dc
 80008d0:	0800d6fc 	.word	0x0800d6fc
 80008d4:	0800d71c 	.word	0x0800d71c
 80008d8:	0800d73c 	.word	0x0800d73c
 80008dc:	0800d758 	.word	0x0800d758
 80008e0:	0800d784 	.word	0x0800d784
 80008e4:	0800d7a8 	.word	0x0800d7a8
 80008e8:	0800d7cc 	.word	0x0800d7cc
 80008ec:	0800d7ec 	.word	0x0800d7ec
 80008f0:	0800d814 	.word	0x0800d814
 80008f4:	0800d838 	.word	0x0800d838
 80008f8:	0800d860 	.word	0x0800d860
 80008fc:	0800d880 	.word	0x0800d880
 8000900:	0800d8a8 	.word	0x0800d8a8
 8000904:	0800d8d0 	.word	0x0800d8d0

08000908 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 800090e:	2300      	movs	r3, #0
 8000910:	71fb      	strb	r3, [r7, #7]

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(NULL, 15000);
 8000912:	f643 2198 	movw	r1, #15000	; 0x3a98
 8000916:	2000      	movs	r0, #0
 8000918:	f009 f86f 	bl	80099fa <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 800091e:	7813      	ldrb	r3, [r2, #0]
 8000920:	f36f 0300 	bfc	r3, #0, #1
 8000924:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 8000926:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000928:	7813      	ldrb	r3, [r2, #0]
 800092a:	f36f 0341 	bfc	r3, #1, #1
 800092e:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 1U;
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000932:	7813      	ldrb	r3, [r2, #0]
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(NULL,OT_LinkMode);
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 800093c:	7819      	ldrb	r1, [r3, #0]
 800093e:	2000      	movs	r0, #0
 8000940:	f00a f996 	bl	800ac70 <otThreadSetLinkMode>
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <APP_THREAD_SetSleepyEndDeviceMode+0x50>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4619      	mov	r1, r3
 8000952:	2011      	movs	r0, #17
 8000954:	f7ff ff22 	bl	800079c <APP_THREAD_Error>
   * to modify its mode to MTD.
   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
   * then reattach.
   *
   */
  if (sleepyEndDeviceFlag == FALSE)
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d11e      	bne.n	800099e <APP_THREAD_SetSleepyEndDeviceMode+0x96>
  {
    error = otThreadSetEnabled(NULL, false);
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f00a f954 	bl	800ac10 <otThreadSetEnabled>
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <APP_THREAD_SetSleepyEndDeviceMode+0x74>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4619      	mov	r1, r3
 8000976:	2011      	movs	r0, #17
 8000978:	f7ff ff10 	bl	800079c <APP_THREAD_Error>
    error = otThreadSetEnabled(NULL, true);
 800097c:	2101      	movs	r1, #1
 800097e:	2000      	movs	r0, #0
 8000980:	f00a f946 	bl	800ac10 <otThreadSetEnabled>
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <APP_THREAD_SetSleepyEndDeviceMode+0x90>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4619      	mov	r1, r3
 8000992:	2011      	movs	r0, #17
 8000994:	f7ff ff02 	bl	800079c <APP_THREAD_Error>
    sleepyEndDeviceFlag = TRUE;
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
  }

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000c8 	.word	0x200000c8
 80009ac:	200000cc 	.word	0x200000cc

080009b0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
  otError error;
  otNetworkKey networkKey = {{0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9,
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <APP_THREAD_DeviceConfig+0x110>)
 80009b8:	1d3c      	adds	r4, r7, #4
 80009ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          0xca, 0x86, 0x85, 0xab, 0x99, 0xda, 0xc9, 0x51}};

  error = otInstanceErasePersistentInfo(NULL);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f008 ff61 	bl	8009888 <otInstanceErasePersistentInfo>
 80009c6:	4603      	mov	r3, r0
 80009c8:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <APP_THREAD_DeviceConfig+0x2a>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	4619      	mov	r1, r3
 80009d4:	2006      	movs	r0, #6
 80009d6:	f7ff fee1 	bl	800079c <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80009da:	2000      	movs	r0, #0
 80009dc:	f008 fef8 	bl	80097d0 <otInstanceFinalize>
  otInstanceInitSingle();
 80009e0:	f008 fecf 	bl	8009782 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80009e4:	2200      	movs	r2, #0
 80009e6:	4937      	ldr	r1, [pc, #220]	; (8000ac4 <APP_THREAD_DeviceConfig+0x114>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f008 ff17 	bl	800981c <otSetStateChangedCallback>
 80009ee:	4603      	mov	r3, r0
 80009f0:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d004      	beq.n	8000a02 <APP_THREAD_DeviceConfig+0x52>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	4619      	mov	r1, r3
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fecd 	bl	800079c <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8000a02:	210e      	movs	r1, #14
 8000a04:	2000      	movs	r0, #0
 8000a06:	f008 ff98 	bl	800993a <otLinkSetChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <APP_THREAD_DeviceConfig+0x6e>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	4619      	mov	r1, r3
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff febf 	bl	800079c <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8000a1e:	f241 1111 	movw	r1, #4369	; 0x1111
 8000a22:	2000      	movs	r0, #0
 8000a24:	f008 ffb9 	bl	800999a <otLinkSetPanId>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <APP_THREAD_DeviceConfig+0x8c>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	4619      	mov	r1, r3
 8000a36:	2003      	movs	r0, #3
 8000a38:	f7ff feb0 	bl	800079c <APP_THREAD_Error>
  }
  error = otThreadSetNetworkKey(NULL, &networkKey);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2000      	movs	r0, #0
 8000a42:	f00a f956 	bl	800acf2 <otThreadSetNetworkKey>
 8000a46:	4603      	mov	r3, r0
 8000a48:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <APP_THREAD_DeviceConfig+0xaa>
  {
    APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	4619      	mov	r1, r3
 8000a54:	2007      	movs	r0, #7
 8000a56:	f7ff fea1 	bl	800079c <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f008 ff3c 	bl	80098da <otIp6SetEnabled>
 8000a62:	4603      	mov	r3, r0
 8000a64:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d004      	beq.n	8000a76 <APP_THREAD_DeviceConfig+0xc6>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8000a6c:	7dfb      	ldrb	r3, [r7, #23]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	2004      	movs	r0, #4
 8000a72:	f7ff fe93 	bl	800079c <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8000a76:	2101      	movs	r1, #1
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f00a f8c9 	bl	800ac10 <otThreadSetEnabled>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <APP_THREAD_DeviceConfig+0xe2>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2005      	movs	r0, #5
 8000a8e:	f7ff fe85 	bl	800079c <APP_THREAD_Error>
  }
  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8000a92:	f241 6133 	movw	r1, #5683	; 0x1633
 8000a96:	2000      	movs	r0, #0
 8000a98:	f008 fde0 	bl	800965c <otCoapStart>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d004      	beq.n	8000ab0 <APP_THREAD_DeviceConfig+0x100>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 8000aa6:	7dfb      	ldrb	r3, [r7, #23]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f7ff fe76 	bl	800079c <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(NULL, &OT_Ressource);
 8000ab0:	4905      	ldr	r1, [pc, #20]	; (8000ac8 <APP_THREAD_DeviceConfig+0x118>)
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f008 fe02 	bl	80096bc <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 8000ab8:	bf00      	nop
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	0800d8e0 	.word	0x0800d8e0
 8000ac4:	08000acd 	.word	0x08000acd
 8000ac8:	20000008 	.word	0x20000008

08000acc <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d016      	beq.n	8000b0e <APP_THREAD_StateNotif+0x42>
  {
    switch (otThreadGetDeviceRole(NULL))
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f00a f935 	bl	800ad50 <otThreadGetDeviceRole>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d812      	bhi.n	8000b12 <APP_THREAD_StateNotif+0x46>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <APP_THREAD_StateNotif+0x28>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b13 	.word	0x08000b13
 8000af8:	08000b13 	.word	0x08000b13
 8000afc:	08000b09 	.word	0x08000b09
 8000b00:	08000b13 	.word	0x08000b13
 8000b04:	08000b13 	.word	0x08000b13
       /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */

       break;
    case OT_DEVICE_ROLE_CHILD:
       /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SetSleepyEndDeviceMode();
 8000b08:	f7ff fefe 	bl	8000908 <APP_THREAD_SetSleepyEndDeviceMode>
       break;
 8000b0c:	e002      	b.n	8000b14 <APP_THREAD_StateNotif+0x48>
    default:
       /* USER CODE BEGIN DEFAULT */
       /* USER CODE END DEFAULT */
       break;
    }
  }
 8000b0e:	bf00      	nop
 8000b10:	e000      	b.n	8000b14 <APP_THREAD_StateNotif+0x48>
       break;
 8000b12:	bf00      	nop
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <APP_THREAD_TraceError+0x24>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2000      	movs	r0, #0
 8000b32:	f002 fdad 	bl	8003690 <logApplication>

  /* USER CODE END TRACE_ERROR */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	0800d8f0 	.word	0x0800d8f0

08000b44 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f009 fe7c 	bl	800a84c <SHCI_GetWirelessFwInfo>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d004      	beq.n	8000b64 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2016      	movs	r0, #22
 8000b5e:	f7ff fe1d 	bl	800079c <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8000b62:	e07c      	b.n	8000c5e <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
    APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8000b64:	4a40      	ldr	r2, [pc, #256]	; (8000c68 <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f002 fd91 	bl	8003690 <logApplication>
    APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	789b      	ldrb	r3, [r3, #2]
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	460b      	mov	r3, r1
 8000b84:	4a39      	ldr	r2, [pc, #228]	; (8000c6c <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f002 fd81 	bl	8003690 <logApplication>
    APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	791b      	ldrb	r3, [r3, #4]
 8000b92:	4a37      	ldr	r2, [pc, #220]	; (8000c70 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	2000      	movs	r0, #0
 8000b98:	f002 fd7a 	bl	8003690 <logApplication>
    APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f002 fd73 	bl	8003690 <logApplication>
    APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	7a9b      	ldrb	r3, [r3, #10]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	7adb      	ldrb	r3, [r3, #11]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	7b1b      	ldrb	r3, [r3, #12]
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	9200      	str	r2, [sp, #0]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f002 fd63 	bl	8003690 <logApplication>
    APP_DBG("Stack type: %d", p_wireless_info->StackType);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	7a5b      	ldrb	r3, [r3, #9]
 8000bce:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f002 fd5c 	bl	8003690 <logApplication>
    APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	7a1b      	ldrb	r3, [r3, #8]
 8000bdc:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	2000      	movs	r0, #0
 8000be2:	f002 fd55 	bl	8003690 <logApplication>
    APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	79db      	ldrb	r3, [r3, #7]
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f002 fd4e 	bl	8003690 <logApplication>
    APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f002 fd47 	bl	8003690 <logApplication>
    APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	795b      	ldrb	r3, [r3, #5]
 8000c06:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f002 fd40 	bl	8003690 <logApplication>
    switch(p_wireless_info->StackType)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	7a5b      	ldrb	r3, [r3, #9]
 8000c14:	2b50      	cmp	r3, #80	; 0x50
 8000c16:	d012      	beq.n	8000c3e <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8000c18:	2b50      	cmp	r3, #80	; 0x50
 8000c1a:	dc16      	bgt.n	8000c4a <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8000c1c:	2b10      	cmp	r3, #16
 8000c1e:	d002      	beq.n	8000c26 <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8000c20:	2b11      	cmp	r3, #17
 8000c22:	d006      	beq.n	8000c32 <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 8000c24:	e011      	b.n	8000c4a <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
      APP_DBG("FW Type : Thread FTD");
 8000c26:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f002 fd30 	bl	8003690 <logApplication>
      break;
 8000c30:	e010      	b.n	8000c54 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Thread MTD");
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	2000      	movs	r0, #0
 8000c38:	f002 fd2a 	bl	8003690 <logApplication>
      break;
 8000c3c:	e00a      	b.n	8000c54 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	2000      	movs	r0, #0
 8000c44:	f002 fd24 	bl	8003690 <logApplication>
      break;
 8000c48:	e004      	b.n	8000c54 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2016      	movs	r0, #22
 8000c4e:	f7ff fda5 	bl	800079c <APP_THREAD_Error>
      break;
 8000c52:	bf00      	nop
    APP_DBG("**********************************************************");
 8000c54:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f002 fd19 	bl	8003690 <logApplication>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	0800d914 	.word	0x0800d914
 8000c6c:	0800d950 	.word	0x0800d950
 8000c70:	0800d96c 	.word	0x0800d96c
 8000c74:	0800d988 	.word	0x0800d988
 8000c78:	0800d9a0 	.word	0x0800d9a0
 8000c7c:	0800d9bc 	.word	0x0800d9bc
 8000c80:	0800d9cc 	.word	0x0800d9cc
 8000c84:	0800d9e0 	.word	0x0800d9e0
 8000c88:	0800d9f4 	.word	0x0800d9f4
 8000c8c:	0800da08 	.word	0x0800da08
 8000c90:	0800da1c 	.word	0x0800da1c
 8000c94:	0800da34 	.word	0x0800da34
 8000c98:	0800da4c 	.word	0x0800da4c
 8000c9c:	0800da78 	.word	0x0800da78

08000ca0 <APP_THREAD_CoapPermissionsRequestHandler>:
 * @retval None
 */
static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]

  
  APP_DBG(" Received CoAP request (context = %s)",pContext);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a38      	ldr	r2, [pc, #224]	; (8000d90 <APP_THREAD_CoapPermissionsRequestHandler+0xf0>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f002 fcec 	bl	8003690 <logApplication>
  /* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
  //GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
  //printIPv6Addr(&aMessageInfo->mPeerAddr);
  brAddr = pMessageInfo->mPeerAddr;
 8000cb8:	4a36      	ldr	r2, [pc, #216]	; (8000d94 <APP_THREAD_CoapPermissionsRequestHandler+0xf4>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	3310      	adds	r3, #16
 8000cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  otError error = OT_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	77fb      	strb	r3, [r7, #31]
  otMessage *responseMessage;
  otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 8000cca:	2344      	movs	r3, #68	; 0x44
 8000ccc:	77bb      	strb	r3, [r7, #30]
  otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f008 fc0b 	bl	80094ea <otCoapMessageGetCode>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	777b      	strb	r3, [r7, #29]

  responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f008 fb34 	bl	8009348 <otCoapNewMessage>
 8000ce0:	61b8      	str	r0, [r7, #24]

  otCoapMessageInitResponse(responseMessage, pMessage,
 8000ce2:	7fbb      	ldrb	r3, [r7, #30]
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	69b8      	ldr	r0, [r7, #24]
 8000cea:	f008 fb5b 	bl	80093a4 <otCoapMessageInitResponse>
                            OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
  otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 8000cee:	68b8      	ldr	r0, [r7, #8]
 8000cf0:	f008 fc87 	bl	8009602 <otCoapMessageGetToken>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	68b8      	ldr	r0, [r7, #8]
 8000cf8:	f008 fc55 	bl	80095a6 <otCoapMessageGetTokenLength>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4621      	mov	r1, r4
 8000d02:	69b8      	ldr	r0, [r7, #24]
 8000d04:	f008 fb8c 	bl	8009420 <otCoapMessageSetToken>
                        otCoapMessageGetTokenLength(pMessage));
  otCoapMessageSetPayloadMarker(responseMessage);
 8000d08:	69b8      	ldr	r0, [r7, #24]
 8000d0a:	f008 fbc0 	bl	800948e <otCoapMessageSetPayloadMarker>


  uint16_t offset = otMessageGetOffset(pMessage);
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f008 fecf 	bl	8009ab2 <otMessageGetOffset>
 8000d14:	4603      	mov	r3, r0
 8000d16:	82fb      	strh	r3, [r7, #22]
  otMessageRead(pMessage, offset, resource_name, sizeof(resource_name)-1);
 8000d18:	8af9      	ldrh	r1, [r7, #22]
 8000d1a:	231f      	movs	r3, #31
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <APP_THREAD_CoapPermissionsRequestHandler+0xf8>)
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	f008 ff30 	bl	8009b84 <otMessageRead>
  //otCliOutputFormat("Unique resource ID: %s\n", resource_name);

  if (OT_COAP_CODE_GET == messageCode)
 8000d24:	7f7b      	ldrb	r3, [r7, #29]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10e      	bne.n	8000d48 <APP_THREAD_CoapPermissionsRequestHandler+0xa8>
  {

      error = otMessageAppend(responseMessage, "ack", 3);
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	491b      	ldr	r1, [pc, #108]	; (8000d9c <APP_THREAD_CoapPermissionsRequestHandler+0xfc>)
 8000d2e:	69b8      	ldr	r0, [r7, #24]
 8000d30:	f008 feef 	bl	8009b12 <otMessageAppend>
 8000d34:	4603      	mov	r3, r0
 8000d36:	77fb      	strb	r3, [r7, #31]
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff fccf 	bl	80006e0 <otCoapSendResponse>
 8000d42:	4603      	mov	r3, r0
 8000d44:	77fb      	strb	r3, [r7, #31]
 8000d46:	e011      	b.n	8000d6c <APP_THREAD_CoapPermissionsRequestHandler+0xcc>
                                 pMessageInfo);
  }
  else
  {
      error = otMessageAppend(responseMessage, "nack", 4);
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4915      	ldr	r1, [pc, #84]	; (8000da0 <APP_THREAD_CoapPermissionsRequestHandler+0x100>)
 8000d4c:	69b8      	ldr	r0, [r7, #24]
 8000d4e:	f008 fee0 	bl	8009b12 <otMessageAppend>
 8000d52:	4603      	mov	r3, r0
 8000d54:	77fb      	strb	r3, [r7, #31]
      otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 8000d56:	2185      	movs	r1, #133	; 0x85
 8000d58:	69b8      	ldr	r0, [r7, #24]
 8000d5a:	f008 fbf4 	bl	8009546 <otCoapMessageSetCode>
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	69b9      	ldr	r1, [r7, #24]
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f7ff fcbc 	bl	80006e0 <otCoapSendResponse>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	77fb      	strb	r3, [r7, #31]
                                 pMessageInfo);
  }

  if (error != OT_ERROR_NONE && responseMessage != NULL)
 8000d6c:	7ffb      	ldrb	r3, [r7, #31]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <APP_THREAD_CoapPermissionsRequestHandler+0xde>
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <APP_THREAD_CoapPermissionsRequestHandler+0xde>
  {
      otMessageFree(responseMessage);
 8000d78:	69b8      	ldr	r0, [r7, #24]
 8000d7a:	f008 fe6d 	bl	8009a58 <otMessageFree>
  }


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2102      	movs	r1, #2
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <APP_THREAD_CoapPermissionsRequestHandler+0x104>)
 8000d84:	f003 fd2a 	bl	80047dc <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	3724      	adds	r7, #36	; 0x24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	0800db9c 	.word	0x0800db9c
 8000d94:	20000304 	.word	0x20000304
 8000d98:	200002e4 	.word	0x200002e4
 8000d9c:	0800dbc4 	.word	0x0800dbc4
 8000da0:	0800dbc8 	.word	0x0800dbc8
 8000da4:	48000800 	.word	0x48000800

08000da8 <APP_THREAD_InitPayloadWrite>:
 * @brief Initialize CoAP write buffer.
 * @param  None
 * @retval None
 */
static void APP_THREAD_InitPayloadWrite(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e006      	b.n	8000dc2 <APP_THREAD_InitPayloadWrite+0x1a>
  {
    PayloadWrite[i] = 0xFF;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <APP_THREAD_InitPayloadWrite+0x30>)
 8000db8:	21ff      	movs	r1, #255	; 0xff
 8000dba:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d9f5      	bls.n	8000db4 <APP_THREAD_InitPayloadWrite+0xc>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200002e0 	.word	0x200002e0

08000ddc <APP_THREAD_SendCoapMsg>:
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  APP_DBG("In appthread handler*");
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <APP_THREAD_SendCoapMsg+0x14>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	2000      	movs	r0, #0
 8000de6:	f002 fc53 	bl	8003690 <logApplication>
      PayloadWrite,
      sizeof(PayloadWrite),
      NULL,
      NULL);
*/
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	0800dca0 	.word	0x0800dca0

08000df4 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200002d4 	.word	0x200002d4

08000e14 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	330c      	adds	r3, #12
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	200002d4 	.word	0x200002d4

08000e2c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	330b      	adds	r3, #11
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	200002d4 	.word	0x200002d4

08000e44 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	330b      	adds	r3, #11
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	200002d8 	.word	0x200002d8

08000e5c <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <Ot_Cmd_Transfer_Common+0x44>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e6c:	725a      	strb	r2, [r3, #9]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f042 0202 	orr.w	r2, r2, #2
 8000e74:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <Ot_Cmd_Transfer_Common+0x44>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	330c      	adds	r3, #12
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	3302      	adds	r3, #2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <Ot_Cmd_Transfer_Common+0x44>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8000e8e:	f00a f8a1 	bl	800afd4 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8000e92:	f000 f834 	bl	8000efe <Wait_Getting_Ack_From_M0>

}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002d4 	.word	0x200002d4

08000ea4 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 8000ea8:	f7ff ffd8 	bl	8000e5c <Ot_Cmd_Transfer_Common>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8000eb8:	f000 f828 	bl	8000f0c <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <TL_OT_CmdEvtReceived+0x1c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000318 	.word	0x20000318

08000ed0 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <TL_THREAD_NotReceived+0x1c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8000ede:	f000 f81d 	bl	8000f1c <Receive_Notification_From_M0>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200002d8 	.word	0x200002d8

08000ef0 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8000ef4:	2004      	movs	r0, #4
 8000ef6:	f00a fc79 	bl	800b7ec <UTIL_SEQ_WaitEvt>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f00a fc72 	bl	800b7ec <UTIL_SEQ_WaitEvt>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8000f10:	2002      	movs	r0, #2
 8000f12:	f00a fc4b 	bl	800b7ac <UTIL_SEQ_SetEvt>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <Receive_Notification_From_M0+0x1c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <Receive_Notification_From_M0+0x1c>)
 8000f28:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f00a fc11 	bl	800b754 <UTIL_SEQ_SetTask>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200002dc 	.word	0x200002dc

08000f3c <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <RxCpltCallback+0x4c>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d816      	bhi.n	8000f78 <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <RxCpltCallback+0x4c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	b291      	uxth	r1, r2
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <RxCpltCallback+0x4c>)
 8000f56:	8011      	strh	r1, [r2, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <RxCpltCallback+0x50>)
 8000f5c:	7819      	ldrb	r1, [r3, #0]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <RxCpltCallback+0x54>)
 8000f60:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <RxCpltCallback+0x50>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b0d      	cmp	r3, #13
 8000f68:	d106      	bne.n	8000f78 <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <RxCpltCallback+0x58>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	2002      	movs	r0, #2
 8000f74:	f00a fbee 	bl	800b754 <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <RxCpltCallback+0x5c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4903      	ldr	r1, [pc, #12]	; (8000f8c <RxCpltCallback+0x50>)
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f001 fc8c 	bl	800289c <HW_UART_Receive_IT>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200002d0 	.word	0x200002d0
 8000f8c:	200000d0 	.word	0x200000d0
 8000f90:	200001d0 	.word	0x200001d0
 8000f94:	200002d2 	.word	0x200002d2
 8000f98:	08000f3d 	.word	0x08000f3d

08000f9c <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8000fa0:	22ff      	movs	r2, #255	; 0xff
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <Send_CLI_To_M0+0x54>)
 8000fa6:	f00b f9ad 	bl	800c304 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <Send_CLI_To_M0+0x58>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4911      	ldr	r1, [pc, #68]	; (8000ff8 <Send_CLI_To_M0+0x5c>)
 8000fb4:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <Send_CLI_To_M0+0x54>)
 8000fb6:	f00b f997 	bl	800c2e8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <Send_CLI_To_M0+0x58>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <Send_CLI_To_M0+0x60>)
 8000fc4:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <Send_CLI_To_M0+0x60>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	725a      	strb	r2, [r3, #9]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <Send_CLI_To_M0+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <Send_CLI_To_M0+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8000fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <Send_CLI_To_M0+0x5c>)
 8000fe4:	f00b f98e 	bl	800c304 <memset>

  TL_CLI_SendCmd();
 8000fe8:	f00a f802 	bl	800aff0 <TL_CLI_SendCmd>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2003030c 	.word	0x2003030c
 8000ff4:	200002d0 	.word	0x200002d0
 8000ff8:	200001d0 	.word	0x200001d0
 8000ffc:	20030300 	.word	0x20030300
 8001000:	200002d2 	.word	0x200002d2

08001004 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8001008:	f00a f80e 	bl	800b028 <TL_THREAD_CliSendAck>

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <APP_THREAD_Init_UART_CLI+0x24>)
 8001016:	2100      	movs	r1, #0
 8001018:	2002      	movs	r0, #2
 800101a:	f00a fb79 	bl	800b710 <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
 800101e:	f001 fed7 	bl	8002dd0 <MX_LPUART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <APP_THREAD_Init_UART_CLI+0x28>)
 8001024:	2201      	movs	r2, #1
 8001026:	4905      	ldr	r1, [pc, #20]	; (800103c <APP_THREAD_Init_UART_CLI+0x2c>)
 8001028:	2002      	movs	r0, #2
 800102a:	f001 fc37 	bl	800289c <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08000f9d 	.word	0x08000f9d
 8001038:	08000f3d 	.word	0x08000f3d
 800103c:	200000d0 	.word	0x200000d0

08001040 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8001048:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <APP_THREAD_TL_THREAD_INIT+0x30>)
 800104e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8001054:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <APP_THREAD_TL_THREAD_INIT+0x38>)
 800105a:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800105e:	f009 ff99 	bl	800af94 <TL_THREAD_Init>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20030028 	.word	0x20030028
 800106c:	200300e8 	.word	0x200300e8
 8001070:	200301f4 	.word	0x200301f4
 8001074:	20030300 	.word	0x20030300
 8001078:	2003040c 	.word	0x2003040c

0800107c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	7adb      	ldrb	r3, [r3, #11]
 800108c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	330c      	adds	r3, #12
 8001092:	490b      	ldr	r1, [pc, #44]	; (80010c0 <TL_THREAD_CliNotReceived+0x44>)
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f873 	bl	8000180 <strcmp>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f103 010c 	add.w	r1, r3, #12
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <TL_THREAD_CliNotReceived+0x48>)
 80010ac:	2002      	movs	r0, #2
 80010ae:	f001 fc2f 	bl	8002910 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 80010b2:	e001      	b.n	80010b8 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 80010b4:	f7ff ffa6 	bl	8001004 <Send_CLI_Ack_For_OT>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	0800dcd0 	.word	0x0800dcd0
 80010c4:	080010c9 	.word	0x080010c9

080010c8 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 80010cc:	f7ff ff9a 	bl	8001004 <Send_CLI_Ack_For_OT>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d904      	bls.n	80010f2 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fb56 	bl	800079c <APP_THREAD_Error>
 80010f0:	e001      	b.n	80010f6 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80010f2:	f008 fd87 	bl	8009c04 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80010f6:	4b02      	ldr	r3, [pc, #8]	; (8001100 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
  }
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200002dc 	.word	0x200002dc

08001104 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <LL_PWR_EnableBootC2+0x1c>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <LL_PWR_EnableBootC2+0x1c>)
 800110e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	58000400 	.word	0x58000400

08001124 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800112e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001132:	4905      	ldr	r1, [pc, #20]	; (8001148 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4313      	orrs	r3, r2
 8001138:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	58000800 	.word	0x58000800

0800114c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	4904      	ldr	r1, [pc, #16]	; (800116c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	620b      	str	r3, [r1, #32]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	58000800 	.word	0x58000800

08001170 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800117e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4313      	orrs	r3, r2
 8001186:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001194:	68fb      	ldr	r3, [r7, #12]
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80011b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80011be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011cc:	68fb      	ldr	r3, [r7, #12]
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	041b      	lsls	r3, r3, #16
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	605a      	str	r2, [r3, #4]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	605a      	str	r2, [r3, #4]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	605a      	str	r2, [r3, #4]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	605a      	str	r2, [r3, #4]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	609a      	str	r2, [r3, #8]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	041a      	lsls	r2, r3, #16
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4013      	ands	r3, r2
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d101      	bne.n	8001300 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d101      	bne.n	800132a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800133c:	2102      	movs	r1, #2
 800133e:	482a      	ldr	r0, [pc, #168]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 8001340:	f7ff ffe5 	bl	800130e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <HW_IPCC_Rx_Handler+0x26>
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	43db      	mvns	r3, r3
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001358:	f000 f8f8 	bl	800154c <HW_IPCC_SYS_EvtHandler>
 800135c:	e041      	b.n	80013e2 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800135e:	2104      	movs	r1, #4
 8001360:	4821      	ldr	r0, [pc, #132]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 8001362:	f7ff ffd4 	bl	800130e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <HW_IPCC_Rx_Handler+0x48>
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	43db      	mvns	r3, r3
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800137a:	f000 f941 	bl	8001600 <HW_IPCC_THREAD_NotEvtHandler>
 800137e:	e030      	b.n	80013e2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001380:	2110      	movs	r1, #16
 8001382:	4819      	ldr	r0, [pc, #100]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 8001384:	f7ff ffc3 	bl	800130e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <HW_IPCC_Rx_Handler+0x6a>
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	43db      	mvns	r3, r3
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800139c:	f000 f93c 	bl	8001618 <HW_IPCC_THREAD_CliNotEvtHandler>
 80013a0:	e01f      	b.n	80013e2 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80013a2:	2101      	movs	r1, #1
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 80013a6:	f7ff ffb2 	bl	800130e <LL_C2_IPCC_IsActiveFlag_CHx>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HW_IPCC_Rx_Handler+0x8a>
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80013bc:	f000 f88a 	bl	80014d4 <HW_IPCC_BLE_EvtHandler>
 80013c0:	e00f      	b.n	80013e2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80013c2:	2108      	movs	r1, #8
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 80013c6:	f7ff ffa2 	bl	800130e <LL_C2_IPCC_IsActiveFlag_CHx>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <HW_IPCC_Rx_Handler+0xac>
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HW_IPCC_Rx_Handler+0xb0>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80013de:	f000 f967 	bl	80016b0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
}
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	58000c00 	.word	0x58000c00

080013ec <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80013f0:	2102      	movs	r1, #2
 80013f2:	4822      	ldr	r0, [pc, #136]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 80013f4:	f7ff ff76 	bl	80012e4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HW_IPCC_Tx_Handler+0x26>
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	43db      	mvns	r3, r3
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800140c:	f000 f892 	bl	8001534 <HW_IPCC_SYS_CmdEvtHandler>
 8001410:	e031      	b.n	8001476 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001412:	2104      	movs	r1, #4
 8001414:	4819      	ldr	r0, [pc, #100]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 8001416:	f7ff ff65 	bl	80012e4 <LL_C1_IPCC_IsActiveFlag_CHx>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HW_IPCC_Tx_Handler+0x48>
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	43db      	mvns	r3, r3
 8001426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800142e:	f000 f8db 	bl	80015e8 <HW_IPCC_OT_CmdEvtHandler>
 8001432:	e020      	b.n	8001476 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001434:	2108      	movs	r1, #8
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 8001438:	f7ff ff54 	bl	80012e4 <LL_C1_IPCC_IsActiveFlag_CHx>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HW_IPCC_Tx_Handler+0x6a>
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	43db      	mvns	r3, r3
 8001448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001450:	f000 f910 	bl	8001674 <HW_IPCC_MM_FreeBufHandler>
 8001454:	e00f      	b.n	8001476 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001456:	2120      	movs	r1, #32
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 800145a:	f7ff ff43 	bl	80012e4 <LL_C1_IPCC_IsActiveFlag_CHx>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HW_IPCC_Tx_Handler+0x8c>
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HW_IPCC_Tx_Handler+0x90>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	43db      	mvns	r3, r3
 800146a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001472:	f000 f83b 	bl	80014ec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001476:	bf00      	nop
 8001478:	bf00      	nop
}
 800147a:	bd80      	pop	{r7, pc}
 800147c:	58000c00 	.word	0x58000c00

08001480 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001484:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001488:	f7ff fe8b 	bl	80011a2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800148c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001490:	f7ff fe5c 	bl	800114c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001494:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001498:	f7ff fe44 	bl	8001124 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800149c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800149e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80014a0:	f7ff fe30 	bl	8001104 <LL_PWR_EnableBootC2>

  return;
 80014a4:	bf00      	nop
}
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80014ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014b0:	f7ff fe5e 	bl	8001170 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <HW_IPCC_Init+0x28>)
 80014b6:	f7ff fea0 	bl	80011fa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HW_IPCC_Init+0x28>)
 80014bc:	f7ff fe8d 	bl	80011da <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80014c0:	202c      	movs	r0, #44	; 0x2c
 80014c2:	f002 fbe2 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80014c6:	202d      	movs	r0, #45	; 0x2d
 80014c8:	f002 fbdf 	bl	8003c8a <HAL_NVIC_EnableIRQ>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58000c00 	.word	0x58000c00

080014d4 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80014d8:	f009 fca4 	bl	800ae24 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80014dc:	2101      	movs	r1, #1
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80014e0:	f7ff fee3 	bl	80012aa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80014e4:	bf00      	nop
}
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58000c00 	.word	0x58000c00

080014ec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80014f0:	2120      	movs	r1, #32
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80014f4:	f7ff fea4 	bl	8001240 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80014f8:	f009 fcc4 	bl	800ae84 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80014fc:	bf00      	nop
}
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58000c00 	.word	0x58000c00

08001504 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001508:	2102      	movs	r1, #2
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <HW_IPCC_SYS_Init+0x10>)
 800150c:	f7ff feaa 	bl	8001264 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001510:	bf00      	nop
}
 8001512:	bd80      	pop	{r7, pc}
 8001514:	58000c00 	.word	0x58000c00

08001518 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800151c:	2102      	movs	r1, #2
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <HW_IPCC_SYS_SendCmd+0x18>)
 8001520:	f7ff fed1 	bl	80012c6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001524:	2102      	movs	r1, #2
 8001526:	4802      	ldr	r0, [pc, #8]	; (8001530 <HW_IPCC_SYS_SendCmd+0x18>)
 8001528:	f7ff fe77 	bl	800121a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800152c:	bf00      	nop
}
 800152e:	bd80      	pop	{r7, pc}
 8001530:	58000c00 	.word	0x58000c00

08001534 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001538:	2102      	movs	r1, #2
 800153a:	4803      	ldr	r0, [pc, #12]	; (8001548 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800153c:	f7ff fe80 	bl	8001240 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001540:	f009 fcf0 	bl	800af24 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001544:	bf00      	nop
}
 8001546:	bd80      	pop	{r7, pc}
 8001548:	58000c00 	.word	0x58000c00

0800154c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001550:	f009 fcfe 	bl	800af50 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001554:	2102      	movs	r1, #2
 8001556:	4802      	ldr	r0, [pc, #8]	; (8001560 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001558:	f7ff fea7 	bl	80012aa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800155c:	bf00      	nop
}
 800155e:	bd80      	pop	{r7, pc}
 8001560:	58000c00 	.word	0x58000c00

08001564 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001568:	2104      	movs	r1, #4
 800156a:	4804      	ldr	r0, [pc, #16]	; (800157c <HW_IPCC_THREAD_Init+0x18>)
 800156c:	f7ff fe7a 	bl	8001264 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001570:	2110      	movs	r1, #16
 8001572:	4802      	ldr	r0, [pc, #8]	; (800157c <HW_IPCC_THREAD_Init+0x18>)
 8001574:	f7ff fe76 	bl	8001264 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001578:	bf00      	nop
}
 800157a:	bd80      	pop	{r7, pc}
 800157c:	58000c00 	.word	0x58000c00

08001580 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001584:	2104      	movs	r1, #4
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <HW_IPCC_OT_SendCmd+0x18>)
 8001588:	f7ff fe9d 	bl	80012c6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800158c:	2104      	movs	r1, #4
 800158e:	4802      	ldr	r0, [pc, #8]	; (8001598 <HW_IPCC_OT_SendCmd+0x18>)
 8001590:	f7ff fe43 	bl	800121a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001594:	bf00      	nop
}
 8001596:	bd80      	pop	{r7, pc}
 8001598:	58000c00 	.word	0x58000c00

0800159c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80015a0:	2110      	movs	r1, #16
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <HW_IPCC_CLI_SendCmd+0x10>)
 80015a4:	f7ff fe8f 	bl	80012c6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80015a8:	bf00      	nop
}
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58000c00 	.word	0x58000c00

080015b0 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80015b4:	2104      	movs	r1, #4
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <HW_IPCC_THREAD_SendAck+0x18>)
 80015b8:	f7ff fe77 	bl	80012aa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80015bc:	2104      	movs	r1, #4
 80015be:	4802      	ldr	r0, [pc, #8]	; (80015c8 <HW_IPCC_THREAD_SendAck+0x18>)
 80015c0:	f7ff fe50 	bl	8001264 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80015c4:	bf00      	nop
}
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	58000c00 	.word	0x58000c00

080015cc <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80015d0:	2110      	movs	r1, #16
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80015d4:	f7ff fe69 	bl	80012aa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80015d8:	2110      	movs	r1, #16
 80015da:	4802      	ldr	r0, [pc, #8]	; (80015e4 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80015dc:	f7ff fe42 	bl	8001264 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80015e0:	bf00      	nop
}
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	58000c00 	.word	0x58000c00

080015e8 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80015ec:	2104      	movs	r1, #4
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <HW_IPCC_OT_CmdEvtHandler+0x14>)
 80015f0:	f7ff fe26 	bl	8001240 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 80015f4:	f009 fd26 	bl	800b044 <HW_IPCC_OT_CmdEvtNot>

  return;
 80015f8:	bf00      	nop
}
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	58000c00 	.word	0x58000c00

08001600 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001604:	2104      	movs	r1, #4
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001608:	f7ff fe3e 	bl	8001288 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 800160c:	f009 fd26 	bl	800b05c <HW_IPCC_THREAD_EvtNot>

  return;
 8001610:	bf00      	nop
}
 8001612:	bd80      	pop	{r7, pc}
 8001614:	58000c00 	.word	0x58000c00

08001618 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800161c:	2110      	movs	r1, #16
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001620:	f7ff fe32 	bl	8001288 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001624:	f009 fd26 	bl	800b074 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001628:	bf00      	nop
}
 800162a:	bd80      	pop	{r7, pc}
 800162c:	58000c00 	.word	0x58000c00

08001630 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001638:	2108      	movs	r1, #8
 800163a:	480c      	ldr	r0, [pc, #48]	; (800166c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800163c:	f7ff fe52 	bl	80012e4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800164c:	2108      	movs	r1, #8
 800164e:	4807      	ldr	r0, [pc, #28]	; (800166c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001650:	f7ff fde3 	bl	800121a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001654:	e006      	b.n	8001664 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800165a:	2108      	movs	r1, #8
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800165e:	f7ff fe32 	bl	80012c6 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001662:	bf00      	nop
}
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	58000c00 	.word	0x58000c00
 8001670:	20000314 	.word	0x20000314

08001674 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001678:	2108      	movs	r1, #8
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800167c:	f7ff fde0 	bl	8001240 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001686:	2108      	movs	r1, #8
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800168a:	f7ff fe1c 	bl	80012c6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800168e:	bf00      	nop
}
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	58000c00 	.word	0x58000c00
 8001698:	20000314 	.word	0x20000314

0800169c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80016a0:	2108      	movs	r1, #8
 80016a2:	4802      	ldr	r0, [pc, #8]	; (80016ac <HW_IPCC_TRACES_Init+0x10>)
 80016a4:	f7ff fdde 	bl	8001264 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80016a8:	bf00      	nop
}
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	58000c00 	.word	0x58000c00

080016b0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80016b4:	f009 fd70 	bl	800b198 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80016b8:	2108      	movs	r1, #8
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80016bc:	f7ff fdf5 	bl	80012aa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80016c0:	bf00      	nop
}
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58000c00 	.word	0x58000c00

080016c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4905      	ldr	r1, [pc, #20]	; (80016f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4313      	orrs	r3, r2
 80016e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	58000400 	.word	0x58000400

080016f4 <LL_EXTI_EnableIT_32_63>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <LL_EXTI_EnableIT_32_63+0x24>)
 80016fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001702:	4905      	ldr	r1, [pc, #20]	; (8001718 <LL_EXTI_EnableIT_32_63+0x24>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	58000800 	.word	0x58000800

0800171c <LL_C2_EXTI_EnableIT_32_63>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8001726:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800172a:	4905      	ldr	r1, [pc, #20]	; (8001740 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4313      	orrs	r3, r2
 8001730:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	58000800 	.word	0x58000800

08001744 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001752:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800175e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	4313      	orrs	r3, r2
 800176c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	cafecafe 	.word	0xcafecafe

08001780 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	22ca      	movs	r2, #202	; 0xca
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2253      	movs	r2, #83	; 0x53
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 0207 	bic.w	r2, r3, #7
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <MX_APPE_Config+0x18>)
 800180e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001812:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001814:	f000 f83e 	bl	8001894 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001818:	f000 f843 	bl	80018a2 <Config_HSE>

  return;
 800181c:	bf00      	nop
}
 800181e:	bd80      	pop	{r7, pc}
 8001820:	58004000 	.word	0x58004000

08001824 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001828:	f000 f84f 	bl	80018ca <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800182c:	f000 f868 	bl	8001900 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001830:	4908      	ldr	r1, [pc, #32]	; (8001854 <MX_APPE_Init+0x30>)
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fdc6 	bl	80023c4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8001838:	f000 f81c 	bl	8001874 <Init_Debug>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800183c:	2101      	movs	r1, #1
 800183e:	2001      	movs	r0, #1
 8001840:	f009 fe0a 	bl	800b458 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001844:	2101      	movs	r1, #1
 8001846:	2001      	movs	r0, #1
 8001848:	f009 fe36 	bl	800b4b8 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800184c:	f000 f866 	bl	800191c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001850:	bf00      	nop
}
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000644 	.word	0x20000644

08001858 <Init_Smps>:

void Init_Smps(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800185c:	bf00      	nop
}
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <Init_Exti>:

void Init_Exti(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800186a:	2050      	movs	r0, #80	; 0x50
 800186c:	f7ff ff42 	bl	80016f4 <LL_EXTI_EnableIT_32_63>

  return;
 8001870:	bf00      	nop
}
 8001872:	bd80      	pop	{r7, pc}

08001874 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001878:	f002 f896 	bl	80039a8 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800187c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001880:	f7ff ff38 	bl	80016f4 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001884:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001888:	f7ff ff48 	bl	800171c <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800188c:	f009 fd2c 	bl	800b2e8 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8001890:	bf00      	nop
}
 8001892:	bd80      	pop	{r7, pc}

08001894 <Reset_Device>:
static void Reset_Device(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001898:	bf00      	nop
}
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f009 fd9b 	bl	800b3e4 <OTP_Read>
 80018ae:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	799b      	ldrb	r3, [r3, #6]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff42 	bl	8001744 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
}
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <System_Init>:

static void System_Init(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  Init_Smps();
 80018ce:	f7ff ffc3 	bl	8001858 <Init_Smps>

  Init_Exti();
 80018d2:	f7ff ffc8 	bl	8001866 <Init_Exti>

  Init_Rtc();
 80018d6:	f000 f803 	bl	80018e0 <Init_Rtc>

  return;
 80018da:	bf00      	nop
}
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <Init_Rtc+0x1c>)
 80018e6:	f7ff ff6c 	bl	80017c2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80018ea:	2100      	movs	r1, #0
 80018ec:	4803      	ldr	r0, [pc, #12]	; (80018fc <Init_Rtc+0x1c>)
 80018ee:	f7ff ff78 	bl	80017e2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <Init_Rtc+0x1c>)
 80018f4:	f7ff ff58 	bl	80017a8 <LL_RTC_EnableWriteProtection>

  return;
 80018f8:	bf00      	nop
}
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40002800 	.word	0x40002800

08001900 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001904:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001908:	f7ff ff3a 	bl	8001780 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800190c:	f009 fd92 	bl	800b434 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001910:	2004      	movs	r0, #4
 8001912:	f7ff fed9 	bl	80016c8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001916:	bf00      	nop
}
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001922:	f009 fa45 	bl	800adb0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <appe_Tl_Init+0x50>)
 8001928:	2100      	movs	r1, #0
 800192a:	2004      	movs	r0, #4
 800192c:	f009 fef0 	bl	800b710 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <appe_Tl_Init+0x54>)
 8001932:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <appe_Tl_Init+0x58>)
 8001936:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	480e      	ldr	r0, [pc, #56]	; (8001978 <appe_Tl_Init+0x5c>)
 800193e:	f009 f833 	bl	800a9a8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <appe_Tl_Init+0x60>)
 8001948:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <appe_Tl_Init+0x64>)
 800194c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800194e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001952:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f009 fb97 	bl	800b08c <TL_MM_Init>

  TL_Enable();
 800195e:	f009 fa20 	bl	800ada2 <TL_Enable>

  return;
 8001962:	bf00      	nop
}
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0800a9e1 	.word	0x0800a9e1
 8001970:	20030a54 	.word	0x20030a54
 8001974:	08001985 	.word	0x08001985
 8001978:	0800199b 	.word	0x0800199b
 800197c:	20030b60 	.word	0x20030b60
 8001980:	20030518 	.word	0x20030518

08001984 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800198e:	bf00      	nop
}
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	330b      	adds	r3, #11
 80019a8:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80019b4:	d004      	beq.n	80019c0 <APPE_SysUserEvtRx+0x26>
 80019b6:	f249 2201 	movw	r2, #37377	; 0x9201
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d003      	beq.n	80019c6 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80019be:	e008      	b.n	80019d2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 80019c0:	f000 f834 	bl	8001a2c <APPE_SysEvtReadyProcessing>
         break;
 80019c4:	e005      	b.n	80019d2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	789b      	ldrb	r3, [r3, #2]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f806 	bl	80019dc <APPE_SysEvtError>
         break;
 80019d0:	bf00      	nop
  }
  return;
 80019d2:	bf00      	nop
}
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b7d      	cmp	r3, #125	; 0x7d
 80019ea:	d002      	beq.n	80019f2 <APPE_SysEvtError+0x16>
 80019ec:	2b7e      	cmp	r3, #126	; 0x7e
 80019ee:	d006      	beq.n	80019fe <APPE_SysEvtError+0x22>
 80019f0:	e00b      	b.n	8001a0a <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <APPE_SysEvtError+0x44>)
 80019f4:	2101      	movs	r1, #1
 80019f6:	2000      	movs	r0, #0
 80019f8:	f001 fe4a 	bl	8003690 <logApplication>
       break;
 80019fc:	e00c      	b.n	8001a18 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <APPE_SysEvtError+0x48>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	2000      	movs	r0, #0
 8001a04:	f001 fe44 	bl	8003690 <logApplication>
       break;
 8001a08:	e006      	b.n	8001a18 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <APPE_SysEvtError+0x4c>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2000      	movs	r0, #0
 8001a12:	f001 fe3d 	bl	8003690 <logApplication>
       break;
 8001a16:	bf00      	nop
  }
  return;
 8001a18:	bf00      	nop
}
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	0800dcd4 	.word	0x0800dcd4
 8001a24:	0800dcf8 	.word	0x0800dcf8
 8001a28:	0800dd18 	.word	0x0800dd18

08001a2c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8001a30:	f009 fba0 	bl	800b174 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001a34:	f7fe fe66 	bl	8000704 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f009 fd0c 	bl	800b458 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001a40:	2100      	movs	r1, #0
 8001a42:	2001      	movs	r0, #1
 8001a44:	f009 fd38 	bl	800b4b8 <UTIL_LPM_SetOffMode>
  return;
 8001a48:	bf00      	nop
}
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f009 fd60 	bl	800b518 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001a60:	bf00      	nop
}
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d003      	beq.n	8001a84 <UTIL_SEQ_EvtIdle+0x18>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d00c      	beq.n	8001a9c <UTIL_SEQ_EvtIdle+0x30>
 8001a82:	e012      	b.n	8001aaa <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <UTIL_SEQ_EvtIdle+0x50>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d103      	bne.n	8001a94 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f009 fd43 	bl	800b518 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 8001a92:	e00f      	b.n	8001ab4 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f009 fd3f 	bl	800b518 <UTIL_SEQ_Run>
    break;
 8001a9a:	e00b      	b.n	8001ab4 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001a9c:	2004      	movs	r0, #4
 8001a9e:	f009 fe85 	bl	800b7ac <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f009 fd38 	bl	800b518 <UTIL_SEQ_Run>
    break;
 8001aa8:	e004      	b.n	8001ab4 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8001aae:	f009 fd33 	bl	800b518 <UTIL_SEQ_Run>
    break;
 8001ab2:	bf00      	nop
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000318 	.word	0x20000318

08001ac0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2004      	movs	r0, #4
 8001acc:	f009 fe42 	bl	800b754 <UTIL_SEQ_SetTask>
  return;
 8001ad0:	bf00      	nop
}
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f009 fe63 	bl	800b7ac <UTIL_SEQ_SetEvt>
  return;
 8001ae6:	bf00      	nop
}
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f009 fe78 	bl	800b7ec <UTIL_SEQ_WaitEvt>
  return;
 8001afc:	bf00      	nop
}
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	330b      	adds	r3, #11
 8001b10:	1c99      	adds	r1, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7a9b      	ldrb	r3, [r3, #10]
 8001b16:	3b02      	subs	r3, #2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f009 fc0a 	bl	800b334 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f009 faef 	bl	800b104 <TL_MM_EvtDone>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
	MX_LPUART1_UART_Init();
 8001b32:	f001 f94d 	bl	8002dd0 <MX_LPUART1_UART_Init>
  return;
 8001b36:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	460b      	mov	r3, r1
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001b48:	897a      	ldrh	r2, [r7, #10]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f000 ff18 	bl	8002984 <HW_UART_Transmit_DMA>

  return;
 8001b54:	bf00      	nop
}
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f001 fd8f 	bl	8003690 <logApplication>
  switch(GPIO_Pin)
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_EXTI_Callback+0x26>
 8001b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7e:	d005      	beq.n	8001b8c <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8001b80:	e005      	b.n	8001b8e <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 8001b82:	2101      	movs	r1, #1
 8001b84:	2008      	movs	r0, #8
 8001b86:	f009 fde5 	bl	800b754 <UTIL_SEQ_SetTask>
        break;
 8001b8a:	e000      	b.n	8001b8e <HAL_GPIO_EXTI_Callback+0x32>
        break;
 8001b8c:	bf00      	nop
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	0800dd38 	.word	0x0800dd38

08001b9c <LL_EXTI_EnableIT_0_31>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001ba6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001baa:	4905      	ldr	r1, [pc, #20]	; (8001bc0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	58000800 	.word	0x58000800

08001bc4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4904      	ldr	r1, [pc, #16]	; (8001be4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	58000800 	.word	0x58000800

08001be8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <ReadRtcSsrValue+0x3c>)
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <ReadRtcSsrValue+0x3c>)
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001bfe:	e005      	b.n	8001c0c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <ReadRtcSsrValue+0x3c>)
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1f5      	bne.n	8001c00 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001c14:	683b      	ldr	r3, [r7, #0]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40002800 	.word	0x40002800

08001c28 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001c38:	79ba      	ldrb	r2, [r7, #6]
 8001c3a:	491d      	ldr	r1, [pc, #116]	; (8001cb0 <LinkTimerAfter+0x88>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3315      	adds	r3, #21
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d009      	beq.n	8001c66 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	4916      	ldr	r1, [pc, #88]	; (8001cb0 <LinkTimerAfter+0x88>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	3314      	adds	r3, #20
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001c66:	79fa      	ldrb	r2, [r7, #7]
 8001c68:	4911      	ldr	r1, [pc, #68]	; (8001cb0 <LinkTimerAfter+0x88>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	3315      	adds	r3, #21
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001c7a:	79fa      	ldrb	r2, [r7, #7]
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <LinkTimerAfter+0x88>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	3314      	adds	r3, #20
 8001c8a:	79ba      	ldrb	r2, [r7, #6]
 8001c8c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001c8e:	79ba      	ldrb	r2, [r7, #6]
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <LinkTimerAfter+0x88>)
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3315      	adds	r3, #21
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	701a      	strb	r2, [r3, #0]

  return;
 8001ca2:	bf00      	nop
}
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2000031c 	.word	0x2000031c

08001cb4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	71fb      	strb	r3, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <LinkTimerBefore+0xb8>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	79ba      	ldrb	r2, [r7, #6]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d032      	beq.n	8001d36 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001cd0:	79ba      	ldrb	r2, [r7, #6]
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <LinkTimerBefore+0xbc>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	3314      	adds	r3, #20
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	4922      	ldr	r1, [pc, #136]	; (8001d70 <LinkTimerBefore+0xbc>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3315      	adds	r3, #21
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001cf8:	79fa      	ldrb	r2, [r7, #7]
 8001cfa:	491d      	ldr	r1, [pc, #116]	; (8001d70 <LinkTimerBefore+0xbc>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	3315      	adds	r3, #21
 8001d08:	79ba      	ldrb	r2, [r7, #6]
 8001d0a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	4918      	ldr	r1, [pc, #96]	; (8001d70 <LinkTimerBefore+0xbc>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	3314      	adds	r3, #20
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d20:	79ba      	ldrb	r2, [r7, #6]
 8001d22:	4913      	ldr	r1, [pc, #76]	; (8001d70 <LinkTimerBefore+0xbc>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3314      	adds	r3, #20
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001d34:	e014      	b.n	8001d60 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	490d      	ldr	r1, [pc, #52]	; (8001d70 <LinkTimerBefore+0xbc>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	440b      	add	r3, r1
 8001d44:	3315      	adds	r3, #21
 8001d46:	79ba      	ldrb	r2, [r7, #6]
 8001d48:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d4a:	79ba      	ldrb	r2, [r7, #6]
 8001d4c:	4908      	ldr	r1, [pc, #32]	; (8001d70 <LinkTimerBefore+0xbc>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	3314      	adds	r3, #20
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	701a      	strb	r2, [r3, #0]
  return;
 8001d5e:	bf00      	nop
}
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200003ac 	.word	0x200003ac
 8001d70:	2000031c 	.word	0x2000031c

08001d74 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d7e:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <linkTimer+0x144>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d118      	bne.n	8001dba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <linkTimer+0x144>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <linkTimer+0x148>)
 8001d90:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001d92:	4a49      	ldr	r2, [pc, #292]	; (8001eb8 <linkTimer+0x144>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001d98:	79fa      	ldrb	r2, [r7, #7]
 8001d9a:	4949      	ldr	r1, [pc, #292]	; (8001ec0 <linkTimer+0x14c>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	3315      	adds	r3, #21
 8001da8:	2206      	movs	r2, #6
 8001daa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001dac:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <linkTimer+0x150>)
 8001dae:	f04f 32ff 	mov.w	r2, #4294967295
 8001db2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	81fb      	strh	r3, [r7, #14]
 8001db8:	e078      	b.n	8001eac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001dba:	f000 f909 	bl	8001fd0 <ReturnTimeElapsed>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001dc2:	79fa      	ldrb	r2, [r7, #7]
 8001dc4:	493e      	ldr	r1, [pc, #248]	; (8001ec0 <linkTimer+0x14c>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	4419      	add	r1, r3
 8001dda:	4839      	ldr	r0, [pc, #228]	; (8001ec0 <linkTimer+0x14c>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4403      	add	r3, r0
 8001de6:	3308      	adds	r3, #8
 8001de8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	4934      	ldr	r1, [pc, #208]	; (8001ec0 <linkTimer+0x14c>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3308      	adds	r3, #8
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <linkTimer+0x144>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <linkTimer+0x14c>)
 8001e08:	460b      	mov	r3, r1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	440b      	add	r3, r1
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	3308      	adds	r3, #8
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d337      	bcc.n	8001e8c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <linkTimer+0x144>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001e22:	7b7a      	ldrb	r2, [r7, #13]
 8001e24:	4926      	ldr	r1, [pc, #152]	; (8001ec0 <linkTimer+0x14c>)
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	3315      	adds	r3, #21
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e36:	e013      	b.n	8001e60 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001e38:	7b7a      	ldrb	r2, [r7, #13]
 8001e3a:	4921      	ldr	r1, [pc, #132]	; (8001ec0 <linkTimer+0x14c>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3315      	adds	r3, #21
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001e4c:	7b7a      	ldrb	r2, [r7, #13]
 8001e4e:	491c      	ldr	r1, [pc, #112]	; (8001ec0 <linkTimer+0x14c>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3315      	adds	r3, #21
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d00b      	beq.n	8001e7e <linkTimer+0x10a>
 8001e66:	7b3a      	ldrb	r2, [r7, #12]
 8001e68:	4915      	ldr	r1, [pc, #84]	; (8001ec0 <linkTimer+0x14c>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	3308      	adds	r3, #8
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d2dc      	bcs.n	8001e38 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001e7e:	7b7a      	ldrb	r2, [r7, #13]
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fecf 	bl	8001c28 <LinkTimerAfter>
 8001e8a:	e00f      	b.n	8001eac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <linkTimer+0x144>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff0c 	bl	8001cb4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <linkTimer+0x144>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <linkTimer+0x148>)
 8001ea4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <linkTimer+0x144>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001eac:	89fb      	ldrh	r3, [r7, #14]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200003ac 	.word	0x200003ac
 8001ebc:	200003ad 	.word	0x200003ad
 8001ec0:	2000031c 	.word	0x2000031c
 8001ec4:	200003b0 	.word	0x200003b0

08001ec8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <UnlinkTimer+0xf8>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	79fa      	ldrb	r2, [r7, #7]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d111      	bne.n	8001f08 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <UnlinkTimer+0xf8>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <UnlinkTimer+0xfc>)
 8001eec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001eee:	79fa      	ldrb	r2, [r7, #7]
 8001ef0:	4935      	ldr	r1, [pc, #212]	; (8001fc8 <UnlinkTimer+0x100>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3315      	adds	r3, #21
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <UnlinkTimer+0xf8>)
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e03e      	b.n	8001f86 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	492f      	ldr	r1, [pc, #188]	; (8001fc8 <UnlinkTimer+0x100>)
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3314      	adds	r3, #20
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001f1c:	79fa      	ldrb	r2, [r7, #7]
 8001f1e:	492a      	ldr	r1, [pc, #168]	; (8001fc8 <UnlinkTimer+0x100>)
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	3315      	adds	r3, #21
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001f30:	79f9      	ldrb	r1, [r7, #7]
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	4824      	ldr	r0, [pc, #144]	; (8001fc8 <UnlinkTimer+0x100>)
 8001f36:	460b      	mov	r3, r1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	440b      	add	r3, r1
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4403      	add	r3, r0
 8001f40:	3315      	adds	r3, #21
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b2d8      	uxtb	r0, r3
 8001f46:	4920      	ldr	r1, [pc, #128]	; (8001fc8 <UnlinkTimer+0x100>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	3315      	adds	r3, #21
 8001f54:	4602      	mov	r2, r0
 8001f56:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d013      	beq.n	8001f86 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001f5e:	79f9      	ldrb	r1, [r7, #7]
 8001f60:	7bba      	ldrb	r2, [r7, #14]
 8001f62:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <UnlinkTimer+0x100>)
 8001f64:	460b      	mov	r3, r1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	440b      	add	r3, r1
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3314      	adds	r3, #20
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b2d8      	uxtb	r0, r3
 8001f74:	4914      	ldr	r1, [pc, #80]	; (8001fc8 <UnlinkTimer+0x100>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3314      	adds	r3, #20
 8001f82:	4602      	mov	r2, r0
 8001f84:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001f86:	79fa      	ldrb	r2, [r7, #7]
 8001f88:	490f      	ldr	r1, [pc, #60]	; (8001fc8 <UnlinkTimer+0x100>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	330c      	adds	r3, #12
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <UnlinkTimer+0xf8>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d107      	bne.n	8001fb4 <UnlinkTimer+0xec>
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <UnlinkTimer+0x104>)
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  return;
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
}
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	200003ac 	.word	0x200003ac
 8001fc4:	200003ad 	.word	0x200003ad
 8001fc8:	2000031c 	.word	0x2000031c
 8001fcc:	200003b0 	.word	0x200003b0

08001fd0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <ReturnTimeElapsed+0x70>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d026      	beq.n	800202e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001fe0:	f7ff fe02 	bl	8001be8 <ReadRtcSsrValue>
 8001fe4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <ReturnTimeElapsed+0x70>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d805      	bhi.n	8001ffc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <ReturnTimeElapsed+0x70>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	e00a      	b.n	8002012 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <ReturnTimeElapsed+0x74>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <ReturnTimeElapsed+0x70>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <ReturnTimeElapsed+0x78>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <ReturnTimeElapsed+0x7c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	40d3      	lsrs	r3, r2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	e001      	b.n	8002032 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	b29b      	uxth	r3, r3
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200003b0 	.word	0x200003b0
 8002044:	200003b8 	.word	0x200003b8
 8002048:	200003b6 	.word	0x200003b6
 800204c:	200003b5 	.word	0x200003b5

08002050 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d108      	bne.n	8002072 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002060:	f7ff fdc2 	bl	8001be8 <ReadRtcSsrValue>
 8002064:	4603      	mov	r3, r0
 8002066:	4a21      	ldr	r2, [pc, #132]	; (80020ec <RestartWakeupCounter+0x9c>)
 8002068:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800206a:	2003      	movs	r0, #3
 800206c:	f001 fe39 	bl	8003ce2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002070:	e039      	b.n	80020e6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d803      	bhi.n	8002080 <RestartWakeupCounter+0x30>
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <RestartWakeupCounter+0xa0>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d002      	beq.n	8002086 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	3b01      	subs	r3, #1
 8002084:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002086:	bf00      	nop
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <RestartWakeupCounter+0xa4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f8      	beq.n	8002088 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <RestartWakeupCounter+0xa4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <RestartWakeupCounter+0xa4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020a6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <RestartWakeupCounter+0xa8>)
 80020aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020ae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80020b0:	2003      	movs	r0, #3
 80020b2:	f001 fe24 	bl	8003cfe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <RestartWakeupCounter+0xac>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	0c1b      	lsrs	r3, r3, #16
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	88fa      	ldrh	r2, [r7, #6]
 80020c0:	490e      	ldr	r1, [pc, #56]	; (80020fc <RestartWakeupCounter+0xac>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80020c6:	f7ff fd8f 	bl	8001be8 <ReadRtcSsrValue>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <RestartWakeupCounter+0x9c>)
 80020ce:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <RestartWakeupCounter+0xa4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <RestartWakeupCounter+0xa4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020de:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80020e0:	f3af 8000 	nop.w
  return ;
 80020e4:	bf00      	nop
}
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200003b0 	.word	0x200003b0
 80020f0:	200003b5 	.word	0x200003b5
 80020f4:	20000644 	.word	0x20000644
 80020f8:	58000800 	.word	0x58000800
 80020fc:	40002800 	.word	0x40002800

08002100 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002106:	4b45      	ldr	r3, [pc, #276]	; (800221c <RescheduleTimerList+0x11c>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002112:	d107      	bne.n	8002124 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002114:	bf00      	nop
 8002116:	4b42      	ldr	r3, [pc, #264]	; (8002220 <RescheduleTimerList+0x120>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f8      	bne.n	8002116 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002124:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <RescheduleTimerList+0x120>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <RescheduleTimerList+0x120>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002132:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002134:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <RescheduleTimerList+0x124>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	493a      	ldr	r1, [pc, #232]	; (8002228 <RescheduleTimerList+0x128>)
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	3308      	adds	r3, #8
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800214e:	f7ff ff3f 	bl	8001fd0 <ReturnTimeElapsed>
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	429a      	cmp	r2, r3
 800215c:	d205      	bcs.n	800216a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <RescheduleTimerList+0x12c>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e04d      	b.n	8002206 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4a30      	ldr	r2, [pc, #192]	; (8002230 <RescheduleTimerList+0x130>)
 800216e:	8812      	ldrh	r2, [r2, #0]
 8002170:	b292      	uxth	r2, r2
 8002172:	4413      	add	r3, r2
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4293      	cmp	r3, r2
 800217a:	d906      	bls.n	800218a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <RescheduleTimerList+0x130>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <RescheduleTimerList+0x12c>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e03d      	b.n	8002206 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	b29a      	uxth	r2, r3
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <RescheduleTimerList+0x12c>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800219a:	e034      	b.n	8002206 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	4922      	ldr	r1, [pc, #136]	; (8002228 <RescheduleTimerList+0x128>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	3308      	adds	r3, #8
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d20a      	bcs.n	80021ca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	491c      	ldr	r1, [pc, #112]	; (8002228 <RescheduleTimerList+0x128>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3308      	adds	r3, #8
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e013      	b.n	80021f2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	4916      	ldr	r1, [pc, #88]	; (8002228 <RescheduleTimerList+0x128>)
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3308      	adds	r3, #8
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	1ac9      	subs	r1, r1, r3
 80021e2:	4811      	ldr	r0, [pc, #68]	; (8002228 <RescheduleTimerList+0x128>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4403      	add	r3, r0
 80021ee:	3308      	adds	r3, #8
 80021f0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <RescheduleTimerList+0x128>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3315      	adds	r3, #21
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d1c7      	bne.n	800219c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800220c:	89bb      	ldrh	r3, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff1e 	bl	8002050 <RestartWakeupCounter>

  return ;
 8002214:	bf00      	nop
}
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40002800 	.word	0x40002800
 8002220:	20000644 	.word	0x20000644
 8002224:	200003ac 	.word	0x200003ac
 8002228:	2000031c 	.word	0x2000031c
 800222c:	200003b4 	.word	0x200003b4
 8002230:	200003ba 	.word	0x200003ba

08002234 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800223a:	f3ef 8310 	mrs	r3, PRIMASK
 800223e:	617b      	str	r3, [r7, #20]
  return(result);
 8002240:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002244:	b672      	cpsid	i
}
 8002246:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	22ca      	movs	r2, #202	; 0xca
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
 8002250:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2253      	movs	r2, #83	; 0x53
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002258:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002266:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002268:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002270:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002274:	4950      	ldr	r1, [pc, #320]	; (80023b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	330c      	adds	r3, #12
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d16e      	bne.n	8002368 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800228a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800228e:	494a      	ldr	r1, [pc, #296]	; (80023b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800229e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022a2:	4945      	ldr	r1, [pc, #276]	; (80023b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3310      	adds	r3, #16
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HW_TS_RTC_Wakeup_Handler+0x188>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d04c      	beq.n	8002358 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80022be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022c2:	493d      	ldr	r1, [pc, #244]	; (80023b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	330d      	adds	r3, #13
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d124      	bne.n	8002322 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80022d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fdf2 	bl	8001ec8 <UnlinkTimer>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f383 8810 	msr	PRIMASK, r3
}
 80022ee:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80022f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022f4:	4930      	ldr	r1, [pc, #192]	; (80023b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	3304      	adds	r3, #4
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fa32 	bl	8002774 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	22ca      	movs	r2, #202	; 0xca
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2253      	movs	r2, #83	; 0x53
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
 8002320:	e012      	b.n	8002348 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f383 8810 	msr	PRIMASK, r3
}
 800232c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800232e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f99a 	bl	800266c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	22ca      	movs	r2, #202	; 0xca
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2253      	movs	r2, #83	; 0x53
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	4619      	mov	r1, r3
 8002350:	69b8      	ldr	r0, [r7, #24]
 8002352:	f000 fa95 	bl	8002880 <HW_TS_RTC_Int_AppNot>
 8002356:	e022      	b.n	800239e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002358:	f7ff fed2 	bl	8002100 <RescheduleTimerList>
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f383 8810 	msr	PRIMASK, r3
}
 8002366:	e01a      	b.n	800239e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002368:	bf00      	nop
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f8      	beq.n	800236a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002388:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800238c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f383 8810 	msr	PRIMASK, r3
}
 800239c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80023a6:	bf00      	nop
}
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000644 	.word	0x20000644
 80023b4:	200003ac 	.word	0x200003ac
 80023b8:	2000031c 	.word	0x2000031c
 80023bc:	200003b4 	.word	0x200003b4
 80023c0:	58000800 	.word	0x58000800

080023c4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023d0:	4b5e      	ldr	r3, [pc, #376]	; (800254c <HW_TS_Init+0x188>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	22ca      	movs	r2, #202	; 0xca
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
 80023d8:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HW_TS_Init+0x188>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2253      	movs	r2, #83	; 0x53
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HW_TS_Init+0x18c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a5a      	ldr	r2, [pc, #360]	; (8002550 <HW_TS_Init+0x18c>)
 80023e6:	f043 0320 	orr.w	r3, r3, #32
 80023ea:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HW_TS_Init+0x18c>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f1c3 0304 	rsb	r3, r3, #4
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b55      	ldr	r3, [pc, #340]	; (8002554 <HW_TS_Init+0x190>)
 8002400:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002402:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HW_TS_Init+0x18c>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800240a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800240e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	fa92 f2a2 	rbit	r2, r2
 8002416:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	2a00      	cmp	r2, #0
 8002420:	d101      	bne.n	8002426 <HW_TS_Init+0x62>
  {
    return 32U;
 8002422:	2220      	movs	r2, #32
 8002424:	e003      	b.n	800242e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	40d3      	lsrs	r3, r2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	3301      	adds	r3, #1
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b48      	ldr	r3, [pc, #288]	; (8002558 <HW_TS_Init+0x194>)
 8002438:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800243a:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HW_TS_Init+0x18c>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002444:	b29b      	uxth	r3, r3
 8002446:	3301      	adds	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <HW_TS_Init+0x198>)
 800244c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800244e:	4b43      	ldr	r3, [pc, #268]	; (800255c <HW_TS_Init+0x198>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	3b01      	subs	r3, #1
 8002454:	4a40      	ldr	r2, [pc, #256]	; (8002558 <HW_TS_Init+0x194>)
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002460:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <HW_TS_Init+0x190>)
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	40d3      	lsrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800246e:	4293      	cmp	r3, r2
 8002470:	d904      	bls.n	800247c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002472:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <HW_TS_Init+0x19c>)
 8002474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	e003      	b.n	8002484 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HW_TS_Init+0x19c>)
 8002482:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002484:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002488:	f7ff fb9c 	bl	8001bc4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800248c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002490:	f7ff fb84 	bl	8001b9c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d13d      	bne.n	8002516 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800249a:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HW_TS_Init+0x1a0>)
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HW_TS_Init+0x1a4>)
 80024a2:	f04f 32ff 	mov.w	r2, #4294967295
 80024a6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	77fb      	strb	r3, [r7, #31]
 80024ac:	e00c      	b.n	80024c8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80024ae:	7ffa      	ldrb	r2, [r7, #31]
 80024b0:	492e      	ldr	r1, [pc, #184]	; (800256c <HW_TS_Init+0x1a8>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	330c      	adds	r3, #12
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	3301      	adds	r3, #1
 80024c6:	77fb      	strb	r3, [r7, #31]
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d9ef      	bls.n	80024ae <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HW_TS_Init+0x1ac>)
 80024d0:	2206      	movs	r2, #6
 80024d2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HW_TS_Init+0x188>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HW_TS_Init+0x188>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HW_TS_Init+0x188>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <HW_TS_Init+0x188>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <HW_TS_Init+0x1b0>)
 80024f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024fc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80024fe:	2003      	movs	r0, #3
 8002500:	f001 fbfd 	bl	8003cfe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HW_TS_Init+0x188>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HW_TS_Init+0x188>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	e009      	b.n	800252a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HW_TS_Init+0x188>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002524:	2003      	movs	r0, #3
 8002526:	f001 fbdc 	bl	8003ce2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HW_TS_Init+0x188>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	22ff      	movs	r2, #255	; 0xff
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002532:	2200      	movs	r2, #0
 8002534:	2103      	movs	r1, #3
 8002536:	2003      	movs	r0, #3
 8002538:	f001 fb8d 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800253c:	2003      	movs	r0, #3
 800253e:	f001 fba4 	bl	8003c8a <HAL_NVIC_EnableIRQ>

  return;
 8002542:	bf00      	nop
}
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000644 	.word	0x20000644
 8002550:	40002800 	.word	0x40002800
 8002554:	200003b5 	.word	0x200003b5
 8002558:	200003b6 	.word	0x200003b6
 800255c:	200003b8 	.word	0x200003b8
 8002560:	200003ba 	.word	0x200003ba
 8002564:	200003b4 	.word	0x200003b4
 8002568:	200003b0 	.word	0x200003b0
 800256c:	2000031c 	.word	0x2000031c
 8002570:	200003ac 	.word	0x200003ac
 8002574:	58000800 	.word	0x58000800

08002578 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002578:	b480      	push	{r7}
 800257a:	b08b      	sub	sp, #44	; 0x2c
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800258e:	f3ef 8310 	mrs	r3, PRIMASK
 8002592:	61fb      	str	r3, [r7, #28]
  return(result);
 8002594:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002596:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002598:	b672      	cpsid	i
}
 800259a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800259c:	e004      	b.n	80025a8 <HW_TS_Create+0x30>
  {
    loop++;
 800259e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025a2:	3301      	adds	r3, #1
 80025a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80025a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d80c      	bhi.n	80025ca <HW_TS_Create+0x52>
 80025b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80025b4:	492c      	ldr	r1, [pc, #176]	; (8002668 <HW_TS_Create+0xf0>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	330c      	adds	r3, #12
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1e9      	bne.n	800259e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d038      	beq.n	8002644 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80025d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80025d6:	4924      	ldr	r1, [pc, #144]	; (8002668 <HW_TS_Create+0xf0>)
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	330c      	adds	r3, #12
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80025f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80025f8:	491b      	ldr	r1, [pc, #108]	; (8002668 <HW_TS_Create+0xf0>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	3310      	adds	r3, #16
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800260a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800260e:	4916      	ldr	r1, [pc, #88]	; (8002668 <HW_TS_Create+0xf0>)
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	330d      	adds	r3, #13
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002620:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002624:	4910      	ldr	r1, [pc, #64]	; (8002668 <HW_TS_Create+0xf0>)
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800263a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002642:	e008      	b.n	8002656 <HW_TS_Create+0xde>
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800265a:	4618      	mov	r0, r3
 800265c:	372c      	adds	r7, #44	; 0x2c
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	2000031c 	.word	0x2000031c

0800266c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002676:	f3ef 8310 	mrs	r3, PRIMASK
 800267a:	60fb      	str	r3, [r7, #12]
  return(result);
 800267c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800267e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002684:	2003      	movs	r0, #3
 8002686:	f001 fb0e 	bl	8003ca6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <HW_TS_Stop+0xf0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	22ca      	movs	r2, #202	; 0xca
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
 8002692:	4b32      	ldr	r3, [pc, #200]	; (800275c <HW_TS_Stop+0xf0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2253      	movs	r2, #83	; 0x53
 8002698:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800269a:	79fa      	ldrb	r2, [r7, #7]
 800269c:	4930      	ldr	r1, [pc, #192]	; (8002760 <HW_TS_Stop+0xf4>)
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	330c      	adds	r3, #12
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d142      	bne.n	8002738 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fc06 	bl	8001ec8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HW_TS_Stop+0xf8>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b06      	cmp	r3, #6
 80026c6:	d12f      	bne.n	8002728 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HW_TS_Stop+0xfc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d4:	d107      	bne.n	80026e6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80026d6:	bf00      	nop
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <HW_TS_Stop+0xf0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f8      	bne.n	80026d8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HW_TS_Stop+0xf0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HW_TS_Stop+0xf0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80026f6:	bf00      	nop
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <HW_TS_Stop+0xf0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f8      	beq.n	80026f8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HW_TS_Stop+0xf0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HW_TS_Stop+0xf0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002716:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <HW_TS_Stop+0x100>)
 800271a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800271e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002720:	2003      	movs	r0, #3
 8002722:	f001 faec 	bl	8003cfe <HAL_NVIC_ClearPendingIRQ>
 8002726:	e007      	b.n	8002738 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HW_TS_Stop+0x104>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	7cfa      	ldrb	r2, [r7, #19]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002734:	f7ff fce4 	bl	8002100 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HW_TS_Stop+0xf0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	22ff      	movs	r2, #255	; 0xff
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002740:	2003      	movs	r0, #3
 8002742:	f001 faa2 	bl	8003c8a <HAL_NVIC_EnableIRQ>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f383 8810 	msr	PRIMASK, r3
}
 8002750:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002752:	bf00      	nop
}
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000644 	.word	0x20000644
 8002760:	2000031c 	.word	0x2000031c
 8002764:	200003ac 	.word	0x200003ac
 8002768:	40002800 	.word	0x40002800
 800276c:	58000800 	.word	0x58000800
 8002770:	200003ad 	.word	0x200003ad

08002774 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002780:	79fa      	ldrb	r2, [r7, #7]
 8002782:	493b      	ldr	r1, [pc, #236]	; (8002870 <HW_TS_Start+0xfc>)
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	330c      	adds	r3, #12
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d103      	bne.n	80027a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff66 	bl	800266c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a0:	f3ef 8310 	mrs	r3, PRIMASK
 80027a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80027a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80027a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80027aa:	b672      	cpsid	i
}
 80027ac:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80027ae:	2003      	movs	r0, #3
 80027b0:	f001 fa79 	bl	8003ca6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027b4:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HW_TS_Start+0x100>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	22ca      	movs	r2, #202	; 0xca
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HW_TS_Start+0x100>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2253      	movs	r2, #83	; 0x53
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	492a      	ldr	r1, [pc, #168]	; (8002870 <HW_TS_Start+0xfc>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	330c      	adds	r3, #12
 80027d4:	2202      	movs	r2, #2
 80027d6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	4925      	ldr	r1, [pc, #148]	; (8002870 <HW_TS_Start+0xfc>)
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3308      	adds	r3, #8
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80027ec:	79fa      	ldrb	r2, [r7, #7]
 80027ee:	4920      	ldr	r1, [pc, #128]	; (8002870 <HW_TS_Start+0xfc>)
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	3304      	adds	r3, #4
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fab6 	bl	8001d74 <linkTimer>
 8002808:	4603      	mov	r3, r0
 800280a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HW_TS_Start+0x104>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HW_TS_Start+0x108>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	7c7a      	ldrb	r2, [r7, #17]
 800281a:	429a      	cmp	r2, r3
 800281c:	d002      	beq.n	8002824 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800281e:	f7ff fc6f 	bl	8002100 <RescheduleTimerList>
 8002822:	e013      	b.n	800284c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002824:	79fa      	ldrb	r2, [r7, #7]
 8002826:	4912      	ldr	r1, [pc, #72]	; (8002870 <HW_TS_Start+0xfc>)
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	3308      	adds	r3, #8
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	8a7b      	ldrh	r3, [r7, #18]
 8002838:	79fa      	ldrb	r2, [r7, #7]
 800283a:	1ac9      	subs	r1, r1, r3
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <HW_TS_Start+0xfc>)
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4403      	add	r3, r0
 8002848:	3308      	adds	r3, #8
 800284a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HW_TS_Start+0x100>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	22ff      	movs	r2, #255	; 0xff
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002854:	2003      	movs	r0, #3
 8002856:	f001 fa18 	bl	8003c8a <HAL_NVIC_EnableIRQ>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002866:	bf00      	nop
}
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	2000031c 	.word	0x2000031c
 8002874:	20000644 	.word	0x20000644
 8002878:	200003ac 	.word	0x200003ac
 800287c:	200003ad 	.word	0x200003ad

08002880 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	460b      	mov	r3, r1
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4798      	blx	r3

  return;
 8002892:	bf00      	nop
}
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	4613      	mov	r3, r2
 80028ac:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HW_UART_Receive_IT+0x1e>
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d00d      	beq.n	80028d4 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80028b8:	e019      	b.n	80028ee <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 80028ba:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HW_UART_Receive_IT+0x5c>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HW_UART_Receive_IT+0x60>)
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HW_UART_Receive_IT+0x64>)
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	89bb      	ldrh	r3, [r7, #12]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	480b      	ldr	r0, [pc, #44]	; (80028fc <HW_UART_Receive_IT+0x60>)
 80028ce:	f004 fac5 	bl	8006e5c <HAL_UART_Receive_IT>
            break;
 80028d2:	e00c      	b.n	80028ee <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HW_UART_Receive_IT+0x68>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HW_UART_Receive_IT+0x6c>)
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HW_UART_Receive_IT+0x70>)
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	89bb      	ldrh	r3, [r7, #12]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	4808      	ldr	r0, [pc, #32]	; (8002908 <HW_UART_Receive_IT+0x6c>)
 80028e8:	f004 fab8 	bl	8006e5c <HAL_UART_Receive_IT>
            break;
 80028ec:	bf00      	nop
    }

    return;
 80028ee:	bf00      	nop
}
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200003bc 	.word	0x200003bc
 80028fc:	2000049c 	.word	0x2000049c
 8002900:	40013800 	.word	0x40013800
 8002904:	200003c4 	.word	0x200003c4
 8002908:	20000408 	.word	0x20000408
 800290c:	40008000 	.word	0x40008000

08002910 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	4603      	mov	r3, r0
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	4613      	mov	r3, r2
 8002920:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HW_UART_Transmit_IT+0x1e>
 8002928:	2b02      	cmp	r3, #2
 800292a:	d00d      	beq.n	8002948 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800292c:	e019      	b.n	8002962 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800292e:	4a0f      	ldr	r2, [pc, #60]	; (800296c <HW_UART_Transmit_IT+0x5c>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HW_UART_Transmit_IT+0x60>)
 8002936:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HW_UART_Transmit_IT+0x64>)
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	89bb      	ldrh	r3, [r7, #12]
 800293c:	461a      	mov	r2, r3
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	480b      	ldr	r0, [pc, #44]	; (8002970 <HW_UART_Transmit_IT+0x60>)
 8002942:	f004 f9f7 	bl	8006d34 <HAL_UART_Transmit_IT>
            break;
 8002946:	e00c      	b.n	8002962 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HW_UART_Transmit_IT+0x68>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HW_UART_Transmit_IT+0x6c>)
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HW_UART_Transmit_IT+0x70>)
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	89bb      	ldrh	r3, [r7, #12]
 8002956:	461a      	mov	r2, r3
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4808      	ldr	r0, [pc, #32]	; (800297c <HW_UART_Transmit_IT+0x6c>)
 800295c:	f004 f9ea 	bl	8006d34 <HAL_UART_Transmit_IT>
            break;
 8002960:	bf00      	nop
    }

    return;
 8002962:	bf00      	nop
}
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200003c0 	.word	0x200003c0
 8002970:	2000049c 	.word	0x2000049c
 8002974:	40013800 	.word	0x40013800
 8002978:	200003c8 	.word	0x200003c8
 800297c:	20000408 	.word	0x20000408
 8002980:	40008000 	.word	0x40008000

08002984 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	4603      	mov	r3, r0
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	4613      	mov	r3, r2
 8002994:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800299a:	2300      	movs	r3, #0
 800299c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HW_UART_Transmit_DMA+0x26>
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d00f      	beq.n	80029c8 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80029a8:	e01d      	b.n	80029e6 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 80029aa:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HW_UART_Transmit_DMA+0xa4>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80029b0:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HW_UART_Transmit_DMA+0xa8>)
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HW_UART_Transmit_DMA+0xac>)
 80029b4:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80029b6:	89bb      	ldrh	r3, [r7, #12]
 80029b8:	461a      	mov	r2, r3
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	481b      	ldr	r0, [pc, #108]	; (8002a2c <HW_UART_Transmit_DMA+0xa8>)
 80029be:	f004 fa99 	bl	8006ef4 <HAL_UART_Transmit_DMA>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]
            break;
 80029c6:	e00e      	b.n	80029e6 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HW_UART_Transmit_DMA+0xb0>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HW_UART_Transmit_DMA+0xb4>)
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HW_UART_Transmit_DMA+0xb8>)
 80029d2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80029d4:	89bb      	ldrh	r3, [r7, #12]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	4817      	ldr	r0, [pc, #92]	; (8002a38 <HW_UART_Transmit_DMA+0xb4>)
 80029dc:	f004 fa8a 	bl	8006ef4 <HAL_UART_Transmit_DMA>
 80029e0:	4603      	mov	r3, r0
 80029e2:	75fb      	strb	r3, [r7, #23]
            break;
 80029e4:	bf00      	nop
    }

    switch (hal_status)
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d817      	bhi.n	8002a1c <HW_UART_Transmit_DMA+0x98>
 80029ec:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HW_UART_Transmit_DMA+0x70>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a05 	.word	0x08002a05
 80029f8:	08002a0b 	.word	0x08002a0b
 80029fc:	08002a11 	.word	0x08002a11
 8002a00:	08002a17 	.word	0x08002a17
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75bb      	strb	r3, [r7, #22]
            break;
 8002a08:	e009      	b.n	8002a1e <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75bb      	strb	r3, [r7, #22]
            break;
 8002a0e:	e006      	b.n	8002a1e <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002a10:	2302      	movs	r3, #2
 8002a12:	75bb      	strb	r3, [r7, #22]
            break;
 8002a14:	e003      	b.n	8002a1e <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002a16:	2303      	movs	r3, #3
 8002a18:	75bb      	strb	r3, [r7, #22]
            break;
 8002a1a:	e000      	b.n	8002a1e <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002a1c:	bf00      	nop
    }

    return hw_status;
 8002a1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200003c0 	.word	0x200003c0
 8002a2c:	2000049c 	.word	0x2000049c
 8002a30:	40013800 	.word	0x40013800
 8002a34:	200003c8 	.word	0x200003c8
 8002a38:	20000408 	.word	0x20000408
 8002a3c:	40008000 	.word	0x40008000

08002a40 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_UART_RxCpltCallback+0x4c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00a      	beq.n	8002a68 <HAL_UART_RxCpltCallback+0x28>
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_UART_RxCpltCallback+0x50>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10f      	bne.n	8002a78 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_UART_RxCpltCallback+0x54>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_UART_RxCpltCallback+0x54>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4798      	blx	r3
            }
            break;
 8002a66:	e009      	b.n	8002a7c <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_UART_RxCpltCallback+0x58>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_UART_RxCpltCallback+0x58>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4798      	blx	r3
            }
            break;
 8002a76:	e003      	b.n	8002a80 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8002a78:	bf00      	nop
 8002a7a:	e002      	b.n	8002a82 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002a80:	bf00      	nop
    }

    return;
 8002a82:	bf00      	nop
}
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40008000 	.word	0x40008000
 8002a90:	40013800 	.word	0x40013800
 8002a94:	200003bc 	.word	0x200003bc
 8002a98:	200003c4 	.word	0x200003c4

08002a9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_UART_TxCpltCallback+0x4c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00a      	beq.n	8002ac4 <HAL_UART_TxCpltCallback+0x28>
 8002aae:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <HAL_UART_TxCpltCallback+0x50>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_UART_TxCpltCallback+0x54>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_UART_TxCpltCallback+0x54>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4798      	blx	r3
            }
            break;
 8002ac2:	e009      	b.n	8002ad8 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_UART_TxCpltCallback+0x58>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_UART_TxCpltCallback+0x58>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4798      	blx	r3
            }
            break;
 8002ad2:	e003      	b.n	8002adc <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002ad4:	bf00      	nop
 8002ad6:	e002      	b.n	8002ade <HAL_UART_TxCpltCallback+0x42>
            break;
 8002ad8:	bf00      	nop
 8002ada:	e000      	b.n	8002ade <HAL_UART_TxCpltCallback+0x42>
            break;
 8002adc:	bf00      	nop
    }

    return;
 8002ade:	bf00      	nop
}
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40008000 	.word	0x40008000
 8002aec:	40013800 	.word	0x40013800
 8002af0:	200003c0 	.word	0x200003c0
 8002af4:	200003c8 	.word	0x200003c8

08002af8 <LL_RCC_LSE_SetDriveCapability>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f023 0218 	bic.w	r2, r3, #24
 8002b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_AHB1_GRP1_EnableClock>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_AHB2_GRP1_EnableClock>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4013      	ands	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_APB1_GRP1_EnableClock>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bac:	68fb      	ldr	r3, [r7, #12]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc0:	f000 fe6c 	bl	800389c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002bc4:	f7fe fe20 	bl	8001808 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc8:	f000 f818 	bl	8002bfc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002bcc:	f000 f872 	bl	8002cb4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002bd0:	f000 f88c 	bl	8002cec <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd4:	f000 f99e 	bl	8002f14 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bd8:	f000 f982 	bl	8002ee0 <MX_DMA_Init>
  MX_RF_Init();
 8002bdc:	f000 f944 	bl	8002e68 <MX_RF_Init>
  MX_RTC_Init();
 8002be0:	f000 f94a 	bl	8002e78 <MX_RTC_Init>
  MX_I2C1_Init();
 8002be4:	f000 f896 	bl	8002d14 <MX_I2C1_Init>

      /*--[ Scanning Done ]--*/
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002be8:	f7fe fe1c 	bl	8001824 <MX_APPE_Init>




   sensirion_i2c_init(&hi2c1);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <main+0x3c>)
 8002bee:	f7fd fca9 	bl	8000544 <sensirion_i2c_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    MX_APPE_Process();
 8002bf2:	f7fe ff2b 	bl	8001a4c <MX_APPE_Process>
 8002bf6:	e7fc      	b.n	8002bf2 <main+0x36>
 8002bf8:	200005f0 	.word	0x200005f0

08002bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b09a      	sub	sp, #104	; 0x68
 8002c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c02:	f107 0320 	add.w	r3, r7, #32
 8002c06:	2248      	movs	r2, #72	; 0x48
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f009 fb7a 	bl	800c304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	60da      	str	r2, [r3, #12]
 8002c1c:	611a      	str	r2, [r3, #16]
 8002c1e:	615a      	str	r2, [r3, #20]
 8002c20:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c22:	f002 f811 	bl	8004c48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7ff ff66 	bl	8002af8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <SystemClock_Config+0xb4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c34:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <SystemClock_Config+0xb4>)
 8002c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <SystemClock_Config+0xb4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002c48:	2307      	movs	r3, #7
 8002c4a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c52:	2301      	movs	r3, #1
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c5c:	2340      	movs	r3, #64	; 0x40
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c64:	f107 0320 	add.w	r3, r7, #32
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fbff 	bl	800546c <HAL_RCC_OscConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002c74:	f000 f978 	bl	8002f68 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c78:	236f      	movs	r3, #111	; 0x6f
 8002c7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 ff5b 	bl	8005b54 <HAL_RCC_ClockConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002ca4:	f000 f960 	bl	8002f68 <Error_Handler>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3768      	adds	r7, #104	; 0x68
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	58000400 	.word	0x58000400

08002cb4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b094      	sub	sp, #80	; 0x50
 8002cb8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cba:	463b      	mov	r3, r7
 8002cbc:	2250      	movs	r2, #80	; 0x50
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f009 fb1f 	bl	800c304 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 8002cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cca:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cd0:	647b      	str	r3, [r7, #68]	; 0x44
  //PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 // PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fb7a 	bl	80063ce <HAL_RCCEx_PeriphCLKConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8002ce0:	f000 f942 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002ce4:	bf00      	nop
 8002ce6:	3750      	adds	r7, #80	; 0x50
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_IPCC_Init+0x20>)
 8002cf2:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <MX_IPCC_Init+0x24>)
 8002cf4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <MX_IPCC_Init+0x20>)
 8002cf8:	f001 ff20 	bl	8004b3c <HAL_IPCC_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d02:	f000 f931 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200003cc 	.word	0x200003cc
 8002d10:	58000c00 	.word	0x58000c00

08002d14 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	  __HAL_RCC_I2C1_CLK_ENABLE();
 8002d1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d1e:	f7ff ff33 	bl	8002b88 <LL_APB1_GRP1_EnableClock>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	2002      	movs	r0, #2
 8002d24:	f7ff ff17 	bl	8002b56 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002d28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d2c:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 8002d2e:	2312      	movs	r3, #18
 8002d30:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d36:	2303      	movs	r3, #3
 8002d38:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4820      	ldr	r0, [pc, #128]	; (8002dc4 <MX_I2C1_Init+0xb0>)
 8002d44:	f001 fbda 	bl	80044fc <HAL_GPIO_Init>
	 hi2c1.Instance = I2C1;
 8002d48:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d4a:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <MX_I2C1_Init+0xb8>)
 8002d4c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00000E14;
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d50:	f640 6214 	movw	r2, #3604	; 0xe14
 8002d54:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0x00;
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d80:	4811      	ldr	r0, [pc, #68]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d82:	f001 fd99 	bl	80048b8 <HAL_I2C_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_I2C1_Init+0x7c>
	  {
	    Error_Handler();
 8002d8c:	f000 f8ec 	bl	8002f68 <Error_Handler>
	  }
	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d90:	2100      	movs	r1, #0
 8002d92:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002d94:	f001 fe29 	bl	80049ea <HAL_I2CEx_ConfigAnalogFilter>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_I2C1_Init+0x8e>
	  {
	    Error_Handler();
 8002d9e:	f000 f8e3 	bl	8002f68 <Error_Handler>
	  }
	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002da2:	2100      	movs	r1, #0
 8002da4:	4808      	ldr	r0, [pc, #32]	; (8002dc8 <MX_I2C1_Init+0xb4>)
 8002da6:	f001 fe6b 	bl	8004a80 <HAL_I2CEx_ConfigDigitalFilter>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_I2C1_Init+0xa0>
	  {
	    Error_Handler();
 8002db0:	f000 f8da 	bl	8002f68 <Error_Handler>
	  }
	  /** I2C Enable Fast Mode Plus
	  */
	  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002db4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002db8:	f001 feae 	bl	8004b18 <HAL_I2CEx_EnableFastModePlus>
}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	48000400 	.word	0x48000400
 8002dc8:	200005f0 	.word	0x200005f0
 8002dcc:	40005400 	.word	0x40005400

08002dd0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002dd6:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <MX_LPUART1_UART_Init+0x94>)
 8002dd8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002dda:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfa:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e18:	4811      	ldr	r0, [pc, #68]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e1a:	f003 ff3b 	bl	8006c94 <HAL_UART_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e24:	f000 f8a0 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e28:	2100      	movs	r1, #0
 8002e2a:	480d      	ldr	r0, [pc, #52]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e2c:	f006 f9c1 	bl	80091b2 <HAL_UARTEx_SetTxFifoThreshold>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e36:	f000 f897 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4808      	ldr	r0, [pc, #32]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e3e:	f006 f9f6 	bl	800922e <HAL_UARTEx_SetRxFifoThreshold>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e48:	f000 f88e 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002e4c:	4804      	ldr	r0, [pc, #16]	; (8002e60 <MX_LPUART1_UART_Init+0x90>)
 8002e4e:	f006 f977 	bl	8009140 <HAL_UARTEx_DisableFifoMode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e58:	f000 f886 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000408 	.word	0x20000408
 8002e64:	40008000 	.word	0x40008000

08002e68 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <MX_RTC_Init+0x64>)
 8002e80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002e90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002eae:	480a      	ldr	r0, [pc, #40]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002eb0:	f003 fd14 	bl	80068dc <HAL_RTC_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002eba:	f000 f855 	bl	8002f68 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <MX_RTC_Init+0x60>)
 8002ec4:	f003 fe0a 	bl	8006adc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002ece:	f000 f84b 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000644 	.word	0x20000644
 8002edc:	40002800 	.word	0x40002800

08002ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ee4:	2004      	movs	r0, #4
 8002ee6:	f7ff fe1d 	bl	8002b24 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eea:	2001      	movs	r0, #1
 8002eec:	f7ff fe1a 	bl	8002b24 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	200b      	movs	r0, #11
 8002ef6:	f000 feae 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002efa:	200b      	movs	r0, #11
 8002efc:	f000 fec5 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2100      	movs	r1, #0
 8002f04:	200c      	movs	r0, #12
 8002f06:	f000 fea6 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002f0a:	200c      	movs	r0, #12
 8002f0c:	f000 febd 	bl	8003c8a <HAL_NVIC_EnableIRQ>

}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	2004      	movs	r0, #4
 8002f1c:	f7ff fe1b 	bl	8002b56 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7ff fe18 	bl	8002b56 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2002      	movs	r0, #2
 8002f28:	f7ff fe15 	bl	8002b56 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_GPIO_Init+0x50>)
 8002f50:	f001 fad4 	bl	80044fc <HAL_GPIO_Init>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8002f54:	2102      	movs	r1, #2
 8002f56:	4803      	ldr	r0, [pc, #12]	; (8002f64 <MX_GPIO_Init+0x50>)
 8002f58:	f001 fc58 	bl	800480c <HAL_GPIO_TogglePin>

}
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	48000800 	.word	0x48000800

08002f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_AHB2_GRP1_EnableClock>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_AHB3_GRP1_EnableClock>:
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4313      	orrs	r3, r2
 800300c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4013      	ands	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800301a:	68fb      	ldr	r3, [r7, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_APB1_GRP1_EnableClock>:
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800304c:	68fb      	ldr	r3, [r7, #12]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_APB1_GRP2_EnableClock>:
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4313      	orrs	r3, r2
 8003070:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_APB2_GRP1_EnableClock>:
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800309a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030b0:	68fb      	ldr	r3, [r7, #12]
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80030c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030c6:	f7ff ff96 	bl	8002ff6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	2001      	movs	r0, #1
 80030d0:	f000 fdc1 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f000 fdd8 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	2004      	movs	r0, #4
 80030e0:	f000 fdb9 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80030e4:	2004      	movs	r0, #4
 80030e6:	f000 fdd0 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2005      	movs	r0, #5
 80030f0:	f000 fdb1 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80030f4:	2005      	movs	r0, #5
 80030f6:	f000 fdc8 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2015      	movs	r0, #21
 8003100:	f000 fda9 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003104:	2015      	movs	r0, #21
 8003106:	f000 fdc0 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	202b      	movs	r0, #43	; 0x2b
 8003110:	f000 fda1 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003114:	202b      	movs	r0, #43	; 0x2b
 8003116:	f000 fdb8 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	202e      	movs	r0, #46	; 0x2e
 8003120:	f000 fd99 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003124:	202e      	movs	r0, #46	; 0x2e
 8003126:	f000 fdb0 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2036      	movs	r0, #54	; 0x36
 8003130:	f000 fd91 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003134:	2036      	movs	r0, #54	; 0x36
 8003136:	f000 fda8 	bl	8003c8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <HAL_IPCC_MspInit+0x44>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d113      	bne.n	800317a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003152:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003156:	f7ff ff4e 	bl	8002ff6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	202c      	movs	r0, #44	; 0x2c
 8003160:	f000 fd79 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	f000 fd90 	bl	8003c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	202d      	movs	r0, #45	; 0x2d
 8003170:	f000 fd71 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003174:	202d      	movs	r0, #45	; 0x2d
 8003176:	f000 fd88 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	58000c00 	.word	0x58000c00

08003188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b09c      	sub	sp, #112	; 0x70
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	2250      	movs	r2, #80	; 0x50
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f009 f8ab 	bl	800c304 <memset>
  if(huart->Instance==LPUART1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_UART_MspInit+0x1c8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d156      	bne.n	8003266 <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80031b8:	2302      	movs	r3, #2
 80031ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 f902 	bl	80063ce <HAL_RCCEx_PeriphCLKConfig>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031d0:	f7ff feca 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7ff ff40 	bl	800305a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	2001      	movs	r0, #1
 80031dc:	f7ff fef2 	bl	8002fc4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031e0:	230c      	movs	r3, #12
 80031e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031f0:	2308      	movs	r3, #8
 80031f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031f8:	4619      	mov	r1, r3
 80031fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031fe:	f001 f97d 	bl	80044fc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 8003204:	4a54      	ldr	r2, [pc, #336]	; (8003358 <HAL_UART_MspInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003208:	4b52      	ldr	r3, [pc, #328]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 800320a:	2211      	movs	r2, #17
 800320c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 8003210:	2210      	movs	r2, #16
 8003212:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800321a:	4b4e      	ldr	r3, [pc, #312]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003220:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800322c:	4b49      	ldr	r3, [pc, #292]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003238:	4846      	ldr	r0, [pc, #280]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 800323a:	f000 fd6f 	bl	8003d1c <HAL_DMA_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003244:	f7ff fe90 	bl	8002f68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a42      	ldr	r2, [pc, #264]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 800324c:	67da      	str	r2, [r3, #124]	; 0x7c
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2100      	movs	r1, #0
 8003258:	2025      	movs	r0, #37	; 0x25
 800325a:	f000 fcfc 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800325e:	2025      	movs	r0, #37	; 0x25
 8003260:	f000 fd13 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003264:	e06f      	b.n	8003346 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <HAL_UART_MspInit+0x1d4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d16a      	bne.n	8003346 <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003270:	2301      	movs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	4618      	mov	r0, r3
 800327e:	f003 f8a6 	bl	80063ce <HAL_RCCEx_PeriphCLKConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_UART_MspInit+0x104>
      Error_Handler();
 8003288:	f7ff fe6e 	bl	8002f68 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800328c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003290:	f7ff fefc 	bl	800308c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003294:	2001      	movs	r0, #1
 8003296:	f7ff fe95 	bl	8002fc4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329a:	2002      	movs	r0, #2
 800329c:	f7ff fe92 	bl	8002fc4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ae:	2300      	movs	r3, #0
 80032b0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b2:	2307      	movs	r3, #7
 80032b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032ba:	4619      	mov	r1, r3
 80032bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c0:	f001 f91c 	bl	80044fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032c4:	23c0      	movs	r3, #192	; 0xc0
 80032c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2300      	movs	r3, #0
 80032d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032d4:	2307      	movs	r3, #7
 80032d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032dc:	4619      	mov	r1, r3
 80032de:	4820      	ldr	r0, [pc, #128]	; (8003360 <HAL_UART_MspInit+0x1d8>)
 80032e0:	f001 f90c 	bl	80044fc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 80032e6:	4a20      	ldr	r2, [pc, #128]	; (8003368 <HAL_UART_MspInit+0x1e0>)
 80032e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 80032ec:	220f      	movs	r2, #15
 80032ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 80032f2:	2210      	movs	r2, #16
 80032f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 80032fe:	2280      	movs	r2, #128	; 0x80
 8003300:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003302:	4b18      	ldr	r3, [pc, #96]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800331a:	4812      	ldr	r0, [pc, #72]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 800331c:	f000 fcfe 	bl	8003d1c <HAL_DMA_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8003326:	f7ff fe1f 	bl	8002f68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 800332e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003330:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <HAL_UART_MspInit+0x1dc>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	2024      	movs	r0, #36	; 0x24
 800333c:	f000 fc8b 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003340:	2024      	movs	r0, #36	; 0x24
 8003342:	f000 fca2 	bl	8003c8a <HAL_NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3770      	adds	r7, #112	; 0x70
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40008000 	.word	0x40008000
 8003354:	20000530 	.word	0x20000530
 8003358:	40020008 	.word	0x40020008
 800335c:	40013800 	.word	0x40013800
 8003360:	48000400 	.word	0x48000400
 8003364:	20000590 	.word	0x20000590
 8003368:	4002001c 	.word	0x4002001c

0800336c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b096      	sub	sp, #88	; 0x58
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003374:	f107 0308 	add.w	r3, r7, #8
 8003378:	2250      	movs	r2, #80	; 0x50
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f008 ffc1 	bl	800c304 <memset>
  if(hrtc->Instance==RTC)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a19      	ldr	r2, [pc, #100]	; (80033ec <HAL_RTC_MspInit+0x80>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d12b      	bne.n	80033e4 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800338c:	f001 fc5c 	bl	8004c48 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003390:	f001 fc5a 	bl	8004c48 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003394:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003398:	f7ff fded 	bl	8002f76 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800339c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 f80e 	bl	80063ce <HAL_RCCEx_PeriphCLKConfig>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80033b8:	f7ff fdd6 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033bc:	f7ff fdf1 	bl	8002fa2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80033c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80033c4:	f7ff fe30 	bl	8003028 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80033c8:	2200      	movs	r2, #0
 80033ca:	2100      	movs	r1, #0
 80033cc:	2003      	movs	r0, #3
 80033ce:	f000 fc42 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80033d2:	2003      	movs	r0, #3
 80033d4:	f000 fc59 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <HAL_RTC_MspInit+0x80>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a03      	ldr	r2, [pc, #12]	; (80033ec <HAL_RTC_MspInit+0x80>)
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033e4:	bf00      	nop
 80033e6:	3758      	adds	r7, #88	; 0x58
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40002800 	.word	0x40002800

080033f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003402:	e7fe      	b.n	8003402 <HardFault_Handler+0x4>

08003404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <MemManage_Handler+0x4>

0800340a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <BusFault_Handler+0x4>

08003410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <UsageFault_Handler+0x4>

08003416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003444:	f000 fa84 	bl	8003950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}

0800344c <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003450:	f001 fc60 	bl	8004d14 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}

08003458 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800345c:	f7fe feea 	bl	8002234 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}

08003464 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003468:	f000 ff8a 	bl	8004380 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}

08003470 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <DMA1_Channel1_IRQHandler+0x10>)
 8003486:	f000 fe2a 	bl	80040de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000530 	.word	0x20000530

08003494 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <DMA1_Channel2_IRQHandler+0x10>)
 800349a:	f000 fe20 	bl	80040de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000590 	.word	0x20000590

080034a8 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <USART1_IRQHandler+0x10>)
 80034be:	f003 fd99 	bl	8006ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2000049c 	.word	0x2000049c

080034cc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <LPUART1_IRQHandler+0x10>)
 80034d2:	f003 fd8f 	bl	8006ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000408 	.word	0x20000408

080034e0 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80034f2:	f7fd ff21 	bl	8001338 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}

080034fa <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80034fe:	f7fd ff75 	bl	80013ec <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}

08003506 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800350a:	f001 f9b1 	bl	8004870 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}

08003512 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8003524:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003528:	f001 f98a 	bl	8004840 <HAL_GPIO_EXTI_IRQHandler>
}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}

08003530 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8003530:	b5b0      	push	{r4, r5, r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	3b01      	subs	r3, #1
 8003544:	2b04      	cmp	r3, #4
 8003546:	d83e      	bhi.n	80035c6 <logRegion+0x96>
 8003548:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <logRegion+0x20>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003565 	.word	0x08003565
 8003554:	08003579 	.word	0x08003579
 8003558:	0800358d 	.word	0x0800358d
 800355c:	0800359f 	.word	0x0800359f
 8003560:	080035b3 	.word	0x080035b3
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8003564:	f107 0308 	add.w	r3, r7, #8
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <logRegion+0xc4>)
 800356a:	461c      	mov	r4, r3
 800356c:	4615      	mov	r5, r2
 800356e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	7023      	strb	r3, [r4, #0]
      break;
 8003576:	e02f      	b.n	80035d8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <logRegion+0xc8>)
 800357e:	461c      	mov	r4, r3
 8003580:	4615      	mov	r5, r2
 8003582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	6023      	str	r3, [r4, #0]
      break;
 800358a:	e025      	b.n	80035d8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 800358c:	f107 0308 	add.w	r3, r7, #8
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <logRegion+0xcc>)
 8003592:	461c      	mov	r4, r3
 8003594:	4613      	mov	r3, r2
 8003596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003598:	c407      	stmia	r4!, {r0, r1, r2}
 800359a:	8023      	strh	r3, [r4, #0]
      break;
 800359c:	e01c      	b.n	80035d8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <logRegion+0xd0>)
 80035a4:	461c      	mov	r4, r3
 80035a6:	4615      	mov	r5, r2
 80035a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	8023      	strh	r3, [r4, #0]
      break;
 80035b0:	e012      	b.n	80035d8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 80035b2:	f107 0308 	add.w	r3, r7, #8
 80035b6:	4a13      	ldr	r2, [pc, #76]	; (8003604 <logRegion+0xd4>)
 80035b8:	461c      	mov	r4, r3
 80035ba:	4615      	mov	r5, r2
 80035bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	7023      	strb	r3, [r4, #0]
      break;
 80035c4:	e008      	b.n	80035d8 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 80035c6:	f107 0308 	add.w	r3, r7, #8
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <logRegion+0xd8>)
 80035cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035d0:	6018      	str	r0, [r3, #0]
 80035d2:	3304      	adds	r3, #4
 80035d4:	7019      	strb	r1, [r3, #0]
      break;
 80035d6:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80035d8:	8879      	ldrh	r1, [r7, #2]
 80035da:	f107 0308 	add.w	r3, r7, #8
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <logRegion+0xdc>)
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f008 feaf 	bl	800c344 <sniprintf>
 80035e6:	4603      	mov	r3, r0
 80035e8:	b29b      	uxth	r3, r3
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bdb0      	pop	{r4, r5, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	0800dd68 	.word	0x0800dd68
 80035f8:	0800dd7c 	.word	0x0800dd7c
 80035fc:	0800dd90 	.word	0x0800dd90
 8003600:	0800dda0 	.word	0x0800dda0
 8003604:	0800ddb4 	.word	0x0800ddb4
 8003608:	0800ddc8 	.word	0x0800ddc8
 800360c:	0800ddd0 	.word	0x0800ddd0

08003610 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d00a      	beq.n	8003636 <levelToString+0x26>
 8003620:	2b03      	cmp	r3, #3
 8003622:	dc0a      	bgt.n	800363a <levelToString+0x2a>
 8003624:	2b01      	cmp	r3, #1
 8003626:	d002      	beq.n	800362e <levelToString+0x1e>
 8003628:	2b02      	cmp	r3, #2
 800362a:	d002      	beq.n	8003632 <levelToString+0x22>
 800362c:	e005      	b.n	800363a <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <levelToString+0x38>)
 8003630:	e004      	b.n	800363c <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <levelToString+0x3c>)
 8003634:	e002      	b.n	800363c <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <levelToString+0x40>)
 8003638:	e000      	b.n	800363c <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <levelToString+0x44>)
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	0800ddd4 	.word	0x0800ddd4
 800364c:	0800dddc 	.word	0x0800dddc
 8003650:	0800dde4 	.word	0x0800dde4
 8003654:	0800ddec 	.word	0x0800ddec

08003658 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]
 8003664:	4613      	mov	r3, r2
 8003666:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8003668:	887c      	ldrh	r4, [r7, #2]
 800366a:	787b      	ldrb	r3, [r7, #1]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ffcf 	bl	8003610 <levelToString>
 8003672:	4603      	mov	r3, r0
 8003674:	4a05      	ldr	r2, [pc, #20]	; (800368c <logLevel+0x34>)
 8003676:	4621      	mov	r1, r4
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f008 fe63 	bl	800c344 <sniprintf>
 800367e:	4603      	mov	r3, r0
 8003680:	b29b      	uxth	r3, r3
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	bf00      	nop
 800368c:	0800ddf4 	.word	0x0800ddf4

08003690 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003690:	b40c      	push	{r2, r3}
 8003692:	b580      	push	{r7, lr}
 8003694:	b0c4      	sub	sp, #272	; 0x110
 8003696:	af00      	add	r7, sp, #0
 8003698:	4602      	mov	r2, r0
 800369a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800369e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036a8:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80036ac:	460a      	mov	r2, r1
 80036ae:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80036b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036ba:	f107 020c 	add.w	r2, r7, #12
 80036be:	18d0      	adds	r0, r2, r3
 80036c0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80036c8:	b299      	uxth	r1, r3
 80036ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036ce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	f7ff ffbf 	bl	8003658 <logLevel>
 80036da:	4603      	mov	r3, r0
 80036dc:	461a      	mov	r2, r3
 80036de:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036e2:	4413      	add	r3, r2
 80036e4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80036e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036ec:	f107 020c 	add.w	r2, r7, #12
 80036f0:	18d0      	adds	r0, r2, r3
 80036f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80036fa:	b299      	uxth	r1, r3
 80036fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003700:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f7ff ff12 	bl	8003530 <logRegion>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003714:	4413      	add	r3, r2
 8003716:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800371a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800371e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003726:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8003728:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800372c:	f107 020c 	add.w	r2, r7, #12
 8003730:	18d0      	adds	r0, r2, r3
 8003732:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003736:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 800373a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800373e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003748:	f008 fe5c 	bl	800c404 <vsniprintf>
 800374c:	4603      	mov	r3, r0
 800374e:	b29a      	uxth	r2, r3
 8003750:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003754:	4413      	add	r3, r2
 8003756:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 800375a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8003764:	461a      	mov	r2, r3
 8003766:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800376a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800376e:	210d      	movs	r1, #13
 8003770:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8003772:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800377c:	461a      	mov	r2, r3
 800377e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003786:	210a      	movs	r1, #10
 8003788:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 800378a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8003794:	461a      	mov	r2, r3
 8003796:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800379a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800379e:	2100      	movs	r1, #0
 80037a0:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 80037a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d805      	bhi.n	80037bc <logApplication+0x12c>
  {
    printf("%s", logString);
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	4619      	mov	r1, r3
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <logApplication+0x13c>)
 80037b8:	f008 fdac 	bl	800c314 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80037bc:	bf00      	nop
 80037be:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037c8:	b002      	add	sp, #8
 80037ca:	4770      	bx	lr
 80037cc:	0800ddf4 	.word	0x0800ddf4

080037d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <SystemInit+0xa0>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80037da:	4b25      	ldr	r3, [pc, #148]	; (8003870 <SystemInit+0xa0>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	4a23      	ldr	r2, [pc, #140]	; (8003870 <SystemInit+0xa0>)
 80037e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003802:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <SystemInit+0xa4>)
 8003810:	4013      	ands	r3, r2
 8003812:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003820:	f023 0305 	bic.w	r3, r3, #5
 8003824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800383c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003840:	4a0d      	ldr	r2, [pc, #52]	; (8003878 <SystemInit+0xa8>)
 8003842:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <SystemInit+0xa8>)
 800384a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000ed00 	.word	0xe000ed00
 8003874:	faf6fefb 	.word	0xfaf6fefb
 8003878:	22041000 	.word	0x22041000

0800387c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6053      	str	r3, [r2, #4]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e0042000 	.word	0xe0042000

0800389c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_Init+0x3c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <HAL_Init+0x3c>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b2:	2003      	movs	r0, #3
 80038b4:	f000 f9c4 	bl	8003c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038b8:	2000      	movs	r0, #0
 80038ba:	f000 f80f 	bl	80038dc <HAL_InitTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	71fb      	strb	r3, [r7, #7]
 80038c8:	e001      	b.n	80038ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038ca:	f7ff fbf8 	bl	80030be <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	58004000 	.word	0x58004000

080038dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80038e8:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_InitTick+0x6c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d024      	beq.n	800393a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038f0:	f002 fadc 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_InitTick+0x6c>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	4619      	mov	r1, r3
 80038fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003900:	fbb3 f3f1 	udiv	r3, r3, r1
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f9de 	bl	8003cca <HAL_SYSTICK_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	d809      	bhi.n	800392e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800391a:	2200      	movs	r2, #0
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	f04f 30ff 	mov.w	r0, #4294967295
 8003922:	f000 f998 	bl	8003c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_InitTick+0x70>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e007      	b.n	800393e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e004      	b.n	800393e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	e001      	b.n	800393e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000020 	.word	0x20000020
 800394c:	2000001c 	.word	0x2000001c

08003950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_IncTick+0x20>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x24>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_IncTick+0x24>)
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000020 	.word	0x20000020
 8003974:	20000668 	.word	0x20000668

08003978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return uwTick;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_GetTick+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000668 	.word	0x20000668

08003990 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_GetTickPrio+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000001c 	.word	0x2000001c

080039a8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80039ac:	f7ff ff66 	bl	800387c <LL_DBGMCU_EnableDBGSleepMode>
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e6:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	60d3      	str	r3, [r2, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	db0b      	blt.n	8003a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4907      	ldr	r1, [pc, #28]	; (8003a50 <__NVIC_EnableIRQ+0x38>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2001      	movs	r0, #1
 8003a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db12      	blt.n	8003a8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	490a      	ldr	r1, [pc, #40]	; (8003a98 <__NVIC_DisableIRQ+0x44>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2001      	movs	r0, #1
 8003a76:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7a:	3320      	adds	r3, #32
 8003a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a80:	f3bf 8f4f 	dsb	sy
}
 8003a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a86:	f3bf 8f6f 	isb	sy
}
 8003a8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db0c      	blt.n	8003ac8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	4907      	ldr	r1, [pc, #28]	; (8003ad4 <__NVIC_SetPendingIRQ+0x38>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2001      	movs	r0, #1
 8003abe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac2:	3340      	adds	r3, #64	; 0x40
 8003ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e100 	.word	0xe000e100

08003ad8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	db0c      	blt.n	8003b04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4907      	ldr	r1, [pc, #28]	; (8003b10 <__NVIC_ClearPendingIRQ+0x38>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2001      	movs	r0, #1
 8003afa:	fa00 f202 	lsl.w	r2, r0, r2
 8003afe:	3360      	adds	r3, #96	; 0x60
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100

08003b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db0a      	blt.n	8003b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	490c      	ldr	r1, [pc, #48]	; (8003b60 <__NVIC_SetPriority+0x4c>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	0112      	lsls	r2, r2, #4
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	440b      	add	r3, r1
 8003b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b3c:	e00a      	b.n	8003b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4908      	ldr	r1, [pc, #32]	; (8003b64 <__NVIC_SetPriority+0x50>)
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	440b      	add	r3, r1
 8003b52:	761a      	strb	r2, [r3, #24]
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000e100 	.word	0xe000e100
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f1c3 0307 	rsb	r3, r3, #7
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf28      	it	cs
 8003b86:	2304      	movcs	r3, #4
 8003b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d902      	bls.n	8003b98 <NVIC_EncodePriority+0x30>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3b03      	subs	r3, #3
 8003b96:	e000      	b.n	8003b9a <NVIC_EncodePriority+0x32>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	401a      	ands	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	43d9      	mvns	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	4313      	orrs	r3, r2
         );
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3724      	adds	r7, #36	; 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003bd4:	f3bf 8f4f 	dsb	sy
}
 8003bd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <__NVIC_SystemReset+0x24>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003be2:	4904      	ldr	r1, [pc, #16]	; (8003bf4 <__NVIC_SystemReset+0x24>)
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <__NVIC_SystemReset+0x28>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bea:	f3bf 8f4f 	dsb	sy
}
 8003bee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <__NVIC_SystemReset+0x20>
 8003bf4:	e000ed00 	.word	0xe000ed00
 8003bf8:	05fa0004 	.word	0x05fa0004

08003bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c0c:	d301      	bcc.n	8003c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00f      	b.n	8003c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <SysTick_Config+0x40>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c1a:	210f      	movs	r1, #15
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	f7ff ff78 	bl	8003b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <SysTick_Config+0x40>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c2a:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <SysTick_Config+0x40>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	e000e010 	.word	0xe000e010

08003c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff feb3 	bl	80039b4 <__NVIC_SetPriorityGrouping>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c64:	f7ff feca 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7ff ff7a 	bl	8003b68 <NVIC_EncodePriority>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff49 	bl	8003b14 <__NVIC_SetPriority>
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff febd 	bl	8003a18 <__NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fecd 	bl	8003a54 <__NVIC_DisableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003cc6:	f7ff ff83 	bl	8003bd0 <__NVIC_SystemReset>

08003cca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ff92 	bl	8003bfc <SysTick_Config>
 8003cd8:	4603      	mov	r3, r0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fed3 	bl	8003a9c <__NVIC_SetPendingIRQ>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fee3 	bl	8003ad8 <__NVIC_ClearPendingIRQ>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e08e      	b.n	8003e4c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_DMA_Init+0x138>)
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d80f      	bhi.n	8003d5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <HAL_DMA_Init+0x13c>)
 8003d42:	4413      	add	r3, r2
 8003d44:	4a45      	ldr	r2, [pc, #276]	; (8003e5c <HAL_DMA_Init+0x140>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	009a      	lsls	r2, r3, #2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a42      	ldr	r2, [pc, #264]	; (8003e60 <HAL_DMA_Init+0x144>)
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
 8003d58:	e00e      	b.n	8003d78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <HAL_DMA_Init+0x148>)
 8003d62:	4413      	add	r3, r2
 8003d64:	4a3d      	ldr	r2, [pc, #244]	; (8003e5c <HAL_DMA_Init+0x140>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	009a      	lsls	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <HAL_DMA_Init+0x14c>)
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa74 	bl	80042b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd8:	d102      	bne.n	8003de0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003dec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003df6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_DMA_Init+0x106>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d80c      	bhi.n	8003e22 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa93 	bl	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	e008      	b.n	8003e34 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40020407 	.word	0x40020407
 8003e58:	bffdfff8 	.word	0xbffdfff8
 8003e5c:	cccccccd 	.word	0xcccccccd
 8003e60:	40020000 	.word	0x40020000
 8003e64:	bffdfbf8 	.word	0xbffdfbf8
 8003e68:	40020400 	.word	0x40020400

08003e6c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_DMA_Start_IT+0x20>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e066      	b.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d155      	bne.n	8003f4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f9b9 	bl	800423c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 020e 	orr.w	r2, r2, #14
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e00f      	b.n	8003f04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 020a 	orr.w	r2, r2, #10
 8003f02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	e005      	b.n	8003f58 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
 8003f56:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e04f      	b.n	8004014 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d008      	beq.n	8003f92 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2204      	movs	r2, #4
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e040      	b.n	8004014 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 020e 	bic.w	r2, r2, #14
 8003fa0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f003 021c 	and.w	r2, r3, #28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fde:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00c      	beq.n	8004002 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004000:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d005      	beq.n	8004044 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2204      	movs	r2, #4
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e047      	b.n	80040d4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 020e 	bic.w	r2, r2, #14
 8004052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	f003 021c 	and.w	r2, r3, #28
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f202 	lsl.w	r2, r1, r2
 8004086:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004090:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
    }
  }
  return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f003 031c 	and.w	r3, r3, #28
 80040fe:	2204      	movs	r2, #4
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d026      	beq.n	8004158 <HAL_DMA_IRQHandler+0x7a>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d021      	beq.n	8004158 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d107      	bne.n	8004132 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0204 	bic.w	r2, r2, #4
 8004130:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f003 021c 	and.w	r2, r3, #28
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2104      	movs	r1, #4
 8004140:	fa01 f202 	lsl.w	r2, r1, r2
 8004144:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	2b00      	cmp	r3, #0
 800414c:	d071      	beq.n	8004232 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004156:	e06c      	b.n	8004232 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	f003 031c 	and.w	r3, r3, #28
 8004160:	2202      	movs	r2, #2
 8004162:	409a      	lsls	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02e      	beq.n	80041ca <HAL_DMA_IRQHandler+0xec>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d029      	beq.n	80041ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 020a 	bic.w	r2, r2, #10
 8004192:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	f003 021c 	and.w	r2, r3, #28
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2102      	movs	r1, #2
 80041aa:	fa01 f202 	lsl.w	r2, r1, r2
 80041ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d038      	beq.n	8004232 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041c8:	e033      	b.n	8004232 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	f003 031c 	and.w	r3, r3, #28
 80041d2:	2208      	movs	r2, #8
 80041d4:	409a      	lsls	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d02a      	beq.n	8004234 <HAL_DMA_IRQHandler+0x156>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d025      	beq.n	8004234 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 020e 	bic.w	r2, r2, #14
 80041f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	f003 021c 	and.w	r2, r3, #28
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	2b00      	cmp	r3, #0
 8004228:	d004      	beq.n	8004234 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004232:	bf00      	nop
 8004234:	bf00      	nop
}
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004252:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f003 021c 	and.w	r2, r3, #28
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b10      	cmp	r3, #16
 8004288:	d108      	bne.n	800429c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800429a:	e007      	b.n	80042ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d80a      	bhi.n	80042e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	089b      	lsrs	r3, r3, #2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6493      	str	r3, [r2, #72]	; 0x48
 80042e0:	e007      	b.n	80042f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	009a      	lsls	r2, r3, #2
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80042ec:	4413      	add	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	3b08      	subs	r3, #8
 80042fa:	4a0c      	ldr	r2, [pc, #48]	; (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004308:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2201      	movs	r2, #1
 8004312:	409a      	lsls	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40020407 	.word	0x40020407
 8004328:	4002081c 	.word	0x4002081c
 800432c:	cccccccd 	.word	0xcccccccd
 8004330:	40020880 	.word	0x40020880

08004334 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	461a      	mov	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004358:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3b01      	subs	r3, #1
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2201      	movs	r2, #1
 8004364:	409a      	lsls	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	1000823f 	.word	0x1000823f
 800437c:	40020940 	.word	0x40020940

08004380 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800438c:	4b41      	ldr	r3, [pc, #260]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004394:	4013      	ands	r3, r2
 8004396:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	493c      	ldr	r1, [pc, #240]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 80043a8:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	4b3b      	ldr	r3, [pc, #236]	; (800449c <HAL_FLASH_IRQHandler+0x11c>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e008      	b.n	80043ce <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 80043bc:	4b36      	ldr	r3, [pc, #216]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 80043c8:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d022      	beq.n	800441a <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80043d4:	4b30      	ldr	r3, [pc, #192]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 80043de:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_FLASH_IRQHandler+0x7a>
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80043f4:	4927      	ldr	r1, [pc, #156]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	618b      	str	r3, [r1, #24]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_FLASH_IRQHandler+0x8e>
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800440c:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800440e:	4b22      	ldr	r3, [pc, #136]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f84d 	bl	80044b4 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800441a:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d124      	bne.n	8004470 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 8004428:	2201      	movs	r2, #1
 800442a:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800442c:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d117      	bne.n	8004464 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	3b01      	subs	r3, #1
 800443a:	4a17      	ldr	r2, [pc, #92]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 800443c:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	3301      	adds	r3, #1
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 800444e:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 f837 	bl	80044c8 <FLASH_PageErase>
 800445a:	e006      	b.n	800446a <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800445c:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	e002      	b.n	800446a <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f818 	bl	80044a0 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4a05      	ldr	r2, [pc, #20]	; (8004494 <HAL_FLASH_IRQHandler+0x114>)
 800447e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004482:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <HAL_FLASH_IRQHandler+0x118>)
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
  }
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	58004000 	.word	0x58004000
 8004498:	2000066c 	.word	0x2000066c
 800449c:	00040001 	.word	0x00040001

080044a0 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <FLASH_PageErase+0x30>)
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4313      	orrs	r3, r2
 80044de:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <FLASH_PageErase+0x30>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	6153      	str	r3, [r2, #20]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	58004000 	.word	0x58004000

080044fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800450a:	e14c      	b.n	80047a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2101      	movs	r1, #1
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	fa01 f303 	lsl.w	r3, r1, r3
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 813e 	beq.w	80047a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d005      	beq.n	800453c <HAL_GPIO_Init+0x40>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d130      	bne.n	800459e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2203      	movs	r2, #3
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4013      	ands	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004572:	2201      	movs	r2, #1
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	f003 0201 	and.w	r2, r3, #1
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d017      	beq.n	80045da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d123      	bne.n	800462e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	08da      	lsrs	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3208      	adds	r2, #8
 80045ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	220f      	movs	r2, #15
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	08da      	lsrs	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3208      	adds	r2, #8
 8004628:	6939      	ldr	r1, [r7, #16]
 800462a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0203 	and.w	r2, r3, #3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8098 	beq.w	80047a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004670:	4a54      	ldr	r2, [pc, #336]	; (80047c4 <HAL_GPIO_Init+0x2c8>)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	089b      	lsrs	r3, r3, #2
 8004676:	3302      	adds	r3, #2
 8004678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	220f      	movs	r2, #15
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800469a:	d019      	beq.n	80046d0 <HAL_GPIO_Init+0x1d4>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <HAL_GPIO_Init+0x2cc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <HAL_GPIO_Init+0x1d0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a49      	ldr	r2, [pc, #292]	; (80047cc <HAL_GPIO_Init+0x2d0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00d      	beq.n	80046c8 <HAL_GPIO_Init+0x1cc>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a48      	ldr	r2, [pc, #288]	; (80047d0 <HAL_GPIO_Init+0x2d4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <HAL_GPIO_Init+0x1c8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a47      	ldr	r2, [pc, #284]	; (80047d4 <HAL_GPIO_Init+0x2d8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_GPIO_Init+0x1c4>
 80046bc:	2304      	movs	r3, #4
 80046be:	e008      	b.n	80046d2 <HAL_GPIO_Init+0x1d6>
 80046c0:	2307      	movs	r3, #7
 80046c2:	e006      	b.n	80046d2 <HAL_GPIO_Init+0x1d6>
 80046c4:	2303      	movs	r3, #3
 80046c6:	e004      	b.n	80046d2 <HAL_GPIO_Init+0x1d6>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e002      	b.n	80046d2 <HAL_GPIO_Init+0x1d6>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_GPIO_Init+0x1d6>
 80046d0:	2300      	movs	r3, #0
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	f002 0203 	and.w	r2, r2, #3
 80046d8:	0092      	lsls	r2, r2, #2
 80046da:	4093      	lsls	r3, r2
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046e2:	4938      	ldr	r1, [pc, #224]	; (80047c4 <HAL_GPIO_Init+0x2c8>)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	3302      	adds	r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f0:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004714:	4a30      	ldr	r2, [pc, #192]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	43db      	mvns	r3, r3
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4013      	ands	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800473e:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800476a:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004772:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 8004774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	43db      	mvns	r3, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004798:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <HAL_GPIO_Init+0x2dc>)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3301      	adds	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f47f aeab 	bne.w	800450c <HAL_GPIO_Init+0x10>
  }
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40010000 	.word	0x40010000
 80047c8:	48000400 	.word	0x48000400
 80047cc:	48000800 	.word	0x48000800
 80047d0:	48000c00 	.word	0x48000c00
 80047d4:	48001000 	.word	0x48001000
 80047d8:	58000800 	.word	0x58000800

080047dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
 80047e8:	4613      	mov	r3, r2
 80047ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047ec:	787b      	ldrb	r3, [r7, #1]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f8:	e002      	b.n	8004800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4013      	ands	r3, r2
 8004824:	041a      	lsls	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	43d9      	mvns	r1, r3
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	400b      	ands	r3, r1
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	619a      	str	r2, [r3, #24]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004856:	4a05      	ldr	r2, [pc, #20]	; (800486c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd f97c 	bl	8001b5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	58000800 	.word	0x58000800

08004870 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_HSEM_IRQHandler+0x30>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_HSEM_IRQHandler+0x30>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	43db      	mvns	r3, r3
 8004884:	4906      	ldr	r1, [pc, #24]	; (80048a0 <HAL_HSEM_IRQHandler+0x30>)
 8004886:	4013      	ands	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800488a:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <HAL_HSEM_IRQHandler+0x30>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f807 	bl	80048a4 <HAL_HSEM_FreeCallback>
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	58001500 	.word	0x58001500

080048a4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e081      	b.n	80049ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f879 	bl	80049d6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	; 0x24
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	e006      	b.n	8004940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800493e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d104      	bne.n	8004952 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004950:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004964:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004974:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69d9      	ldr	r1, [r3, #28]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1a      	ldr	r2, [r3, #32]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d138      	bne.n	8004a72 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e032      	b.n	8004a74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2224      	movs	r2, #36	; 0x24
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d139      	bne.n	8004b0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e033      	b.n	8004b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	; 0x24
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ad2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4904      	ldr	r1, [pc, #16]	; (8004b38 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40010000 	.word	0x40010000

08004b3c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01e      	beq.n	8004b8c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <HAL_IPCC_Init+0x60>)
 8004b50:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fe faee 	bl	8003140 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004b64:	68b8      	ldr	r0, [r7, #8]
 8004b66:	f000 f85b 	bl	8004c20 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f82c 	bl	8004bd4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004b8a:	e001      	b.n	8004b90 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	58000c00 	.word	0x58000c00

08004ba0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e00f      	b.n	8004c02 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <IPCC_SetDefaultCallbacks+0x44>)
 8004bec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3306      	adds	r3, #6
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <IPCC_SetDefaultCallbacks+0x48>)
 8004bfa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b05      	cmp	r3, #5
 8004c06:	d9ec      	bls.n	8004be2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	08004ba1 	.word	0x08004ba1
 8004c1c:	08004bbb 	.word	0x08004bbb

08004c20 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004c34:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	223f      	movs	r2, #63	; 0x3f
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c56:	6013      	str	r3, [r2, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	58000400 	.word	0x58000400

08004c68 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <LL_EXTI_ReadFlag_0_31+0x1c>)
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4013      	ands	r3, r2
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	58000800 	.word	0x58000800

08004c98 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <LL_EXTI_ReadFlag_32_63+0x1c>)
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4013      	ands	r3, r2
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	58000800 	.word	0x58000800

08004cb8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60d3      	str	r3, [r2, #12]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	58000800 	.word	0x58000800

08004cd8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	58000800 	.word	0x58000800

08004cf8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	58000400 	.word	0x58000400

08004d14 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8004d18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004d1c:	f7ff ffac 	bl	8004c78 <LL_EXTI_ReadFlag_0_31>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004d26:	f7ff ff9f 	bl	8004c68 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004d2a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004d2e:	f7ff ffc3 	bl	8004cb8 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8004d32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004d36:	f7ff ff9f 	bl	8004c78 <LL_EXTI_ReadFlag_0_31>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004d40:	f000 f811 	bl	8004d66 <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004d44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004d48:	f7ff ffb6 	bl	8004cb8 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8004d4c:	2002      	movs	r0, #2
 8004d4e:	f7ff ffa3 	bl	8004c98 <LL_EXTI_ReadFlag_32_63>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004d58:	f000 f80c 	bl	8004d74 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004d5c:	2002      	movs	r0, #2
 8004d5e:	f7ff ffbb 	bl	8004cd8 <LL_EXTI_ClearFlag_32_63>
  }
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d94:	d101      	bne.n	8004d9a <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <LL_RCC_HSE_Enable>:
{
 8004da6:	b480      	push	{r7}
 8004da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_RCC_HSE_Disable>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_RCC_HSE_IsReady>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df4:	d101      	bne.n	8004dfa <LL_RCC_HSE_IsReady+0x18>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <LL_RCC_HSE_IsReady+0x1a>
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_RCC_HSI_Enable>:
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e18:	6013      	str	r3, [r2, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <LL_RCC_HSI_Disable>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e36:	6013      	str	r3, [r2, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <LL_RCC_HSI_IsReady>:
{
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d101      	bne.n	8004e5a <LL_RCC_HSI_IsReady+0x18>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <LL_RCC_HSI_IsReady+0x1a>
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_HSI48_Enable>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_RCC_HSI48_Disable>:
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <LL_RCC_HSI48_IsReady>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d101      	bne.n	8004eec <LL_RCC_HSI48_IsReady+0x18>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <LL_RCC_HSI48_IsReady+0x1a>
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_LSE_Enable>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <LL_RCC_LSE_Disable>:
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f32:	bf00      	nop
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <LL_RCC_LSE_EnableBypass>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_LSE_DisableBypass>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_LSE_IsReady>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d101      	bne.n	8004f98 <LL_RCC_LSE_IsReady+0x18>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <LL_RCC_LSE_IsReady+0x1a>
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_RCC_LSI1_Enable>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <LL_RCC_LSI1_Disable>:
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_RCC_LSI1_IsReady>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d101      	bne.n	8005000 <LL_RCC_LSI1_IsReady+0x18>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <LL_RCC_LSI1_IsReady+0x1a>
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <LL_RCC_LSI2_Enable>:
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800501c:	f043 0304 	orr.w	r3, r3, #4
 8005020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_LSI2_Disable>:
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503e:	f023 0304 	bic.w	r3, r3, #4
 8005042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005046:	bf00      	nop
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_RCC_LSI2_IsReady>:
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d101      	bne.n	8005068 <LL_RCC_LSI2_IsReady+0x18>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <LL_RCC_LSI2_IsReady+0x1a>
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_LSI2_SetTrimming>:
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005084:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_MSI_Enable>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LL_RCC_MSI_Disable>:
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80050c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_RCC_MSI_IsReady>:
{
 80050de:	b480      	push	{r7}
 80050e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d101      	bne.n	80050f4 <LL_RCC_MSI_IsReady+0x16>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <LL_RCC_MSI_IsReady+0x18>
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <LL_RCC_MSI_SetRange>:
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <LL_RCC_MSI_GetRange>:
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005138:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2bb0      	cmp	r3, #176	; 0xb0
 800513e:	d901      	bls.n	8005144 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005140:	23b0      	movs	r3, #176	; 0xb0
 8005142:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005144:	687b      	ldr	r3, [r7, #4]
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_RCC_SetSysClkSource>:
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f023 0203 	bic.w	r2, r3, #3
 800518e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_GetSysClkSource>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <LL_RCC_SetAHBPrescaler>:
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_C2_RCC_SetAHBPrescaler>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_RCC_SetAHB4Prescaler>:
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005220:	f023 020f 	bic.w	r2, r3, #15
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <LL_RCC_SetAPB1Prescaler>:
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <LL_RCC_SetAPB2Prescaler>:
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_RCC_GetAHBPrescaler>:
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800529c:	4618      	mov	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_GetAHB4Prescaler>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_GetAPB1Prescaler>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_RCC_GetAPB2Prescaler>:
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005304:	6013      	str	r3, [r2, #0]
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800531e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005340:	d101      	bne.n	8005346 <LL_RCC_PLL_IsReady+0x18>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <LL_RCC_PLL_IsReady+0x1a>
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005362:	4618      	mov	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800537a:	4618      	mov	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005392:	4618      	mov	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80053a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0303 	and.w	r3, r3, #3
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80053b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c6:	d101      	bne.n	80053cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ec:	d101      	bne.n	80053f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80053fe:	b480      	push	{r7}
 8005400:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005406:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800540a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005412:	d101      	bne.n	8005418 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005436:	d101      	bne.n	800543c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800545a:	d101      	bne.n	8005460 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b08d      	sub	sp, #52	; 0x34
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e363      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 808d 	beq.w	80055a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548c:	f7ff fe8a 	bl	80051a4 <LL_RCC_GetSysClkSource>
 8005490:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005492:	f7ff ff83 	bl	800539c <LL_RCC_PLL_GetMainSource>
 8005496:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_RCC_OscConfig+0x3e>
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d147      	bne.n	8005534 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d144      	bne.n	8005534 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e347      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80054ba:	f7ff fe35 	bl	8005128 <LL_RCC_MSI_GetRange>
 80054be:	4603      	mov	r3, r0
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d914      	bls.n	80054ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fd2f 	bl	8005f2c <RCC_SetFlashLatencyFromMSIRange>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e336      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fe0f 	bl	8005100 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fe33 	bl	8005152 <LL_RCC_MSI_SetCalibTrimming>
 80054ec:	e013      	b.n	8005516 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fe04 	bl	8005100 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fe28 	bl	8005152 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fd10 	bl	8005f2c <RCC_SetFlashLatencyFromMSIRange>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e317      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005516:	f000 fcc9 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 800551a:	4603      	mov	r3, r0
 800551c:	4aa4      	ldr	r2, [pc, #656]	; (80057b0 <HAL_RCC_OscConfig+0x344>)
 800551e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005520:	4ba4      	ldr	r3, [pc, #656]	; (80057b4 <HAL_RCC_OscConfig+0x348>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe f9d9 	bl	80038dc <HAL_InitTick>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d039      	beq.n	80055a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e308      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01e      	beq.n	800557a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800553c:	f7ff fdb1 	bl	80050a2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005540:	f7fe fa1a 	bl	8003978 <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005548:	f7fe fa16 	bl	8003978 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e2f5      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800555a:	f7ff fdc0 	bl	80050de <LL_RCC_MSI_IsReady>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f1      	beq.n	8005548 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fdc9 	bl	8005100 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fded 	bl	8005152 <LL_RCC_MSI_SetCalibTrimming>
 8005578:	e015      	b.n	80055a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800557a:	f7ff fda1 	bl	80050c0 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800557e:	f7fe f9fb 	bl	8003978 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005586:	f7fe f9f7 	bl	8003978 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e2d6      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005598:	f7ff fda1 	bl	80050de <LL_RCC_MSI_IsReady>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <HAL_RCC_OscConfig+0x11a>
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d047      	beq.n	8005642 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b2:	f7ff fdf7 	bl	80051a4 <LL_RCC_GetSysClkSource>
 80055b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b8:	f7ff fef0 	bl	800539c <LL_RCC_PLL_GetMainSource>
 80055bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_OscConfig+0x164>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d108      	bne.n	80055dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d105      	bne.n	80055dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d134      	bne.n	8005642 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e2b4      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d102      	bne.n	80055ec <HAL_RCC_OscConfig+0x180>
 80055e6:	f7ff fbde 	bl	8004da6 <LL_RCC_HSE_Enable>
 80055ea:	e001      	b.n	80055f0 <HAL_RCC_OscConfig+0x184>
 80055ec:	f7ff fbea 	bl	8004dc4 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d012      	beq.n	800561e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fe f9be 	bl	8003978 <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005600:	f7fe f9ba 	bl	8003978 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e299      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005612:	f7ff fbe6 	bl	8004de2 <LL_RCC_HSE_IsReady>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f1      	beq.n	8005600 <HAL_RCC_OscConfig+0x194>
 800561c:	e011      	b.n	8005642 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fe f9ab 	bl	8003978 <HAL_GetTick>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005626:	f7fe f9a7 	bl	8003978 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b64      	cmp	r3, #100	; 0x64
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e286      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005638:	f7ff fbd3 	bl	8004de2 <LL_RCC_HSE_IsReady>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f1      	bne.n	8005626 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d04c      	beq.n	80056e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564e:	f7ff fda9 	bl	80051a4 <LL_RCC_GetSysClkSource>
 8005652:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005654:	f7ff fea2 	bl	800539c <LL_RCC_PLL_GetMainSource>
 8005658:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d005      	beq.n	800566c <HAL_RCC_OscConfig+0x200>
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d10e      	bne.n	8005684 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d10b      	bne.n	8005684 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e266      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fbf2 	bl	8004e66 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005682:	e031      	b.n	80056e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800568c:	f7ff fbbb 	bl	8004e06 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe f972 	bl	8003978 <HAL_GetTick>
 8005694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005698:	f7fe f96e 	bl	8003978 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e24d      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056aa:	f7ff fbca 	bl	8004e42 <LL_RCC_HSI_IsReady>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f1      	beq.n	8005698 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fbd4 	bl	8004e66 <LL_RCC_HSI_SetCalibTrimming>
 80056be:	e013      	b.n	80056e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c0:	f7ff fbb0 	bl	8004e24 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fe f958 	bl	8003978 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056cc:	f7fe f954 	bl	8003978 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e233      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80056de:	f7ff fbb0 	bl	8004e42 <LL_RCC_HSI_IsReady>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f1      	bne.n	80056cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80a3 	beq.w	8005848 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d076      	beq.n	80057f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	d046      	beq.n	80057a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005716:	f7ff fc67 	bl	8004fe8 <LL_RCC_LSI1_IsReady>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d113      	bne.n	8005748 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005720:	f7ff fc40 	bl	8004fa4 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005724:	f7fe f928 	bl	8003978 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800572c:	f7fe f924 	bl	8003978 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e203      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800573e:	f7ff fc53 	bl	8004fe8 <LL_RCC_LSI1_IsReady>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f1      	beq.n	800572c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005748:	f7ff fc60 	bl	800500c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fe f914 	bl	8003978 <HAL_GetTick>
 8005750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005754:	f7fe f910 	bl	8003978 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b03      	cmp	r3, #3
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1ef      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005766:	f7ff fc73 	bl	8005050 <LL_RCC_LSI2_IsReady>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f1      	beq.n	8005754 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fc7d 	bl	8005074 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800577a:	f7ff fc24 	bl	8004fc6 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fe f8fb 	bl	8003978 <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005786:	f7fe f8f7 	bl	8003978 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e1d6      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005798:	f7ff fc26 	bl	8004fe8 <LL_RCC_LSI1_IsReady>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f1      	bne.n	8005786 <HAL_RCC_OscConfig+0x31a>
 80057a2:	e051      	b.n	8005848 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80057a4:	f7ff fbfe 	bl	8004fa4 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe f8e6 	bl	8003978 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057ae:	e00c      	b.n	80057ca <HAL_RCC_OscConfig+0x35e>
 80057b0:	20000018 	.word	0x20000018
 80057b4:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057b8:	f7fe f8de 	bl	8003978 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1bd      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057ca:	f7ff fc0d 	bl	8004fe8 <LL_RCC_LSI1_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f1      	beq.n	80057b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80057d4:	f7ff fc2b 	bl	800502e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057da:	f7fe f8cd 	bl	8003978 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1ac      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057ec:	f7ff fc30 	bl	8005050 <LL_RCC_LSI2_IsReady>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f1      	bne.n	80057da <HAL_RCC_OscConfig+0x36e>
 80057f6:	e027      	b.n	8005848 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80057f8:	f7ff fc19 	bl	800502e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fe f8bc 	bl	8003978 <HAL_GetTick>
 8005800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005804:	f7fe f8b8 	bl	8003978 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b03      	cmp	r3, #3
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e197      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005816:	f7ff fc1b 	bl	8005050 <LL_RCC_LSI2_IsReady>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f1      	bne.n	8005804 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005820:	f7ff fbd1 	bl	8004fc6 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fe f8a8 	bl	8003978 <HAL_GetTick>
 8005828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800582c:	f7fe f8a4 	bl	8003978 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e183      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800583e:	f7ff fbd3 	bl	8004fe8 <LL_RCC_LSI1_IsReady>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f1      	bne.n	800582c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d05b      	beq.n	800590c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005854:	4ba7      	ldr	r3, [pc, #668]	; (8005af4 <HAL_RCC_OscConfig+0x688>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d114      	bne.n	800588a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005860:	f7ff f9f2 	bl	8004c48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005864:	f7fe f888 	bl	8003978 <HAL_GetTick>
 8005868:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586c:	f7fe f884 	bl	8003978 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e163      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587e:	4b9d      	ldr	r3, [pc, #628]	; (8005af4 <HAL_RCC_OscConfig+0x688>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d102      	bne.n	8005898 <HAL_RCC_OscConfig+0x42c>
 8005892:	f7ff fb31 	bl	8004ef8 <LL_RCC_LSE_Enable>
 8005896:	e00c      	b.n	80058b2 <HAL_RCC_OscConfig+0x446>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b05      	cmp	r3, #5
 800589e:	d104      	bne.n	80058aa <HAL_RCC_OscConfig+0x43e>
 80058a0:	f7ff fb4c 	bl	8004f3c <LL_RCC_LSE_EnableBypass>
 80058a4:	f7ff fb28 	bl	8004ef8 <LL_RCC_LSE_Enable>
 80058a8:	e003      	b.n	80058b2 <HAL_RCC_OscConfig+0x446>
 80058aa:	f7ff fb36 	bl	8004f1a <LL_RCC_LSE_Disable>
 80058ae:	f7ff fb56 	bl	8004f5e <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fe f85d 	bl	8003978 <HAL_GetTick>
 80058be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fe f859 	bl	8003978 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e136      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058d8:	f7ff fb52 	bl	8004f80 <LL_RCC_LSE_IsReady>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ef      	beq.n	80058c2 <HAL_RCC_OscConfig+0x456>
 80058e2:	e013      	b.n	800590c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fe f848 	bl	8003978 <HAL_GetTick>
 80058e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fe f844 	bl	8003978 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e121      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005902:	f7ff fb3d 	bl	8004f80 <LL_RCC_LSE_IsReady>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ef      	bne.n	80058ec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d02c      	beq.n	8005972 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d014      	beq.n	800594a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005920:	f7ff fab6 	bl	8004e90 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fe f828 	bl	8003978 <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800592c:	f7fe f824 	bl	8003978 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e103      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800593e:	f7ff fac9 	bl	8004ed4 <LL_RCC_HSI48_IsReady>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f1      	beq.n	800592c <HAL_RCC_OscConfig+0x4c0>
 8005948:	e013      	b.n	8005972 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800594a:	f7ff fab2 	bl	8004eb2 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594e:	f7fe f813 	bl	8003978 <HAL_GetTick>
 8005952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005956:	f7fe f80f 	bl	8003978 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e0ee      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005968:	f7ff fab4 	bl	8004ed4 <LL_RCC_HSI48_IsReady>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f1      	bne.n	8005956 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80e4 	beq.w	8005b44 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800597c:	f7ff fc12 	bl	80051a4 <LL_RCC_GetSysClkSource>
 8005980:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	2b02      	cmp	r3, #2
 8005990:	f040 80b4 	bne.w	8005afc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0203 	and.w	r2, r3, #3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	429a      	cmp	r2, r3
 80059a0:	d123      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d11c      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d114      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d10d      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d05d      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d058      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0a1      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a02:	f7ff fc85 	bl	8005310 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a06:	f7fd ffb7 	bl	8003978 <HAL_GetTick>
 8005a0a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0e:	f7fd ffb3 	bl	8003978 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e092      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ef      	bne.n	8005a0e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <HAL_RCC_OscConfig+0x68c>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a40:	4311      	orrs	r1, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a46:	0212      	lsls	r2, r2, #8
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a4e:	4311      	orrs	r1, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a54:	4311      	orrs	r1, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a64:	f7ff fc45 	bl	80052f2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a78:	f7fd ff7e 	bl	8003978 <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fd ff7a 	bl	8003978 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e059      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ef      	beq.n	8005a80 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa0:	e050      	b.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e04f      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d147      	bne.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ab4:	f7ff fc1d 	bl	80052f2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ac8:	f7fd ff56 	bl	8003978 <HAL_GetTick>
 8005acc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fd ff52 	bl	8003978 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e031      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0ef      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x664>
 8005af0:	e028      	b.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
 8005af2:	bf00      	nop
 8005af4:	58000400 	.word	0x58000400
 8005af8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d01e      	beq.n	8005b40 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b02:	f7ff fc05 	bl	8005310 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b06:	f7fd ff37 	bl	8003978 <HAL_GetTick>
 8005b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0e:	f7fd ff33 	bl	8003978 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e012      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1ef      	bne.n	8005b0e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_OscConfig+0x6e4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60cb      	str	r3, [r1, #12]
 8005b3e:	e001      	b.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3734      	adds	r7, #52	; 0x34
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	eefefffc 	.word	0xeefefffc

08005b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e12d      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b68:	4b98      	ldr	r3, [pc, #608]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d91b      	bls.n	8005bae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	4b95      	ldr	r3, [pc, #596]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f023 0207 	bic.w	r2, r3, #7
 8005b7e:	4993      	ldr	r1, [pc, #588]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b86:	f7fd fef7 	bl	8003978 <HAL_GetTick>
 8005b8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b8e:	f7fd fef3 	bl	8003978 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e111      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba0:	4b8a      	ldr	r3, [pc, #552]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d1ef      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fafc 	bl	80051bc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bc4:	f7fd fed8 	bl	8003978 <HAL_GetTick>
 8005bc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bcc:	f7fd fed4 	bl	8003978 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e0f2      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bde:	f7ff fbe9 	bl	80053b4 <LL_RCC_IsActiveFlag_HPRE>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f1      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d016      	beq.n	8005c22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff faf3 	bl	80051e4 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bfe:	f7fd febb 	bl	8003978 <HAL_GetTick>
 8005c02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c06:	f7fd feb7 	bl	8003978 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0d5      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c18:	f7ff fbde 	bl	80053d8 <LL_RCC_IsActiveFlag_C2HPRE>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f1      	beq.n	8005c06 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff faec 	bl	8005210 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c38:	f7fd fe9e 	bl	8003978 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c40:	f7fd fe9a 	bl	8003978 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0b8      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c52:	f7ff fbd4 	bl	80053fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f1      	beq.n	8005c40 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d016      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fae6 	bl	800523e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c72:	f7fd fe81 	bl	8003978 <HAL_GetTick>
 8005c76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c7a:	f7fd fe7d 	bl	8003978 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e09b      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c8c:	f7ff fbca 	bl	8005424 <LL_RCC_IsActiveFlag_PPRE1>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f1      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d017      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fadc 	bl	8005266 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cae:	f7fd fe63 	bl	8003978 <HAL_GetTick>
 8005cb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cb6:	f7fd fe5f 	bl	8003978 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e07d      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cc8:	f7ff fbbe 	bl	8005448 <LL_RCC_IsActiveFlag_PPRE2>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f1      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d043      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ce6:	f7ff f87c 	bl	8004de2 <LL_RCC_HSE_IsReady>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11e      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e067      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005cfc:	f7ff fb17 	bl	800532e <LL_RCC_PLL_IsReady>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e05c      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005d12:	f7ff f9e4 	bl	80050de <LL_RCC_MSI_IsReady>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e051      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005d20:	f7ff f88f 	bl	8004e42 <LL_RCC_HSI_IsReady>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e04a      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fa22 	bl	800517c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d38:	f7fd fe1e 	bl	8003978 <HAL_GetTick>
 8005d3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d40:	f7fd fe1a 	bl	8003978 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e036      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	f7ff fa25 	bl	80051a4 <LL_RCC_GetSysClkSource>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1ec      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d66:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d21b      	bcs.n	8005dac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d74:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 0207 	bic.w	r2, r3, #7
 8005d7c:	4913      	ldr	r1, [pc, #76]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d84:	f7fd fdf8 	bl	8003978 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d8c:	f7fd fdf4 	bl	8003978 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e012      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d1ef      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005dac:	f000 f87e 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4a07      	ldr	r2, [pc, #28]	; (8005dd0 <HAL_RCC_ClockConfig+0x27c>)
 8005db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005db6:	f7fd fdeb 	bl	8003990 <HAL_GetTickPrio>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fd fd8d 	bl	80038dc <HAL_InitTick>
 8005dc2:	4603      	mov	r3, r0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	58004000 	.word	0x58004000
 8005dd0:	20000018 	.word	0x20000018

08005dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dda:	f7ff f9e3 	bl	80051a4 <LL_RCC_GetSysClkSource>
 8005dde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005de6:	f7ff f99f 	bl	8005128 <LL_RCC_MSI_GetRange>
 8005dea:	4603      	mov	r3, r0
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e04b      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d102      	bne.n	8005e08 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e02:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e045      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d10a      	bne.n	8005e24 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e0e:	f7fe ffb8 	bl	8004d82 <LL_RCC_HSE_IsEnabledDiv2>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d102      	bne.n	8005e1e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e18:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e03a      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e1e:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e037      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e24:	f7ff faba 	bl	800539c <LL_RCC_PLL_GetMainSource>
 8005e28:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d003      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x64>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d003      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0x6a>
 8005e36:	e00d      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e38:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e3a:	60bb      	str	r3, [r7, #8]
        break;
 8005e3c:	e015      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e3e:	f7fe ffa0 	bl	8004d82 <LL_RCC_HSE_IsEnabledDiv2>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d102      	bne.n	8005e4e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e48:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e4a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e4c:	e00d      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005e4e:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e50:	60bb      	str	r3, [r7, #8]
        break;
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e54:	f7ff f968 	bl	8005128 <LL_RCC_MSI_GetRange>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	4a0f      	ldr	r2, [pc, #60]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	60bb      	str	r3, [r7, #8]
        break;
 8005e68:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005e6a:	f7ff fa72 	bl	8005352 <LL_RCC_PLL_GetN>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	fb03 f402 	mul.w	r4, r3, r2
 8005e76:	f7ff fa85 	bl	8005384 <LL_RCC_PLL_GetDivider>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	091b      	lsrs	r3, r3, #4
 8005e7e:	3301      	adds	r3, #1
 8005e80:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e84:	f7ff fa72 	bl	800536c <LL_RCC_PLL_GetR>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	0f5b      	lsrs	r3, r3, #29
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e92:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005e94:	68fb      	ldr	r3, [r7, #12]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	0800de84 	.word	0x0800de84
 8005ea4:	00f42400 	.word	0x00f42400
 8005ea8:	01e84800 	.word	0x01e84800

08005eac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b598      	push	{r3, r4, r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005eb0:	f7ff ff90 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	f7ff f9ea 	bl	800528e <LL_RCC_GetAHBPrescaler>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	4a03      	ldr	r2, [pc, #12]	; (8005ed0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd98      	pop	{r3, r4, r7, pc}
 8005ed0:	0800de24 	.word	0x0800de24

08005ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed4:	b598      	push	{r3, r4, r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ed8:	f7ff ffe8 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005edc:	4604      	mov	r4, r0
 8005ede:	f7ff f9f0 	bl	80052c2 <LL_RCC_GetAPB1Prescaler>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	4a04      	ldr	r2, [pc, #16]	; (8005efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	bd98      	pop	{r3, r4, r7, pc}
 8005efc:	0800de64 	.word	0x0800de64

08005f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f00:	b598      	push	{r3, r4, r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005f04:	f7ff ffd2 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	f7ff f9e6 	bl	80052da <LL_RCC_GetAPB2Prescaler>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	0adb      	lsrs	r3, r3, #11
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	4a04      	ldr	r2, [pc, #16]	; (8005f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd98      	pop	{r3, r4, r7, pc}
 8005f28:	0800de64 	.word	0x0800de64

08005f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2bb0      	cmp	r3, #176	; 0xb0
 8005f38:	d903      	bls.n	8005f42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e007      	b.n	8005f52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	4a11      	ldr	r2, [pc, #68]	; (8005f90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005f52:	f7ff f9a8 	bl	80052a6 <LL_RCC_GetAHB4Prescaler>
 8005f56:	4603      	mov	r3, r0
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	4a0d      	ldr	r2, [pc, #52]	; (8005f94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	0c9c      	lsrs	r4, r3, #18
 8005f76:	f7fe febf 	bl	8004cf8 <HAL_PWREx_GetVoltageRange>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 f80c 	bl	8005f9c <RCC_SetFlashLatency>
 8005f84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd90      	pop	{r4, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	0800de84 	.word	0x0800de84
 8005f94:	0800de24 	.word	0x0800de24
 8005f98:	431bde83 	.word	0x431bde83

08005f9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b093      	sub	sp, #76	; 0x4c
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005fa6:	4b37      	ldr	r3, [pc, #220]	; (8006084 <RCC_SetFlashLatency+0xe8>)
 8005fa8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005fb2:	4a35      	ldr	r2, [pc, #212]	; (8006088 <RCC_SetFlashLatency+0xec>)
 8005fb4:	f107 031c 	add.w	r3, r7, #28
 8005fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005fbe:	4b33      	ldr	r3, [pc, #204]	; (800608c <RCC_SetFlashLatency+0xf0>)
 8005fc0:	f107 040c 	add.w	r4, r7, #12
 8005fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005fca:	2300      	movs	r3, #0
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd4:	d11a      	bne.n	800600c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fda:	e013      	b.n	8006004 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	3348      	adds	r3, #72	; 0x48
 8005fe2:	443b      	add	r3, r7
 8005fe4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d807      	bhi.n	8005ffe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	3348      	adds	r3, #72	; 0x48
 8005ff4:	443b      	add	r3, r7
 8005ff6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ffa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005ffc:	e020      	b.n	8006040 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006000:	3301      	adds	r3, #1
 8006002:	643b      	str	r3, [r7, #64]	; 0x40
 8006004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006006:	2b03      	cmp	r3, #3
 8006008:	d9e8      	bls.n	8005fdc <RCC_SetFlashLatency+0x40>
 800600a:	e019      	b.n	8006040 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800600c:	2300      	movs	r3, #0
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006010:	e013      	b.n	800603a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	3348      	adds	r3, #72	; 0x48
 8006018:	443b      	add	r3, r7
 800601a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d807      	bhi.n	8006034 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	3348      	adds	r3, #72	; 0x48
 800602a:	443b      	add	r3, r7
 800602c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006030:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006032:	e005      	b.n	8006040 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006036:	3301      	adds	r3, #1
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	2b02      	cmp	r3, #2
 800603e:	d9e8      	bls.n	8006012 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006040:	4b13      	ldr	r3, [pc, #76]	; (8006090 <RCC_SetFlashLatency+0xf4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 0207 	bic.w	r2, r3, #7
 8006048:	4911      	ldr	r1, [pc, #68]	; (8006090 <RCC_SetFlashLatency+0xf4>)
 800604a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006050:	f7fd fc92 	bl	8003978 <HAL_GetTick>
 8006054:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006056:	e008      	b.n	800606a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006058:	f7fd fc8e 	bl	8003978 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e007      	b.n	800607a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <RCC_SetFlashLatency+0xf4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006074:	429a      	cmp	r2, r3
 8006076:	d1ef      	bne.n	8006058 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	374c      	adds	r7, #76	; 0x4c
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	0800ddf8 	.word	0x0800ddf8
 8006088:	0800de08 	.word	0x0800de08
 800608c:	0800de14 	.word	0x0800de14
 8006090:	58004000 	.word	0x58004000

08006094 <LL_RCC_LSE_IsEnabled>:
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <LL_RCC_LSE_IsEnabled+0x18>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <LL_RCC_LSE_IsEnabled+0x1a>
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_RCC_LSE_IsReady>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d101      	bne.n	80060d0 <LL_RCC_LSE_IsReady+0x18>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <LL_RCC_LSE_IsReady+0x1a>
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_SetRFWKPClockSource>:
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LL_RCC_SetSMPSClockSource>:
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f023 0203 	bic.w	r2, r3, #3
 800611a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4313      	orrs	r3, r2
 8006122:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <LL_RCC_SetSMPSPrescaler>:
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4313      	orrs	r3, r2
 800614a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_SetUSARTClockSource>:
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006168:	f023 0203 	bic.w	r2, r3, #3
 800616c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_RCC_SetLPUARTClockSource>:
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <LL_RCC_SetI2CClockSource>:
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	091b      	lsrs	r3, r3, #4
 80061c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061c8:	43db      	mvns	r3, r3
 80061ca:	401a      	ands	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_RCC_SetLPTIMClockSource>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_RCC_SetSAIClockSource>:
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <LL_RCC_SetRNGClockSource>:
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800625e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <LL_RCC_SetCLK48ClockSource>:
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800628a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_RCC_SetUSBClockSource>:
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff ffe3 	bl	8006276 <LL_RCC_SetCLK48ClockSource>
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <LL_RCC_SetADCClockSource>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80062c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_RCC_SetRTCClockSource>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <LL_RCC_GetRTCClockSource>:
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <LL_RCC_ForceBackupDomainReset>:
{
 800632a:	b480      	push	{r7}
 800632c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800632e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800633a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800633e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006342:	bf00      	nop
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_RCC_ReleaseBackupDomainReset>:
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800635c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <LL_RCC_PLLSAI1_Enable>:
{
 800636e:	b480      	push	{r7}
 8006370:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800637c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006380:	6013      	str	r3, [r2, #0]
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_RCC_PLLSAI1_Disable>:
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800639a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800639e:	6013      	str	r3, [r2, #0]
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_RCC_PLLSAI1_IsReady>:
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063bc:	d101      	bne.n	80063c2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b088      	sub	sp, #32
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80063d6:	2300      	movs	r3, #0
 80063d8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063da:	2300      	movs	r3, #0
 80063dc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d034      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063f2:	d021      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80063f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063f8:	d81b      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063fe:	d01d      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006400:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006404:	d815      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800640a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800640e:	d110      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800641a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006420:	e00d      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f947 	bl	80066ba <RCCEx_PLLSAI1_ConfigNP>
 800642c:	4603      	mov	r3, r0
 800642e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006430:	e005      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	77fb      	strb	r3, [r7, #31]
        break;
 8006436:	e002      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006438:	bf00      	nop
 800643a:	e000      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800643c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643e:	7ffb      	ldrb	r3, [r7, #31]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fee8 	bl	800621e <LL_RCC_SetSAIClockSource>
 800644e:	e001      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	7ffb      	ldrb	r3, [r7, #31]
 8006452:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645c:	2b00      	cmp	r3, #0
 800645e:	d046      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006460:	f7ff ff56 	bl	8006310 <LL_RCC_GetRTCClockSource>
 8006464:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	d03c      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006470:	f7fe fbea 	bl	8004c48 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ff30 	bl	80062e4 <LL_RCC_SetRTCClockSource>
 8006484:	e02e      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006490:	f7ff ff4b 	bl	800632a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006494:	f7ff ff5a 	bl	800634c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80064b0:	f7ff fdf0 	bl	8006094 <LL_RCC_LSE_IsEnabled>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d114      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ba:	f7fd fa5d 	bl	8003978 <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80064c0:	e00b      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c2:	f7fd fa59 	bl	8003978 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d902      	bls.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	77fb      	strb	r3, [r7, #31]
              break;
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80064da:	f7ff fded 	bl	80060b8 <LL_RCC_LSE_IsReady>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d1ee      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80064e4:	7ffb      	ldrb	r3, [r7, #31]
 80064e6:	77bb      	strb	r3, [r7, #30]
 80064e8:	e001      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	7ffb      	ldrb	r3, [r7, #31]
 80064ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fe2a 	bl	8006158 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fe35 	bl	8006184 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fe5d 	bl	80061ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fe52 	bl	80061ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fe2a 	bl	80061b0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fe1f 	bl	80061b0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d022      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fe8d 	bl	80062a2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006590:	d107      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800659c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065aa:	d10b      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 f8dd 	bl	8006770 <RCCEx_PLLSAI1_ConfigNQ>
 80065b6:	4603      	mov	r3, r0
 80065b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80065c0:	7ffb      	ldrb	r3, [r7, #31]
 80065c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d02b      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d8:	d008      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fe2a 	bl	800624a <LL_RCC_SetRNGClockSource>
 80065f6:	e00a      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x240>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	2000      	movs	r0, #0
 8006604:	f7ff fe21 	bl	800624a <LL_RCC_SetRNGClockSource>
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fe34 	bl	8006276 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006616:	d107      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006626:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006630:	2b00      	cmp	r3, #0
 8006632:	d022      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fe3d 	bl	80062b8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006656:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006660:	d10b      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f8dd 	bl	8006826 <RCCEx_PLLSAI1_ConfigNR>
 800666c:	4603      	mov	r3, r0
 800666e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006670:	7ffb      	ldrb	r3, [r7, #31]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006676:	7ffb      	ldrb	r3, [r7, #31]
 8006678:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fd26 	bl	80060dc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fd45 	bl	8006130 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fd2c 	bl	8006108 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80066b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066c6:	f7ff fe61 	bl	800638c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066ca:	f7fd f955 	bl	8003978 <HAL_GetTick>
 80066ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066d0:	e009      	b.n	80066e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d2:	f7fd f951 	bl	8003978 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d902      	bls.n	80066e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e004      	b.n	80066f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066e6:	f7ff fe60 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1f0      	bne.n	80066d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d137      	bne.n	8006766 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670a:	4313      	orrs	r3, r2
 800670c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800670e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006720:	4313      	orrs	r3, r2
 8006722:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006724:	f7ff fe23 	bl	800636e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006728:	f7fd f926 	bl	8003978 <HAL_GetTick>
 800672c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800672e:	e009      	b.n	8006744 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006730:	f7fd f922 	bl	8003978 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d902      	bls.n	8006744 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	73fb      	strb	r3, [r7, #15]
        break;
 8006742:	e004      	b.n	800674e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006744:	f7ff fe31 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 8006748:	4603      	mov	r3, r0
 800674a:	2b01      	cmp	r3, #1
 800674c:	d1f0      	bne.n	8006730 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006762:	4313      	orrs	r3, r2
 8006764:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800677c:	f7ff fe06 	bl	800638c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006780:	f7fd f8fa 	bl	8003978 <HAL_GetTick>
 8006784:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006786:	e009      	b.n	800679c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006788:	f7fd f8f6 	bl	8003978 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d902      	bls.n	800679c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	73fb      	strb	r3, [r7, #15]
      break;
 800679a:	e004      	b.n	80067a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800679c:	f7ff fe05 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1f0      	bne.n	8006788 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d137      	bne.n	800681c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80067ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c0:	4313      	orrs	r3, r2
 80067c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80067c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067d6:	4313      	orrs	r3, r2
 80067d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067da:	f7ff fdc8 	bl	800636e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fd f8cb 	bl	8003978 <HAL_GetTick>
 80067e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067e4:	e009      	b.n	80067fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067e6:	f7fd f8c7 	bl	8003978 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d902      	bls.n	80067fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	73fb      	strb	r3, [r7, #15]
        break;
 80067f8:	e004      	b.n	8006804 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067fa:	f7ff fdd6 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d1f0      	bne.n	80067e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d108      	bne.n	800681c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800680a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006818:	4313      	orrs	r3, r2
 800681a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006832:	f7ff fdab 	bl	800638c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006836:	f7fd f89f 	bl	8003978 <HAL_GetTick>
 800683a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800683c:	e009      	b.n	8006852 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800683e:	f7fd f89b 	bl	8003978 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d902      	bls.n	8006852 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	73fb      	strb	r3, [r7, #15]
      break;
 8006850:	e004      	b.n	800685c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006852:	f7ff fdaa 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f0      	bne.n	800683e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d137      	bne.n	80068d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006876:	4313      	orrs	r3, r2
 8006878:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800687a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800688c:	4313      	orrs	r3, r2
 800688e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006890:	f7ff fd6d 	bl	800636e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006894:	f7fd f870 	bl	8003978 <HAL_GetTick>
 8006898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800689a:	e009      	b.n	80068b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800689c:	f7fd f86c 	bl	8003978 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d902      	bls.n	80068b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	73fb      	strb	r3, [r7, #15]
        break;
 80068ae:	e004      	b.n	80068ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068b0:	f7ff fd7b 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d1f0      	bne.n	800689c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d108      	bne.n	80068d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80068c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068ce:	4313      	orrs	r3, r2
 80068d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e09f      	b.n	8006a2e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fc fd32 	bl	800336c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006910:	4b49      	ldr	r3, [pc, #292]	; (8006a38 <HAL_RTC_Init+0x15c>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b10      	cmp	r3, #16
 800691a:	d07e      	beq.n	8006a1a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	22ca      	movs	r2, #202	; 0xca
 8006922:	625a      	str	r2, [r3, #36]	; 0x24
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2253      	movs	r2, #83	; 0x53
 800692a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8ab 	bl	8006a88 <RTC_EnterInitMode>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	22ff      	movs	r2, #255	; 0xff
 800693e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
 800694c:	e067      	b.n	8006a1e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800695c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006960:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6899      	ldr	r1, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	68d2      	ldr	r2, [r2, #12]
 8006988:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6919      	ldr	r1, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	041a      	lsls	r2, r3, #16
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ac:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0203 	bic.w	r2, r2, #3
 80069bc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d113      	bne.n	8006a0c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f829 	bl	8006a3c <HAL_RTC_WaitForSynchro>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2204      	movs	r2, #4
 80069fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e010      	b.n	8006a2e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e001      	b.n	8006a1e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40002800 	.word	0x40002800

08006a3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a54:	f7fc ff90 	bl	8003978 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a5a:	e009      	b.n	8006a70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a5c:	f7fc ff8c 	bl	8003978 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a6a:	d901      	bls.n	8006a70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e007      	b.n	8006a80 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d119      	bne.n	8006ad2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006aa8:	f7fc ff66 	bl	8003978 <HAL_GetTick>
 8006aac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006aae:	e009      	b.n	8006ac4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ab0:	f7fc ff62 	bl	8003978 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006abe:	d901      	bls.n	8006ac4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e007      	b.n	8006ad4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0ee      	beq.n	8006ab0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e0a8      	b.n	8006c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	22ca      	movs	r2, #202	; 0xca
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2253      	movs	r2, #83	; 0x53
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d020      	beq.n	8006b66 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006b24:	f7fc ff28 	bl	8003978 <HAL_GetTick>
 8006b28:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006b2a:	e015      	b.n	8006b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b2c:	f7fc ff24 	bl	8003978 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b3a:	d90d      	bls.n	8006b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	22ff      	movs	r2, #255	; 0xff
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2203      	movs	r2, #3
 8006b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e077      	b.n	8006c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e2      	bne.n	8006b2c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b74:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006b86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b88:	f7fc fef6 	bl	8003978 <HAL_GetTick>
 8006b8c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006b8e:	e015      	b.n	8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b90:	f7fc fef2 	bl	8003978 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b9e:	d90d      	bls.n	8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	22ff      	movs	r2, #255	; 0xff
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2203      	movs	r2, #3
 8006bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e045      	b.n	8006c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0e2      	beq.n	8006b90 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0207 	bic.w	r2, r2, #7
 8006be0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6899      	ldr	r1, [r3, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006bf2:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf8:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006bfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bfe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006c02:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a12      	ldr	r2, [pc, #72]	; (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c2c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	22ff      	movs	r2, #255	; 0xff
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	58000800 	.word	0x58000800

08006c54 <LL_RCC_GetUSARTClockSource>:
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4013      	ands	r3, r2
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <LL_RCC_GetLPUARTClockSource>:
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4013      	ands	r3, r2
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e042      	b.n	8006d2c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fc fa65 	bl	8003188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fcd0 	bl	800767c <UART_SetConfig>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e022      	b.n	8006d2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 feec 	bl	8007acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 ff73 	bl	8007c10 <UART_CheckIdleState>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b091      	sub	sp, #68	; 0x44
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d178      	bne.n	8006e3e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_UART_Transmit_IT+0x24>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e071      	b.n	8006e40 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	88fa      	ldrh	r2, [r7, #6]
 8006d66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2221      	movs	r2, #33	; 0x21
 8006d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d90:	d12a      	bne.n	8006de8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9a:	d107      	bne.n	8006dac <HAL_UART_Transmit_IT+0x78>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a29      	ldr	r2, [pc, #164]	; (8006e4c <HAL_UART_Transmit_IT+0x118>)
 8006da8:	679a      	str	r2, [r3, #120]	; 0x78
 8006daa:	e002      	b.n	8006db2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4a28      	ldr	r2, [pc, #160]	; (8006e50 <HAL_UART_Transmit_IT+0x11c>)
 8006db0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd2:	637a      	str	r2, [r7, #52]	; 0x34
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <HAL_UART_Transmit_IT+0x7e>
 8006de6:	e028      	b.n	8006e3a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d107      	bne.n	8006e02 <HAL_UART_Transmit_IT+0xce>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <HAL_UART_Transmit_IT+0x120>)
 8006dfe:	679a      	str	r2, [r3, #120]	; 0x78
 8006e00:	e002      	b.n	8006e08 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <HAL_UART_Transmit_IT+0x124>)
 8006e06:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	613b      	str	r3, [r7, #16]
   return(result);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e26:	623b      	str	r3, [r7, #32]
 8006e28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	69f9      	ldr	r1, [r7, #28]
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e6      	bne.n	8006e08 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e000      	b.n	8006e40 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3744      	adds	r7, #68	; 0x44
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	0800858b 	.word	0x0800858b
 8006e50:	080084ab 	.word	0x080084ab
 8006e54:	080083e9 	.word	0x080083e9
 8006e58:	08008331 	.word	0x08008331

08006e5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d137      	bne.n	8006ee4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <HAL_UART_Receive_IT+0x24>
 8006e7a:	88fb      	ldrh	r3, [r7, #6]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e030      	b.n	8006ee6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <HAL_UART_Receive_IT+0x94>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d01f      	beq.n	8006ed4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d018      	beq.n	8006ed4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	623b      	str	r3, [r7, #32]
 8006ec2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	69f9      	ldr	r1, [r7, #28]
 8006ec6:	6a3a      	ldr	r2, [r7, #32]
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e6      	bne.n	8006ea2 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 ffae 	bl	8007e3c <UART_Start_Receive_IT>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	e000      	b.n	8006ee6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3728      	adds	r7, #40	; 0x28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40008000 	.word	0x40008000

08006ef4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d167      	bne.n	8006fdc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_UART_Transmit_DMA+0x24>
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e060      	b.n	8006fde <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	88fa      	ldrh	r2, [r7, #6]
 8006f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2221      	movs	r2, #33	; 0x21
 8006f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d028      	beq.n	8006f9c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4e:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <HAL_UART_Transmit_DMA+0xf4>)
 8006f50:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f56:	4a25      	ldr	r2, [pc, #148]	; (8006fec <HAL_UART_Transmit_DMA+0xf8>)
 8006f58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f5e:	4a24      	ldr	r2, [pc, #144]	; (8006ff0 <HAL_UART_Transmit_DMA+0xfc>)
 8006f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f66:	2200      	movs	r2, #0
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	4619      	mov	r1, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3328      	adds	r3, #40	; 0x28
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	f7fc ff75 	bl	8003e6c <HAL_DMA_Start_IT>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d009      	beq.n	8006f9c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2210      	movs	r2, #16
 8006f8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e020      	b.n	8006fde <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2240      	movs	r2, #64	; 0x40
 8006fa2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc4:	623a      	str	r2, [r7, #32]
 8006fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	69f9      	ldr	r1, [r7, #28]
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e5      	bne.n	8006fa4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3728      	adds	r7, #40	; 0x28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	080081cf 	.word	0x080081cf
 8006fec:	08008269 	.word	0x08008269
 8006ff0:	08008285 	.word	0x08008285

08006ff4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b0ba      	sub	sp, #232	; 0xe8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800701a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800701e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007022:	4013      	ands	r3, r2
 8007024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11b      	bne.n	8007068 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d015      	beq.n	8007068 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800703c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d105      	bne.n	8007054 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 82e3 	beq.w	8007624 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
      }
      return;
 8007066:	e2dd      	b.n	8007624 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8123 	beq.w	80072b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007072:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007076:	4b8d      	ldr	r3, [pc, #564]	; (80072ac <HAL_UART_IRQHandler+0x2b8>)
 8007078:	4013      	ands	r3, r2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800707e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007082:	4b8b      	ldr	r3, [pc, #556]	; (80072b0 <HAL_UART_IRQHandler+0x2bc>)
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8116 	beq.w	80072b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d011      	beq.n	80070bc <HAL_UART_IRQHandler+0xc8>
 8007098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b2:	f043 0201 	orr.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d011      	beq.n	80070ec <HAL_UART_IRQHandler+0xf8>
 80070c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2202      	movs	r2, #2
 80070da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	f043 0204 	orr.w	r2, r3, #4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d011      	beq.n	800711c <HAL_UART_IRQHandler+0x128>
 80070f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2204      	movs	r2, #4
 800710a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f043 0202 	orr.w	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d017      	beq.n	8007158 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007134:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007138:	4b5c      	ldr	r3, [pc, #368]	; (80072ac <HAL_UART_IRQHandler+0x2b8>)
 800713a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2208      	movs	r2, #8
 8007146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714e:	f043 0208 	orr.w	r2, r3, #8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007160:	2b00      	cmp	r3, #0
 8007162:	d012      	beq.n	800718a <HAL_UART_IRQHandler+0x196>
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00c      	beq.n	800718a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	f043 0220 	orr.w	r2, r3, #32
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8249 	beq.w	8007628 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d013      	beq.n	80071ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d005      	beq.n	80071ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d054      	beq.n	8007298 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 ff87 	bl	8008102 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d146      	bne.n	8007290 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800721c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800722e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800723a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d9      	bne.n	8007202 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007254:	2b00      	cmp	r3, #0
 8007256:	d017      	beq.n	8007288 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725e:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <HAL_UART_IRQHandler+0x2c0>)
 8007260:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007268:	4618      	mov	r0, r3
 800726a:	f7fc fed9 	bl	8004020 <HAL_DMA_Abort_IT>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d019      	beq.n	80072a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007282:	4610      	mov	r0, r2
 8007284:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007286:	e00f      	b.n	80072a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9e1 	bl	8007650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728e:	e00b      	b.n	80072a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f9dd 	bl	8007650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007296:	e007      	b.n	80072a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f9d9 	bl	8007650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80072a6:	e1bf      	b.n	8007628 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	bf00      	nop
    return;
 80072aa:	e1bd      	b.n	8007628 <HAL_UART_IRQHandler+0x634>
 80072ac:	10000001 	.word	0x10000001
 80072b0:	04000120 	.word	0x04000120
 80072b4:	08008305 	.word	0x08008305

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	f040 8153 	bne.w	8007568 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 814c 	beq.w	8007568 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 8145 	beq.w	8007568 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2210      	movs	r2, #16
 80072e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	f040 80bb 	bne.w	800746c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 818f 	beq.w	800762c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007314:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007318:	429a      	cmp	r2, r3
 800731a:	f080 8187 	bcs.w	800762c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 8087 	bne.w	800744a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800736a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800737e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1da      	bne.n	800733c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e1      	bne.n	8007386 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e3      	bne.n	80073c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007418:	f023 0310 	bic.w	r3, r3, #16
 800741c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800742a:	65bb      	str	r3, [r7, #88]	; 0x58
 800742c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e4      	bne.n	8007408 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007444:	4618      	mov	r0, r3
 8007446:	f7fc fd8c 	bl	8003f62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800745c:	b29b      	uxth	r3, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	b29b      	uxth	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f8fd 	bl	8007664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800746a:	e0df      	b.n	800762c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007478:	b29b      	uxth	r3, r3
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80d1 	beq.w	8007630 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800748e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80cc 	beq.w	8007630 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44
 80074bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e4      	bne.n	8007498 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3308      	adds	r3, #8
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	623b      	str	r3, [r7, #32]
   return(result);
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074f6:	633a      	str	r2, [r7, #48]	; 0x30
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e1      	bne.n	80074ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	60fb      	str	r3, [r7, #12]
   return(result);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0310 	bic.w	r3, r3, #16
 8007532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	69b9      	ldr	r1, [r7, #24]
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	617b      	str	r3, [r7, #20]
   return(result);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e4      	bne.n	800751e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800755a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f87f 	bl	8007664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007566:	e063      	b.n	8007630 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00e      	beq.n	8007592 <HAL_UART_IRQHandler+0x59e>
 8007574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007588:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 fdba 	bl	8009104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007590:	e051      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d014      	beq.n	80075c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800759e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d008      	beq.n	80075c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d03a      	beq.n	8007634 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
    }
    return;
 80075c6:	e035      	b.n	8007634 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <HAL_UART_IRQHandler+0x5f4>
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f847 	bl	8008674 <UART_EndTransmit_IT>
    return;
 80075e6:	e026      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d009      	beq.n	8007608 <HAL_UART_IRQHandler+0x614>
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fd93 	bl	800912c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007606:	e016      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <HAL_UART_IRQHandler+0x642>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	2b00      	cmp	r3, #0
 800761a:	da0c      	bge.n	8007636 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 fd7b 	bl	8009118 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007622:	e008      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
      return;
 8007624:	bf00      	nop
 8007626:	e006      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
    return;
 8007628:	bf00      	nop
 800762a:	e004      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
      return;
 800762c:	bf00      	nop
 800762e:	e002      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
      return;
 8007630:	bf00      	nop
 8007632:	e000      	b.n	8007636 <HAL_UART_IRQHandler+0x642>
    return;
 8007634:	bf00      	nop
  }
}
 8007636:	37e8      	adds	r7, #232	; 0xe8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800767c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007680:	b08c      	sub	sp, #48	; 0x30
 8007682:	af00      	add	r7, sp, #0
 8007684:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	431a      	orrs	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	431a      	orrs	r2, r3
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4baf      	ldr	r3, [pc, #700]	; (8007968 <UART_SetConfig+0x2ec>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4aa4      	ldr	r2, [pc, #656]	; (800796c <UART_SetConfig+0x2f0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e4:	4313      	orrs	r3, r2
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80076f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076fc:	430b      	orrs	r3, r1
 80076fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	f023 010f 	bic.w	r1, r3, #15
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a95      	ldr	r2, [pc, #596]	; (8007970 <UART_SetConfig+0x2f4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d125      	bne.n	800776c <UART_SetConfig+0xf0>
 8007720:	2003      	movs	r0, #3
 8007722:	f7ff fa97 	bl	8006c54 <LL_RCC_GetUSARTClockSource>
 8007726:	4603      	mov	r3, r0
 8007728:	2b03      	cmp	r3, #3
 800772a:	d81b      	bhi.n	8007764 <UART_SetConfig+0xe8>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <UART_SetConfig+0xb8>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	08007745 	.word	0x08007745
 8007738:	08007755 	.word	0x08007755
 800773c:	0800774d 	.word	0x0800774d
 8007740:	0800775d 	.word	0x0800775d
 8007744:	2301      	movs	r3, #1
 8007746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800774a:	e042      	b.n	80077d2 <UART_SetConfig+0x156>
 800774c:	2302      	movs	r3, #2
 800774e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007752:	e03e      	b.n	80077d2 <UART_SetConfig+0x156>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800775a:	e03a      	b.n	80077d2 <UART_SetConfig+0x156>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007762:	e036      	b.n	80077d2 <UART_SetConfig+0x156>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776a:	e032      	b.n	80077d2 <UART_SetConfig+0x156>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a7e      	ldr	r2, [pc, #504]	; (800796c <UART_SetConfig+0x2f0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d12a      	bne.n	80077cc <UART_SetConfig+0x150>
 8007776:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800777a:	f7ff fa7b 	bl	8006c74 <LL_RCC_GetLPUARTClockSource>
 800777e:	4603      	mov	r3, r0
 8007780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007784:	d01a      	beq.n	80077bc <UART_SetConfig+0x140>
 8007786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800778a:	d81b      	bhi.n	80077c4 <UART_SetConfig+0x148>
 800778c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007790:	d00c      	beq.n	80077ac <UART_SetConfig+0x130>
 8007792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007796:	d815      	bhi.n	80077c4 <UART_SetConfig+0x148>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <UART_SetConfig+0x128>
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a0:	d008      	beq.n	80077b4 <UART_SetConfig+0x138>
 80077a2:	e00f      	b.n	80077c4 <UART_SetConfig+0x148>
 80077a4:	2300      	movs	r3, #0
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077aa:	e012      	b.n	80077d2 <UART_SetConfig+0x156>
 80077ac:	2302      	movs	r3, #2
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077b2:	e00e      	b.n	80077d2 <UART_SetConfig+0x156>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ba:	e00a      	b.n	80077d2 <UART_SetConfig+0x156>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077c2:	e006      	b.n	80077d2 <UART_SetConfig+0x156>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ca:	e002      	b.n	80077d2 <UART_SetConfig+0x156>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a65      	ldr	r2, [pc, #404]	; (800796c <UART_SetConfig+0x2f0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	f040 8097 	bne.w	800790c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d823      	bhi.n	800782e <UART_SetConfig+0x1b2>
 80077e6:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <UART_SetConfig+0x170>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007811 	.word	0x08007811
 80077f0:	0800782f 	.word	0x0800782f
 80077f4:	08007819 	.word	0x08007819
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	0800781f 	.word	0x0800781f
 8007800:	0800782f 	.word	0x0800782f
 8007804:	0800782f 	.word	0x0800782f
 8007808:	0800782f 	.word	0x0800782f
 800780c:	08007827 	.word	0x08007827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007810:	f7fe fb60 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 8007814:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007816:	e010      	b.n	800783a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007818:	4b56      	ldr	r3, [pc, #344]	; (8007974 <UART_SetConfig+0x2f8>)
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800781c:	e00d      	b.n	800783a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800781e:	f7fe fad9 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8007822:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007824:	e009      	b.n	800783a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007826:	f248 0306 	movw	r3, #32774	; 0x8006
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800782c:	e005      	b.n	800783a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 812b 	beq.w	8007a98 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	4a4c      	ldr	r2, [pc, #304]	; (8007978 <UART_SetConfig+0x2fc>)
 8007848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784c:	461a      	mov	r2, r3
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	fbb3 f3f2 	udiv	r3, r3, r2
 8007854:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	4413      	add	r3, r2
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	429a      	cmp	r2, r3
 8007864:	d305      	bcc.n	8007872 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	429a      	cmp	r2, r3
 8007870:	d903      	bls.n	800787a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007878:	e10e      	b.n	8007a98 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	2200      	movs	r2, #0
 800787e:	60bb      	str	r3, [r7, #8]
 8007880:	60fa      	str	r2, [r7, #12]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	4a3c      	ldr	r2, [pc, #240]	; (8007978 <UART_SetConfig+0x2fc>)
 8007888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800788c:	b29b      	uxth	r3, r3
 800788e:	2200      	movs	r2, #0
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007898:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800789c:	f7f8 fcd0 	bl	8000240 <__aeabi_uldivmod>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4610      	mov	r0, r2
 80078a6:	4619      	mov	r1, r3
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	f04f 0300 	mov.w	r3, #0
 80078b0:	020b      	lsls	r3, r1, #8
 80078b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078b6:	0202      	lsls	r2, r0, #8
 80078b8:	6979      	ldr	r1, [r7, #20]
 80078ba:	6849      	ldr	r1, [r1, #4]
 80078bc:	0849      	lsrs	r1, r1, #1
 80078be:	2000      	movs	r0, #0
 80078c0:	460c      	mov	r4, r1
 80078c2:	4605      	mov	r5, r0
 80078c4:	eb12 0804 	adds.w	r8, r2, r4
 80078c8:	eb43 0905 	adc.w	r9, r3, r5
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	469a      	mov	sl, r3
 80078d4:	4693      	mov	fp, r2
 80078d6:	4652      	mov	r2, sl
 80078d8:	465b      	mov	r3, fp
 80078da:	4640      	mov	r0, r8
 80078dc:	4649      	mov	r1, r9
 80078de:	f7f8 fcaf 	bl	8000240 <__aeabi_uldivmod>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4613      	mov	r3, r2
 80078e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f0:	d308      	bcc.n	8007904 <UART_SetConfig+0x288>
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078f8:	d204      	bcs.n	8007904 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6a3a      	ldr	r2, [r7, #32]
 8007900:	60da      	str	r2, [r3, #12]
 8007902:	e0c9      	b.n	8007a98 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800790a:	e0c5      	b.n	8007a98 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007914:	d16d      	bne.n	80079f2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007916:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800791a:	3b01      	subs	r3, #1
 800791c:	2b07      	cmp	r3, #7
 800791e:	d82d      	bhi.n	800797c <UART_SetConfig+0x300>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <UART_SetConfig+0x2ac>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007949 	.word	0x08007949
 800792c:	08007951 	.word	0x08007951
 8007930:	0800797d 	.word	0x0800797d
 8007934:	08007957 	.word	0x08007957
 8007938:	0800797d 	.word	0x0800797d
 800793c:	0800797d 	.word	0x0800797d
 8007940:	0800797d 	.word	0x0800797d
 8007944:	0800795f 	.word	0x0800795f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007948:	f7fe fada 	bl	8005f00 <HAL_RCC_GetPCLK2Freq>
 800794c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800794e:	e01b      	b.n	8007988 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007950:	4b08      	ldr	r3, [pc, #32]	; (8007974 <UART_SetConfig+0x2f8>)
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007954:	e018      	b.n	8007988 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007956:	f7fe fa3d 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 800795a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800795c:	e014      	b.n	8007988 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800795e:	f248 0306 	movw	r3, #32774	; 0x8006
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007964:	e010      	b.n	8007988 <UART_SetConfig+0x30c>
 8007966:	bf00      	nop
 8007968:	cfff69f3 	.word	0xcfff69f3
 800796c:	40008000 	.word	0x40008000
 8007970:	40013800 	.word	0x40013800
 8007974:	00f42400 	.word	0x00f42400
 8007978:	0800dec4 	.word	0x0800dec4
      default:
        pclk = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007986:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8084 	beq.w	8007a98 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	4a4b      	ldr	r2, [pc, #300]	; (8007ac4 <UART_SetConfig+0x448>)
 8007996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800799a:	461a      	mov	r2, r3
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a2:	005a      	lsls	r2, r3, #1
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	441a      	add	r2, r3
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	2b0f      	cmp	r3, #15
 80079ba:	d916      	bls.n	80079ea <UART_SetConfig+0x36e>
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c2:	d212      	bcs.n	80079ea <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f023 030f 	bic.w	r3, r3, #15
 80079cc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	b29a      	uxth	r2, r3
 80079da:	8bfb      	ldrh	r3, [r7, #30]
 80079dc:	4313      	orrs	r3, r2
 80079de:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	8bfa      	ldrh	r2, [r7, #30]
 80079e6:	60da      	str	r2, [r3, #12]
 80079e8:	e056      	b.n	8007a98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079f0:	e052      	b.n	8007a98 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b07      	cmp	r3, #7
 80079fa:	d822      	bhi.n	8007a42 <UART_SetConfig+0x3c6>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <UART_SetConfig+0x388>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a25 	.word	0x08007a25
 8007a08:	08007a2d 	.word	0x08007a2d
 8007a0c:	08007a43 	.word	0x08007a43
 8007a10:	08007a33 	.word	0x08007a33
 8007a14:	08007a43 	.word	0x08007a43
 8007a18:	08007a43 	.word	0x08007a43
 8007a1c:	08007a43 	.word	0x08007a43
 8007a20:	08007a3b 	.word	0x08007a3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a24:	f7fe fa6c 	bl	8005f00 <HAL_RCC_GetPCLK2Freq>
 8007a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a2a:	e010      	b.n	8007a4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a2c:	4b26      	ldr	r3, [pc, #152]	; (8007ac8 <UART_SetConfig+0x44c>)
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a30:	e00d      	b.n	8007a4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a32:	f7fe f9cf 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8007a36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a38:	e009      	b.n	8007a4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a3a:	f248 0306 	movw	r3, #32774	; 0x8006
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a40:	e005      	b.n	8007a4e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a4c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d021      	beq.n	8007a98 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <UART_SetConfig+0x448>)
 8007a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	441a      	add	r2, r3
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	2b0f      	cmp	r3, #15
 8007a7c:	d909      	bls.n	8007a92 <UART_SetConfig+0x416>
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a84:	d205      	bcs.n	8007a92 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60da      	str	r2, [r3, #12]
 8007a90:	e002      	b.n	8007a98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ab4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3730      	adds	r7, #48	; 0x30
 8007abc:	46bd      	mov	sp, r7
 8007abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac2:	bf00      	nop
 8007ac4:	0800dec4 	.word	0x0800dec4
 8007ac8:	00f42400 	.word	0x00f42400

08007acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bca:	d10a      	bne.n	8007be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c20:	f7fb feaa 	bl	8003978 <HAL_GetTick>
 8007c24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d10e      	bne.n	8007c52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f832 	bl	8007cac <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e028      	b.n	8007ca4 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d10e      	bne.n	8007c7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f81c 	bl	8007cac <UART_WaitOnFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e012      	b.n	8007ca4 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b09c      	sub	sp, #112	; 0x70
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cbc:	e0a9      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc4:	f000 80a5 	beq.w	8007e12 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cc8:	f7fb fe56 	bl	8003978 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <UART_WaitOnFlagUntilTimeout+0x32>
 8007cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d140      	bne.n	8007d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cfe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e6      	bne.n	8007cde <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	663b      	str	r3, [r7, #96]	; 0x60
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d30:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e069      	b.n	8007e34 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d051      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d7c:	d149      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
 8007da8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e6      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dda:	623a      	str	r2, [r7, #32]
 8007ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	69f9      	ldr	r1, [r7, #28]
 8007de0:	6a3a      	ldr	r2, [r7, #32]
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e5      	bne.n	8007dba <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e010      	b.n	8007e34 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	f43f af46 	beq.w	8007cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3770      	adds	r7, #112	; 0x70
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b0a3      	sub	sp, #140	; 0x8c
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6e:	d10e      	bne.n	8007e8e <UART_Start_Receive_IT+0x52>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d105      	bne.n	8007e84 <UART_Start_Receive_IT+0x48>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e82:	e02d      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	22ff      	movs	r2, #255	; 0xff
 8007e88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e8c:	e028      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10d      	bne.n	8007eb2 <UART_Start_Receive_IT+0x76>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <UART_Start_Receive_IT+0x6c>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	22ff      	movs	r2, #255	; 0xff
 8007ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ea6:	e01b      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	227f      	movs	r2, #127	; 0x7f
 8007eac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eb0:	e016      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eba:	d10d      	bne.n	8007ed8 <UART_Start_Receive_IT+0x9c>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <UART_Start_Receive_IT+0x92>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	227f      	movs	r2, #127	; 0x7f
 8007ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ecc:	e008      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	223f      	movs	r2, #63	; 0x3f
 8007ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ed6:	e003      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2222      	movs	r2, #34	; 0x22
 8007eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007f14:	673a      	str	r2, [r7, #112]	; 0x70
 8007f16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007f1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e3      	bne.n	8007ef0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f30:	d14f      	bne.n	8007fd2 <UART_Start_Receive_IT+0x196>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d349      	bcc.n	8007fd2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f46:	d107      	bne.n	8007f58 <UART_Start_Receive_IT+0x11c>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d103      	bne.n	8007f58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a47      	ldr	r2, [pc, #284]	; (8008070 <UART_Start_Receive_IT+0x234>)
 8007f54:	675a      	str	r2, [r3, #116]	; 0x74
 8007f56:	e002      	b.n	8007f5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a46      	ldr	r2, [pc, #280]	; (8008074 <UART_Start_Receive_IT+0x238>)
 8007f5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01a      	beq.n	8007f9c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e4      	bne.n	8007f66 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_Start_Receive_IT+0x160>
 8007fd0:	e046      	b.n	8008060 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fda:	d107      	bne.n	8007fec <UART_Start_Receive_IT+0x1b0>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a24      	ldr	r2, [pc, #144]	; (8008078 <UART_Start_Receive_IT+0x23c>)
 8007fe8:	675a      	str	r2, [r3, #116]	; 0x74
 8007fea:	e002      	b.n	8007ff2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a23      	ldr	r2, [pc, #140]	; (800807c <UART_Start_Receive_IT+0x240>)
 8007ff0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d019      	beq.n	800802e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800800e:	677b      	str	r3, [r7, #116]	; 0x74
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
 800801a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800801e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_Start_Receive_IT+0x1be>
 800802c:	e018      	b.n	8008060 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	613b      	str	r3, [r7, #16]
   return(result);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f043 0320 	orr.w	r3, r3, #32
 8008042:	67bb      	str	r3, [r7, #120]	; 0x78
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	61bb      	str	r3, [r7, #24]
   return(result);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	378c      	adds	r7, #140	; 0x8c
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	08008d9d 	.word	0x08008d9d
 8008074:	08008a3d 	.word	0x08008a3d
 8008078:	08008885 	.word	0x08008885
 800807c:	080086cd 	.word	0x080086cd

08008080 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b08f      	sub	sp, #60	; 0x3c
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	61fb      	str	r3, [r7, #28]
   return(result);
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e6      	bne.n	8008088 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080d0:	633b      	str	r3, [r7, #48]	; 0x30
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3308      	adds	r3, #8
 80080d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080da:	61ba      	str	r2, [r7, #24]
 80080dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6979      	ldr	r1, [r7, #20]
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	613b      	str	r3, [r7, #16]
   return(result);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e5      	bne.n	80080ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80080f6:	bf00      	nop
 80080f8:	373c      	adds	r7, #60	; 0x3c
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008102:	b480      	push	{r7}
 8008104:	b095      	sub	sp, #84	; 0x54
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800811e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008128:	643b      	str	r3, [r7, #64]	; 0x40
 800812a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800812e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e6      	bne.n	800810a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	61fb      	str	r3, [r7, #28]
   return(result);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008152:	f023 0301 	bic.w	r3, r3, #1
 8008156:	64bb      	str	r3, [r7, #72]	; 0x48
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e3      	bne.n	800813c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d118      	bne.n	80081ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	60bb      	str	r3, [r7, #8]
   return(result);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f023 0310 	bic.w	r3, r3, #16
 8008190:	647b      	str	r3, [r7, #68]	; 0x44
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800819a:	61bb      	str	r3, [r7, #24]
 800819c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6979      	ldr	r1, [r7, #20]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	613b      	str	r3, [r7, #16]
   return(result);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e6      	bne.n	800817c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80081c2:	bf00      	nop
 80081c4:	3754      	adds	r7, #84	; 0x54
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b090      	sub	sp, #64	; 0x40
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d137      	bne.n	800825a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3308      	adds	r3, #8
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	623b      	str	r3, [r7, #32]
   return(result);
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008208:	63bb      	str	r3, [r7, #56]	; 0x38
 800820a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008212:	633a      	str	r2, [r7, #48]	; 0x30
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e5      	bne.n	80081f2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	60fb      	str	r3, [r7, #12]
   return(result);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823a:	637b      	str	r3, [r7, #52]	; 0x34
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008244:	61fb      	str	r3, [r7, #28]
 8008246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	69b9      	ldr	r1, [r7, #24]
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	617b      	str	r3, [r7, #20]
   return(result);
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e6      	bne.n	8008226 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008258:	e002      	b.n	8008260 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800825a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800825c:	f7fa fc1e 	bl	8002a9c <HAL_UART_TxCpltCallback>
}
 8008260:	bf00      	nop
 8008262:	3740      	adds	r7, #64	; 0x40
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7ff f9e0 	bl	800763c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827c:	bf00      	nop
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008298:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ac:	2b80      	cmp	r3, #128	; 0x80
 80082ae:	d109      	bne.n	80082c4 <UART_DMAError+0x40>
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2b21      	cmp	r3, #33	; 0x21
 80082b4:	d106      	bne.n	80082c4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80082be:	6978      	ldr	r0, [r7, #20]
 80082c0:	f7ff fede 	bl	8008080 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d109      	bne.n	80082e6 <UART_DMAError+0x62>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b22      	cmp	r3, #34	; 0x22
 80082d6:	d106      	bne.n	80082e6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80082e0:	6978      	ldr	r0, [r7, #20]
 80082e2:	f7ff ff0e 	bl	8008102 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	f043 0210 	orr.w	r2, r3, #16
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f6:	6978      	ldr	r0, [r7, #20]
 80082f8:	f7ff f9aa 	bl	8007650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082fc:	bf00      	nop
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff f994 	bl	8007650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008330:	b480      	push	{r7}
 8008332:	b08f      	sub	sp, #60	; 0x3c
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833e:	2b21      	cmp	r3, #33	; 0x21
 8008340:	d14c      	bne.n	80083dc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d132      	bne.n	80083b4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	61fb      	str	r3, [r7, #28]
   return(result);
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e6      	bne.n	800834e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	60bb      	str	r3, [r7, #8]
   return(result);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008394:	633b      	str	r3, [r7, #48]	; 0x30
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	613b      	str	r3, [r7, #16]
   return(result);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e6      	bne.n	8008380 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80083b2:	e013      	b.n	80083dc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80083dc:	bf00      	nop
 80083de:	373c      	adds	r7, #60	; 0x3c
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b091      	sub	sp, #68	; 0x44
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f6:	2b21      	cmp	r3, #33	; 0x21
 80083f8:	d151      	bne.n	800849e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d132      	bne.n	800846c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	623b      	str	r3, [r7, #32]
   return(result);
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800841a:	63bb      	str	r3, [r7, #56]	; 0x38
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	633b      	str	r3, [r7, #48]	; 0x30
 8008426:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800842a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e6      	bne.n	8008406 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	60fb      	str	r3, [r7, #12]
   return(result);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	61fb      	str	r3, [r7, #28]
 8008458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	69b9      	ldr	r1, [r7, #24]
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	617b      	str	r3, [r7, #20]
   return(result);
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800846a:	e018      	b.n	800849e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008480:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008486:	1c9a      	adds	r2, r3, #2
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800849e:	bf00      	nop
 80084a0:	3744      	adds	r7, #68	; 0x44
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b091      	sub	sp, #68	; 0x44
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	2b21      	cmp	r3, #33	; 0x21
 80084ba:	d160      	bne.n	800857e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084c4:	e057      	b.n	8008576 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d133      	bne.n	800853a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3308      	adds	r3, #8
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	623b      	str	r3, [r7, #32]
   return(result);
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80084e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084f2:	633a      	str	r2, [r7, #48]	; 0x30
 80084f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e5      	bne.n	80084d2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	60fb      	str	r3, [r7, #12]
   return(result);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	69b9      	ldr	r1, [r7, #24]
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	617b      	str	r3, [r7, #20]
   return(result);
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e6      	bne.n	8008506 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008538:	e021      	b.n	800857e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008544:	2b00      	cmp	r3, #0
 8008546:	d013      	beq.n	8008570 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008570:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008572:	3b01      	subs	r3, #1
 8008574:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008576:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1a4      	bne.n	80084c6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800857c:	e7ff      	b.n	800857e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800857e:	bf00      	nop
 8008580:	3744      	adds	r7, #68	; 0x44
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800858a:	b480      	push	{r7}
 800858c:	b091      	sub	sp, #68	; 0x44
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008598:	2b21      	cmp	r3, #33	; 0x21
 800859a:	d165      	bne.n	8008668 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80085a4:	e05c      	b.n	8008660 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d133      	bne.n	800861a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3308      	adds	r3, #8
 80085d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e5      	bne.n	80085b2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fa:	633b      	str	r3, [r7, #48]	; 0x30
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6979      	ldr	r1, [r7, #20]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	613b      	str	r3, [r7, #16]
   return(result);
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008618:	e026      	b.n	8008668 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008624:	2b00      	cmp	r3, #0
 8008626:	d018      	beq.n	800865a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800863c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008642:	1c9a      	adds	r2, r3, #2
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800865a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800865c:	3b01      	subs	r3, #1
 800865e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008660:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008662:	2b00      	cmp	r3, #0
 8008664:	d19f      	bne.n	80085a6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008666:	e7ff      	b.n	8008668 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008668:	bf00      	nop
 800866a:	3744      	adds	r7, #68	; 0x44
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	60bb      	str	r3, [r7, #8]
   return(result);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6979      	ldr	r1, [r7, #20]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	613b      	str	r3, [r7, #16]
   return(result);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7fa f9ed 	bl	8002a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c2:	bf00      	nop
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b09c      	sub	sp, #112	; 0x70
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086e4:	2b22      	cmp	r3, #34	; 0x22
 80086e6:	f040 80be 	bne.w	8008866 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80086f8:	b2d9      	uxtb	r1, r3
 80086fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008704:	400a      	ands	r2, r1
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800871a:	b29b      	uxth	r3, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 80a1 	bne.w	8008876 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008748:	66bb      	str	r3, [r7, #104]	; 0x68
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008752:	65bb      	str	r3, [r7, #88]	; 0x58
 8008754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e6      	bne.n	8008734 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	667b      	str	r3, [r7, #100]	; 0x64
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008786:	647a      	str	r2, [r7, #68]	; 0x44
 8008788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800878c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e5      	bne.n	8008766 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a33      	ldr	r2, [pc, #204]	; (8008880 <UART_RxISR_8BIT+0x1b4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d01f      	beq.n	80087f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d018      	beq.n	80087f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	623b      	str	r3, [r7, #32]
   return(result);
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087da:	663b      	str	r3, [r7, #96]	; 0x60
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087e4:	633b      	str	r3, [r7, #48]	; 0x30
 80087e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e6      	bne.n	80087c6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d12e      	bne.n	800885e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	60fb      	str	r3, [r7, #12]
   return(result);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0310 	bic.w	r3, r3, #16
 800881a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	69b9      	ldr	r1, [r7, #24]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	617b      	str	r3, [r7, #20]
   return(result);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e6      	bne.n	8008806 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f003 0310 	and.w	r3, r3, #16
 8008842:	2b10      	cmp	r3, #16
 8008844:	d103      	bne.n	800884e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2210      	movs	r2, #16
 800884c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fe ff04 	bl	8007664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800885c:	e00b      	b.n	8008876 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fa f8ee 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 8008864:	e007      	b.n	8008876 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699a      	ldr	r2, [r3, #24]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0208 	orr.w	r2, r2, #8
 8008874:	619a      	str	r2, [r3, #24]
}
 8008876:	bf00      	nop
 8008878:	3770      	adds	r7, #112	; 0x70
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40008000 	.word	0x40008000

08008884 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b09c      	sub	sp, #112	; 0x70
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008892:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889c:	2b22      	cmp	r3, #34	; 0x22
 800889e:	f040 80be 	bne.w	8008a1e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80088b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80088b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80088ba:	4013      	ands	r3, r2
 80088bc:	b29a      	uxth	r2, r3
 80088be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c6:	1c9a      	adds	r2, r3, #2
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f040 80a1 	bne.w	8008a2e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008900:	667b      	str	r3, [r7, #100]	; 0x64
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800890a:	657b      	str	r3, [r7, #84]	; 0x54
 800890c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e6      	bne.n	80088ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	663b      	str	r3, [r7, #96]	; 0x60
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800893e:	643a      	str	r2, [r7, #64]	; 0x40
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e5      	bne.n	800891e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a33      	ldr	r2, [pc, #204]	; (8008a38 <UART_RxISR_16BIT+0x1b4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d01f      	beq.n	80089b0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d018      	beq.n	80089b0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	61fb      	str	r3, [r7, #28]
   return(result);
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800899e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e6      	bne.n	800897e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d12e      	bne.n	8008a16 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0310 	bic.w	r3, r3, #16
 80089d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089dc:	61bb      	str	r3, [r7, #24]
 80089de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d103      	bne.n	8008a06 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2210      	movs	r2, #16
 8008a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fe fe28 	bl	8007664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a14:	e00b      	b.n	8008a2e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fa f812 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 8008a1c:	e007      	b.n	8008a2e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0208 	orr.w	r2, r2, #8
 8008a2c:	619a      	str	r2, [r3, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	3770      	adds	r7, #112	; 0x70
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40008000 	.word	0x40008000

08008a3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b0ac      	sub	sp, #176	; 0xb0
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a72:	2b22      	cmp	r3, #34	; 0x22
 8008a74:	f040 8182 	bne.w	8008d7c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a7e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a82:	e125      	b.n	8008cd0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008a92:	b2d9      	uxtb	r1, r3
 8008a94:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9e:	400a      	ands	r2, r1
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d053      	beq.n	8008b7e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d011      	beq.n	8008b06 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2201      	movs	r2, #1
 8008af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afc:	f043 0201 	orr.w	r2, r3, #1
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d011      	beq.n	8008b36 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2202      	movs	r2, #2
 8008b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b2c:	f043 0204 	orr.w	r2, r3, #4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b3a:	f003 0304 	and.w	r3, r3, #4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d011      	beq.n	8008b66 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2204      	movs	r2, #4
 8008b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b5c:	f043 0202 	orr.w	r2, r3, #2
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d006      	beq.n	8008b7e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7fe fd6d 	bl	8007650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f040 80a2 	bne.w	8008cd0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bb0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008bb4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e4      	bne.n	8008b8c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bea:	66ba      	str	r2, [r7, #104]	; 0x68
 8008bec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008bf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e1      	bne.n	8008bc2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a5f      	ldr	r2, [pc, #380]	; (8008d94 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d021      	beq.n	8008c60 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d01a      	beq.n	8008c60 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8008c4e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e4      	bne.n	8008c2a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d130      	bne.n	8008cca <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	f023 0310 	bic.w	r3, r3, #16
 8008c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c90:	643b      	str	r3, [r7, #64]	; 0x40
 8008c92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e4      	bne.n	8008c6e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d103      	bne.n	8008cba <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2210      	movs	r2, #16
 8008cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fe fcce 	bl	8007664 <HAL_UARTEx_RxEventCallback>
 8008cc8:	e002      	b.n	8008cd0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7f9 feb8 	bl	8002a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cd0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f47f aecf 	bne.w	8008a84 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d049      	beq.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cfe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d242      	bcs.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e3      	bne.n	8008d06 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f043 0320 	orr.w	r3, r3, #32
 8008d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d66:	61bb      	str	r3, [r7, #24]
 8008d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6979      	ldr	r1, [r7, #20]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	613b      	str	r3, [r7, #16]
   return(result);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e4      	bne.n	8008d44 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d7a:	e007      	b.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0208 	orr.w	r2, r2, #8
 8008d8a:	619a      	str	r2, [r3, #24]
}
 8008d8c:	bf00      	nop
 8008d8e:	37b0      	adds	r7, #176	; 0xb0
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	40008000 	.word	0x40008000
 8008d98:	080086cd 	.word	0x080086cd

08008d9c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b0ae      	sub	sp, #184	; 0xb8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008daa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd2:	2b22      	cmp	r3, #34	; 0x22
 8008dd4:	f040 8186 	bne.w	80090e4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dde:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008de2:	e129      	b.n	8009038 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008df6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008dfa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008dfe:	4013      	ands	r3, r2
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0c:	1c9a      	adds	r2, r3, #2
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d053      	beq.n	8008ee2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d011      	beq.n	8008e6a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00b      	beq.n	8008e6a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2201      	movs	r2, #1
 8008e58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e60:	f043 0201 	orr.w	r2, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d011      	beq.n	8008e9a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2202      	movs	r2, #2
 8008e88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e90:	f043 0204 	orr.w	r2, r3, #4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d011      	beq.n	8008eca <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec0:	f043 0202 	orr.w	r2, r3, #2
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d006      	beq.n	8008ee2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7fe fbbb 	bl	8007650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 80a4 	bne.w	8009038 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f16:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e2      	bne.n	8008ef0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f40:	f023 0301 	bic.w	r3, r3, #1
 8008f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e1      	bne.n	8008f2a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a5f      	ldr	r2, [pc, #380]	; (80090fc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d021      	beq.n	8008fc8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01a      	beq.n	8008fc8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e4      	bne.n	8008f92 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d130      	bne.n	8009032 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	f023 0310 	bic.w	r3, r3, #16
 8008fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	f003 0310 	and.w	r3, r3, #16
 8009016:	2b10      	cmp	r3, #16
 8009018:	d103      	bne.n	8009022 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2210      	movs	r2, #16
 8009020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fe fb1a 	bl	8007664 <HAL_UARTEx_RxEventCallback>
 8009030:	e002      	b.n	8009038 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7f9 fd04 	bl	8002a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009038:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800903c:	2b00      	cmp	r3, #0
 800903e:	d006      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	f47f aecb 	bne.w	8008de4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009054:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009058:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800905c:	2b00      	cmp	r3, #0
 800905e:	d049      	beq.n	80090f4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009066:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800906a:	429a      	cmp	r2, r3
 800906c:	d242      	bcs.n	80090f4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	623b      	str	r3, [r7, #32]
   return(result);
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3308      	adds	r3, #8
 800908e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009092:	633a      	str	r2, [r7, #48]	; 0x30
 8009094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e3      	bne.n	800906e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a15      	ldr	r2, [pc, #84]	; (8009100 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80090aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f043 0320 	orr.w	r3, r3, #32
 80090c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	69b9      	ldr	r1, [r7, #24]
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	617b      	str	r3, [r7, #20]
   return(result);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e4      	bne.n	80090ac <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090e2:	e007      	b.n	80090f4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0208 	orr.w	r2, r2, #8
 80090f2:	619a      	str	r2, [r3, #24]
}
 80090f4:	bf00      	nop
 80090f6:	37b8      	adds	r7, #184	; 0xb8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40008000 	.word	0x40008000
 8009100:	08008885 	.word	0x08008885

08009104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800914e:	2b01      	cmp	r3, #1
 8009150:	d101      	bne.n	8009156 <HAL_UARTEx_DisableFifoMode+0x16>
 8009152:	2302      	movs	r3, #2
 8009154:	e027      	b.n	80091a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2224      	movs	r2, #36	; 0x24
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0201 	bic.w	r2, r2, #1
 800917c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009184:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e02d      	b.n	8009226 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2224      	movs	r2, #36	; 0x24
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0201 	bic.w	r2, r2, #1
 80091f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f850 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009242:	2302      	movs	r3, #2
 8009244:	e02d      	b.n	80092a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2224      	movs	r2, #36	; 0x24
 8009252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0201 	bic.w	r2, r2, #1
 800926c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f812 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d108      	bne.n	80092ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092cc:	e031      	b.n	8009332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ce:	2308      	movs	r3, #8
 80092d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092d2:	2308      	movs	r3, #8
 80092d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	0e5b      	lsrs	r3, r3, #25
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	0f5b      	lsrs	r3, r3, #29
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	7b3a      	ldrb	r2, [r7, #12]
 80092fa:	4911      	ldr	r1, [pc, #68]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 80092fc:	5c8a      	ldrb	r2, [r1, r2]
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009302:	7b3a      	ldrb	r2, [r7, #12]
 8009304:	490f      	ldr	r1, [pc, #60]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009308:	fb93 f3f2 	sdiv	r3, r3, r2
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	7b7a      	ldrb	r2, [r7, #13]
 8009318:	4909      	ldr	r1, [pc, #36]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 800931a:	5c8a      	ldrb	r2, [r1, r2]
 800931c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009320:	7b7a      	ldrb	r2, [r7, #13]
 8009322:	4908      	ldr	r1, [pc, #32]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009326:	fb93 f3f2 	sdiv	r3, r3, r2
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	0800dedc 	.word	0x0800dedc
 8009344:	0800dee4 	.word	0x0800dee4

08009348 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009352:	f7f7 fdcd 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009356:	f7f7 fd5d 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800935a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f062 0208 	orn	r2, r2, #8
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	2200      	movs	r2, #0
 8009368:	705a      	strb	r2, [r3, #1]
 800936a:	2200      	movs	r2, #0
 800936c:	709a      	strb	r2, [r3, #2]
 800936e:	2200      	movs	r2, #0
 8009370:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	711a      	strb	r2, [r3, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	715a      	strb	r2, [r3, #5]
 8009380:	2200      	movs	r2, #0
 8009382:	719a      	strb	r2, [r3, #6]
 8009384:	2200      	movs	r2, #0
 8009386:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800938e:	f7f7 fd89 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009392:	f7f7 fd4b 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009396:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	689b      	ldr	r3, [r3, #8]

}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <otCoapMessageInitResponse>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4611      	mov	r1, r2
 80093b0:	461a      	mov	r2, r3
 80093b2:	460b      	mov	r3, r1
 80093b4:	71fb      	strb	r3, [r7, #7]
 80093b6:	4613      	mov	r3, r2
 80093b8:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 80093ba:	f7f7 fd99 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80093be:	f7f7 fd29 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 80093c2:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f062 0227 	orn	r2, r2, #39	; 0x27
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	2200      	movs	r2, #0
 80093d0:	705a      	strb	r2, [r3, #1]
 80093d2:	2200      	movs	r2, #0
 80093d4:	709a      	strb	r2, [r3, #2]
 80093d6:	2200      	movs	r2, #0
 80093d8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2200      	movs	r2, #0
 80093de:	f042 0204 	orr.w	r2, r2, #4
 80093e2:	711a      	strb	r2, [r3, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	715a      	strb	r2, [r3, #5]
 80093e8:	2200      	movs	r2, #0
 80093ea:	719a      	strb	r2, [r3, #6]
 80093ec:	2200      	movs	r2, #0
 80093ee:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 80093fc:	79fa      	ldrb	r2, [r7, #7]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 8009402:	79ba      	ldrb	r2, [r7, #6]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8009408:	f7f7 fd4c 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800940c:	f7f7 fd0e 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009410:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	b2db      	uxtb	r3, r3
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 800942e:	f7f7 fd5f 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009432:	f7f7 fcef 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009436:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2200      	movs	r2, #0
 800943c:	f062 0226 	orn	r2, r2, #38	; 0x26
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	2200      	movs	r2, #0
 8009444:	705a      	strb	r2, [r3, #1]
 8009446:	2200      	movs	r2, #0
 8009448:	709a      	strb	r2, [r3, #2]
 800944a:	2200      	movs	r2, #0
 800944c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2200      	movs	r2, #0
 8009452:	f042 0203 	orr.w	r2, r2, #3
 8009456:	711a      	strb	r2, [r3, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	715a      	strb	r2, [r3, #5]
 800945c:	2200      	movs	r2, #0
 800945e:	719a      	strb	r2, [r3, #6]
 8009460:	2200      	movs	r2, #0
 8009462:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 8009470:	79fa      	ldrb	r2, [r7, #7]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009476:	f7f7 fd15 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800947a:	f7f7 fcd7 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800947e:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	b2db      	uxtb	r3, r3
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009496:	f7f7 fd2b 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800949a:	f7f7 fcbb 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800949e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f062 0219 	orn	r2, r2, #25
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	2200      	movs	r2, #0
 80094ac:	705a      	strb	r2, [r3, #1]
 80094ae:	2200      	movs	r2, #0
 80094b0:	709a      	strb	r2, [r3, #2]
 80094b2:	2200      	movs	r2, #0
 80094b4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f042 0201 	orr.w	r2, r2, #1
 80094be:	711a      	strb	r2, [r3, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	715a      	strb	r2, [r3, #5]
 80094c4:	2200      	movs	r2, #0
 80094c6:	719a      	strb	r2, [r3, #6]
 80094c8:	2200      	movs	r2, #0
 80094ca:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80094d2:	f7f7 fce7 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80094d6:	f7f7 fca9 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 80094da:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	b2db      	uxtb	r3, r3
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80094f2:	f7f7 fcfd 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80094f6:	f7f7 fc8d 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 80094fa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f062 0217 	orn	r2, r2, #23
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	2200      	movs	r2, #0
 8009508:	705a      	strb	r2, [r3, #1]
 800950a:	2200      	movs	r2, #0
 800950c:	709a      	strb	r2, [r3, #2]
 800950e:	2200      	movs	r2, #0
 8009510:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f042 0201 	orr.w	r2, r2, #1
 800951a:	711a      	strb	r2, [r3, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	715a      	strb	r2, [r3, #5]
 8009520:	2200      	movs	r2, #0
 8009522:	719a      	strb	r2, [r3, #6]
 8009524:	2200      	movs	r2, #0
 8009526:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800952e:	f7f7 fcb9 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009532:	f7f7 fc7b 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009536:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	b2db      	uxtb	r3, r3
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009552:	f7f7 fccd 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009556:	f7f7 fc5d 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800955a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f062 0216 	orn	r2, r2, #22
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	2200      	movs	r2, #0
 8009568:	705a      	strb	r2, [r3, #1]
 800956a:	2200      	movs	r2, #0
 800956c:	709a      	strb	r2, [r3, #2]
 800956e:	2200      	movs	r2, #0
 8009570:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f042 0202 	orr.w	r2, r2, #2
 800957a:	711a      	strb	r2, [r3, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	715a      	strb	r2, [r3, #5]
 8009580:	2200      	movs	r2, #0
 8009582:	719a      	strb	r2, [r3, #6]
 8009584:	2200      	movs	r2, #0
 8009586:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009594:	f7f7 fc86 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009598:	f7f7 fc48 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800959c:	60f8      	str	r0, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80095ae:	f7f7 fc9f 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80095b2:	f7f7 fc2f 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 80095b6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f062 0213 	orn	r2, r2, #19
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	2200      	movs	r2, #0
 80095c4:	705a      	strb	r2, [r3, #1]
 80095c6:	2200      	movs	r2, #0
 80095c8:	709a      	strb	r2, [r3, #2]
 80095ca:	2200      	movs	r2, #0
 80095cc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f042 0201 	orr.w	r2, r2, #1
 80095d6:	711a      	strb	r2, [r3, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	715a      	strb	r2, [r3, #5]
 80095dc:	2200      	movs	r2, #0
 80095de:	719a      	strb	r2, [r3, #6]
 80095e0:	2200      	movs	r2, #0
 80095e2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80095ea:	f7f7 fc5b 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80095ee:	f7f7 fc1d 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 80095f2:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	b2db      	uxtb	r3, r3
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800960a:	f7f7 fc71 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800960e:	f7f7 fc01 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009612:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f062 0212 	orn	r2, r2, #18
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	2200      	movs	r2, #0
 8009620:	705a      	strb	r2, [r3, #1]
 8009622:	2200      	movs	r2, #0
 8009624:	709a      	strb	r2, [r3, #2]
 8009626:	2200      	movs	r2, #0
 8009628:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f042 0201 	orr.w	r2, r2, #1
 8009632:	711a      	strb	r2, [r3, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	715a      	strb	r2, [r3, #5]
 8009638:	2200      	movs	r2, #0
 800963a:	719a      	strb	r2, [r3, #6]
 800963c:	2200      	movs	r2, #0
 800963e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009646:	f7f7 fc2d 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800964a:	f7f7 fbef 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800964e:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <otCoapStart>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8009668:	f7f7 fc42 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800966c:	f7f7 fbd2 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009670:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f062 0207 	orn	r2, r2, #7
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	2200      	movs	r2, #0
 800967e:	705a      	strb	r2, [r3, #1]
 8009680:	2200      	movs	r2, #0
 8009682:	709a      	strb	r2, [r3, #2]
 8009684:	2200      	movs	r2, #0
 8009686:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f042 0201 	orr.w	r2, r2, #1
 8009690:	711a      	strb	r2, [r3, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	715a      	strb	r2, [r3, #5]
 8009696:	2200      	movs	r2, #0
 8009698:	719a      	strb	r2, [r3, #6]
 800969a:	2200      	movs	r2, #0
 800969c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800969e:	887a      	ldrh	r2, [r7, #2]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80096a4:	f7f7 fbfe 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80096a8:	f7f7 fbc0 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 80096ac:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	b2db      	uxtb	r3, r3
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80096c6:	f7f7 fc13 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80096ca:	f7f7 fba3 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 80096ce:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f062 0203 	orn	r2, r2, #3
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	2200      	movs	r2, #0
 80096dc:	705a      	strb	r2, [r3, #1]
 80096de:	2200      	movs	r2, #0
 80096e0:	709a      	strb	r2, [r3, #2]
 80096e2:	2200      	movs	r2, #0
 80096e4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f042 0201 	orr.w	r2, r2, #1
 80096ee:	711a      	strb	r2, [r3, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	715a      	strb	r2, [r3, #5]
 80096f4:	2200      	movs	r2, #0
 80096f6:	719a      	strb	r2, [r3, #6]
 80096f8:	2200      	movs	r2, #0
 80096fa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009702:	f7f7 fbcf 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009706:	f7f7 fb91 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800970a:	60f8      	str	r0, [r7, #12]
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 8009722:	f7f7 fbe5 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009726:	f7f7 fb75 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800972a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2200      	movs	r2, #0
 8009730:	701a      	strb	r2, [r3, #0]
 8009732:	2200      	movs	r2, #0
 8009734:	f042 0201 	orr.w	r2, r2, #1
 8009738:	705a      	strb	r2, [r3, #1]
 800973a:	2200      	movs	r2, #0
 800973c:	709a      	strb	r2, [r3, #2]
 800973e:	2200      	movs	r2, #0
 8009740:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2200      	movs	r2, #0
 8009746:	f042 0203 	orr.w	r2, r2, #3
 800974a:	711a      	strb	r2, [r3, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	715a      	strb	r2, [r3, #5]
 8009750:	2200      	movs	r2, #0
 8009752:	719a      	strb	r2, [r3, #6]
 8009754:	2200      	movs	r2, #0
 8009756:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800976a:	f7f7 fb9b 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800976e:	f7f7 fb5d 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009772:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	b2db      	uxtb	r3, r3
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 8009788:	f7f7 fbb2 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800978c:	f7f7 fb42 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009790:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f062 0235 	orn	r2, r2, #53	; 0x35
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	2200      	movs	r2, #0
 800979e:	705a      	strb	r2, [r3, #1]
 80097a0:	2200      	movs	r2, #0
 80097a2:	709a      	strb	r2, [r3, #2]
 80097a4:	2200      	movs	r2, #0
 80097a6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	711a      	strb	r2, [r3, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	715a      	strb	r2, [r3, #5]
 80097b2:	2200      	movs	r2, #0
 80097b4:	719a      	strb	r2, [r3, #6]
 80097b6:	2200      	movs	r2, #0
 80097b8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80097ba:	f7f7 fb73 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80097be:	f7f7 fb35 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 80097c2:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80097d8:	f7f7 fb8a 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80097dc:	f7f7 fb1a 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 80097e0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f062 0233 	orn	r2, r2, #51	; 0x33
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	2200      	movs	r2, #0
 80097ee:	705a      	strb	r2, [r3, #1]
 80097f0:	2200      	movs	r2, #0
 80097f2:	709a      	strb	r2, [r3, #2]
 80097f4:	2200      	movs	r2, #0
 80097f6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	711a      	strb	r2, [r3, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	715a      	strb	r2, [r3, #5]
 8009802:	2200      	movs	r2, #0
 8009804:	719a      	strb	r2, [r3, #6]
 8009806:	2200      	movs	r2, #0
 8009808:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800980a:	f7f7 fb4b 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800980e:	f7f7 fb0d 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009812:	60f8      	str	r0, [r7, #12]
}
 8009814:	bf00      	nop
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 8009828:	f7f7 fb62 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 800982c:	4a15      	ldr	r2, [pc, #84]	; (8009884 <otSetStateChangedCallback+0x68>)
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009832:	f7f7 faef 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009836:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2200      	movs	r2, #0
 800983c:	f062 0232 	orn	r2, r2, #50	; 0x32
 8009840:	701a      	strb	r2, [r3, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	705a      	strb	r2, [r3, #1]
 8009846:	2200      	movs	r2, #0
 8009848:	709a      	strb	r2, [r3, #2]
 800984a:	2200      	movs	r2, #0
 800984c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2200      	movs	r2, #0
 8009852:	f042 0201 	orr.w	r2, r2, #1
 8009856:	711a      	strb	r2, [r3, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	715a      	strb	r2, [r3, #5]
 800985c:	2200      	movs	r2, #0
 800985e:	719a      	strb	r2, [r3, #6]
 8009860:	2200      	movs	r2, #0
 8009862:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800986a:	f7f7 fb1b 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800986e:	f7f7 fadd 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009872:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	b2db      	uxtb	r3, r3
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20000684 	.word	0x20000684

08009888 <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009890:	f7f7 fb2e 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009894:	f7f7 fabe 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009898:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f062 022c 	orn	r2, r2, #44	; 0x2c
 80098a2:	701a      	strb	r2, [r3, #0]
 80098a4:	2200      	movs	r2, #0
 80098a6:	705a      	strb	r2, [r3, #1]
 80098a8:	2200      	movs	r2, #0
 80098aa:	709a      	strb	r2, [r3, #2]
 80098ac:	2200      	movs	r2, #0
 80098ae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	711a      	strb	r2, [r3, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	715a      	strb	r2, [r3, #5]
 80098ba:	2200      	movs	r2, #0
 80098bc:	719a      	strb	r2, [r3, #6]
 80098be:	2200      	movs	r2, #0
 80098c0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80098c2:	f7f7 faef 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80098c6:	f7f7 fab1 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 80098ca:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	b2db      	uxtb	r3, r3
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80098e6:	f7f7 fb03 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80098ea:	f7f7 fa93 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 80098ee:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	705a      	strb	r2, [r3, #1]
 80098fe:	2200      	movs	r2, #0
 8009900:	709a      	strb	r2, [r3, #2]
 8009902:	2200      	movs	r2, #0
 8009904:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f042 0201 	orr.w	r2, r2, #1
 800990e:	711a      	strb	r2, [r3, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	715a      	strb	r2, [r3, #5]
 8009914:	2200      	movs	r2, #0
 8009916:	719a      	strb	r2, [r3, #6]
 8009918:	2200      	movs	r2, #0
 800991a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800991c:	78fa      	ldrb	r2, [r7, #3]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009922:	f7f7 fabf 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009926:	f7f7 fa81 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800992a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	b2db      	uxtb	r3, r3
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	460b      	mov	r3, r1
 8009944:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009946:	f7f7 fad3 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800994a:	f7f7 fa63 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800994e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f042 0207 	orr.w	r2, r2, #7
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	705a      	strb	r2, [r3, #1]
 800995e:	2200      	movs	r2, #0
 8009960:	709a      	strb	r2, [r3, #2]
 8009962:	2200      	movs	r2, #0
 8009964:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f042 0201 	orr.w	r2, r2, #1
 800996e:	711a      	strb	r2, [r3, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	715a      	strb	r2, [r3, #5]
 8009974:	2200      	movs	r2, #0
 8009976:	719a      	strb	r2, [r3, #6]
 8009978:	2200      	movs	r2, #0
 800997a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009982:	f7f7 fa8f 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009986:	f7f7 fa51 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800998a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	b2db      	uxtb	r3, r3
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80099a6:	f7f7 faa3 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80099aa:	f7f7 fa33 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 80099ae:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f042 020e 	orr.w	r2, r2, #14
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	2200      	movs	r2, #0
 80099bc:	705a      	strb	r2, [r3, #1]
 80099be:	2200      	movs	r2, #0
 80099c0:	709a      	strb	r2, [r3, #2]
 80099c2:	2200      	movs	r2, #0
 80099c4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f042 0201 	orr.w	r2, r2, #1
 80099ce:	711a      	strb	r2, [r3, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	715a      	strb	r2, [r3, #5]
 80099d4:	2200      	movs	r2, #0
 80099d6:	719a      	strb	r2, [r3, #6]
 80099d8:	2200      	movs	r2, #0
 80099da:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80099dc:	887a      	ldrh	r2, [r7, #2]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80099e2:	f7f7 fa5f 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80099e6:	f7f7 fa21 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 80099ea:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	b2db      	uxtb	r3, r3
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009a04:	f7f7 fa74 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a08:	f7f7 fa04 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009a0c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f042 0210 	orr.w	r2, r2, #16
 8009a16:	701a      	strb	r2, [r3, #0]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	705a      	strb	r2, [r3, #1]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	709a      	strb	r2, [r3, #2]
 8009a20:	2200      	movs	r2, #0
 8009a22:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f042 0201 	orr.w	r2, r2, #1
 8009a2c:	711a      	strb	r2, [r3, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	715a      	strb	r2, [r3, #5]
 8009a32:	2200      	movs	r2, #0
 8009a34:	719a      	strb	r2, [r3, #6]
 8009a36:	2200      	movs	r2, #0
 8009a38:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009a40:	f7f7 fa30 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009a44:	f7f7 f9f2 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009a48:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	b2db      	uxtb	r3, r3
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009a60:	f7f7 fa46 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a64:	f7f7 f9d6 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009a68:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f042 0216 	orr.w	r2, r2, #22
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f042 0201 	orr.w	r2, r2, #1
 8009a7a:	705a      	strb	r2, [r3, #1]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	709a      	strb	r2, [r3, #2]
 8009a80:	2200      	movs	r2, #0
 8009a82:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	711a      	strb	r2, [r3, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	715a      	strb	r2, [r3, #5]
 8009a92:	2200      	movs	r2, #0
 8009a94:	719a      	strb	r2, [r3, #6]
 8009a96:	2200      	movs	r2, #0
 8009a98:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009aa0:	f7f7 fa00 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009aa4:	f7f7 f9c2 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009aa8:	60f8      	str	r0, [r7, #12]
}
 8009aaa:	bf00      	nop
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009aba:	f7f7 fa19 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009abe:	f7f7 f9a9 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009ac2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f042 0219 	orr.w	r2, r2, #25
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f042 0201 	orr.w	r2, r2, #1
 8009ad4:	705a      	strb	r2, [r3, #1]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	709a      	strb	r2, [r3, #2]
 8009ada:	2200      	movs	r2, #0
 8009adc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f042 0201 	orr.w	r2, r2, #1
 8009ae6:	711a      	strb	r2, [r3, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	715a      	strb	r2, [r3, #5]
 8009aec:	2200      	movs	r2, #0
 8009aee:	719a      	strb	r2, [r3, #6]
 8009af0:	2200      	movs	r2, #0
 8009af2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009afa:	f7f7 f9d3 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009afe:	f7f7 f995 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009b02:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	b29b      	uxth	r3, r3
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8009b20:	f7f7 f9e6 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009b24:	f7f7 f976 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009b28:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f042 021e 	orr.w	r2, r2, #30
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f042 0201 	orr.w	r2, r2, #1
 8009b3a:	705a      	strb	r2, [r3, #1]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	709a      	strb	r2, [r3, #2]
 8009b40:	2200      	movs	r2, #0
 8009b42:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f042 0203 	orr.w	r2, r2, #3
 8009b4c:	711a      	strb	r2, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	715a      	strb	r2, [r3, #5]
 8009b52:	2200      	movs	r2, #0
 8009b54:	719a      	strb	r2, [r3, #6]
 8009b56:	2200      	movs	r2, #0
 8009b58:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 8009b66:	88fa      	ldrh	r2, [r7, #6]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009b6c:	f7f7 f99a 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009b70:	f7f7 f95c 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009b74:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	b2db      	uxtb	r3, r3
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	460b      	mov	r3, r1
 8009b92:	817b      	strh	r3, [r7, #10]
 8009b94:	4613      	mov	r3, r2
 8009b96:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8009b98:	f7f7 f9aa 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009b9c:	f7f7 f93a 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 8009ba0:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f042 021f 	orr.w	r2, r2, #31
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	705a      	strb	r2, [r3, #1]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	709a      	strb	r2, [r3, #2]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f042 0204 	orr.w	r2, r2, #4
 8009bc4:	711a      	strb	r2, [r3, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	715a      	strb	r2, [r3, #5]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	719a      	strb	r2, [r3, #6]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8009bd8:	897a      	ldrh	r2, [r7, #10]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8009be4:	893a      	ldrh	r2, [r7, #8]
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8009bea:	f7f7 f95b 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009bee:	f7f7 f91d 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009bf2:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	b29b      	uxth	r3, r3
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8009c04:	b5b0      	push	{r4, r5, r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8009c0e:	f7f7 f919 	bl	8000e44 <THREAD_Get_NotificationPayloadBuffer>
 8009c12:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	2b48      	cmp	r3, #72	; 0x48
 8009c1c:	f200 8543 	bhi.w	800a6a6 <OpenThread_CallBack_Processing+0xaa2>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <OpenThread_CallBack_Processing+0x24>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009f93 	.word	0x08009f93
 8009c2c:	0800a04b 	.word	0x0800a04b
 8009c30:	0800a0a3 	.word	0x0800a0a3
 8009c34:	0800a14f 	.word	0x0800a14f
 8009c38:	0800a15b 	.word	0x0800a15b
 8009c3c:	0800a179 	.word	0x0800a179
 8009c40:	0800a6a7 	.word	0x0800a6a7
 8009c44:	0800a1a3 	.word	0x0800a1a3
 8009c48:	0800a1bd 	.word	0x0800a1bd
 8009c4c:	0800a1f1 	.word	0x0800a1f1
 8009c50:	0800a20f 	.word	0x0800a20f
 8009c54:	0800a22d 	.word	0x0800a22d
 8009c58:	0800a6a7 	.word	0x0800a6a7
 8009c5c:	0800a257 	.word	0x0800a257
 8009c60:	0800a2b9 	.word	0x0800a2b9
 8009c64:	0800a2df 	.word	0x0800a2df
 8009c68:	0800a2ff 	.word	0x0800a2ff
 8009c6c:	0800a31d 	.word	0x0800a31d
 8009c70:	0800a6a7 	.word	0x0800a6a7
 8009c74:	0800a345 	.word	0x0800a345
 8009c78:	0800a36d 	.word	0x0800a36d
 8009c7c:	0800a6a7 	.word	0x0800a6a7
 8009c80:	0800a38b 	.word	0x0800a38b
 8009c84:	0800a3af 	.word	0x0800a3af
 8009c88:	0800a3d9 	.word	0x0800a3d9
 8009c8c:	08009db9 	.word	0x08009db9
 8009c90:	08009ddd 	.word	0x08009ddd
 8009c94:	08009e01 	.word	0x08009e01
 8009c98:	08009e2b 	.word	0x08009e2b
 8009c9c:	0800a6a7 	.word	0x0800a6a7
 8009ca0:	0800a3f9 	.word	0x0800a3f9
 8009ca4:	0800a6a7 	.word	0x0800a6a7
 8009ca8:	0800a6a7 	.word	0x0800a6a7
 8009cac:	0800a6a7 	.word	0x0800a6a7
 8009cb0:	0800a6a7 	.word	0x0800a6a7
 8009cb4:	0800a6a7 	.word	0x0800a6a7
 8009cb8:	0800a081 	.word	0x0800a081
 8009cbc:	0800a0e1 	.word	0x0800a0e1
 8009cc0:	0800a107 	.word	0x0800a107
 8009cc4:	0800a12d 	.word	0x0800a12d
 8009cc8:	0800a41b 	.word	0x0800a41b
 8009ccc:	0800a459 	.word	0x0800a459
 8009cd0:	0800a471 	.word	0x0800a471
 8009cd4:	08009faf 	.word	0x08009faf
 8009cd8:	0800a015 	.word	0x0800a015
 8009cdc:	0800a6a7 	.word	0x0800a6a7
 8009ce0:	08009e55 	.word	0x08009e55
 8009ce4:	08009e75 	.word	0x08009e75
 8009ce8:	08009e95 	.word	0x08009e95
 8009cec:	08009eb5 	.word	0x08009eb5
 8009cf0:	08009ed7 	.word	0x08009ed7
 8009cf4:	08009ef9 	.word	0x08009ef9
 8009cf8:	0800a6a7 	.word	0x0800a6a7
 8009cfc:	0800a6a7 	.word	0x0800a6a7
 8009d00:	08009d4d 	.word	0x08009d4d
 8009d04:	08009d71 	.word	0x08009d71
 8009d08:	08009d95 	.word	0x08009d95
 8009d0c:	0800a6a7 	.word	0x0800a6a7
 8009d10:	0800a6a7 	.word	0x0800a6a7
 8009d14:	08009f1b 	.word	0x08009f1b
 8009d18:	08009f39 	.word	0x08009f39
 8009d1c:	0800a6a7 	.word	0x0800a6a7
 8009d20:	08009f6b 	.word	0x08009f6b
 8009d24:	0800a02d 	.word	0x0800a02d
 8009d28:	0800a49f 	.word	0x0800a49f
 8009d2c:	0800a4bd 	.word	0x0800a4bd
 8009d30:	0800a4db 	.word	0x0800a4db
 8009d34:	0800a559 	.word	0x0800a559
 8009d38:	0800a587 	.word	0x0800a587
 8009d3c:	0800a5cb 	.word	0x0800a5cb
 8009d40:	0800a635 	.word	0x0800a635
 8009d44:	0800a673 	.word	0x0800a673
 8009d48:	0800a5ff 	.word	0x0800a5ff
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 8009d4c:	4b9f      	ldr	r3, [pc, #636]	; (8009fcc <OpenThread_CallBack_Processing+0x3c8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 84ab 	beq.w	800a6ac <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8009d56:	4b9d      	ldr	r3, [pc, #628]	; (8009fcc <OpenThread_CallBack_Processing+0x3c8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	6892      	ldr	r2, [r2, #8]
 8009d5e:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8009d64:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8009d6a:	4798      	blx	r3
    }
    break;
 8009d6c:	f000 bc9e 	b.w	800a6ac <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8009d70:	4b97      	ldr	r3, [pc, #604]	; (8009fd0 <OpenThread_CallBack_Processing+0x3cc>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 849b 	beq.w	800a6b0 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8009d7a:	4b95      	ldr	r3, [pc, #596]	; (8009fd0 <OpenThread_CallBack_Processing+0x3cc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	6892      	ldr	r2, [r2, #8]
 8009d82:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8009d88:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8009d8e:	4798      	blx	r3
    }
    break;
 8009d90:	f000 bc8e 	b.w	800a6b0 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8009d94:	4b8f      	ldr	r3, [pc, #572]	; (8009fd4 <OpenThread_CallBack_Processing+0x3d0>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 848b 	beq.w	800a6b4 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8009d9e:	4b8d      	ldr	r3, [pc, #564]	; (8009fd4 <OpenThread_CallBack_Processing+0x3d0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	6892      	ldr	r2, [r2, #8]
 8009da6:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8009dac:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8009db2:	4798      	blx	r3
    }
    break;
 8009db4:	f000 bc7e 	b.w	800a6b4 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8009db8:	4b87      	ldr	r3, [pc, #540]	; (8009fd8 <OpenThread_CallBack_Processing+0x3d4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 847b 	beq.w	800a6b8 <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8009dc2:	4b85      	ldr	r3, [pc, #532]	; (8009fd8 <OpenThread_CallBack_Processing+0x3d4>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	6892      	ldr	r2, [r2, #8]
 8009dca:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8009dd0:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8009dd6:	4798      	blx	r3
    }
    break;
 8009dd8:	f000 bc6e 	b.w	800a6b8 <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 8009ddc:	4b7f      	ldr	r3, [pc, #508]	; (8009fdc <OpenThread_CallBack_Processing+0x3d8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 846b 	beq.w	800a6bc <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8009de6:	4b7d      	ldr	r3, [pc, #500]	; (8009fdc <OpenThread_CallBack_Processing+0x3d8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	6892      	ldr	r2, [r2, #8]
 8009dee:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8009df4:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8009dfa:	4798      	blx	r3
    }
    break;
 8009dfc:	f000 bc5e 	b.w	800a6bc <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 8009e00:	4b77      	ldr	r3, [pc, #476]	; (8009fe0 <OpenThread_CallBack_Processing+0x3dc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 845b 	beq.w	800a6c0 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8009e0a:	4b75      	ldr	r3, [pc, #468]	; (8009fe0 <OpenThread_CallBack_Processing+0x3dc>)
 8009e0c:	681c      	ldr	r4, [r3, #0]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8009e18:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8009e1e:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8009e24:	47a0      	blx	r4
    }
    break;
 8009e26:	f000 bc4b 	b.w	800a6c0 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 8009e2a:	4b6e      	ldr	r3, [pc, #440]	; (8009fe4 <OpenThread_CallBack_Processing+0x3e0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 8448 	beq.w	800a6c4 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009e34:	4b6b      	ldr	r3, [pc, #428]	; (8009fe4 <OpenThread_CallBack_Processing+0x3e0>)
 8009e36:	681c      	ldr	r4, [r3, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009e42:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009e48:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009e4e:	47a0      	blx	r4
    }
    break;
 8009e50:	f000 bc38 	b.w	800a6c4 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 8009e54:	4b64      	ldr	r3, [pc, #400]	; (8009fe8 <OpenThread_CallBack_Processing+0x3e4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 8435 	beq.w	800a6c8 <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8009e5e:	4b62      	ldr	r3, [pc, #392]	; (8009fe8 <OpenThread_CallBack_Processing+0x3e4>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	6892      	ldr	r2, [r2, #8]
 8009e66:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	4798      	blx	r3
    }
    break;
 8009e70:	f000 bc2a 	b.w	800a6c8 <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 8009e74:	4b5d      	ldr	r3, [pc, #372]	; (8009fec <OpenThread_CallBack_Processing+0x3e8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 8427 	beq.w	800a6cc <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8009e7e:	4b5b      	ldr	r3, [pc, #364]	; (8009fec <OpenThread_CallBack_Processing+0x3e8>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	6892      	ldr	r2, [r2, #8]
 8009e86:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4798      	blx	r3
    }
    break;
 8009e90:	f000 bc1c 	b.w	800a6cc <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 8009e94:	4b56      	ldr	r3, [pc, #344]	; (8009ff0 <OpenThread_CallBack_Processing+0x3ec>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 8419 	beq.w	800a6d0 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8009e9e:	4b54      	ldr	r3, [pc, #336]	; (8009ff0 <OpenThread_CallBack_Processing+0x3ec>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	6892      	ldr	r2, [r2, #8]
 8009ea6:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8009eac:	4611      	mov	r1, r2
 8009eae:	4798      	blx	r3
    }
    break;
 8009eb0:	f000 bc0e 	b.w	800a6d0 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 8009eb4:	4b4f      	ldr	r3, [pc, #316]	; (8009ff4 <OpenThread_CallBack_Processing+0x3f0>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 840b 	beq.w	800a6d4 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 8009ebe:	4b4d      	ldr	r3, [pc, #308]	; (8009ff4 <OpenThread_CallBack_Processing+0x3f0>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	6892      	ldr	r2, [r2, #8]
 8009ec6:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8009ecc:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8009ed2:	4798      	blx	r3
    }
    break;
 8009ed4:	e3fe      	b.n	800a6d4 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 8009ed6:	4b48      	ldr	r3, [pc, #288]	; (8009ff8 <OpenThread_CallBack_Processing+0x3f4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 83fc 	beq.w	800a6d8 <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 8009ee0:	4b45      	ldr	r3, [pc, #276]	; (8009ff8 <OpenThread_CallBack_Processing+0x3f4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	6892      	ldr	r2, [r2, #8]
 8009ee8:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 8009eee:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 8009ef4:	4798      	blx	r3
    }
    break;
 8009ef6:	e3ef      	b.n	800a6d8 <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 8009ef8:	4b3f      	ldr	r3, [pc, #252]	; (8009ff8 <OpenThread_CallBack_Processing+0x3f4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 83ed 	beq.w	800a6dc <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 8009f02:	4b3e      	ldr	r3, [pc, #248]	; (8009ffc <OpenThread_CallBack_Processing+0x3f8>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	6892      	ldr	r2, [r2, #8]
 8009f0a:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 8009f10:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 8009f16:	4798      	blx	r3
    }
    break;
 8009f18:	e3e0      	b.n	800a6dc <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 8009f1a:	4b39      	ldr	r3, [pc, #228]	; (800a000 <OpenThread_CallBack_Processing+0x3fc>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 83de 	beq.w	800a6e0 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8009f24:	4b36      	ldr	r3, [pc, #216]	; (800a000 <OpenThread_CallBack_Processing+0x3fc>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	6892      	ldr	r2, [r2, #8]
 8009f2c:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8009f32:	4611      	mov	r1, r2
 8009f34:	4798      	blx	r3
    }
    break;
 8009f36:	e3d3      	b.n	800a6e0 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 8009f38:	4b32      	ldr	r3, [pc, #200]	; (800a004 <OpenThread_CallBack_Processing+0x400>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 83d1 	beq.w	800a6e4 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 8009f42:	4b30      	ldr	r3, [pc, #192]	; (800a004 <OpenThread_CallBack_Processing+0x400>)
 8009f44:	681c      	ldr	r4, [r3, #0]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 8009f50:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 8009f56:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 8009f5c:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	462b      	mov	r3, r5
 8009f66:	47a0      	blx	r4
    }
    break;
 8009f68:	e3bc      	b.n	800a6e4 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 8009f6a:	4b27      	ldr	r3, [pc, #156]	; (800a008 <OpenThread_CallBack_Processing+0x404>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 83ba 	beq.w	800a6e8 <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009f74:	4b24      	ldr	r3, [pc, #144]	; (800a008 <OpenThread_CallBack_Processing+0x404>)
 8009f76:	681c      	ldr	r4, [r3, #0]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009f82:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009f88:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009f8e:	47a0      	blx	r4
    }
    break;
 8009f90:	e3aa      	b.n	800a6e8 <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 8009f92:	4b1e      	ldr	r3, [pc, #120]	; (800a00c <OpenThread_CallBack_Processing+0x408>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 83a8 	beq.w	800a6ec <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009f9c:	4b1b      	ldr	r3, [pc, #108]	; (800a00c <OpenThread_CallBack_Processing+0x408>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4798      	blx	r3
    }
    break;
 8009fac:	e39e      	b.n	800a6ec <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 8009fae:	4b18      	ldr	r3, [pc, #96]	; (800a010 <OpenThread_CallBack_Processing+0x40c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 839c 	beq.w	800a6f0 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8009fb8:	4b15      	ldr	r3, [pc, #84]	; (800a010 <OpenThread_CallBack_Processing+0x40c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	6892      	ldr	r2, [r2, #8]
 8009fc0:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	4798      	blx	r3
    }
    break;
 8009fca:	e391      	b.n	800a6f0 <OpenThread_CallBack_Processing+0xaec>
 8009fcc:	20000718 	.word	0x20000718
 8009fd0:	20000720 	.word	0x20000720
 8009fd4:	2000071c 	.word	0x2000071c
 8009fd8:	200006ac 	.word	0x200006ac
 8009fdc:	200006a8 	.word	0x200006a8
 8009fe0:	200006b0 	.word	0x200006b0
 8009fe4:	200006a4 	.word	0x200006a4
 8009fe8:	20000724 	.word	0x20000724
 8009fec:	20000728 	.word	0x20000728
 8009ff0:	2000072c 	.word	0x2000072c
 8009ff4:	20000734 	.word	0x20000734
 8009ff8:	20000730 	.word	0x20000730
 8009ffc:	20000738 	.word	0x20000738
 800a000:	20000744 	.word	0x20000744
 800a004:	20000740 	.word	0x20000740
 800a008:	2000073c 	.word	0x2000073c
 800a00c:	20000684 	.word	0x20000684
 800a010:	200006b4 	.word	0x200006b4
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 800a014:	4b97      	ldr	r3, [pc, #604]	; (800a274 <OpenThread_CallBack_Processing+0x670>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 836b 	beq.w	800a6f4 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 800a01e:	4b95      	ldr	r3, [pc, #596]	; (800a274 <OpenThread_CallBack_Processing+0x670>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	6892      	ldr	r2, [r2, #8]
 800a026:	4610      	mov	r0, r2
 800a028:	4798      	blx	r3
    }
    break;
 800a02a:	e363      	b.n	800a6f4 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 800a02c:	4b92      	ldr	r3, [pc, #584]	; (800a278 <OpenThread_CallBack_Processing+0x674>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 8361 	beq.w	800a6f8 <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800a036:	4b90      	ldr	r3, [pc, #576]	; (800a278 <OpenThread_CallBack_Processing+0x674>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	6892      	ldr	r2, [r2, #8]
 800a03e:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800a044:	4611      	mov	r1, r2
 800a046:	4798      	blx	r3
    }
    break;
 800a048:	e356      	b.n	800a6f8 <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	461a      	mov	r2, r3
 800a050:	4b8a      	ldr	r3, [pc, #552]	; (800a27c <OpenThread_CallBack_Processing+0x678>)
 800a052:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800a054:	4b89      	ldr	r3, [pc, #548]	; (800a27c <OpenThread_CallBack_Processing+0x678>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	4a89      	ldr	r2, [pc, #548]	; (800a280 <OpenThread_CallBack_Processing+0x67c>)
 800a05c:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800a05e:	4b88      	ldr	r3, [pc, #544]	; (800a280 <OpenThread_CallBack_Processing+0x67c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 834a 	beq.w	800a6fc <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800a068:	4b85      	ldr	r3, [pc, #532]	; (800a280 <OpenThread_CallBack_Processing+0x67c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a83      	ldr	r2, [pc, #524]	; (800a27c <OpenThread_CallBack_Processing+0x678>)
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800a076:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800a07c:	4798      	blx	r3
    }
    break;
 800a07e:	e33d      	b.n	800a6fc <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800a080:	4b80      	ldr	r3, [pc, #512]	; (800a284 <OpenThread_CallBack_Processing+0x680>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 833b 	beq.w	800a700 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a08a:	4b7e      	ldr	r3, [pc, #504]	; (800a284 <OpenThread_CallBack_Processing+0x680>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	6892      	ldr	r2, [r2, #8]
 800a092:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a098:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a09e:	4798      	blx	r3
    }
    break;
 800a0a0:	e32e      	b.n	800a700 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4b77      	ldr	r3, [pc, #476]	; (800a288 <OpenThread_CallBack_Processing+0x684>)
 800a0aa:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800a0ac:	4b76      	ldr	r3, [pc, #472]	; (800a288 <OpenThread_CallBack_Processing+0x684>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	4a76      	ldr	r2, [pc, #472]	; (800a28c <OpenThread_CallBack_Processing+0x688>)
 800a0b4:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800a0b6:	4b75      	ldr	r3, [pc, #468]	; (800a28c <OpenThread_CallBack_Processing+0x688>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 8322 	beq.w	800a704 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a0c0:	4b72      	ldr	r3, [pc, #456]	; (800a28c <OpenThread_CallBack_Processing+0x688>)
 800a0c2:	681c      	ldr	r4, [r3, #0]
 800a0c4:	4b70      	ldr	r3, [pc, #448]	; (800a288 <OpenThread_CallBack_Processing+0x684>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a0ce:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a0d4:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	47a0      	blx	r4
    }
    break;
 800a0de:	e311      	b.n	800a704 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800a0e0:	4b6b      	ldr	r3, [pc, #428]	; (800a290 <OpenThread_CallBack_Processing+0x68c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 830f 	beq.w	800a708 <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a0ea:	4b69      	ldr	r3, [pc, #420]	; (800a290 <OpenThread_CallBack_Processing+0x68c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	6892      	ldr	r2, [r2, #8]
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	bf14      	ite	ne
 800a0f6:	2201      	movne	r2, #1
 800a0f8:	2200      	moveq	r2, #0
 800a0fa:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a100:	4611      	mov	r1, r2
 800a102:	4798      	blx	r3
    }
    break;
 800a104:	e300      	b.n	800a708 <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800a106:	4b62      	ldr	r3, [pc, #392]	; (800a290 <OpenThread_CallBack_Processing+0x68c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 82fe 	beq.w	800a70c <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a110:	4b5f      	ldr	r3, [pc, #380]	; (800a290 <OpenThread_CallBack_Processing+0x68c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	6892      	ldr	r2, [r2, #8]
 800a118:	2a00      	cmp	r2, #0
 800a11a:	bf14      	ite	ne
 800a11c:	2201      	movne	r2, #1
 800a11e:	2200      	moveq	r2, #0
 800a120:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a126:	4611      	mov	r1, r2
 800a128:	4798      	blx	r3
    }
    break;
 800a12a:	e2ef      	b.n	800a70c <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800a12c:	4b59      	ldr	r3, [pc, #356]	; (800a294 <OpenThread_CallBack_Processing+0x690>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 82ed 	beq.w	800a710 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800a136:	4b57      	ldr	r3, [pc, #348]	; (800a294 <OpenThread_CallBack_Processing+0x690>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	6892      	ldr	r2, [r2, #8]
 800a13e:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800a144:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800a14a:	4798      	blx	r3
    }
    break;
 800a14c:	e2e0      	b.n	800a710 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a14e:	2001      	movs	r0, #1
 800a150:	f000 fb45 	bl	800a7de <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800a154:	f7f9 fdb5 	bl	8003cc2 <HAL_NVIC_SystemReset>
    break;
 800a158:	e317      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800a15a:	4b4f      	ldr	r3, [pc, #316]	; (800a298 <OpenThread_CallBack_Processing+0x694>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 82d8 	beq.w	800a714 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a164:	4b4c      	ldr	r3, [pc, #304]	; (800a298 <OpenThread_CallBack_Processing+0x694>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	6892      	ldr	r2, [r2, #8]
 800a16c:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a172:	4611      	mov	r1, r2
 800a174:	4798      	blx	r3
    }
    break;
 800a176:	e2cd      	b.n	800a714 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800a178:	4b48      	ldr	r3, [pc, #288]	; (800a29c <OpenThread_CallBack_Processing+0x698>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 82cb 	beq.w	800a718 <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800a182:	4b46      	ldr	r3, [pc, #280]	; (800a29c <OpenThread_CallBack_Processing+0x698>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	6892      	ldr	r2, [r2, #8]
 800a18a:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800a190:	2a00      	cmp	r2, #0
 800a192:	bf14      	ite	ne
 800a194:	2201      	movne	r2, #1
 800a196:	2200      	moveq	r2, #0
 800a198:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800a19e:	4798      	blx	r3
    }
    break;
 800a1a0:	e2ba      	b.n	800a718 <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800a1a2:	4b3f      	ldr	r3, [pc, #252]	; (800a2a0 <OpenThread_CallBack_Processing+0x69c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 82b8 	beq.w	800a71c <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800a1ac:	4b3c      	ldr	r3, [pc, #240]	; (800a2a0 <OpenThread_CallBack_Processing+0x69c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	4798      	blx	r3
    }
    break;
 800a1ba:	e2af      	b.n	800a71c <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 800a1bc:	4b39      	ldr	r3, [pc, #228]	; (800a2a4 <OpenThread_CallBack_Processing+0x6a0>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 82ad 	beq.w	800a720 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800a1c6:	4b37      	ldr	r3, [pc, #220]	; (800a2a4 <OpenThread_CallBack_Processing+0x6a0>)
 800a1c8:	681c      	ldr	r4, [r3, #0]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800a1d4:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800a1da:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800a1e0:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	47a0      	blx	r4
    }
    break;
 800a1ee:	e297      	b.n	800a720 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800a1f0:	4b2d      	ldr	r3, [pc, #180]	; (800a2a8 <OpenThread_CallBack_Processing+0x6a4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 8295 	beq.w	800a724 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <OpenThread_CallBack_Processing+0x6a4>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	6892      	ldr	r2, [r2, #8]
 800a202:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a208:	4611      	mov	r1, r2
 800a20a:	4798      	blx	r3
    }
    break;
 800a20c:	e28a      	b.n	800a724 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800a20e:	4b27      	ldr	r3, [pc, #156]	; (800a2ac <OpenThread_CallBack_Processing+0x6a8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 8288 	beq.w	800a728 <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a218:	4b24      	ldr	r3, [pc, #144]	; (800a2ac <OpenThread_CallBack_Processing+0x6a8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	6892      	ldr	r2, [r2, #8]
 800a220:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a226:	4611      	mov	r1, r2
 800a228:	4798      	blx	r3
    }
    break;
 800a22a:	e27d      	b.n	800a728 <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800a22c:	4b20      	ldr	r3, [pc, #128]	; (800a2b0 <OpenThread_CallBack_Processing+0x6ac>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 827b 	beq.w	800a72c <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a236:	4b1e      	ldr	r3, [pc, #120]	; (800a2b0 <OpenThread_CallBack_Processing+0x6ac>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	6892      	ldr	r2, [r2, #8]
 800a23e:	4610      	mov	r0, r2
          p_notification->Data[1],
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a244:	2a00      	cmp	r2, #0
 800a246:	bf14      	ite	ne
 800a248:	2201      	movne	r2, #1
 800a24a:	2200      	moveq	r2, #0
 800a24c:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a252:	4798      	blx	r3
    }
    break;
 800a254:	e26a      	b.n	800a72c <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800a256:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <OpenThread_CallBack_Processing+0x6b0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 8268 	beq.w	800a730 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800a260:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <OpenThread_CallBack_Processing+0x6b0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	683a      	ldr	r2, [r7, #0]
 800a266:	6892      	ldr	r2, [r2, #8]
 800a268:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800a26e:	4611      	mov	r1, r2
 800a270:	4798      	blx	r3
    }
    break;
 800a272:	e25d      	b.n	800a730 <OpenThread_CallBack_Processing+0xb2c>
 800a274:	200006b8 	.word	0x200006b8
 800a278:	200006bc 	.word	0x200006bc
 800a27c:	20000700 	.word	0x20000700
 800a280:	200006f4 	.word	0x200006f4
 800a284:	200006f8 	.word	0x200006f8
 800a288:	20000704 	.word	0x20000704
 800a28c:	200006fc 	.word	0x200006fc
 800a290:	2000070c 	.word	0x2000070c
 800a294:	20000708 	.word	0x20000708
 800a298:	2000068c 	.word	0x2000068c
 800a29c:	20000690 	.word	0x20000690
 800a2a0:	20000688 	.word	0x20000688
 800a2a4:	20000694 	.word	0x20000694
 800a2a8:	20000698 	.word	0x20000698
 800a2ac:	2000069c 	.word	0x2000069c
 800a2b0:	200006a0 	.word	0x200006a0
 800a2b4:	200006c0 	.word	0x200006c0
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800a2b8:	4b95      	ldr	r3, [pc, #596]	; (800a510 <OpenThread_CallBack_Processing+0x90c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8239 	beq.w	800a734 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a2c2:	4b93      	ldr	r3, [pc, #588]	; (800a510 <OpenThread_CallBack_Processing+0x90c>)
 800a2c4:	681c      	ldr	r4, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a2ce:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a2d4:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a2da:	47a0      	blx	r4
    }
    break;
 800a2dc:	e22a      	b.n	800a734 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800a2de:	4b8d      	ldr	r3, [pc, #564]	; (800a514 <OpenThread_CallBack_Processing+0x910>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 8228 	beq.w	800a738 <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800a2e8:	4b8a      	ldr	r3, [pc, #552]	; (800a514 <OpenThread_CallBack_Processing+0x910>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	6892      	ldr	r2, [r2, #8]
 800a2f0:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800a2fa:	4798      	blx	r3
    }
    break;
 800a2fc:	e21c      	b.n	800a738 <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800a2fe:	4b86      	ldr	r3, [pc, #536]	; (800a518 <OpenThread_CallBack_Processing+0x914>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 821a 	beq.w	800a73c <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800a308:	4b83      	ldr	r3, [pc, #524]	; (800a518 <OpenThread_CallBack_Processing+0x914>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	6892      	ldr	r2, [r2, #8]
 800a310:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800a316:	4611      	mov	r1, r2
 800a318:	4798      	blx	r3
    }
    break;
 800a31a:	e20f      	b.n	800a73c <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800a31c:	4b7f      	ldr	r3, [pc, #508]	; (800a51c <OpenThread_CallBack_Processing+0x918>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 820d 	beq.w	800a740 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800a326:	4b7d      	ldr	r3, [pc, #500]	; (800a51c <OpenThread_CallBack_Processing+0x918>)
 800a328:	681c      	ldr	r4, [r3, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800a334:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800a33a:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800a340:	47a0      	blx	r4
    }
    break;
 800a342:	e1fd      	b.n	800a740 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800a344:	4b76      	ldr	r3, [pc, #472]	; (800a520 <OpenThread_CallBack_Processing+0x91c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 81fb 	beq.w	800a744 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a34e:	4b74      	ldr	r3, [pc, #464]	; (800a520 <OpenThread_CallBack_Processing+0x91c>)
 800a350:	681c      	ldr	r4, [r3, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a35c:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a362:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a368:	47a0      	blx	r4
    }
    break;
 800a36a:	e1eb      	b.n	800a744 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800a36c:	4b6d      	ldr	r3, [pc, #436]	; (800a524 <OpenThread_CallBack_Processing+0x920>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 81e9 	beq.w	800a748 <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800a376:	4b6b      	ldr	r3, [pc, #428]	; (800a524 <OpenThread_CallBack_Processing+0x920>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	6892      	ldr	r2, [r2, #8]
 800a37e:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800a384:	4611      	mov	r1, r2
 800a386:	4798      	blx	r3
    }
    break;
 800a388:	e1de      	b.n	800a748 <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800a38a:	4b67      	ldr	r3, [pc, #412]	; (800a528 <OpenThread_CallBack_Processing+0x924>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 81dc 	beq.w	800a74c <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a394:	4b64      	ldr	r3, [pc, #400]	; (800a528 <OpenThread_CallBack_Processing+0x924>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	6892      	ldr	r2, [r2, #8]
 800a39c:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a3a2:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	4798      	blx	r3
    }
    break;
 800a3ac:	e1ce      	b.n	800a74c <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800a3ae:	4b5f      	ldr	r3, [pc, #380]	; (800a52c <OpenThread_CallBack_Processing+0x928>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 81cc 	beq.w	800a750 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a3b8:	4b5c      	ldr	r3, [pc, #368]	; (800a52c <OpenThread_CallBack_Processing+0x928>)
 800a3ba:	681c      	ldr	r4, [r3, #0]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a3c6:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a3cc:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	47a0      	blx	r4
    }
    break;
 800a3d6:	e1bb      	b.n	800a750 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800a3d8:	4b55      	ldr	r3, [pc, #340]	; (800a530 <OpenThread_CallBack_Processing+0x92c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 81b9 	beq.w	800a754 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a3e2:	4b53      	ldr	r3, [pc, #332]	; (800a530 <OpenThread_CallBack_Processing+0x92c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	6892      	ldr	r2, [r2, #8]
 800a3ea:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a3f0:	b252      	sxtb	r2, r2
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4798      	blx	r3
    }
    break;
 800a3f6:	e1ad      	b.n	800a754 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800a3f8:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <OpenThread_CallBack_Processing+0x930>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 81ab 	beq.w	800a758 <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800a402:	4b4c      	ldr	r3, [pc, #304]	; (800a534 <OpenThread_CallBack_Processing+0x930>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	6892      	ldr	r2, [r2, #8]
 800a40a:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800a410:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800a416:	4798      	blx	r3
    }
    break;
 800a418:	e19e      	b.n	800a758 <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	461a      	mov	r2, r3
 800a420:	4b45      	ldr	r3, [pc, #276]	; (800a538 <OpenThread_CallBack_Processing+0x934>)
 800a422:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800a424:	4b44      	ldr	r3, [pc, #272]	; (800a538 <OpenThread_CallBack_Processing+0x934>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	4a44      	ldr	r2, [pc, #272]	; (800a53c <OpenThread_CallBack_Processing+0x938>)
 800a42c:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800a42e:	4b43      	ldr	r3, [pc, #268]	; (800a53c <OpenThread_CallBack_Processing+0x938>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 8192 	beq.w	800a75c <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800a438:	4b40      	ldr	r3, [pc, #256]	; (800a53c <OpenThread_CallBack_Processing+0x938>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a3e      	ldr	r2, [pc, #248]	; (800a538 <OpenThread_CallBack_Processing+0x934>)
 800a43e:	6812      	ldr	r2, [r2, #0]
 800a440:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800a446:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800a44c:	4798      	blx	r3
 800a44e:	4603      	mov	r3, r0
 800a450:	461a      	mov	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	609a      	str	r2, [r3, #8]
      }
      break;
 800a456:	e181      	b.n	800a75c <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800a458:	4b39      	ldr	r3, [pc, #228]	; (800a540 <OpenThread_CallBack_Processing+0x93c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 817f 	beq.w	800a760 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800a462:	4b37      	ldr	r3, [pc, #220]	; (800a540 <OpenThread_CallBack_Processing+0x93c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	6892      	ldr	r2, [r2, #8]
 800a46a:	4610      	mov	r0, r2
 800a46c:	4798      	blx	r3
    }
    break;
 800a46e:	e177      	b.n	800a760 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800a470:	4b34      	ldr	r3, [pc, #208]	; (800a544 <OpenThread_CallBack_Processing+0x940>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8175 	beq.w	800a764 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800a47a:	4b32      	ldr	r3, [pc, #200]	; (800a544 <OpenThread_CallBack_Processing+0x940>)
 800a47c:	6819      	ldr	r1, [r3, #0]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800a488:	2200      	movs	r2, #0
 800a48a:	461c      	mov	r4, r3
 800a48c:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800a492:	b2db      	uxtb	r3, r3
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	4622      	mov	r2, r4
 800a498:	462b      	mov	r3, r5
 800a49a:	4788      	blx	r1
    }
    break;
 800a49c:	e162      	b.n	800a764 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 800a49e:	4b2a      	ldr	r3, [pc, #168]	; (800a548 <OpenThread_CallBack_Processing+0x944>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8160 	beq.w	800a768 <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800a4a8:	4b27      	ldr	r3, [pc, #156]	; (800a548 <OpenThread_CallBack_Processing+0x944>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	6892      	ldr	r2, [r2, #8]
 800a4b0:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4798      	blx	r3
    }
    break;
 800a4ba:	e155      	b.n	800a768 <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 800a4bc:	4b23      	ldr	r3, [pc, #140]	; (800a54c <OpenThread_CallBack_Processing+0x948>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 8153 	beq.w	800a76c <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800a4c6:	4b21      	ldr	r3, [pc, #132]	; (800a54c <OpenThread_CallBack_Processing+0x948>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	6892      	ldr	r2, [r2, #8]
 800a4ce:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4798      	blx	r3
    }
    break;
 800a4d8:	e148      	b.n	800a76c <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a4e2:	4a1b      	ldr	r2, [pc, #108]	; (800a550 <OpenThread_CallBack_Processing+0x94c>)
 800a4e4:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	; (800a550 <OpenThread_CallBack_Processing+0x94c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	4a19      	ldr	r2, [pc, #100]	; (800a554 <OpenThread_CallBack_Processing+0x950>)
 800a4ee:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 800a4f0:	4b18      	ldr	r3, [pc, #96]	; (800a554 <OpenThread_CallBack_Processing+0x950>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 813b 	beq.w	800a770 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <OpenThread_CallBack_Processing+0x950>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	6892      	ldr	r2, [r2, #8]
 800a502:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800a508:	b2d2      	uxtb	r2, r2
 800a50a:	4611      	mov	r1, r2
 800a50c:	4798      	blx	r3
    }
    break;
 800a50e:	e12f      	b.n	800a770 <OpenThread_CallBack_Processing+0xb6c>
 800a510:	200006cc 	.word	0x200006cc
 800a514:	200006d0 	.word	0x200006d0
 800a518:	200006c4 	.word	0x200006c4
 800a51c:	200006c8 	.word	0x200006c8
 800a520:	200006d4 	.word	0x200006d4
 800a524:	200006d8 	.word	0x200006d8
 800a528:	200006dc 	.word	0x200006dc
 800a52c:	200006e0 	.word	0x200006e0
 800a530:	200006e4 	.word	0x200006e4
 800a534:	200006e8 	.word	0x200006e8
 800a538:	200006f0 	.word	0x200006f0
 800a53c:	200006ec 	.word	0x200006ec
 800a540:	20000710 	.word	0x20000710
 800a544:	20000714 	.word	0x20000714
 800a548:	20000748 	.word	0x20000748
 800a54c:	2000074c 	.word	0x2000074c
 800a550:	20000750 	.word	0x20000750
 800a554:	20000758 	.word	0x20000758
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a560:	4a8d      	ldr	r2, [pc, #564]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a562:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800a564:	4b8c      	ldr	r3, [pc, #560]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	4a8c      	ldr	r2, [pc, #560]	; (800a79c <OpenThread_CallBack_Processing+0xb98>)
 800a56c:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 800a56e:	4b8b      	ldr	r3, [pc, #556]	; (800a79c <OpenThread_CallBack_Processing+0xb98>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 80fe 	beq.w	800a774 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800a578:	4b88      	ldr	r3, [pc, #544]	; (800a79c <OpenThread_CallBack_Processing+0xb98>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	6892      	ldr	r2, [r2, #8]
 800a580:	4610      	mov	r0, r2
 800a582:	4798      	blx	r3
    }
    break;
 800a584:	e0f6      	b.n	800a774 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a58e:	4a82      	ldr	r2, [pc, #520]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a590:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800a592:	4b81      	ldr	r3, [pc, #516]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	4a81      	ldr	r2, [pc, #516]	; (800a7a0 <OpenThread_CallBack_Processing+0xb9c>)
 800a59a:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 800a59c:	4b80      	ldr	r3, [pc, #512]	; (800a7a0 <OpenThread_CallBack_Processing+0xb9c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80e9 	beq.w	800a778 <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800a5a6:	4b7e      	ldr	r3, [pc, #504]	; (800a7a0 <OpenThread_CallBack_Processing+0xb9c>)
 800a5a8:	681c      	ldr	r4, [r3, #0]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bf14      	ite	ne
 800a5bc:	2301      	movne	r3, #1
 800a5be:	2300      	moveq	r3, #0
 800a5c0:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800a5c6:	47a0      	blx	r4
    }
    break;
 800a5c8:	e0d6      	b.n	800a778 <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a5d2:	4a71      	ldr	r2, [pc, #452]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a5d4:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 800a5d6:	4b70      	ldr	r3, [pc, #448]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	4a71      	ldr	r2, [pc, #452]	; (800a7a4 <OpenThread_CallBack_Processing+0xba0>)
 800a5de:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800a5e0:	4b70      	ldr	r3, [pc, #448]	; (800a7a4 <OpenThread_CallBack_Processing+0xba0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80c9 	beq.w	800a77c <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800a5ea:	4b6e      	ldr	r3, [pc, #440]	; (800a7a4 <OpenThread_CallBack_Processing+0xba0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	6892      	ldr	r2, [r2, #8]
 800a5f2:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4798      	blx	r3
    }
    break;
 800a5fc:	e0be      	b.n	800a77c <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a606:	4a64      	ldr	r2, [pc, #400]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a608:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800a60a:	4b63      	ldr	r3, [pc, #396]	; (800a798 <OpenThread_CallBack_Processing+0xb94>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	4a65      	ldr	r2, [pc, #404]	; (800a7a8 <OpenThread_CallBack_Processing+0xba4>)
 800a612:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800a614:	4b64      	ldr	r3, [pc, #400]	; (800a7a8 <OpenThread_CallBack_Processing+0xba4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80b1 	beq.w	800a780 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800a61e:	4b62      	ldr	r3, [pc, #392]	; (800a7a8 <OpenThread_CallBack_Processing+0xba4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	6892      	ldr	r2, [r2, #8]
 800a626:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800a630:	4798      	blx	r3
    }
    break;
 800a632:	e0a5      	b.n	800a780 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	4a5c      	ldr	r2, [pc, #368]	; (800a7ac <OpenThread_CallBack_Processing+0xba8>)
 800a63c:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 800a63e:	4b5b      	ldr	r3, [pc, #364]	; (800a7ac <OpenThread_CallBack_Processing+0xba8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	4a5a      	ldr	r2, [pc, #360]	; (800a7b0 <OpenThread_CallBack_Processing+0xbac>)
 800a646:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800a648:	4b59      	ldr	r3, [pc, #356]	; (800a7b0 <OpenThread_CallBack_Processing+0xbac>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8099 	beq.w	800a784 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800a652:	4b57      	ldr	r3, [pc, #348]	; (800a7b0 <OpenThread_CallBack_Processing+0xbac>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	6892      	ldr	r2, [r2, #8]
 800a65a:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800a660:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800a666:	4798      	blx	r3
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	609a      	str	r2, [r3, #8]
    }
    break;
 800a670:	e088      	b.n	800a784 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	4a4c      	ldr	r2, [pc, #304]	; (800a7ac <OpenThread_CallBack_Processing+0xba8>)
 800a67a:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 800a67c:	4b4b      	ldr	r3, [pc, #300]	; (800a7ac <OpenThread_CallBack_Processing+0xba8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	4a4c      	ldr	r2, [pc, #304]	; (800a7b4 <OpenThread_CallBack_Processing+0xbb0>)
 800a684:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800a686:	4b4b      	ldr	r3, [pc, #300]	; (800a7b4 <OpenThread_CallBack_Processing+0xbb0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d07c      	beq.n	800a788 <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800a68e:	4b49      	ldr	r3, [pc, #292]	; (800a7b4 <OpenThread_CallBack_Processing+0xbb0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	6892      	ldr	r2, [r2, #8]
 800a696:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800a69c:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800a6a2:	4798      	blx	r3
    }
    break;
 800a6a4:	e070      	b.n	800a788 <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	71fb      	strb	r3, [r7, #7]
    break;
 800a6aa:	e06e      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6ac:	bf00      	nop
 800a6ae:	e06c      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6b0:	bf00      	nop
 800a6b2:	e06a      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6b4:	bf00      	nop
 800a6b6:	e068      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6b8:	bf00      	nop
 800a6ba:	e066      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6bc:	bf00      	nop
 800a6be:	e064      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6c0:	bf00      	nop
 800a6c2:	e062      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6c4:	bf00      	nop
 800a6c6:	e060      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6c8:	bf00      	nop
 800a6ca:	e05e      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6cc:	bf00      	nop
 800a6ce:	e05c      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6d0:	bf00      	nop
 800a6d2:	e05a      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6d4:	bf00      	nop
 800a6d6:	e058      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6d8:	bf00      	nop
 800a6da:	e056      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6dc:	bf00      	nop
 800a6de:	e054      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6e0:	bf00      	nop
 800a6e2:	e052      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6e4:	bf00      	nop
 800a6e6:	e050      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6e8:	bf00      	nop
 800a6ea:	e04e      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6ec:	bf00      	nop
 800a6ee:	e04c      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6f0:	bf00      	nop
 800a6f2:	e04a      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6f4:	bf00      	nop
 800a6f6:	e048      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6f8:	bf00      	nop
 800a6fa:	e046      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a6fc:	bf00      	nop
 800a6fe:	e044      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a700:	bf00      	nop
 800a702:	e042      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a704:	bf00      	nop
 800a706:	e040      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a708:	bf00      	nop
 800a70a:	e03e      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a70c:	bf00      	nop
 800a70e:	e03c      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a710:	bf00      	nop
 800a712:	e03a      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a714:	bf00      	nop
 800a716:	e038      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a718:	bf00      	nop
 800a71a:	e036      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a71c:	bf00      	nop
 800a71e:	e034      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a720:	bf00      	nop
 800a722:	e032      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a724:	bf00      	nop
 800a726:	e030      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a728:	bf00      	nop
 800a72a:	e02e      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a72c:	bf00      	nop
 800a72e:	e02c      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a730:	bf00      	nop
 800a732:	e02a      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a734:	bf00      	nop
 800a736:	e028      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a738:	bf00      	nop
 800a73a:	e026      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a73c:	bf00      	nop
 800a73e:	e024      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a740:	bf00      	nop
 800a742:	e022      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a744:	bf00      	nop
 800a746:	e020      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a748:	bf00      	nop
 800a74a:	e01e      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a74c:	bf00      	nop
 800a74e:	e01c      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a750:	bf00      	nop
 800a752:	e01a      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a754:	bf00      	nop
 800a756:	e018      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a758:	bf00      	nop
 800a75a:	e016      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
      break;
 800a75c:	bf00      	nop
 800a75e:	e014      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a760:	bf00      	nop
 800a762:	e012      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a764:	bf00      	nop
 800a766:	e010      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a768:	bf00      	nop
 800a76a:	e00e      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a76c:	bf00      	nop
 800a76e:	e00c      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a770:	bf00      	nop
 800a772:	e00a      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a774:	bf00      	nop
 800a776:	e008      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a778:	bf00      	nop
 800a77a:	e006      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a77c:	bf00      	nop
 800a77e:	e004      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a780:	bf00      	nop
 800a782:	e002      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a784:	bf00      	nop
 800a786:	e000      	b.n	800a78a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a788:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800a78a:	f000 fc3f 	bl	800b00c <TL_THREAD_SendAck>
  return status;
 800a78e:	79fb      	ldrb	r3, [r7, #7]

}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bdb0      	pop	{r4, r5, r7, pc}
 800a798:	20000750 	.word	0x20000750
 800a79c:	2000075c 	.word	0x2000075c
 800a7a0:	20000760 	.word	0x20000760
 800a7a4:	20000764 	.word	0x20000764
 800a7a8:	20000770 	.word	0x20000770
 800a7ac:	20000754 	.word	0x20000754
 800a7b0:	20000768 	.word	0x20000768
 800a7b4:	2000076c 	.word	0x2000076c

0800a7b8 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a7be:	1d3b      	adds	r3, r7, #4
 800a7c0:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800a7cc:	f000 f956 	bl	800aa7c <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	330b      	adds	r3, #11
 800a7d4:	78db      	ldrb	r3, [r3, #3]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b088      	sub	sp, #32
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a7e8:	f107 030c 	add.w	r3, r7, #12
 800a7ec:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800a7f2:	f107 020c 	add.w	r2, r7, #12
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800a7fe:	f000 f93d 	bl	800aa7c <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	330b      	adds	r3, #11
 800a806:	78db      	ldrb	r3, [r3, #3]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3720      	adds	r7, #32
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	460a      	mov	r2, r1
 800a81a:	71fb      	strb	r3, [r7, #7]
 800a81c:	4613      	mov	r3, r2
 800a81e:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a820:	f107 030c 	add.w	r3, r7, #12
 800a824:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800a82a:	79bb      	ldrb	r3, [r7, #6]
 800a82c:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 800a82e:	f107 020c 	add.w	r2, r7, #12
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	2102      	movs	r1, #2
 800a836:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800a83a:	f000 f91f 	bl	800aa7c <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	330b      	adds	r3, #11
 800a842:	78db      	ldrb	r3, [r3, #3]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b08b      	sub	sp, #44	; 0x2c
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a868:	2300      	movs	r3, #0
 800a86a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a874:	4b4a      	ldr	r3, [pc, #296]	; (800a9a0 <SHCI_GetWirelessFwInfo+0x154>)
 800a876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a878:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a87c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a886:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a44      	ldr	r2, [pc, #272]	; (800a9a4 <SHCI_GetWirelessFwInfo+0x158>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d10f      	bne.n	800a8b8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	69db      	ldr	r3, [r3, #28]
 800a8a8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	617b      	str	r3, [r7, #20]
 800a8b6:	e01a      	b.n	800a8ee <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a8c0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a8c4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	0e1b      	lsrs	r3, r3, #24
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	0c1b      	lsrs	r3, r3, #16
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	0a1b      	lsrs	r3, r3, #8
 800a906:	b2da      	uxtb	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	091b      	lsrs	r3, r3, #4
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 030f 	and.w	r3, r3, #15
 800a916:	b2da      	uxtb	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f003 030f 	and.w	r3, r3, #15
 800a924:	b2da      	uxtb	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	0e1b      	lsrs	r3, r3, #24
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	0c1b      	lsrs	r3, r3, #16
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	0a1b      	lsrs	r3, r3, #8
 800a942:	b2da      	uxtb	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	b2da      	uxtb	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	0e1b      	lsrs	r3, r3, #24
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	0c1b      	lsrs	r3, r3, #16
 800a966:	b2da      	uxtb	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	0a1b      	lsrs	r3, r3, #8
 800a970:	b2da      	uxtb	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	0e1b      	lsrs	r3, r3, #24
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	0c1b      	lsrs	r3, r3, #16
 800a984:	b2da      	uxtb	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	372c      	adds	r7, #44	; 0x2c
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	58004000 	.word	0x58004000
 800a9a4:	a94656b9 	.word	0xa94656b9

0800a9a8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	4a08      	ldr	r2, [pc, #32]	; (800a9d8 <shci_init+0x30>)
 800a9b8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a9ba:	4a08      	ldr	r2, [pc, #32]	; (800a9dc <shci_init+0x34>)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a9c0:	4806      	ldr	r0, [pc, #24]	; (800a9dc <shci_init+0x34>)
 800a9c2:	f000 f911 	bl	800abe8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 f894 	bl	800aaf8 <TlInit>

  return;
 800a9d0:	bf00      	nop
}
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	20000794 	.word	0x20000794
 800a9dc:	20000774 	.word	0x20000774

0800a9e0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a9e6:	4822      	ldr	r0, [pc, #136]	; (800aa70 <shci_user_evt_proc+0x90>)
 800a9e8:	f000 ffa4 	bl	800b934 <LST_is_empty>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d12b      	bne.n	800aa4a <shci_user_evt_proc+0x6a>
 800a9f2:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <shci_user_evt_proc+0x94>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d027      	beq.n	800aa4a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	4619      	mov	r1, r3
 800aa00:	481b      	ldr	r0, [pc, #108]	; (800aa70 <shci_user_evt_proc+0x90>)
 800aa02:	f001 f826 	bl	800ba52 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800aa06:	4b1c      	ldr	r3, [pc, #112]	; (800aa78 <shci_user_evt_proc+0x98>)
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00c      	beq.n	800aa28 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800aa12:	2301      	movs	r3, #1
 800aa14:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800aa16:	4b18      	ldr	r3, [pc, #96]	; (800aa78 <shci_user_evt_proc+0x98>)
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	1d3a      	adds	r2, r7, #4
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800aa20:	793a      	ldrb	r2, [r7, #4]
 800aa22:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <shci_user_evt_proc+0x94>)
 800aa24:	701a      	strb	r2, [r3, #0]
 800aa26:	e002      	b.n	800aa2e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <shci_user_evt_proc+0x94>)
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800aa2e:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <shci_user_evt_proc+0x94>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fb63 	bl	800b104 <TL_MM_EvtDone>
 800aa3e:	e004      	b.n	800aa4a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4619      	mov	r1, r3
 800aa44:	480a      	ldr	r0, [pc, #40]	; (800aa70 <shci_user_evt_proc+0x90>)
 800aa46:	f000 ff97 	bl	800b978 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800aa4a:	4809      	ldr	r0, [pc, #36]	; (800aa70 <shci_user_evt_proc+0x90>)
 800aa4c:	f000 ff72 	bl	800b934 <LST_is_empty>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d107      	bne.n	800aa66 <shci_user_evt_proc+0x86>
 800aa56:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <shci_user_evt_proc+0x94>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800aa5e:	4804      	ldr	r0, [pc, #16]	; (800aa70 <shci_user_evt_proc+0x90>)
 800aa60:	f7f7 f82e 	bl	8001ac0 <shci_notify_asynch_evt>
  }


  return;
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
}
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20000090 	.word	0x20000090
 800aa74:	200000a0 	.word	0x200000a0
 800aa78:	20000774 	.word	0x20000774

0800aa7c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60ba      	str	r2, [r7, #8]
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	4603      	mov	r3, r0
 800aa88:	81fb      	strh	r3, [r7, #14]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800aa8e:	2000      	movs	r0, #0
 800aa90:	f000 f864 	bl	800ab5c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800aa94:	4b16      	ldr	r3, [pc, #88]	; (800aaf0 <shci_send+0x74>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	89fa      	ldrh	r2, [r7, #14]
 800aa9a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800aa9e:	4b14      	ldr	r3, [pc, #80]	; (800aaf0 <shci_send+0x74>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	7b7a      	ldrb	r2, [r7, #13]
 800aaa4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800aaa6:	4b12      	ldr	r3, [pc, #72]	; (800aaf0 <shci_send+0x74>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	330c      	adds	r3, #12
 800aaac:	7b7a      	ldrb	r2, [r7, #13]
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 fc19 	bl	800c2e8 <memcpy>

  shciContext.io.Send(0,0);
 800aab6:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <shci_send+0x78>)
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	2100      	movs	r1, #0
 800aabc:	2000      	movs	r0, #0
 800aabe:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800aac0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800aac4:	f7f7 f813 	bl	8001aee <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f103 0008 	add.w	r0, r3, #8
 800aace:	4b08      	ldr	r3, [pc, #32]	; (800aaf0 <shci_send+0x74>)
 800aad0:	6819      	ldr	r1, [r3, #0]
 800aad2:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <shci_send+0x74>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	789b      	ldrb	r3, [r3, #2]
 800aad8:	3303      	adds	r3, #3
 800aada:	461a      	mov	r2, r3
 800aadc:	f001 fc04 	bl	800c2e8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aae0:	2001      	movs	r0, #1
 800aae2:	f000 f83b 	bl	800ab5c <Cmd_SetStatus>

  return;
 800aae6:	bf00      	nop
}
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	2000009c 	.word	0x2000009c
 800aaf4:	20000774 	.word	0x20000774

0800aaf8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800ab00:	4a10      	ldr	r2, [pc, #64]	; (800ab44 <TlInit+0x4c>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ab06:	4810      	ldr	r0, [pc, #64]	; (800ab48 <TlInit+0x50>)
 800ab08:	f000 ff04 	bl	800b914 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ab0c:	2001      	movs	r0, #1
 800ab0e:	f000 f825 	bl	800ab5c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ab12:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <TlInit+0x54>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800ab18:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <TlInit+0x58>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00c      	beq.n	800ab3a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ab24:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <TlInit+0x5c>)
 800ab26:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ab28:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <TlInit+0x60>)
 800ab2a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ab2c:	4b08      	ldr	r3, [pc, #32]	; (800ab50 <TlInit+0x58>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f107 020c 	add.w	r2, r7, #12
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
  }

  return;
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
}
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	2000009c 	.word	0x2000009c
 800ab48:	20000090 	.word	0x20000090
 800ab4c:	200000a0 	.word	0x200000a0
 800ab50:	20000774 	.word	0x20000774
 800ab54:	0800abad 	.word	0x0800abad
 800ab58:	0800abc5 	.word	0x0800abc5

0800ab5c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4603      	mov	r3, r0
 800ab64:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ab66:	79fb      	ldrb	r3, [r7, #7]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10b      	bne.n	800ab84 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ab6c:	4b0d      	ldr	r3, [pc, #52]	; (800aba4 <Cmd_SetStatus+0x48>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ab74:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <Cmd_SetStatus+0x48>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2000      	movs	r0, #0
 800ab7a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ab7c:	4b0a      	ldr	r3, [pc, #40]	; (800aba8 <Cmd_SetStatus+0x4c>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ab82:	e00b      	b.n	800ab9c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ab84:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <Cmd_SetStatus+0x4c>)
 800ab86:	2201      	movs	r2, #1
 800ab88:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ab8a:	4b06      	ldr	r3, [pc, #24]	; (800aba4 <Cmd_SetStatus+0x48>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ab92:	4b04      	ldr	r3, [pc, #16]	; (800aba4 <Cmd_SetStatus+0x48>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2001      	movs	r0, #1
 800ab98:	4798      	blx	r3
  return;
 800ab9a:	bf00      	nop
 800ab9c:	bf00      	nop
}
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	20000794 	.word	0x20000794
 800aba8:	20000098 	.word	0x20000098

0800abac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800abb4:	2000      	movs	r0, #0
 800abb6:	f7f6 ff8f 	bl	8001ad8 <shci_cmd_resp_release>

  return;
 800abba:	bf00      	nop
}
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	4805      	ldr	r0, [pc, #20]	; (800abe4 <TlUserEvtReceived+0x20>)
 800abd0:	f000 fef8 	bl	800b9c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800abd4:	4803      	ldr	r0, [pc, #12]	; (800abe4 <TlUserEvtReceived+0x20>)
 800abd6:	f7f6 ff73 	bl	8001ac0 <shci_notify_asynch_evt>

  return;
 800abda:	bf00      	nop
}
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20000090 	.word	0x20000090

0800abe8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a05      	ldr	r2, [pc, #20]	; (800ac08 <shci_register_io_bus+0x20>)
 800abf4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a04      	ldr	r2, [pc, #16]	; (800ac0c <shci_register_io_bus+0x24>)
 800abfa:	611a      	str	r2, [r3, #16]

  return;
 800abfc:	bf00      	nop
}
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	0800ae99 	.word	0x0800ae99
 800ac0c:	0800aeed 	.word	0x0800aeed

0800ac10 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800ac1c:	f7f6 f968 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ac20:	f7f6 f8f8 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800ac24:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ac2e:	701a      	strb	r2, [r3, #0]
 800ac30:	2200      	movs	r2, #0
 800ac32:	705a      	strb	r2, [r3, #1]
 800ac34:	2200      	movs	r2, #0
 800ac36:	709a      	strb	r2, [r3, #2]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f042 0201 	orr.w	r2, r2, #1
 800ac44:	711a      	strb	r2, [r3, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	715a      	strb	r2, [r3, #5]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	719a      	strb	r2, [r3, #6]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800ac52:	78fa      	ldrb	r2, [r7, #3]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ac58:	f7f6 f924 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ac5c:	f7f6 f8e6 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ac60:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	b2db      	uxtb	r3, r3
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800ac7a:	f7f6 f939 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ac7e:	f7f6 f8c9 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800ac82:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 800ac8c:	701a      	strb	r2, [r3, #0]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	705a      	strb	r2, [r3, #1]
 800ac92:	2200      	movs	r2, #0
 800ac94:	709a      	strb	r2, [r3, #2]
 800ac96:	2200      	movs	r2, #0
 800ac98:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f042 0203 	orr.w	r2, r2, #3
 800aca2:	711a      	strb	r2, [r3, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	715a      	strb	r2, [r3, #5]
 800aca8:	2200      	movs	r2, #0
 800acaa:	719a      	strb	r2, [r3, #6]
 800acac:	2200      	movs	r2, #0
 800acae:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800acb0:	783b      	ldrb	r3, [r7, #0]
 800acb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	461a      	mov	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 800acbe:	783b      	ldrb	r3, [r7, #0]
 800acc0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	461a      	mov	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800accc:	783b      	ldrb	r3, [r7, #0]
 800acce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800acda:	f7f6 f8e3 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800acde:	f7f6 f8a5 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ace2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	b2db      	uxtb	r3, r3
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800acfc:	f7f6 f8f8 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ad00:	f7f6 f888 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800ad04:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	2200      	movs	r2, #0
 800ad12:	705a      	strb	r2, [r3, #1]
 800ad14:	2200      	movs	r2, #0
 800ad16:	709a      	strb	r2, [r3, #2]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f042 0201 	orr.w	r2, r2, #1
 800ad24:	711a      	strb	r2, [r3, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	715a      	strb	r2, [r3, #5]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	719a      	strb	r2, [r3, #6]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ad38:	f7f6 f8b4 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ad3c:	f7f6 f876 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ad40:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	b2db      	uxtb	r3, r3
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ad58:	f7f6 f8ca 	bl	8000ef0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ad5c:	f7f6 f85a 	bl	8000e14 <THREAD_Get_OTCmdPayloadBuffer>
 800ad60:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f062 0279 	orn	r2, r2, #121	; 0x79
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	705a      	strb	r2, [r3, #1]
 800ad70:	2200      	movs	r2, #0
 800ad72:	709a      	strb	r2, [r3, #2]
 800ad74:	2200      	movs	r2, #0
 800ad76:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	711a      	strb	r2, [r3, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	715a      	strb	r2, [r3, #5]
 800ad82:	2200      	movs	r2, #0
 800ad84:	719a      	strb	r2, [r3, #6]
 800ad86:	2200      	movs	r2, #0
 800ad88:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ad8a:	f7f6 f88b 	bl	8000ea4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ad8e:	f7f6 f84d 	bl	8000e2c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ad92:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	b2db      	uxtb	r3, r3
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ada6:	f7f6 fb6b 	bl	8001480 <HW_IPCC_Enable>

  return;
 800adaa:	bf00      	nop
}
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <TL_Init>:


void TL_Init( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800adb4:	4b10      	ldr	r3, [pc, #64]	; (800adf8 <TL_Init+0x48>)
 800adb6:	4a11      	ldr	r2, [pc, #68]	; (800adfc <TL_Init+0x4c>)
 800adb8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800adba:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <TL_Init+0x48>)
 800adbc:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <TL_Init+0x50>)
 800adbe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800adc0:	4b0d      	ldr	r3, [pc, #52]	; (800adf8 <TL_Init+0x48>)
 800adc2:	4a10      	ldr	r2, [pc, #64]	; (800ae04 <TL_Init+0x54>)
 800adc4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <TL_Init+0x48>)
 800adc8:	4a0f      	ldr	r2, [pc, #60]	; (800ae08 <TL_Init+0x58>)
 800adca:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800adcc:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <TL_Init+0x48>)
 800adce:	4a0f      	ldr	r2, [pc, #60]	; (800ae0c <TL_Init+0x5c>)
 800add0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800add2:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <TL_Init+0x48>)
 800add4:	4a0e      	ldr	r2, [pc, #56]	; (800ae10 <TL_Init+0x60>)
 800add6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800add8:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <TL_Init+0x48>)
 800adda:	4a0e      	ldr	r2, [pc, #56]	; (800ae14 <TL_Init+0x64>)
 800addc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800adde:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <TL_Init+0x48>)
 800ade0:	4a0d      	ldr	r2, [pc, #52]	; (800ae18 <TL_Init+0x68>)
 800ade2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ade4:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <TL_Init+0x48>)
 800ade6:	4a0d      	ldr	r2, [pc, #52]	; (800ae1c <TL_Init+0x6c>)
 800ade8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800adea:	4b03      	ldr	r3, [pc, #12]	; (800adf8 <TL_Init+0x48>)
 800adec:	4a0c      	ldr	r2, [pc, #48]	; (800ae20 <TL_Init+0x70>)
 800adee:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800adf0:	f7f6 fb5a 	bl	80014a8 <HW_IPCC_Init>

  return;
 800adf4:	bf00      	nop
}
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	20030000 	.word	0x20030000
 800adfc:	20030038 	.word	0x20030038
 800ae00:	20030058 	.word	0x20030058
 800ae04:	20030068 	.word	0x20030068
 800ae08:	20030078 	.word	0x20030078
 800ae0c:	20030080 	.word	0x20030080
 800ae10:	20030088 	.word	0x20030088
 800ae14:	20030090 	.word	0x20030090
 800ae18:	200300ac 	.word	0x200300ac
 800ae1c:	200300b0 	.word	0x200300b0
 800ae20:	200300bc 	.word	0x200300bc

0800ae24 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ae2a:	e01c      	b.n	800ae66 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ae2c:	1d3b      	adds	r3, r7, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4812      	ldr	r0, [pc, #72]	; (800ae7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ae32:	f000 fe0e 	bl	800ba52 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7a5b      	ldrb	r3, [r3, #9]
 800ae3a:	2b0f      	cmp	r3, #15
 800ae3c:	d003      	beq.n	800ae46 <HW_IPCC_BLE_RxEvtNot+0x22>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7a5b      	ldrb	r3, [r3, #9]
 800ae42:	2b0e      	cmp	r3, #14
 800ae44:	d105      	bne.n	800ae52 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	2002      	movs	r0, #2
 800ae4c:	f000 f9be 	bl	800b1cc <OutputDbgTrace>
 800ae50:	e004      	b.n	800ae5c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4619      	mov	r1, r3
 800ae56:	2003      	movs	r0, #3
 800ae58:	f000 f9b8 	bl	800b1cc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ae5c:	4b08      	ldr	r3, [pc, #32]	; (800ae80 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	4610      	mov	r0, r2
 800ae64:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ae66:	4805      	ldr	r0, [pc, #20]	; (800ae7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ae68:	f000 fd64 	bl	800b934 <LST_is_empty>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0dc      	beq.n	800ae2c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ae72:	bf00      	nop
}
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	200300d8 	.word	0x200300d8
 800ae80:	200007a0 	.word	0x200007a0

0800ae84 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ae88:	4b02      	ldr	r3, [pc, #8]	; (800ae94 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4798      	blx	r3

  return;
 800ae8e:	bf00      	nop
}
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200007a4 	.word	0x200007a4

0800ae98 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800aea4:	480d      	ldr	r0, [pc, #52]	; (800aedc <TL_SYS_Init+0x44>)
 800aea6:	f000 fd35 	bl	800b914 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <TL_SYS_Init+0x48>)
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	689a      	ldr	r2, [r3, #8]
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	4a08      	ldr	r2, [pc, #32]	; (800aedc <TL_SYS_Init+0x44>)
 800aebc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800aebe:	f7f6 fb21 	bl	8001504 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a07      	ldr	r2, [pc, #28]	; (800aee4 <TL_SYS_Init+0x4c>)
 800aec8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4a06      	ldr	r2, [pc, #24]	; (800aee8 <TL_SYS_Init+0x50>)
 800aed0:	6013      	str	r3, [r2, #0]

  return 0;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	200300e0 	.word	0x200300e0
 800aee0:	20030000 	.word	0x20030000
 800aee4:	200007a8 	.word	0x200007a8
 800aee8:	200007ac 	.word	0x200007ac

0800aeec <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aef8:	4b09      	ldr	r3, [pc, #36]	; (800af20 <TL_SYS_SendCmd+0x34>)
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2210      	movs	r2, #16
 800af00:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <TL_SYS_SendCmd+0x34>)
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4619      	mov	r1, r3
 800af0a:	2004      	movs	r0, #4
 800af0c:	f000 f95e 	bl	800b1cc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800af10:	f7f6 fb02 	bl	8001518 <HW_IPCC_SYS_SendCmd>

  return 0;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20030000 	.word	0x20030000

0800af24 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800af28:	4b07      	ldr	r3, [pc, #28]	; (800af48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4619      	mov	r1, r3
 800af30:	2005      	movs	r0, #5
 800af32:	f000 f94b 	bl	800b1cc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a03      	ldr	r2, [pc, #12]	; (800af48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800af3c:	68d2      	ldr	r2, [r2, #12]
 800af3e:	6812      	ldr	r2, [r2, #0]
 800af40:	4610      	mov	r0, r2
 800af42:	4798      	blx	r3

  return;
 800af44:	bf00      	nop
}
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20030000 	.word	0x20030000
 800af4c:	200007a8 	.word	0x200007a8

0800af50 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af56:	e00e      	b.n	800af76 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800af58:	1d3b      	adds	r3, r7, #4
 800af5a:	4619      	mov	r1, r3
 800af5c:	480b      	ldr	r0, [pc, #44]	; (800af8c <HW_IPCC_SYS_EvtNot+0x3c>)
 800af5e:	f000 fd78 	bl	800ba52 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4619      	mov	r1, r3
 800af66:	2006      	movs	r0, #6
 800af68:	f000 f930 	bl	800b1cc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800af6c:	4b08      	ldr	r3, [pc, #32]	; (800af90 <HW_IPCC_SYS_EvtNot+0x40>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	4610      	mov	r0, r2
 800af74:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af76:	4805      	ldr	r0, [pc, #20]	; (800af8c <HW_IPCC_SYS_EvtNot+0x3c>)
 800af78:	f000 fcdc 	bl	800b934 <LST_is_empty>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0ea      	beq.n	800af58 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800af82:	bf00      	nop
}
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200300e0 	.word	0x200300e0
 800af90:	200007ac 	.word	0x200007ac

0800af94 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <TL_THREAD_Init+0x3c>)
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800afc2:	f7f6 facf 	bl	8001564 <HW_IPCC_THREAD_Init>

  return;
 800afc6:	bf00      	nop
}
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20030000 	.word	0x20030000

0800afd4 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800afd8:	4b04      	ldr	r3, [pc, #16]	; (800afec <TL_OT_SendCmd+0x18>)
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	2208      	movs	r2, #8
 800afe0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800afe2:	f7f6 facd 	bl	8001580 <HW_IPCC_OT_SendCmd>

  return;
 800afe6:	bf00      	nop
}
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20030000 	.word	0x20030000

0800aff0 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800aff4:	4b04      	ldr	r3, [pc, #16]	; (800b008 <TL_CLI_SendCmd+0x18>)
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	220a      	movs	r2, #10
 800affc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800affe:	f7f6 facd 	bl	800159c <HW_IPCC_CLI_SendCmd>

  return;
 800b002:	bf00      	nop
}
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20030000 	.word	0x20030000

0800b00c <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800b010:	4b04      	ldr	r3, [pc, #16]	; (800b024 <TL_THREAD_SendAck+0x18>)
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	220d      	movs	r2, #13
 800b018:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800b01a:	f7f6 fac9 	bl	80015b0 <HW_IPCC_THREAD_SendAck>

  return;
 800b01e:	bf00      	nop
}
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20030000 	.word	0x20030000

0800b028 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800b02c:	4b04      	ldr	r3, [pc, #16]	; (800b040 <TL_THREAD_CliSendAck+0x18>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	220d      	movs	r2, #13
 800b034:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800b036:	f7f6 fac9 	bl	80015cc <HW_IPCC_THREAD_CliSendAck>

  return;
 800b03a:	bf00      	nop
}
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20030000 	.word	0x20030000

0800b044 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800b048:	4b03      	ldr	r3, [pc, #12]	; (800b058 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7f5 ff2e 	bl	8000eb0 <TL_OT_CmdEvtReceived>

  return;
 800b054:	bf00      	nop
}
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20030000 	.word	0x20030000

0800b05c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800b060:	4b03      	ldr	r3, [pc, #12]	; (800b070 <HW_IPCC_THREAD_EvtNot+0x14>)
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4618      	mov	r0, r3
 800b068:	f7f5 ff32 	bl	8000ed0 <TL_THREAD_NotReceived>

  return;
 800b06c:	bf00      	nop
}
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20030000 	.word	0x20030000

0800b074 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800b078:	4b03      	ldr	r3, [pc, #12]	; (800b088 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f5 fffc 	bl	800107c <TL_THREAD_CliNotReceived>

  return;
 800b084:	bf00      	nop
}
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20030000 	.word	0x20030000

0800b08c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b094:	4817      	ldr	r0, [pc, #92]	; (800b0f4 <TL_MM_Init+0x68>)
 800b096:	f000 fc3d 	bl	800b914 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b09a:	4817      	ldr	r0, [pc, #92]	; (800b0f8 <TL_MM_Init+0x6c>)
 800b09c:	f000 fc3a 	bl	800b914 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b0a0:	4b16      	ldr	r3, [pc, #88]	; (800b0fc <TL_MM_Init+0x70>)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	4a16      	ldr	r2, [pc, #88]	; (800b100 <TL_MM_Init+0x74>)
 800b0a6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b0a8:	4b15      	ldr	r3, [pc, #84]	; (800b100 <TL_MM_Init+0x74>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	6892      	ldr	r2, [r2, #8]
 800b0b0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b0b2:	4b13      	ldr	r3, [pc, #76]	; (800b100 <TL_MM_Init+0x74>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	68d2      	ldr	r2, [r2, #12]
 800b0ba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b0bc:	4b10      	ldr	r3, [pc, #64]	; (800b100 <TL_MM_Init+0x74>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a0c      	ldr	r2, [pc, #48]	; (800b0f4 <TL_MM_Init+0x68>)
 800b0c2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b0c4:	4b0e      	ldr	r3, [pc, #56]	; (800b100 <TL_MM_Init+0x74>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	6812      	ldr	r2, [r2, #0]
 800b0cc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b0ce:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <TL_MM_Init+0x74>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6852      	ldr	r2, [r2, #4]
 800b0d6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b0d8:	4b09      	ldr	r3, [pc, #36]	; (800b100 <TL_MM_Init+0x74>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6912      	ldr	r2, [r2, #16]
 800b0e0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b0e2:	4b07      	ldr	r3, [pc, #28]	; (800b100 <TL_MM_Init+0x74>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6952      	ldr	r2, [r2, #20]
 800b0ea:	619a      	str	r2, [r3, #24]

  return;
 800b0ec:	bf00      	nop
}
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	200300c8 	.word	0x200300c8
 800b0f8:	20000798 	.word	0x20000798
 800b0fc:	20030000 	.word	0x20030000
 800b100:	200007b0 	.word	0x200007b0

0800b104 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4807      	ldr	r0, [pc, #28]	; (800b12c <TL_MM_EvtDone+0x28>)
 800b110:	f000 fc58 	bl	800b9c4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	2000      	movs	r0, #0
 800b118:	f000 f858 	bl	800b1cc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b11c:	4804      	ldr	r0, [pc, #16]	; (800b130 <TL_MM_EvtDone+0x2c>)
 800b11e:	f7f6 fa87 	bl	8001630 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b122:	bf00      	nop
}
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20000798 	.word	0x20000798
 800b130:	0800b135 	.word	0x0800b135

0800b134 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b13a:	e00c      	b.n	800b156 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b13c:	1d3b      	adds	r3, r7, #4
 800b13e:	4619      	mov	r1, r3
 800b140:	480a      	ldr	r0, [pc, #40]	; (800b16c <SendFreeBuf+0x38>)
 800b142:	f000 fc86 	bl	800ba52 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b146:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <SendFreeBuf+0x3c>)
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	4611      	mov	r1, r2
 800b150:	4618      	mov	r0, r3
 800b152:	f000 fc37 	bl	800b9c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b156:	4805      	ldr	r0, [pc, #20]	; (800b16c <SendFreeBuf+0x38>)
 800b158:	f000 fbec 	bl	800b934 <LST_is_empty>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0ec      	beq.n	800b13c <SendFreeBuf+0x8>
  }

  return;
 800b162:	bf00      	nop
}
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20000798 	.word	0x20000798
 800b170:	20030000 	.word	0x20030000

0800b174 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b178:	4805      	ldr	r0, [pc, #20]	; (800b190 <TL_TRACES_Init+0x1c>)
 800b17a:	f000 fbcb 	bl	800b914 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <TL_TRACES_Init+0x20>)
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	4a03      	ldr	r2, [pc, #12]	; (800b190 <TL_TRACES_Init+0x1c>)
 800b184:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b186:	f7f6 fa89 	bl	800169c <HW_IPCC_TRACES_Init>

  return;
 800b18a:	bf00      	nop
}
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	200300d0 	.word	0x200300d0
 800b194:	20030000 	.word	0x20030000

0800b198 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b19e:	e008      	b.n	800b1b2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b1a0:	1d3b      	adds	r3, r7, #4
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4808      	ldr	r0, [pc, #32]	; (800b1c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b1a6:	f000 fc54 	bl	800ba52 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7f6 fca9 	bl	8001b04 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b1b2:	4805      	ldr	r0, [pc, #20]	; (800b1c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b1b4:	f000 fbbe 	bl	800b934 <LST_is_empty>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0f0      	beq.n	800b1a0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b1be:	bf00      	nop
}
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	200300d0 	.word	0x200300d0

0800b1cc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	6039      	str	r1, [r7, #0]
 800b1d6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b1d8:	79fb      	ldrb	r3, [r7, #7]
 800b1da:	2b06      	cmp	r3, #6
 800b1dc:	d845      	bhi.n	800b26a <OutputDbgTrace+0x9e>
 800b1de:	a201      	add	r2, pc, #4	; (adr r2, 800b1e4 <OutputDbgTrace+0x18>)
 800b1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e4:	0800b201 	.word	0x0800b201
 800b1e8:	0800b225 	.word	0x0800b225
 800b1ec:	0800b22b 	.word	0x0800b22b
 800b1f0:	0800b23f 	.word	0x0800b23f
 800b1f4:	0800b24b 	.word	0x0800b24b
 800b1f8:	0800b251 	.word	0x0800b251
 800b1fc:	0800b25f 	.word	0x0800b25f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	7a5b      	ldrb	r3, [r3, #9]
 800b208:	2bff      	cmp	r3, #255	; 0xff
 800b20a:	d005      	beq.n	800b218 <OutputDbgTrace+0x4c>
 800b20c:	2bff      	cmp	r3, #255	; 0xff
 800b20e:	dc05      	bgt.n	800b21c <OutputDbgTrace+0x50>
 800b210:	2b0e      	cmp	r3, #14
 800b212:	d005      	beq.n	800b220 <OutputDbgTrace+0x54>
 800b214:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b216:	e001      	b.n	800b21c <OutputDbgTrace+0x50>
          break;
 800b218:	bf00      	nop
 800b21a:	e027      	b.n	800b26c <OutputDbgTrace+0xa0>
          break;
 800b21c:	bf00      	nop
 800b21e:	e025      	b.n	800b26c <OutputDbgTrace+0xa0>
          break;
 800b220:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b222:	e023      	b.n	800b26c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b228:	e020      	b.n	800b26c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	7a5b      	ldrb	r3, [r3, #9]
 800b232:	2b0e      	cmp	r3, #14
 800b234:	d001      	beq.n	800b23a <OutputDbgTrace+0x6e>
 800b236:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b238:	e000      	b.n	800b23c <OutputDbgTrace+0x70>
          break;
 800b23a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b23c:	e016      	b.n	800b26c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	7a5b      	ldrb	r3, [r3, #9]
 800b246:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b248:	e010      	b.n	800b26c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b24e:	e00d      	b.n	800b26c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	7a5b      	ldrb	r3, [r3, #9]
 800b258:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b25a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b25c:	e006      	b.n	800b26c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	7a5b      	ldrb	r3, [r3, #9]
 800b266:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b268:	e000      	b.n	800b26c <OutputDbgTrace+0xa0>

    default:
      break;
 800b26a:	bf00      	nop
  }

  return;
 800b26c:	bf00      	nop
}
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b27e:	f3ef 8310 	mrs	r3, PRIMASK
 800b282:	60fb      	str	r3, [r7, #12]
  return(result);
 800b284:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b288:	b672      	cpsid	i
}
 800b28a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b28c:	1cbb      	adds	r3, r7, #2
 800b28e:	4619      	mov	r1, r3
 800b290:	4812      	ldr	r0, [pc, #72]	; (800b2dc <DbgTrace_TxCpltCallback+0x64>)
 800b292:	f000 fe56 	bl	800bf42 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b296:	1cbb      	adds	r3, r7, #2
 800b298:	4619      	mov	r1, r3
 800b29a:	4810      	ldr	r0, [pc, #64]	; (800b2dc <DbgTrace_TxCpltCallback+0x64>)
 800b29c:	f000 ff42 	bl	800c124 <CircularQueue_Sense>
 800b2a0:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00c      	beq.n	800b2c2 <DbgTrace_TxCpltCallback+0x4a>
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f383 8810 	msr	PRIMASK, r3
}
 800b2b2:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b2b4:	887b      	ldrh	r3, [r7, #2]
 800b2b6:	4a0a      	ldr	r2, [pc, #40]	; (800b2e0 <DbgTrace_TxCpltCallback+0x68>)
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6938      	ldr	r0, [r7, #16]
 800b2bc:	f7f6 fc3d 	bl	8001b3a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b2c0:	e008      	b.n	800b2d4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b2c2:	4b08      	ldr	r3, [pc, #32]	; (800b2e4 <DbgTrace_TxCpltCallback+0x6c>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f383 8810 	msr	PRIMASK, r3
}
 800b2d2:	bf00      	nop
}
 800b2d4:	bf00      	nop
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	200007b4 	.word	0x200007b4
 800b2e0:	0800b279 	.word	0x0800b279
 800b2e4:	20000021 	.word	0x20000021

0800b2e8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b2ee:	f7f6 fc1e 	bl	8001b2e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2fc:	4903      	ldr	r1, [pc, #12]	; (800b30c <DbgTraceInit+0x24>)
 800b2fe:	4804      	ldr	r0, [pc, #16]	; (800b310 <DbgTraceInit+0x28>)
 800b300:	f000 fbc6 	bl	800ba90 <CircularQueue_Init>
#endif 
#endif
  return;
 800b304:	bf00      	nop
}
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200007d4 	.word	0x200007d4
 800b310:	200007b4 	.word	0x200007b4

0800b314 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	68b9      	ldr	r1, [r7, #8]
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f000 f805 	bl	800b334 <DbgTraceWrite>
 800b32a:	4603      	mov	r3, r0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08a      	sub	sp, #40	; 0x28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b344:	f3ef 8310 	mrs	r3, PRIMASK
 800b348:	61bb      	str	r3, [r7, #24]
  return(result);
 800b34a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b34c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b354:	d102      	bne.n	800b35c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b356:	2300      	movs	r3, #0
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
 800b35a:	e037      	b.n	800b3cc <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d006      	beq.n	800b370 <DbgTraceWrite+0x3c>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b02      	cmp	r3, #2
 800b366:	d003      	beq.n	800b370 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b368:	f04f 33ff 	mov.w	r3, #4294967295
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
 800b36e:	e02d      	b.n	800b3cc <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d02a      	beq.n	800b3cc <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b37a:	b672      	cpsid	i
}
 800b37c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	b29a      	uxth	r2, r3
 800b382:	2301      	movs	r3, #1
 800b384:	68b9      	ldr	r1, [r7, #8]
 800b386:	4814      	ldr	r0, [pc, #80]	; (800b3d8 <DbgTraceWrite+0xa4>)
 800b388:	f000 fbb4 	bl	800baf4 <CircularQueue_Add>
 800b38c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d015      	beq.n	800b3c0 <DbgTraceWrite+0x8c>
 800b394:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <DbgTraceWrite+0xa8>)
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d010      	beq.n	800b3c0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b39e:	4b0f      	ldr	r3, [pc, #60]	; (800b3dc <DbgTraceWrite+0xa8>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f383 8810 	msr	PRIMASK, r3
}
 800b3ae:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	4a0a      	ldr	r2, [pc, #40]	; (800b3e0 <DbgTraceWrite+0xac>)
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	69f8      	ldr	r0, [r7, #28]
 800b3ba:	f7f6 fbbe 	bl	8001b3a <DbgOutputTraces>
 800b3be:	e005      	b.n	800b3cc <DbgTraceWrite+0x98>
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f383 8810 	msr	PRIMASK, r3
}
 800b3ca:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3728      	adds	r7, #40	; 0x28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	200007b4 	.word	0x200007b4
 800b3dc:	20000021 	.word	0x20000021
 800b3e0:	0800b279 	.word	0x0800b279

0800b3e4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <OTP_Read+0x48>)
 800b3f0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b3f2:	e002      	b.n	800b3fa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	3b08      	subs	r3, #8
 800b3f8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3307      	adds	r3, #7
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	79fa      	ldrb	r2, [r7, #7]
 800b402:	429a      	cmp	r2, r3
 800b404:	d003      	beq.n	800b40e <OTP_Read+0x2a>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	4a09      	ldr	r2, [pc, #36]	; (800b430 <OTP_Read+0x4c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d1f2      	bne.n	800b3f4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3307      	adds	r3, #7
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	79fa      	ldrb	r2, [r7, #7]
 800b416:	429a      	cmp	r2, r3
 800b418:	d001      	beq.n	800b41e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b41e:	68fb      	ldr	r3, [r7, #12]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	1fff73f8 	.word	0x1fff73f8
 800b430:	1fff7000 	.word	0x1fff7000

0800b434 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b434:	b480      	push	{r7}
 800b436:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b438:	4b05      	ldr	r3, [pc, #20]	; (800b450 <UTIL_LPM_Init+0x1c>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <UTIL_LPM_Init+0x20>)
 800b440:	2200      	movs	r2, #0
 800b442:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b444:	bf00      	nop
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	200017d4 	.word	0x200017d4
 800b454:	200017d8 	.word	0x200017d8

0800b458 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b464:	f3ef 8310 	mrs	r3, PRIMASK
 800b468:	613b      	str	r3, [r7, #16]
  return(result);
 800b46a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b46c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b46e:	b672      	cpsid	i
}
 800b470:	bf00      	nop

  switch( state )
 800b472:	78fb      	ldrb	r3, [r7, #3]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d008      	beq.n	800b48a <UTIL_LPM_SetStopMode+0x32>
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d10e      	bne.n	800b49a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b47c:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4313      	orrs	r3, r2
 800b484:	4a0b      	ldr	r2, [pc, #44]	; (800b4b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b486:	6013      	str	r3, [r2, #0]
      break;
 800b488:	e008      	b.n	800b49c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	43da      	mvns	r2, r3
 800b48e:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4013      	ands	r3, r2
 800b494:	4a07      	ldr	r2, [pc, #28]	; (800b4b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b496:	6013      	str	r3, [r2, #0]
      break;
 800b498:	e000      	b.n	800b49c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800b49a:	bf00      	nop
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f383 8810 	msr	PRIMASK, r3
}
 800b4a6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b4a8:	bf00      	nop
 800b4aa:	371c      	adds	r7, #28
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	200017d4 	.word	0x200017d4

0800b4b8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4c8:	613b      	str	r3, [r7, #16]
  return(result);
 800b4ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b4cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4ce:	b672      	cpsid	i
}
 800b4d0:	bf00      	nop
  
  switch(state)
 800b4d2:	78fb      	ldrb	r3, [r7, #3]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d008      	beq.n	800b4ea <UTIL_LPM_SetOffMode+0x32>
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d10e      	bne.n	800b4fa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <UTIL_LPM_SetOffMode+0x5c>)
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	4a0b      	ldr	r2, [pc, #44]	; (800b514 <UTIL_LPM_SetOffMode+0x5c>)
 800b4e6:	6013      	str	r3, [r2, #0]
      break;
 800b4e8:	e008      	b.n	800b4fc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	43da      	mvns	r2, r3
 800b4ee:	4b09      	ldr	r3, [pc, #36]	; (800b514 <UTIL_LPM_SetOffMode+0x5c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	4a07      	ldr	r2, [pc, #28]	; (800b514 <UTIL_LPM_SetOffMode+0x5c>)
 800b4f6:	6013      	str	r3, [r2, #0]
      break;
 800b4f8:	e000      	b.n	800b4fc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b4fa:	bf00      	nop
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f383 8810 	msr	PRIMASK, r3
}
 800b506:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b508:	bf00      	nop
 800b50a:	371c      	adds	r7, #28
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	200017d8 	.word	0x200017d8

0800b518 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b090      	sub	sp, #64	; 0x40
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b520:	4b73      	ldr	r3, [pc, #460]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b526:	4b72      	ldr	r3, [pc, #456]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4013      	ands	r3, r2
 800b52e:	4a70      	ldr	r2, [pc, #448]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b530:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b532:	4b70      	ldr	r3, [pc, #448]	; (800b6f4 <UTIL_SEQ_Run+0x1dc>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b538:	4b6f      	ldr	r3, [pc, #444]	; (800b6f8 <UTIL_SEQ_Run+0x1e0>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b53e:	4b6f      	ldr	r3, [pc, #444]	; (800b6fc <UTIL_SEQ_Run+0x1e4>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b544:	4b6e      	ldr	r3, [pc, #440]	; (800b700 <UTIL_SEQ_Run+0x1e8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b54a:	e08d      	b.n	800b668 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b550:	e002      	b.n	800b558 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b554:	3301      	adds	r3, #1
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b558:	4a6a      	ldr	r2, [pc, #424]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b562:	401a      	ands	r2, r3
 800b564:	4b62      	ldr	r3, [pc, #392]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4013      	ands	r3, r2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0f1      	beq.n	800b552 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b56e:	4a65      	ldr	r2, [pc, #404]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b572:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	401a      	ands	r2, r3
 800b57a:	4b5d      	ldr	r3, [pc, #372]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4013      	ands	r3, r2
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b582:	4a60      	ldr	r2, [pc, #384]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	4413      	add	r3, r2
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	4013      	ands	r3, r2
 800b590:	2b00      	cmp	r3, #0
 800b592:	d106      	bne.n	800b5a2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b594:	4a5b      	ldr	r2, [pc, #364]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	4413      	add	r3, r2
 800b59c:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b5a2:	4a58      	ldr	r2, [pc, #352]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	4413      	add	r3, r2
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 f973 	bl	800b89c <SEQ_BitPosition>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	4b53      	ldr	r3, [pc, #332]	; (800b708 <UTIL_SEQ_Run+0x1f0>)
 800b5bc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b5be:	4a51      	ldr	r2, [pc, #324]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c2:	00db      	lsls	r3, r3, #3
 800b5c4:	4413      	add	r3, r2
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	4b4f      	ldr	r3, [pc, #316]	; (800b708 <UTIL_SEQ_Run+0x1f0>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d2:	43db      	mvns	r3, r3
 800b5d4:	401a      	ands	r2, r3
 800b5d6:	494b      	ldr	r1, [pc, #300]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	440b      	add	r3, r1
 800b5de:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5e6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b5e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5ea:	b672      	cpsid	i
}
 800b5ec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b5ee:	4b46      	ldr	r3, [pc, #280]	; (800b708 <UTIL_SEQ_Run+0x1f0>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f8:	43da      	mvns	r2, r3
 800b5fa:	4b3e      	ldr	r3, [pc, #248]	; (800b6f4 <UTIL_SEQ_Run+0x1dc>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4013      	ands	r3, r2
 800b600:	4a3c      	ldr	r2, [pc, #240]	; (800b6f4 <UTIL_SEQ_Run+0x1dc>)
 800b602:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b604:	2302      	movs	r3, #2
 800b606:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b608:	e013      	b.n	800b632 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60c:	3b01      	subs	r3, #1
 800b60e:	4a3d      	ldr	r2, [pc, #244]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b610:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b614:	4b3c      	ldr	r3, [pc, #240]	; (800b708 <UTIL_SEQ_Run+0x1f0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2201      	movs	r2, #1
 800b61a:	fa02 f303 	lsl.w	r3, r2, r3
 800b61e:	43da      	mvns	r2, r3
 800b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b622:	3b01      	subs	r3, #1
 800b624:	400a      	ands	r2, r1
 800b626:	4937      	ldr	r1, [pc, #220]	; (800b704 <UTIL_SEQ_Run+0x1ec>)
 800b628:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62e:	3b01      	subs	r3, #1
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1e8      	bne.n	800b60a <UTIL_SEQ_Run+0xf2>
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	f383 8810 	msr	PRIMASK, r3
}
 800b642:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b644:	4b30      	ldr	r3, [pc, #192]	; (800b708 <UTIL_SEQ_Run+0x1f0>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a30      	ldr	r2, [pc, #192]	; (800b70c <UTIL_SEQ_Run+0x1f4>)
 800b64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b64e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b650:	4b28      	ldr	r3, [pc, #160]	; (800b6f4 <UTIL_SEQ_Run+0x1dc>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b656:	4b28      	ldr	r3, [pc, #160]	; (800b6f8 <UTIL_SEQ_Run+0x1e0>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b65c:	4b27      	ldr	r3, [pc, #156]	; (800b6fc <UTIL_SEQ_Run+0x1e4>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b662:	4b27      	ldr	r3, [pc, #156]	; (800b700 <UTIL_SEQ_Run+0x1e8>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	401a      	ands	r2, r3
 800b66e:	4b20      	ldr	r3, [pc, #128]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4013      	ands	r3, r2
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <UTIL_SEQ_Run+0x16c>
 800b678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	4013      	ands	r3, r2
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f43f af64 	beq.w	800b54c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b684:	4b20      	ldr	r3, [pc, #128]	; (800b708 <UTIL_SEQ_Run+0x1f0>)
 800b686:	f04f 32ff 	mov.w	r2, #4294967295
 800b68a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b68c:	f000 f8f8 	bl	800b880 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b690:	f3ef 8310 	mrs	r3, PRIMASK
 800b694:	613b      	str	r3, [r7, #16]
  return(result);
 800b696:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b69a:	b672      	cpsid	i
}
 800b69c:	bf00      	nop
  local_taskset = TaskSet;
 800b69e:	4b15      	ldr	r3, [pc, #84]	; (800b6f4 <UTIL_SEQ_Run+0x1dc>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b6a4:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <UTIL_SEQ_Run+0x1e0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b6aa:	4b14      	ldr	r3, [pc, #80]	; (800b6fc <UTIL_SEQ_Run+0x1e4>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b6b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	401a      	ands	r2, r3
 800b6b6:	4b0e      	ldr	r3, [pc, #56]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d107      	bne.n	800b6d0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b6c0:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <UTIL_SEQ_Run+0x1e8>)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b6cc:	f7f6 f9c6 	bl	8001a5c <UTIL_SEQ_Idle>
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f383 8810 	msr	PRIMASK, r3
}
 800b6da:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b6dc:	f000 f8d7 	bl	800b88e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b6e0:	4a03      	ldr	r2, [pc, #12]	; (800b6f0 <UTIL_SEQ_Run+0x1d8>)
 800b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e4:	6013      	str	r3, [r2, #0]

  return;
 800b6e6:	bf00      	nop
}
 800b6e8:	3740      	adds	r7, #64	; 0x40
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000028 	.word	0x20000028
 800b6f4:	200017dc 	.word	0x200017dc
 800b6f8:	200017e0 	.word	0x200017e0
 800b6fc:	20000024 	.word	0x20000024
 800b700:	200017e4 	.word	0x200017e4
 800b704:	2000186c 	.word	0x2000186c
 800b708:	200017e8 	.word	0x200017e8
 800b70c:	200017ec 	.word	0x200017ec

0800b710 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b71c:	f3ef 8310 	mrs	r3, PRIMASK
 800b720:	617b      	str	r3, [r7, #20]
  return(result);
 800b722:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b726:	b672      	cpsid	i
}
 800b728:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 f8b6 	bl	800b89c <SEQ_BitPosition>
 800b730:	4603      	mov	r3, r0
 800b732:	4619      	mov	r1, r3
 800b734:	4a06      	ldr	r2, [pc, #24]	; (800b750 <UTIL_SEQ_RegTask+0x40>)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	f383 8810 	msr	PRIMASK, r3
}
 800b746:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b748:	bf00      	nop
}
 800b74a:	3720      	adds	r7, #32
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	200017ec 	.word	0x200017ec

0800b754 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b75e:	f3ef 8310 	mrs	r3, PRIMASK
 800b762:	60fb      	str	r3, [r7, #12]
  return(result);
 800b764:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b768:	b672      	cpsid	i
}
 800b76a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b76c:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <UTIL_SEQ_SetTask+0x50>)
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4313      	orrs	r3, r2
 800b774:	4a0b      	ldr	r2, [pc, #44]	; (800b7a4 <UTIL_SEQ_SetTask+0x50>)
 800b776:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b778:	4a0b      	ldr	r2, [pc, #44]	; (800b7a8 <UTIL_SEQ_SetTask+0x54>)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	431a      	orrs	r2, r3
 800b784:	4908      	ldr	r1, [pc, #32]	; (800b7a8 <UTIL_SEQ_SetTask+0x54>)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f383 8810 	msr	PRIMASK, r3
}
 800b796:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b798:	bf00      	nop
}
 800b79a:	371c      	adds	r7, #28
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	200017dc 	.word	0x200017dc
 800b7a8:	2000186c 	.word	0x2000186c

0800b7ac <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b7bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7be:	b672      	cpsid	i
}
 800b7c0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b7c2:	4b09      	ldr	r3, [pc, #36]	; (800b7e8 <UTIL_SEQ_SetEvt+0x3c>)
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	4a07      	ldr	r2, [pc, #28]	; (800b7e8 <UTIL_SEQ_SetEvt+0x3c>)
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f383 8810 	msr	PRIMASK, r3
}
 800b7d8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b7da:	bf00      	nop
}
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	200017e0 	.word	0x200017e0

0800b7ec <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b7f4:	4b1f      	ldr	r3, [pc, #124]	; (800b874 <UTIL_SEQ_WaitEvt+0x88>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b7fa:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <UTIL_SEQ_WaitEvt+0x88>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b802:	d102      	bne.n	800b80a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b804:	2300      	movs	r3, #0
 800b806:	61fb      	str	r3, [r7, #28]
 800b808:	e005      	b.n	800b816 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b80a:	4b1a      	ldr	r3, [pc, #104]	; (800b874 <UTIL_SEQ_WaitEvt+0x88>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2201      	movs	r2, #1
 800b810:	fa02 f303 	lsl.w	r3, r2, r3
 800b814:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <UTIL_SEQ_WaitEvt+0x8c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b81c:	4a16      	ldr	r2, [pc, #88]	; (800b878 <UTIL_SEQ_WaitEvt+0x8c>)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b822:	e003      	b.n	800b82c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	69f8      	ldr	r0, [r7, #28]
 800b828:	f7f6 f920 	bl	8001a6c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b82c:	4b13      	ldr	r3, [pc, #76]	; (800b87c <UTIL_SEQ_WaitEvt+0x90>)
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4013      	ands	r3, r2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0f5      	beq.n	800b824 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b838:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <UTIL_SEQ_WaitEvt+0x88>)
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b83e:	f3ef 8310 	mrs	r3, PRIMASK
 800b842:	60bb      	str	r3, [r7, #8]
  return(result);
 800b844:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b848:	b672      	cpsid	i
}
 800b84a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	43da      	mvns	r2, r3
 800b850:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <UTIL_SEQ_WaitEvt+0x90>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4013      	ands	r3, r2
 800b856:	4a09      	ldr	r2, [pc, #36]	; (800b87c <UTIL_SEQ_WaitEvt+0x90>)
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f383 8810 	msr	PRIMASK, r3
}
 800b864:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b866:	4a04      	ldr	r2, [pc, #16]	; (800b878 <UTIL_SEQ_WaitEvt+0x8c>)
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	6013      	str	r3, [r2, #0]
  return;
 800b86c:	bf00      	nop
}
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	200017e8 	.word	0x200017e8
 800b878:	200017e4 	.word	0x200017e4
 800b87c:	200017e0 	.word	0x200017e0

0800b880 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b880:	b480      	push	{r7}
 800b882:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b884:	bf00      	nop
}
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b88e:	b480      	push	{r7}
 800b890:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b892:	bf00      	nop
}
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	0c1b      	lsrs	r3, r3, #16
 800b8b0:	041b      	lsls	r3, r3, #16
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d104      	bne.n	800b8c0 <SEQ_BitPosition+0x24>
 800b8b6:	2310      	movs	r3, #16
 800b8b8:	73fb      	strb	r3, [r7, #15]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	041b      	lsls	r3, r3, #16
 800b8be:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d105      	bne.n	800b8d6 <SEQ_BitPosition+0x3a>
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	73fb      	strb	r3, [r7, #15]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	021b      	lsls	r3, r3, #8
 800b8d4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d105      	bne.n	800b8ec <SEQ_BitPosition+0x50>
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	73fb      	strb	r3, [r7, #15]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	011b      	lsls	r3, r3, #4
 800b8ea:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	0f1b      	lsrs	r3, r3, #28
 800b8f0:	4a07      	ldr	r2, [pc, #28]	; (800b910 <SEQ_BitPosition+0x74>)
 800b8f2:	5cd2      	ldrb	r2, [r2, r3]
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
 800b8fc:	f1c3 031f 	rsb	r3, r3, #31
 800b900:	b2db      	uxtb	r3, r3
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	0800deec 	.word	0x0800deec

0800b914 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	605a      	str	r2, [r3, #4]
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b93c:	f3ef 8310 	mrs	r3, PRIMASK
 800b940:	60fb      	str	r3, [r7, #12]
  return(result);
 800b942:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b946:	b672      	cpsid	i
}
 800b948:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	429a      	cmp	r2, r3
 800b952:	d102      	bne.n	800b95a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	75fb      	strb	r3, [r7, #23]
 800b958:	e001      	b.n	800b95e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b95a:	2300      	movs	r3, #0
 800b95c:	75fb      	strb	r3, [r7, #23]
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f383 8810 	msr	PRIMASK, r3
}
 800b968:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	371c      	adds	r7, #28
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b978:	b480      	push	{r7}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b982:	f3ef 8310 	mrs	r3, PRIMASK
 800b986:	60fb      	str	r3, [r7, #12]
  return(result);
 800b988:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b98a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b98c:	b672      	cpsid	i
}
 800b98e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	605a      	str	r2, [r3, #4]
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f383 8810 	msr	PRIMASK, r3
}
 800b9b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b9b8:	bf00      	nop
 800b9ba:	371c      	adds	r7, #28
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b087      	sub	sp, #28
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b9d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9d8:	b672      	cpsid	i
}
 800b9da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	f383 8810 	msr	PRIMASK, r3
}
 800ba02:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba04:	bf00      	nop
 800ba06:	371c      	adds	r7, #28
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba18:	f3ef 8310 	mrs	r3, PRIMASK
 800ba1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba22:	b672      	cpsid	i
}
 800ba24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6812      	ldr	r2, [r2, #0]
 800ba2e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	6852      	ldr	r2, [r2, #4]
 800ba38:	605a      	str	r2, [r3, #4]
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f383 8810 	msr	PRIMASK, r3
}
 800ba44:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b086      	sub	sp, #24
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba60:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba62:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba66:	b672      	cpsid	i
}
 800ba68:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff ffca 	bl	800ba10 <LST_remove_node>
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	f383 8810 	msr	PRIMASK, r3
}
 800ba86:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba88:	bf00      	nop
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	887a      	ldrh	r2, [r7, #2]
 800bac6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	7e3a      	ldrb	r2, [r7, #24]
 800bacc:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800bace:	7e3b      	ldrb	r3, [r7, #24]
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d006      	beq.n	800bae6 <CircularQueue_Init+0x56>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	891b      	ldrh	r3, [r3, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295
 800bae4:	e000      	b.n	800bae8 <CircularQueue_Init+0x58>
  }
  return 0;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08e      	sub	sp, #56	; 0x38
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	4613      	mov	r3, r2
 800bb02:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bb04:	2300      	movs	r3, #0
 800bb06:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bb08:	2300      	movs	r3, #0
 800bb0a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bb10:	2300      	movs	r3, #0
 800bb12:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb14:	2300      	movs	r3, #0
 800bb16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bb18:	2300      	movs	r3, #0
 800bb1a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	891b      	ldrh	r3, [r3, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <CircularQueue_Add+0x38>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	e000      	b.n	800bb2e <CircularQueue_Add+0x3a>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d02a      	beq.n	800bb8e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	891b      	ldrh	r3, [r3, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d123      	bne.n	800bb88 <CircularQueue_Add+0x94>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	4413      	add	r3, r2
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6819      	ldr	r1, [r3, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	1c58      	adds	r0, r3, #1
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	4298      	cmp	r0, r3
 800bb5e:	d306      	bcc.n	800bb6e <CircularQueue_Add+0x7a>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6918      	ldr	r0, [r3, #16]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	1ac3      	subs	r3, r0, r3
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	e002      	b.n	800bb74 <CircularQueue_Add+0x80>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	3301      	adds	r3, #1
 800bb74:	440b      	add	r3, r1
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	021b      	lsls	r3, r3, #8
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	4413      	add	r3, r2
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	3302      	adds	r3, #2
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	e001      	b.n	800bb8c <CircularQueue_Add+0x98>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	891b      	ldrh	r3, [r3, #8]
 800bb8c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	891b      	ldrh	r3, [r3, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	891b      	ldrh	r3, [r3, #8]
 800bb9a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	691a      	ldr	r2, [r3, #16]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d307      	bcc.n	800bbb8 <CircularQueue_Add+0xc4>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6919      	ldr	r1, [r3, #16]
 800bbb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bbb2:	440b      	add	r3, r1
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	e000      	b.n	800bbba <CircularQueue_Add+0xc6>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800bbbc:	88fa      	ldrh	r2, [r7, #6]
 800bbbe:	7ffb      	ldrb	r3, [r7, #31]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	fb02 f303 	mul.w	r3, r2, r3
 800bbca:	69ba      	ldr	r2, [r7, #24]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d80b      	bhi.n	800bbe8 <CircularQueue_Add+0xf4>
 800bbd0:	88fa      	ldrh	r2, [r7, #6]
 800bbd2:	7ffb      	ldrb	r3, [r7, #31]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbde:	fb01 f202 	mul.w	r2, r1, r2
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	e000      	b.n	800bbea <CircularQueue_Add+0xf6>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800bbec:	7dfa      	ldrb	r2, [r7, #23]
 800bbee:	7ffb      	ldrb	r3, [r7, #31]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	bf8c      	ite	hi
 800bbf4:	2301      	movhi	r3, #1
 800bbf6:	2300      	movls	r3, #0
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800bbfc:	7fbb      	ldrb	r3, [r7, #30]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <CircularQueue_Add+0x120>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	7f1b      	ldrb	r3, [r3, #28]
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <CircularQueue_Add+0x120>
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	e000      	b.n	800bc16 <CircularQueue_Add+0x122>
 800bc14:	8bbb      	ldrh	r3, [r7, #28]
 800bc16:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bc18:	7fbb      	ldrb	r3, [r7, #30]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d008      	beq.n	800bc30 <CircularQueue_Add+0x13c>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	7f1b      	ldrb	r3, [r3, #28]
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <CircularQueue_Add+0x13c>
 800bc2a:	7ffb      	ldrb	r3, [r7, #31]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	e000      	b.n	800bc32 <CircularQueue_Add+0x13e>
 800bc30:	8bbb      	ldrh	r3, [r7, #28]
 800bc32:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800bc34:	88fb      	ldrh	r3, [r7, #6]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 817e 	beq.w	800bf38 <CircularQueue_Add+0x444>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	695a      	ldr	r2, [r3, #20]
 800bc40:	88f9      	ldrh	r1, [r7, #6]
 800bc42:	7ffb      	ldrb	r3, [r7, #31]
 800bc44:	440b      	add	r3, r1
 800bc46:	4619      	mov	r1, r3
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	fb01 f303 	mul.w	r3, r1, r3
 800bc4e:	441a      	add	r2, r3
 800bc50:	8bbb      	ldrh	r3, [r7, #28]
 800bc52:	441a      	add	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	f200 816d 	bhi.w	800bf38 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bc5e:	2300      	movs	r3, #0
 800bc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc62:	e14a      	b.n	800befa <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	691a      	ldr	r2, [r3, #16]
 800bc68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc6a:	441a      	add	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d307      	bcc.n	800bc84 <CircularQueue_Add+0x190>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	691a      	ldr	r2, [r3, #16]
 800bc78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc7a:	441a      	add	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	e003      	b.n	800bc8c <CircularQueue_Add+0x198>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	691a      	ldr	r2, [r3, #16]
 800bc88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc8a:	4413      	add	r3, r2
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	891b      	ldrh	r3, [r3, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d130      	bne.n	800bd00 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca4:	1c59      	adds	r1, r3, #1
 800bca6:	6339      	str	r1, [r7, #48]	; 0x30
 800bca8:	4413      	add	r3, r2
 800bcaa:	88fa      	ldrh	r2, [r7, #6]
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d304      	bcc.n	800bcc4 <CircularQueue_Add+0x1d0>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	e000      	b.n	800bcc6 <CircularQueue_Add+0x1d2>
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	0a1b      	lsrs	r3, r3, #8
 800bccc:	b298      	uxth	r0, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	1c59      	adds	r1, r3, #1
 800bcd6:	6339      	str	r1, [r7, #48]	; 0x30
 800bcd8:	4413      	add	r3, r2
 800bcda:	b2c2      	uxtb	r2, r0
 800bcdc:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d304      	bcc.n	800bcf2 <CircularQueue_Add+0x1fe>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	e000      	b.n	800bcf4 <CircularQueue_Add+0x200>
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	1c9a      	adds	r2, r3, #2
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bd00:	88fa      	ldrh	r2, [r7, #6]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6859      	ldr	r1, [r3, #4]
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	1acb      	subs	r3, r1, r3
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	bf28      	it	cs
 800bd0e:	4613      	movcs	r3, r2
 800bd10:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bd12:	88fb      	ldrh	r3, [r7, #6]
 800bd14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d007      	beq.n	800bd2a <CircularQueue_Add+0x236>
 800bd1a:	88fb      	ldrh	r3, [r7, #6]
 800bd1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d225      	bcs.n	800bd6e <CircularQueue_Add+0x27a>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	7f1b      	ldrb	r3, [r3, #28]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d121      	bne.n	800bd6e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	18d0      	adds	r0, r2, r3
 800bd32:	88fb      	ldrh	r3, [r7, #6]
 800bd34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd36:	fb02 f303 	mul.w	r3, r2, r3
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd40:	4619      	mov	r1, r3
 800bd42:	f000 fad1 	bl	800c2e8 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	695a      	ldr	r2, [r3, #20]
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	441a      	add	r2, r3
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bd52:	2300      	movs	r3, #0
 800bd54:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800bd5a:	88fa      	ldrh	r2, [r7, #6]
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bd62:	7ffb      	ldrb	r3, [r7, #31]
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	88fb      	ldrh	r3, [r7, #6]
 800bd68:	4413      	add	r3, r2
 800bd6a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bd6c:	e0a4      	b.n	800beb8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80a1 	beq.w	800beb8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	7f1b      	ldrb	r3, [r3, #28]
 800bd7a:	f003 0301 	and.w	r3, r3, #1
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d03a      	beq.n	800bdf8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	891b      	ldrh	r3, [r3, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10d      	bne.n	800bda6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	3b02      	subs	r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	22ff      	movs	r2, #255	; 0xff
 800bd96:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	4413      	add	r3, r2
 800bda2:	22ff      	movs	r2, #255	; 0xff
 800bda4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	695a      	ldr	r2, [r3, #20]
 800bdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdac:	441a      	add	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800bdb6:	88fb      	ldrh	r3, [r7, #6]
 800bdb8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800bdba:	2300      	movs	r3, #0
 800bdbc:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	891b      	ldrh	r3, [r3, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d16f      	bne.n	800bea6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	1c59      	adds	r1, r3, #1
 800bdce:	6339      	str	r1, [r7, #48]	; 0x30
 800bdd0:	4413      	add	r3, r2
 800bdd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd4:	b2d2      	uxtb	r2, r2
 800bdd6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	0a18      	lsrs	r0, r3, #8
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde2:	1c59      	adds	r1, r3, #1
 800bde4:	6339      	str	r1, [r7, #48]	; 0x30
 800bde6:	4413      	add	r3, r2
 800bde8:	b2c2      	uxtb	r2, r0
 800bdea:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	1c9a      	adds	r2, r3, #2
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	615a      	str	r2, [r3, #20]
 800bdf6:	e056      	b.n	800bea6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	7f1b      	ldrb	r3, [r3, #28]
 800bdfc:	f003 0302 	and.w	r3, r3, #2
 800be00:	2b00      	cmp	r3, #0
 800be02:	d050      	beq.n	800bea6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	891b      	ldrh	r3, [r3, #8]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d14a      	bne.n	800bea2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	3b02      	subs	r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	0a19      	lsrs	r1, r3, #8
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	3b01      	subs	r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	b2ca      	uxtb	r2, r1
 800be2c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	18d0      	adds	r0, r2, r3
 800be36:	88fb      	ldrh	r3, [r7, #6]
 800be38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be3a:	fb02 f303 	mul.w	r3, r2, r3
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	4413      	add	r3, r2
 800be42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be44:	4619      	mov	r1, r3
 800be46:	f000 fa4f 	bl	800c2e8 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	695a      	ldr	r2, [r3, #20]
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	441a      	add	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800be5a:	88fa      	ldrh	r2, [r7, #6]
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800be6c:	2300      	movs	r3, #0
 800be6e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	1c59      	adds	r1, r3, #1
 800be78:	6339      	str	r1, [r7, #48]	; 0x30
 800be7a:	4413      	add	r3, r2
 800be7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	0a18      	lsrs	r0, r3, #8
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	1c59      	adds	r1, r3, #1
 800be8e:	6339      	str	r1, [r7, #48]	; 0x30
 800be90:	4413      	add	r3, r2
 800be92:	b2c2      	uxtb	r2, r0
 800be94:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	1c9a      	adds	r2, r3, #2
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	615a      	str	r2, [r3, #20]
 800bea0:	e001      	b.n	800bea6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	e049      	b.n	800bf3a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800bea6:	7ffb      	ldrb	r3, [r7, #31]
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	b29b      	uxth	r3, r3
 800beae:	4413      	add	r3, r2
 800beb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d015      	beq.n	800beea <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	18d0      	adds	r0, r2, r3
 800bec6:	88fb      	ldrh	r3, [r7, #6]
 800bec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beca:	fb03 f202 	mul.w	r2, r3, r2
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	4413      	add	r3, r2
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bed8:	4619      	mov	r1, r3
 800beda:	f000 fa05 	bl	800c2e8 <memcpy>
        q->byteCount += NbBytesToCopy;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	695a      	ldr	r2, [r3, #20]
 800bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee4:	441a      	add	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	3301      	adds	r3, #1
 800bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800befa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	429a      	cmp	r2, r3
 800bf00:	f4ff aeb0 	bcc.w	800bc64 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6919      	ldr	r1, [r3, #16]
 800bf0c:	7ffb      	ldrb	r3, [r7, #31]
 800bf0e:	4419      	add	r1, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	4299      	cmp	r1, r3
 800bf16:	d307      	bcc.n	800bf28 <CircularQueue_Add+0x434>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6919      	ldr	r1, [r3, #16]
 800bf1c:	7ffb      	ldrb	r3, [r7, #31]
 800bf1e:	4419      	add	r1, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	1acb      	subs	r3, r1, r3
 800bf26:	e003      	b.n	800bf30 <CircularQueue_Add+0x43c>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6919      	ldr	r1, [r3, #16]
 800bf2c:	7ffb      	ldrb	r3, [r7, #31]
 800bf2e:	440b      	add	r3, r1
 800bf30:	4413      	add	r3, r2
 800bf32:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	e000      	b.n	800bf3a <CircularQueue_Add+0x446>
    return NULL;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3738      	adds	r7, #56	; 0x38
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b085      	sub	sp, #20
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bf50:	2300      	movs	r3, #0
 800bf52:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	891b      	ldrh	r3, [r3, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <CircularQueue_Remove+0x1e>
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	e000      	b.n	800bf62 <CircularQueue_Remove+0x20>
 800bf60:	2300      	movs	r3, #0
 800bf62:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 80cc 	beq.w	800c10a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	891b      	ldrh	r3, [r3, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d121      	bne.n	800bfbe <CircularQueue_Remove+0x7c>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6819      	ldr	r1, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	1c58      	adds	r0, r3, #1
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	4298      	cmp	r0, r3
 800bf98:	d306      	bcc.n	800bfa8 <CircularQueue_Remove+0x66>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68d8      	ldr	r0, [r3, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	1ac3      	subs	r3, r0, r3
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	e002      	b.n	800bfae <CircularQueue_Remove+0x6c>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	3301      	adds	r3, #1
 800bfae:	440b      	add	r3, r1
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	021b      	lsls	r3, r3, #8
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	4413      	add	r3, r2
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	e001      	b.n	800bfc2 <CircularQueue_Remove+0x80>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	891b      	ldrh	r3, [r3, #8]
 800bfc2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	7f1b      	ldrb	r3, [r3, #28]
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d057      	beq.n	800c080 <CircularQueue_Remove+0x13e>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	7f1b      	ldrb	r3, [r3, #28]
 800bfd4:	f003 0302 	and.w	r3, r3, #2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d151      	bne.n	800c080 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bfdc:	897b      	ldrh	r3, [r7, #10]
 800bfde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d103      	bne.n	800bfee <CircularQueue_Remove+0xac>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	891b      	ldrh	r3, [r3, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d012      	beq.n	800c014 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d942      	bls.n	800c080 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	891b      	ldrh	r3, [r3, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d03e      	beq.n	800c080 <CircularQueue_Remove+0x13e>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	8912      	ldrh	r2, [r2, #8]
 800c010:	4293      	cmp	r3, r2
 800c012:	d235      	bcs.n	800c080 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	695a      	ldr	r2, [r3, #20]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	68d9      	ldr	r1, [r3, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	1acb      	subs	r3, r1, r3
 800c022:	441a      	add	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	891b      	ldrh	r3, [r3, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d121      	bne.n	800c07a <CircularQueue_Remove+0x138>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	b29a      	uxth	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6819      	ldr	r1, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	1c58      	adds	r0, r3, #1
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	4298      	cmp	r0, r3
 800c054:	d306      	bcc.n	800c064 <CircularQueue_Remove+0x122>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	68d8      	ldr	r0, [r3, #12]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	1ac3      	subs	r3, r0, r3
 800c060:	3301      	adds	r3, #1
 800c062:	e002      	b.n	800c06a <CircularQueue_Remove+0x128>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	3301      	adds	r3, #1
 800c06a:	440b      	add	r3, r1
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	021b      	lsls	r3, r3, #8
 800c072:	b29b      	uxth	r3, r3
 800c074:	4413      	add	r3, r2
 800c076:	b29b      	uxth	r3, r3
 800c078:	e001      	b.n	800c07e <CircularQueue_Remove+0x13c>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	891b      	ldrh	r3, [r3, #8]
 800c07e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68d9      	ldr	r1, [r3, #12]
 800c088:	7a7b      	ldrb	r3, [r7, #9]
 800c08a:	4419      	add	r1, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	4299      	cmp	r1, r3
 800c092:	d307      	bcc.n	800c0a4 <CircularQueue_Remove+0x162>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68d9      	ldr	r1, [r3, #12]
 800c098:	7a7b      	ldrb	r3, [r7, #9]
 800c09a:	4419      	add	r1, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	1acb      	subs	r3, r1, r3
 800c0a2:	e003      	b.n	800c0ac <CircularQueue_Remove+0x16a>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	68d9      	ldr	r1, [r3, #12]
 800c0a8:	7a7b      	ldrb	r3, [r7, #9]
 800c0aa:	440b      	add	r3, r1
 800c0ac:	4413      	add	r3, r2
 800c0ae:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	8979      	ldrh	r1, [r7, #10]
 800c0b6:	7a7a      	ldrb	r2, [r7, #9]
 800c0b8:	440a      	add	r2, r1
 800c0ba:	1a9a      	subs	r2, r3, r2
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d01b      	beq.n	800c100 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	897b      	ldrh	r3, [r7, #10]
 800c0ce:	441a      	add	r2, r3
 800c0d0:	7a7b      	ldrb	r3, [r7, #9]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d309      	bcc.n	800c0f0 <CircularQueue_Remove+0x1ae>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	897b      	ldrh	r3, [r7, #10]
 800c0e2:	441a      	add	r2, r3
 800c0e4:	7a7b      	ldrb	r3, [r7, #9]
 800c0e6:	441a      	add	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	e005      	b.n	800c0fc <CircularQueue_Remove+0x1ba>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68da      	ldr	r2, [r3, #12]
 800c0f4:	897b      	ldrh	r3, [r7, #10]
 800c0f6:	441a      	add	r2, r3
 800c0f8:	7a7b      	ldrb	r3, [r7, #9]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	1e5a      	subs	r2, r3, #1
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	897a      	ldrh	r2, [r7, #10]
 800c114:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c116:	68fb      	ldr	r3, [r7, #12]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c124:	b480      	push	{r7}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c132:	2300      	movs	r3, #0
 800c134:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	891b      	ldrh	r3, [r3, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <CircularQueue_Sense+0x1e>
 800c13e:	2302      	movs	r3, #2
 800c140:	e000      	b.n	800c144 <CircularQueue_Sense+0x20>
 800c142:	2300      	movs	r3, #0
 800c144:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 8090 	beq.w	800c278 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	891b      	ldrh	r3, [r3, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d121      	bne.n	800c1aa <CircularQueue_Sense+0x86>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6819      	ldr	r1, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	1c58      	adds	r0, r3, #1
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	4298      	cmp	r0, r3
 800c184:	d306      	bcc.n	800c194 <CircularQueue_Sense+0x70>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68d8      	ldr	r0, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	1ac3      	subs	r3, r0, r3
 800c190:	3301      	adds	r3, #1
 800c192:	e002      	b.n	800c19a <CircularQueue_Sense+0x76>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	3301      	adds	r3, #1
 800c19a:	440b      	add	r3, r1
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	021b      	lsls	r3, r3, #8
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	4413      	add	r3, r2
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	e001      	b.n	800c1ae <CircularQueue_Sense+0x8a>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	891b      	ldrh	r3, [r3, #8]
 800c1ae:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	7f1b      	ldrb	r3, [r3, #28]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d048      	beq.n	800c24e <CircularQueue_Sense+0x12a>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7f1b      	ldrb	r3, [r3, #28]
 800c1c0:	f003 0302 	and.w	r3, r3, #2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d142      	bne.n	800c24e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c1c8:	8a7b      	ldrh	r3, [r7, #18]
 800c1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d103      	bne.n	800c1da <CircularQueue_Sense+0xb6>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	891b      	ldrh	r3, [r3, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d012      	beq.n	800c200 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68da      	ldr	r2, [r3, #12]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d933      	bls.n	800c24e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	891b      	ldrh	r3, [r3, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d02f      	beq.n	800c24e <CircularQueue_Sense+0x12a>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685a      	ldr	r2, [r3, #4]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	8912      	ldrh	r2, [r2, #8]
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d226      	bcs.n	800c24e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c200:	2300      	movs	r3, #0
 800c202:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	891b      	ldrh	r3, [r3, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d11d      	bne.n	800c248 <CircularQueue_Sense+0x124>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	4413      	add	r3, r2
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b29a      	uxth	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6819      	ldr	r1, [r3, #0]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	1c58      	adds	r0, r3, #1
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	4298      	cmp	r0, r3
 800c226:	d305      	bcc.n	800c234 <CircularQueue_Sense+0x110>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	1ac3      	subs	r3, r0, r3
 800c230:	3301      	adds	r3, #1
 800c232:	e001      	b.n	800c238 <CircularQueue_Sense+0x114>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	3301      	adds	r3, #1
 800c238:	440b      	add	r3, r1
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	021b      	lsls	r3, r3, #8
 800c240:	b29b      	uxth	r3, r3
 800c242:	4413      	add	r3, r2
 800c244:	b29b      	uxth	r3, r3
 800c246:	e001      	b.n	800c24c <CircularQueue_Sense+0x128>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	891b      	ldrh	r3, [r3, #8]
 800c24c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	7af9      	ldrb	r1, [r7, #11]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4419      	add	r1, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	4299      	cmp	r1, r3
 800c25e:	d306      	bcc.n	800c26e <CircularQueue_Sense+0x14a>
 800c260:	7af9      	ldrb	r1, [r7, #11]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4419      	add	r1, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	1acb      	subs	r3, r1, r3
 800c26c:	e002      	b.n	800c274 <CircularQueue_Sense+0x150>
 800c26e:	7af9      	ldrb	r1, [r7, #11]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	440b      	add	r3, r1
 800c274:	4413      	add	r3, r2
 800c276:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	8a7a      	ldrh	r2, [r7, #18]
 800c282:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c284:	697b      	ldr	r3, [r7, #20]
}
 800c286:	4618      	mov	r0, r3
 800c288:	371c      	adds	r7, #28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
	...

0800c294 <__errno>:
 800c294:	4b01      	ldr	r3, [pc, #4]	; (800c29c <__errno+0x8>)
 800c296:	6818      	ldr	r0, [r3, #0]
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	2000002c 	.word	0x2000002c

0800c2a0 <__libc_init_array>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	4d0d      	ldr	r5, [pc, #52]	; (800c2d8 <__libc_init_array+0x38>)
 800c2a4:	4c0d      	ldr	r4, [pc, #52]	; (800c2dc <__libc_init_array+0x3c>)
 800c2a6:	1b64      	subs	r4, r4, r5
 800c2a8:	10a4      	asrs	r4, r4, #2
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	d109      	bne.n	800c2c4 <__libc_init_array+0x24>
 800c2b0:	4d0b      	ldr	r5, [pc, #44]	; (800c2e0 <__libc_init_array+0x40>)
 800c2b2:	4c0c      	ldr	r4, [pc, #48]	; (800c2e4 <__libc_init_array+0x44>)
 800c2b4:	f001 f9d8 	bl	800d668 <_init>
 800c2b8:	1b64      	subs	r4, r4, r5
 800c2ba:	10a4      	asrs	r4, r4, #2
 800c2bc:	2600      	movs	r6, #0
 800c2be:	42a6      	cmp	r6, r4
 800c2c0:	d105      	bne.n	800c2ce <__libc_init_array+0x2e>
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c8:	4798      	blx	r3
 800c2ca:	3601      	adds	r6, #1
 800c2cc:	e7ee      	b.n	800c2ac <__libc_init_array+0xc>
 800c2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d2:	4798      	blx	r3
 800c2d4:	3601      	adds	r6, #1
 800c2d6:	e7f2      	b.n	800c2be <__libc_init_array+0x1e>
 800c2d8:	0800df9c 	.word	0x0800df9c
 800c2dc:	0800df9c 	.word	0x0800df9c
 800c2e0:	0800df9c 	.word	0x0800df9c
 800c2e4:	0800dfa0 	.word	0x0800dfa0

0800c2e8 <memcpy>:
 800c2e8:	440a      	add	r2, r1
 800c2ea:	4291      	cmp	r1, r2
 800c2ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2f0:	d100      	bne.n	800c2f4 <memcpy+0xc>
 800c2f2:	4770      	bx	lr
 800c2f4:	b510      	push	{r4, lr}
 800c2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2fe:	4291      	cmp	r1, r2
 800c300:	d1f9      	bne.n	800c2f6 <memcpy+0xe>
 800c302:	bd10      	pop	{r4, pc}

0800c304 <memset>:
 800c304:	4402      	add	r2, r0
 800c306:	4603      	mov	r3, r0
 800c308:	4293      	cmp	r3, r2
 800c30a:	d100      	bne.n	800c30e <memset+0xa>
 800c30c:	4770      	bx	lr
 800c30e:	f803 1b01 	strb.w	r1, [r3], #1
 800c312:	e7f9      	b.n	800c308 <memset+0x4>

0800c314 <iprintf>:
 800c314:	b40f      	push	{r0, r1, r2, r3}
 800c316:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <iprintf+0x2c>)
 800c318:	b513      	push	{r0, r1, r4, lr}
 800c31a:	681c      	ldr	r4, [r3, #0]
 800c31c:	b124      	cbz	r4, 800c328 <iprintf+0x14>
 800c31e:	69a3      	ldr	r3, [r4, #24]
 800c320:	b913      	cbnz	r3, 800c328 <iprintf+0x14>
 800c322:	4620      	mov	r0, r4
 800c324:	f000 f8d4 	bl	800c4d0 <__sinit>
 800c328:	ab05      	add	r3, sp, #20
 800c32a:	9a04      	ldr	r2, [sp, #16]
 800c32c:	68a1      	ldr	r1, [r4, #8]
 800c32e:	9301      	str	r3, [sp, #4]
 800c330:	4620      	mov	r0, r4
 800c332:	f000 fb87 	bl	800ca44 <_vfiprintf_r>
 800c336:	b002      	add	sp, #8
 800c338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c33c:	b004      	add	sp, #16
 800c33e:	4770      	bx	lr
 800c340:	2000002c 	.word	0x2000002c

0800c344 <sniprintf>:
 800c344:	b40c      	push	{r2, r3}
 800c346:	b530      	push	{r4, r5, lr}
 800c348:	4b17      	ldr	r3, [pc, #92]	; (800c3a8 <sniprintf+0x64>)
 800c34a:	1e0c      	subs	r4, r1, #0
 800c34c:	681d      	ldr	r5, [r3, #0]
 800c34e:	b09d      	sub	sp, #116	; 0x74
 800c350:	da08      	bge.n	800c364 <sniprintf+0x20>
 800c352:	238b      	movs	r3, #139	; 0x8b
 800c354:	602b      	str	r3, [r5, #0]
 800c356:	f04f 30ff 	mov.w	r0, #4294967295
 800c35a:	b01d      	add	sp, #116	; 0x74
 800c35c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c360:	b002      	add	sp, #8
 800c362:	4770      	bx	lr
 800c364:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c368:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c36c:	bf14      	ite	ne
 800c36e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c372:	4623      	moveq	r3, r4
 800c374:	9304      	str	r3, [sp, #16]
 800c376:	9307      	str	r3, [sp, #28]
 800c378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c37c:	9002      	str	r0, [sp, #8]
 800c37e:	9006      	str	r0, [sp, #24]
 800c380:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c384:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c386:	ab21      	add	r3, sp, #132	; 0x84
 800c388:	a902      	add	r1, sp, #8
 800c38a:	4628      	mov	r0, r5
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	f000 fa2f 	bl	800c7f0 <_svfiprintf_r>
 800c392:	1c43      	adds	r3, r0, #1
 800c394:	bfbc      	itt	lt
 800c396:	238b      	movlt	r3, #139	; 0x8b
 800c398:	602b      	strlt	r3, [r5, #0]
 800c39a:	2c00      	cmp	r4, #0
 800c39c:	d0dd      	beq.n	800c35a <sniprintf+0x16>
 800c39e:	9b02      	ldr	r3, [sp, #8]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	701a      	strb	r2, [r3, #0]
 800c3a4:	e7d9      	b.n	800c35a <sniprintf+0x16>
 800c3a6:	bf00      	nop
 800c3a8:	2000002c 	.word	0x2000002c

0800c3ac <_vsniprintf_r>:
 800c3ac:	b530      	push	{r4, r5, lr}
 800c3ae:	4614      	mov	r4, r2
 800c3b0:	2c00      	cmp	r4, #0
 800c3b2:	b09b      	sub	sp, #108	; 0x6c
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	da05      	bge.n	800c3c6 <_vsniprintf_r+0x1a>
 800c3ba:	238b      	movs	r3, #139	; 0x8b
 800c3bc:	6003      	str	r3, [r0, #0]
 800c3be:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c2:	b01b      	add	sp, #108	; 0x6c
 800c3c4:	bd30      	pop	{r4, r5, pc}
 800c3c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c3ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c3ce:	bf14      	ite	ne
 800c3d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c3d4:	4623      	moveq	r3, r4
 800c3d6:	9302      	str	r3, [sp, #8]
 800c3d8:	9305      	str	r3, [sp, #20]
 800c3da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3de:	9100      	str	r1, [sp, #0]
 800c3e0:	9104      	str	r1, [sp, #16]
 800c3e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c3e6:	4669      	mov	r1, sp
 800c3e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c3ea:	f000 fa01 	bl	800c7f0 <_svfiprintf_r>
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	bfbc      	itt	lt
 800c3f2:	238b      	movlt	r3, #139	; 0x8b
 800c3f4:	602b      	strlt	r3, [r5, #0]
 800c3f6:	2c00      	cmp	r4, #0
 800c3f8:	d0e3      	beq.n	800c3c2 <_vsniprintf_r+0x16>
 800c3fa:	9b00      	ldr	r3, [sp, #0]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	701a      	strb	r2, [r3, #0]
 800c400:	e7df      	b.n	800c3c2 <_vsniprintf_r+0x16>
	...

0800c404 <vsniprintf>:
 800c404:	b507      	push	{r0, r1, r2, lr}
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	4613      	mov	r3, r2
 800c40a:	460a      	mov	r2, r1
 800c40c:	4601      	mov	r1, r0
 800c40e:	4803      	ldr	r0, [pc, #12]	; (800c41c <vsniprintf+0x18>)
 800c410:	6800      	ldr	r0, [r0, #0]
 800c412:	f7ff ffcb 	bl	800c3ac <_vsniprintf_r>
 800c416:	b003      	add	sp, #12
 800c418:	f85d fb04 	ldr.w	pc, [sp], #4
 800c41c:	2000002c 	.word	0x2000002c

0800c420 <std>:
 800c420:	2300      	movs	r3, #0
 800c422:	b510      	push	{r4, lr}
 800c424:	4604      	mov	r4, r0
 800c426:	e9c0 3300 	strd	r3, r3, [r0]
 800c42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c42e:	6083      	str	r3, [r0, #8]
 800c430:	8181      	strh	r1, [r0, #12]
 800c432:	6643      	str	r3, [r0, #100]	; 0x64
 800c434:	81c2      	strh	r2, [r0, #14]
 800c436:	6183      	str	r3, [r0, #24]
 800c438:	4619      	mov	r1, r3
 800c43a:	2208      	movs	r2, #8
 800c43c:	305c      	adds	r0, #92	; 0x5c
 800c43e:	f7ff ff61 	bl	800c304 <memset>
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <std+0x38>)
 800c444:	6263      	str	r3, [r4, #36]	; 0x24
 800c446:	4b05      	ldr	r3, [pc, #20]	; (800c45c <std+0x3c>)
 800c448:	62a3      	str	r3, [r4, #40]	; 0x28
 800c44a:	4b05      	ldr	r3, [pc, #20]	; (800c460 <std+0x40>)
 800c44c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c44e:	4b05      	ldr	r3, [pc, #20]	; (800c464 <std+0x44>)
 800c450:	6224      	str	r4, [r4, #32]
 800c452:	6323      	str	r3, [r4, #48]	; 0x30
 800c454:	bd10      	pop	{r4, pc}
 800c456:	bf00      	nop
 800c458:	0800cfed 	.word	0x0800cfed
 800c45c:	0800d00f 	.word	0x0800d00f
 800c460:	0800d047 	.word	0x0800d047
 800c464:	0800d06b 	.word	0x0800d06b

0800c468 <_cleanup_r>:
 800c468:	4901      	ldr	r1, [pc, #4]	; (800c470 <_cleanup_r+0x8>)
 800c46a:	f000 b8af 	b.w	800c5cc <_fwalk_reent>
 800c46e:	bf00      	nop
 800c470:	0800d345 	.word	0x0800d345

0800c474 <__sfmoreglue>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	2268      	movs	r2, #104	; 0x68
 800c478:	1e4d      	subs	r5, r1, #1
 800c47a:	4355      	muls	r5, r2
 800c47c:	460e      	mov	r6, r1
 800c47e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c482:	f000 f8e5 	bl	800c650 <_malloc_r>
 800c486:	4604      	mov	r4, r0
 800c488:	b140      	cbz	r0, 800c49c <__sfmoreglue+0x28>
 800c48a:	2100      	movs	r1, #0
 800c48c:	e9c0 1600 	strd	r1, r6, [r0]
 800c490:	300c      	adds	r0, #12
 800c492:	60a0      	str	r0, [r4, #8]
 800c494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c498:	f7ff ff34 	bl	800c304 <memset>
 800c49c:	4620      	mov	r0, r4
 800c49e:	bd70      	pop	{r4, r5, r6, pc}

0800c4a0 <__sfp_lock_acquire>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	; (800c4a8 <__sfp_lock_acquire+0x8>)
 800c4a2:	f000 b8b3 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	2000187d 	.word	0x2000187d

0800c4ac <__sfp_lock_release>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	; (800c4b4 <__sfp_lock_release+0x8>)
 800c4ae:	f000 b8ae 	b.w	800c60e <__retarget_lock_release_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	2000187d 	.word	0x2000187d

0800c4b8 <__sinit_lock_acquire>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__sinit_lock_acquire+0x8>)
 800c4ba:	f000 b8a7 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c4be:	bf00      	nop
 800c4c0:	2000187e 	.word	0x2000187e

0800c4c4 <__sinit_lock_release>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__sinit_lock_release+0x8>)
 800c4c6:	f000 b8a2 	b.w	800c60e <__retarget_lock_release_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	2000187e 	.word	0x2000187e

0800c4d0 <__sinit>:
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	f7ff fff0 	bl	800c4b8 <__sinit_lock_acquire>
 800c4d8:	69a3      	ldr	r3, [r4, #24]
 800c4da:	b11b      	cbz	r3, 800c4e4 <__sinit+0x14>
 800c4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e0:	f7ff bff0 	b.w	800c4c4 <__sinit_lock_release>
 800c4e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c4ea:	4b13      	ldr	r3, [pc, #76]	; (800c538 <__sinit+0x68>)
 800c4ec:	4a13      	ldr	r2, [pc, #76]	; (800c53c <__sinit+0x6c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4f2:	42a3      	cmp	r3, r4
 800c4f4:	bf04      	itt	eq
 800c4f6:	2301      	moveq	r3, #1
 800c4f8:	61a3      	streq	r3, [r4, #24]
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 f820 	bl	800c540 <__sfp>
 800c500:	6060      	str	r0, [r4, #4]
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f81c 	bl	800c540 <__sfp>
 800c508:	60a0      	str	r0, [r4, #8]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f818 	bl	800c540 <__sfp>
 800c510:	2200      	movs	r2, #0
 800c512:	60e0      	str	r0, [r4, #12]
 800c514:	2104      	movs	r1, #4
 800c516:	6860      	ldr	r0, [r4, #4]
 800c518:	f7ff ff82 	bl	800c420 <std>
 800c51c:	68a0      	ldr	r0, [r4, #8]
 800c51e:	2201      	movs	r2, #1
 800c520:	2109      	movs	r1, #9
 800c522:	f7ff ff7d 	bl	800c420 <std>
 800c526:	68e0      	ldr	r0, [r4, #12]
 800c528:	2202      	movs	r2, #2
 800c52a:	2112      	movs	r1, #18
 800c52c:	f7ff ff78 	bl	800c420 <std>
 800c530:	2301      	movs	r3, #1
 800c532:	61a3      	str	r3, [r4, #24]
 800c534:	e7d2      	b.n	800c4dc <__sinit+0xc>
 800c536:	bf00      	nop
 800c538:	0800defc 	.word	0x0800defc
 800c53c:	0800c469 	.word	0x0800c469

0800c540 <__sfp>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	4607      	mov	r7, r0
 800c544:	f7ff ffac 	bl	800c4a0 <__sfp_lock_acquire>
 800c548:	4b1e      	ldr	r3, [pc, #120]	; (800c5c4 <__sfp+0x84>)
 800c54a:	681e      	ldr	r6, [r3, #0]
 800c54c:	69b3      	ldr	r3, [r6, #24]
 800c54e:	b913      	cbnz	r3, 800c556 <__sfp+0x16>
 800c550:	4630      	mov	r0, r6
 800c552:	f7ff ffbd 	bl	800c4d0 <__sinit>
 800c556:	3648      	adds	r6, #72	; 0x48
 800c558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	d503      	bpl.n	800c568 <__sfp+0x28>
 800c560:	6833      	ldr	r3, [r6, #0]
 800c562:	b30b      	cbz	r3, 800c5a8 <__sfp+0x68>
 800c564:	6836      	ldr	r6, [r6, #0]
 800c566:	e7f7      	b.n	800c558 <__sfp+0x18>
 800c568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c56c:	b9d5      	cbnz	r5, 800c5a4 <__sfp+0x64>
 800c56e:	4b16      	ldr	r3, [pc, #88]	; (800c5c8 <__sfp+0x88>)
 800c570:	60e3      	str	r3, [r4, #12]
 800c572:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c576:	6665      	str	r5, [r4, #100]	; 0x64
 800c578:	f000 f847 	bl	800c60a <__retarget_lock_init_recursive>
 800c57c:	f7ff ff96 	bl	800c4ac <__sfp_lock_release>
 800c580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c588:	6025      	str	r5, [r4, #0]
 800c58a:	61a5      	str	r5, [r4, #24]
 800c58c:	2208      	movs	r2, #8
 800c58e:	4629      	mov	r1, r5
 800c590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c594:	f7ff feb6 	bl	800c304 <memset>
 800c598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c59c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5a4:	3468      	adds	r4, #104	; 0x68
 800c5a6:	e7d9      	b.n	800c55c <__sfp+0x1c>
 800c5a8:	2104      	movs	r1, #4
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	f7ff ff62 	bl	800c474 <__sfmoreglue>
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	6030      	str	r0, [r6, #0]
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d1d5      	bne.n	800c564 <__sfp+0x24>
 800c5b8:	f7ff ff78 	bl	800c4ac <__sfp_lock_release>
 800c5bc:	230c      	movs	r3, #12
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	e7ee      	b.n	800c5a0 <__sfp+0x60>
 800c5c2:	bf00      	nop
 800c5c4:	0800defc 	.word	0x0800defc
 800c5c8:	ffff0001 	.word	0xffff0001

0800c5cc <_fwalk_reent>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	4688      	mov	r8, r1
 800c5d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5d8:	2700      	movs	r7, #0
 800c5da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5de:	f1b9 0901 	subs.w	r9, r9, #1
 800c5e2:	d505      	bpl.n	800c5f0 <_fwalk_reent+0x24>
 800c5e4:	6824      	ldr	r4, [r4, #0]
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	d1f7      	bne.n	800c5da <_fwalk_reent+0xe>
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f0:	89ab      	ldrh	r3, [r5, #12]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d907      	bls.n	800c606 <_fwalk_reent+0x3a>
 800c5f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	d003      	beq.n	800c606 <_fwalk_reent+0x3a>
 800c5fe:	4629      	mov	r1, r5
 800c600:	4630      	mov	r0, r6
 800c602:	47c0      	blx	r8
 800c604:	4307      	orrs	r7, r0
 800c606:	3568      	adds	r5, #104	; 0x68
 800c608:	e7e9      	b.n	800c5de <_fwalk_reent+0x12>

0800c60a <__retarget_lock_init_recursive>:
 800c60a:	4770      	bx	lr

0800c60c <__retarget_lock_acquire_recursive>:
 800c60c:	4770      	bx	lr

0800c60e <__retarget_lock_release_recursive>:
 800c60e:	4770      	bx	lr

0800c610 <sbrk_aligned>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	4e0e      	ldr	r6, [pc, #56]	; (800c64c <sbrk_aligned+0x3c>)
 800c614:	460c      	mov	r4, r1
 800c616:	6831      	ldr	r1, [r6, #0]
 800c618:	4605      	mov	r5, r0
 800c61a:	b911      	cbnz	r1, 800c622 <sbrk_aligned+0x12>
 800c61c:	f000 fcd6 	bl	800cfcc <_sbrk_r>
 800c620:	6030      	str	r0, [r6, #0]
 800c622:	4621      	mov	r1, r4
 800c624:	4628      	mov	r0, r5
 800c626:	f000 fcd1 	bl	800cfcc <_sbrk_r>
 800c62a:	1c43      	adds	r3, r0, #1
 800c62c:	d00a      	beq.n	800c644 <sbrk_aligned+0x34>
 800c62e:	1cc4      	adds	r4, r0, #3
 800c630:	f024 0403 	bic.w	r4, r4, #3
 800c634:	42a0      	cmp	r0, r4
 800c636:	d007      	beq.n	800c648 <sbrk_aligned+0x38>
 800c638:	1a21      	subs	r1, r4, r0
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 fcc6 	bl	800cfcc <_sbrk_r>
 800c640:	3001      	adds	r0, #1
 800c642:	d101      	bne.n	800c648 <sbrk_aligned+0x38>
 800c644:	f04f 34ff 	mov.w	r4, #4294967295
 800c648:	4620      	mov	r0, r4
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	20001884 	.word	0x20001884

0800c650 <_malloc_r>:
 800c650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c654:	1ccd      	adds	r5, r1, #3
 800c656:	f025 0503 	bic.w	r5, r5, #3
 800c65a:	3508      	adds	r5, #8
 800c65c:	2d0c      	cmp	r5, #12
 800c65e:	bf38      	it	cc
 800c660:	250c      	movcc	r5, #12
 800c662:	2d00      	cmp	r5, #0
 800c664:	4607      	mov	r7, r0
 800c666:	db01      	blt.n	800c66c <_malloc_r+0x1c>
 800c668:	42a9      	cmp	r1, r5
 800c66a:	d905      	bls.n	800c678 <_malloc_r+0x28>
 800c66c:	230c      	movs	r3, #12
 800c66e:	603b      	str	r3, [r7, #0]
 800c670:	2600      	movs	r6, #0
 800c672:	4630      	mov	r0, r6
 800c674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c678:	4e2e      	ldr	r6, [pc, #184]	; (800c734 <_malloc_r+0xe4>)
 800c67a:	f000 ff31 	bl	800d4e0 <__malloc_lock>
 800c67e:	6833      	ldr	r3, [r6, #0]
 800c680:	461c      	mov	r4, r3
 800c682:	bb34      	cbnz	r4, 800c6d2 <_malloc_r+0x82>
 800c684:	4629      	mov	r1, r5
 800c686:	4638      	mov	r0, r7
 800c688:	f7ff ffc2 	bl	800c610 <sbrk_aligned>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	4604      	mov	r4, r0
 800c690:	d14d      	bne.n	800c72e <_malloc_r+0xde>
 800c692:	6834      	ldr	r4, [r6, #0]
 800c694:	4626      	mov	r6, r4
 800c696:	2e00      	cmp	r6, #0
 800c698:	d140      	bne.n	800c71c <_malloc_r+0xcc>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	4631      	mov	r1, r6
 800c69e:	4638      	mov	r0, r7
 800c6a0:	eb04 0803 	add.w	r8, r4, r3
 800c6a4:	f000 fc92 	bl	800cfcc <_sbrk_r>
 800c6a8:	4580      	cmp	r8, r0
 800c6aa:	d13a      	bne.n	800c722 <_malloc_r+0xd2>
 800c6ac:	6821      	ldr	r1, [r4, #0]
 800c6ae:	3503      	adds	r5, #3
 800c6b0:	1a6d      	subs	r5, r5, r1
 800c6b2:	f025 0503 	bic.w	r5, r5, #3
 800c6b6:	3508      	adds	r5, #8
 800c6b8:	2d0c      	cmp	r5, #12
 800c6ba:	bf38      	it	cc
 800c6bc:	250c      	movcc	r5, #12
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	f7ff ffa5 	bl	800c610 <sbrk_aligned>
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	d02b      	beq.n	800c722 <_malloc_r+0xd2>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	442b      	add	r3, r5
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	e00e      	b.n	800c6f0 <_malloc_r+0xa0>
 800c6d2:	6822      	ldr	r2, [r4, #0]
 800c6d4:	1b52      	subs	r2, r2, r5
 800c6d6:	d41e      	bmi.n	800c716 <_malloc_r+0xc6>
 800c6d8:	2a0b      	cmp	r2, #11
 800c6da:	d916      	bls.n	800c70a <_malloc_r+0xba>
 800c6dc:	1961      	adds	r1, r4, r5
 800c6de:	42a3      	cmp	r3, r4
 800c6e0:	6025      	str	r5, [r4, #0]
 800c6e2:	bf18      	it	ne
 800c6e4:	6059      	strne	r1, [r3, #4]
 800c6e6:	6863      	ldr	r3, [r4, #4]
 800c6e8:	bf08      	it	eq
 800c6ea:	6031      	streq	r1, [r6, #0]
 800c6ec:	5162      	str	r2, [r4, r5]
 800c6ee:	604b      	str	r3, [r1, #4]
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f104 060b 	add.w	r6, r4, #11
 800c6f6:	f000 fef9 	bl	800d4ec <__malloc_unlock>
 800c6fa:	f026 0607 	bic.w	r6, r6, #7
 800c6fe:	1d23      	adds	r3, r4, #4
 800c700:	1af2      	subs	r2, r6, r3
 800c702:	d0b6      	beq.n	800c672 <_malloc_r+0x22>
 800c704:	1b9b      	subs	r3, r3, r6
 800c706:	50a3      	str	r3, [r4, r2]
 800c708:	e7b3      	b.n	800c672 <_malloc_r+0x22>
 800c70a:	6862      	ldr	r2, [r4, #4]
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	bf0c      	ite	eq
 800c710:	6032      	streq	r2, [r6, #0]
 800c712:	605a      	strne	r2, [r3, #4]
 800c714:	e7ec      	b.n	800c6f0 <_malloc_r+0xa0>
 800c716:	4623      	mov	r3, r4
 800c718:	6864      	ldr	r4, [r4, #4]
 800c71a:	e7b2      	b.n	800c682 <_malloc_r+0x32>
 800c71c:	4634      	mov	r4, r6
 800c71e:	6876      	ldr	r6, [r6, #4]
 800c720:	e7b9      	b.n	800c696 <_malloc_r+0x46>
 800c722:	230c      	movs	r3, #12
 800c724:	603b      	str	r3, [r7, #0]
 800c726:	4638      	mov	r0, r7
 800c728:	f000 fee0 	bl	800d4ec <__malloc_unlock>
 800c72c:	e7a1      	b.n	800c672 <_malloc_r+0x22>
 800c72e:	6025      	str	r5, [r4, #0]
 800c730:	e7de      	b.n	800c6f0 <_malloc_r+0xa0>
 800c732:	bf00      	nop
 800c734:	20001880 	.word	0x20001880

0800c738 <__ssputs_r>:
 800c738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c73c:	688e      	ldr	r6, [r1, #8]
 800c73e:	429e      	cmp	r6, r3
 800c740:	4682      	mov	sl, r0
 800c742:	460c      	mov	r4, r1
 800c744:	4690      	mov	r8, r2
 800c746:	461f      	mov	r7, r3
 800c748:	d838      	bhi.n	800c7bc <__ssputs_r+0x84>
 800c74a:	898a      	ldrh	r2, [r1, #12]
 800c74c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c750:	d032      	beq.n	800c7b8 <__ssputs_r+0x80>
 800c752:	6825      	ldr	r5, [r4, #0]
 800c754:	6909      	ldr	r1, [r1, #16]
 800c756:	eba5 0901 	sub.w	r9, r5, r1
 800c75a:	6965      	ldr	r5, [r4, #20]
 800c75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c764:	3301      	adds	r3, #1
 800c766:	444b      	add	r3, r9
 800c768:	106d      	asrs	r5, r5, #1
 800c76a:	429d      	cmp	r5, r3
 800c76c:	bf38      	it	cc
 800c76e:	461d      	movcc	r5, r3
 800c770:	0553      	lsls	r3, r2, #21
 800c772:	d531      	bpl.n	800c7d8 <__ssputs_r+0xa0>
 800c774:	4629      	mov	r1, r5
 800c776:	f7ff ff6b 	bl	800c650 <_malloc_r>
 800c77a:	4606      	mov	r6, r0
 800c77c:	b950      	cbnz	r0, 800c794 <__ssputs_r+0x5c>
 800c77e:	230c      	movs	r3, #12
 800c780:	f8ca 3000 	str.w	r3, [sl]
 800c784:	89a3      	ldrh	r3, [r4, #12]
 800c786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295
 800c790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c794:	6921      	ldr	r1, [r4, #16]
 800c796:	464a      	mov	r2, r9
 800c798:	f7ff fda6 	bl	800c2e8 <memcpy>
 800c79c:	89a3      	ldrh	r3, [r4, #12]
 800c79e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a6:	81a3      	strh	r3, [r4, #12]
 800c7a8:	6126      	str	r6, [r4, #16]
 800c7aa:	6165      	str	r5, [r4, #20]
 800c7ac:	444e      	add	r6, r9
 800c7ae:	eba5 0509 	sub.w	r5, r5, r9
 800c7b2:	6026      	str	r6, [r4, #0]
 800c7b4:	60a5      	str	r5, [r4, #8]
 800c7b6:	463e      	mov	r6, r7
 800c7b8:	42be      	cmp	r6, r7
 800c7ba:	d900      	bls.n	800c7be <__ssputs_r+0x86>
 800c7bc:	463e      	mov	r6, r7
 800c7be:	6820      	ldr	r0, [r4, #0]
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	4641      	mov	r1, r8
 800c7c4:	f000 fe72 	bl	800d4ac <memmove>
 800c7c8:	68a3      	ldr	r3, [r4, #8]
 800c7ca:	1b9b      	subs	r3, r3, r6
 800c7cc:	60a3      	str	r3, [r4, #8]
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	4433      	add	r3, r6
 800c7d2:	6023      	str	r3, [r4, #0]
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	e7db      	b.n	800c790 <__ssputs_r+0x58>
 800c7d8:	462a      	mov	r2, r5
 800c7da:	f000 fed9 	bl	800d590 <_realloc_r>
 800c7de:	4606      	mov	r6, r0
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d1e1      	bne.n	800c7a8 <__ssputs_r+0x70>
 800c7e4:	6921      	ldr	r1, [r4, #16]
 800c7e6:	4650      	mov	r0, sl
 800c7e8:	f000 fe86 	bl	800d4f8 <_free_r>
 800c7ec:	e7c7      	b.n	800c77e <__ssputs_r+0x46>
	...

0800c7f0 <_svfiprintf_r>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	4698      	mov	r8, r3
 800c7f6:	898b      	ldrh	r3, [r1, #12]
 800c7f8:	061b      	lsls	r3, r3, #24
 800c7fa:	b09d      	sub	sp, #116	; 0x74
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	4614      	mov	r4, r2
 800c802:	d50e      	bpl.n	800c822 <_svfiprintf_r+0x32>
 800c804:	690b      	ldr	r3, [r1, #16]
 800c806:	b963      	cbnz	r3, 800c822 <_svfiprintf_r+0x32>
 800c808:	2140      	movs	r1, #64	; 0x40
 800c80a:	f7ff ff21 	bl	800c650 <_malloc_r>
 800c80e:	6028      	str	r0, [r5, #0]
 800c810:	6128      	str	r0, [r5, #16]
 800c812:	b920      	cbnz	r0, 800c81e <_svfiprintf_r+0x2e>
 800c814:	230c      	movs	r3, #12
 800c816:	603b      	str	r3, [r7, #0]
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	e0d1      	b.n	800c9c2 <_svfiprintf_r+0x1d2>
 800c81e:	2340      	movs	r3, #64	; 0x40
 800c820:	616b      	str	r3, [r5, #20]
 800c822:	2300      	movs	r3, #0
 800c824:	9309      	str	r3, [sp, #36]	; 0x24
 800c826:	2320      	movs	r3, #32
 800c828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c830:	2330      	movs	r3, #48	; 0x30
 800c832:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9dc <_svfiprintf_r+0x1ec>
 800c836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c83a:	f04f 0901 	mov.w	r9, #1
 800c83e:	4623      	mov	r3, r4
 800c840:	469a      	mov	sl, r3
 800c842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c846:	b10a      	cbz	r2, 800c84c <_svfiprintf_r+0x5c>
 800c848:	2a25      	cmp	r2, #37	; 0x25
 800c84a:	d1f9      	bne.n	800c840 <_svfiprintf_r+0x50>
 800c84c:	ebba 0b04 	subs.w	fp, sl, r4
 800c850:	d00b      	beq.n	800c86a <_svfiprintf_r+0x7a>
 800c852:	465b      	mov	r3, fp
 800c854:	4622      	mov	r2, r4
 800c856:	4629      	mov	r1, r5
 800c858:	4638      	mov	r0, r7
 800c85a:	f7ff ff6d 	bl	800c738 <__ssputs_r>
 800c85e:	3001      	adds	r0, #1
 800c860:	f000 80aa 	beq.w	800c9b8 <_svfiprintf_r+0x1c8>
 800c864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c866:	445a      	add	r2, fp
 800c868:	9209      	str	r2, [sp, #36]	; 0x24
 800c86a:	f89a 3000 	ldrb.w	r3, [sl]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 80a2 	beq.w	800c9b8 <_svfiprintf_r+0x1c8>
 800c874:	2300      	movs	r3, #0
 800c876:	f04f 32ff 	mov.w	r2, #4294967295
 800c87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c87e:	f10a 0a01 	add.w	sl, sl, #1
 800c882:	9304      	str	r3, [sp, #16]
 800c884:	9307      	str	r3, [sp, #28]
 800c886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c88a:	931a      	str	r3, [sp, #104]	; 0x68
 800c88c:	4654      	mov	r4, sl
 800c88e:	2205      	movs	r2, #5
 800c890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c894:	4851      	ldr	r0, [pc, #324]	; (800c9dc <_svfiprintf_r+0x1ec>)
 800c896:	f7f3 fc83 	bl	80001a0 <memchr>
 800c89a:	9a04      	ldr	r2, [sp, #16]
 800c89c:	b9d8      	cbnz	r0, 800c8d6 <_svfiprintf_r+0xe6>
 800c89e:	06d0      	lsls	r0, r2, #27
 800c8a0:	bf44      	itt	mi
 800c8a2:	2320      	movmi	r3, #32
 800c8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8a8:	0711      	lsls	r1, r2, #28
 800c8aa:	bf44      	itt	mi
 800c8ac:	232b      	movmi	r3, #43	; 0x2b
 800c8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b8:	d015      	beq.n	800c8e6 <_svfiprintf_r+0xf6>
 800c8ba:	9a07      	ldr	r2, [sp, #28]
 800c8bc:	4654      	mov	r4, sl
 800c8be:	2000      	movs	r0, #0
 800c8c0:	f04f 0c0a 	mov.w	ip, #10
 800c8c4:	4621      	mov	r1, r4
 800c8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ca:	3b30      	subs	r3, #48	; 0x30
 800c8cc:	2b09      	cmp	r3, #9
 800c8ce:	d94e      	bls.n	800c96e <_svfiprintf_r+0x17e>
 800c8d0:	b1b0      	cbz	r0, 800c900 <_svfiprintf_r+0x110>
 800c8d2:	9207      	str	r2, [sp, #28]
 800c8d4:	e014      	b.n	800c900 <_svfiprintf_r+0x110>
 800c8d6:	eba0 0308 	sub.w	r3, r0, r8
 800c8da:	fa09 f303 	lsl.w	r3, r9, r3
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	9304      	str	r3, [sp, #16]
 800c8e2:	46a2      	mov	sl, r4
 800c8e4:	e7d2      	b.n	800c88c <_svfiprintf_r+0x9c>
 800c8e6:	9b03      	ldr	r3, [sp, #12]
 800c8e8:	1d19      	adds	r1, r3, #4
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	9103      	str	r1, [sp, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	bfbb      	ittet	lt
 800c8f2:	425b      	neglt	r3, r3
 800c8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8f8:	9307      	strge	r3, [sp, #28]
 800c8fa:	9307      	strlt	r3, [sp, #28]
 800c8fc:	bfb8      	it	lt
 800c8fe:	9204      	strlt	r2, [sp, #16]
 800c900:	7823      	ldrb	r3, [r4, #0]
 800c902:	2b2e      	cmp	r3, #46	; 0x2e
 800c904:	d10c      	bne.n	800c920 <_svfiprintf_r+0x130>
 800c906:	7863      	ldrb	r3, [r4, #1]
 800c908:	2b2a      	cmp	r3, #42	; 0x2a
 800c90a:	d135      	bne.n	800c978 <_svfiprintf_r+0x188>
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	1d1a      	adds	r2, r3, #4
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	9203      	str	r2, [sp, #12]
 800c914:	2b00      	cmp	r3, #0
 800c916:	bfb8      	it	lt
 800c918:	f04f 33ff 	movlt.w	r3, #4294967295
 800c91c:	3402      	adds	r4, #2
 800c91e:	9305      	str	r3, [sp, #20]
 800c920:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9ec <_svfiprintf_r+0x1fc>
 800c924:	7821      	ldrb	r1, [r4, #0]
 800c926:	2203      	movs	r2, #3
 800c928:	4650      	mov	r0, sl
 800c92a:	f7f3 fc39 	bl	80001a0 <memchr>
 800c92e:	b140      	cbz	r0, 800c942 <_svfiprintf_r+0x152>
 800c930:	2340      	movs	r3, #64	; 0x40
 800c932:	eba0 000a 	sub.w	r0, r0, sl
 800c936:	fa03 f000 	lsl.w	r0, r3, r0
 800c93a:	9b04      	ldr	r3, [sp, #16]
 800c93c:	4303      	orrs	r3, r0
 800c93e:	3401      	adds	r4, #1
 800c940:	9304      	str	r3, [sp, #16]
 800c942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c946:	4826      	ldr	r0, [pc, #152]	; (800c9e0 <_svfiprintf_r+0x1f0>)
 800c948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c94c:	2206      	movs	r2, #6
 800c94e:	f7f3 fc27 	bl	80001a0 <memchr>
 800c952:	2800      	cmp	r0, #0
 800c954:	d038      	beq.n	800c9c8 <_svfiprintf_r+0x1d8>
 800c956:	4b23      	ldr	r3, [pc, #140]	; (800c9e4 <_svfiprintf_r+0x1f4>)
 800c958:	bb1b      	cbnz	r3, 800c9a2 <_svfiprintf_r+0x1b2>
 800c95a:	9b03      	ldr	r3, [sp, #12]
 800c95c:	3307      	adds	r3, #7
 800c95e:	f023 0307 	bic.w	r3, r3, #7
 800c962:	3308      	adds	r3, #8
 800c964:	9303      	str	r3, [sp, #12]
 800c966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c968:	4433      	add	r3, r6
 800c96a:	9309      	str	r3, [sp, #36]	; 0x24
 800c96c:	e767      	b.n	800c83e <_svfiprintf_r+0x4e>
 800c96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c972:	460c      	mov	r4, r1
 800c974:	2001      	movs	r0, #1
 800c976:	e7a5      	b.n	800c8c4 <_svfiprintf_r+0xd4>
 800c978:	2300      	movs	r3, #0
 800c97a:	3401      	adds	r4, #1
 800c97c:	9305      	str	r3, [sp, #20]
 800c97e:	4619      	mov	r1, r3
 800c980:	f04f 0c0a 	mov.w	ip, #10
 800c984:	4620      	mov	r0, r4
 800c986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c98a:	3a30      	subs	r2, #48	; 0x30
 800c98c:	2a09      	cmp	r2, #9
 800c98e:	d903      	bls.n	800c998 <_svfiprintf_r+0x1a8>
 800c990:	2b00      	cmp	r3, #0
 800c992:	d0c5      	beq.n	800c920 <_svfiprintf_r+0x130>
 800c994:	9105      	str	r1, [sp, #20]
 800c996:	e7c3      	b.n	800c920 <_svfiprintf_r+0x130>
 800c998:	fb0c 2101 	mla	r1, ip, r1, r2
 800c99c:	4604      	mov	r4, r0
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e7f0      	b.n	800c984 <_svfiprintf_r+0x194>
 800c9a2:	ab03      	add	r3, sp, #12
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	462a      	mov	r2, r5
 800c9a8:	4b0f      	ldr	r3, [pc, #60]	; (800c9e8 <_svfiprintf_r+0x1f8>)
 800c9aa:	a904      	add	r1, sp, #16
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	f3af 8000 	nop.w
 800c9b2:	1c42      	adds	r2, r0, #1
 800c9b4:	4606      	mov	r6, r0
 800c9b6:	d1d6      	bne.n	800c966 <_svfiprintf_r+0x176>
 800c9b8:	89ab      	ldrh	r3, [r5, #12]
 800c9ba:	065b      	lsls	r3, r3, #25
 800c9bc:	f53f af2c 	bmi.w	800c818 <_svfiprintf_r+0x28>
 800c9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9c2:	b01d      	add	sp, #116	; 0x74
 800c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c8:	ab03      	add	r3, sp, #12
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	462a      	mov	r2, r5
 800c9ce:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <_svfiprintf_r+0x1f8>)
 800c9d0:	a904      	add	r1, sp, #16
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	f000 f9d4 	bl	800cd80 <_printf_i>
 800c9d8:	e7eb      	b.n	800c9b2 <_svfiprintf_r+0x1c2>
 800c9da:	bf00      	nop
 800c9dc:	0800df60 	.word	0x0800df60
 800c9e0:	0800df6a 	.word	0x0800df6a
 800c9e4:	00000000 	.word	0x00000000
 800c9e8:	0800c739 	.word	0x0800c739
 800c9ec:	0800df66 	.word	0x0800df66

0800c9f0 <__sfputc_r>:
 800c9f0:	6893      	ldr	r3, [r2, #8]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	b410      	push	{r4}
 800c9f8:	6093      	str	r3, [r2, #8]
 800c9fa:	da08      	bge.n	800ca0e <__sfputc_r+0x1e>
 800c9fc:	6994      	ldr	r4, [r2, #24]
 800c9fe:	42a3      	cmp	r3, r4
 800ca00:	db01      	blt.n	800ca06 <__sfputc_r+0x16>
 800ca02:	290a      	cmp	r1, #10
 800ca04:	d103      	bne.n	800ca0e <__sfputc_r+0x1e>
 800ca06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca0a:	f000 bb33 	b.w	800d074 <__swbuf_r>
 800ca0e:	6813      	ldr	r3, [r2, #0]
 800ca10:	1c58      	adds	r0, r3, #1
 800ca12:	6010      	str	r0, [r2, #0]
 800ca14:	7019      	strb	r1, [r3, #0]
 800ca16:	4608      	mov	r0, r1
 800ca18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <__sfputs_r>:
 800ca1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca20:	4606      	mov	r6, r0
 800ca22:	460f      	mov	r7, r1
 800ca24:	4614      	mov	r4, r2
 800ca26:	18d5      	adds	r5, r2, r3
 800ca28:	42ac      	cmp	r4, r5
 800ca2a:	d101      	bne.n	800ca30 <__sfputs_r+0x12>
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	e007      	b.n	800ca40 <__sfputs_r+0x22>
 800ca30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca34:	463a      	mov	r2, r7
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff ffda 	bl	800c9f0 <__sfputc_r>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d1f3      	bne.n	800ca28 <__sfputs_r+0xa>
 800ca40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca44 <_vfiprintf_r>:
 800ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	460d      	mov	r5, r1
 800ca4a:	b09d      	sub	sp, #116	; 0x74
 800ca4c:	4614      	mov	r4, r2
 800ca4e:	4698      	mov	r8, r3
 800ca50:	4606      	mov	r6, r0
 800ca52:	b118      	cbz	r0, 800ca5c <_vfiprintf_r+0x18>
 800ca54:	6983      	ldr	r3, [r0, #24]
 800ca56:	b90b      	cbnz	r3, 800ca5c <_vfiprintf_r+0x18>
 800ca58:	f7ff fd3a 	bl	800c4d0 <__sinit>
 800ca5c:	4b89      	ldr	r3, [pc, #548]	; (800cc84 <_vfiprintf_r+0x240>)
 800ca5e:	429d      	cmp	r5, r3
 800ca60:	d11b      	bne.n	800ca9a <_vfiprintf_r+0x56>
 800ca62:	6875      	ldr	r5, [r6, #4]
 800ca64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca66:	07d9      	lsls	r1, r3, #31
 800ca68:	d405      	bmi.n	800ca76 <_vfiprintf_r+0x32>
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	059a      	lsls	r2, r3, #22
 800ca6e:	d402      	bmi.n	800ca76 <_vfiprintf_r+0x32>
 800ca70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca72:	f7ff fdcb 	bl	800c60c <__retarget_lock_acquire_recursive>
 800ca76:	89ab      	ldrh	r3, [r5, #12]
 800ca78:	071b      	lsls	r3, r3, #28
 800ca7a:	d501      	bpl.n	800ca80 <_vfiprintf_r+0x3c>
 800ca7c:	692b      	ldr	r3, [r5, #16]
 800ca7e:	b9eb      	cbnz	r3, 800cabc <_vfiprintf_r+0x78>
 800ca80:	4629      	mov	r1, r5
 800ca82:	4630      	mov	r0, r6
 800ca84:	f000 fb5a 	bl	800d13c <__swsetup_r>
 800ca88:	b1c0      	cbz	r0, 800cabc <_vfiprintf_r+0x78>
 800ca8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca8c:	07dc      	lsls	r4, r3, #31
 800ca8e:	d50e      	bpl.n	800caae <_vfiprintf_r+0x6a>
 800ca90:	f04f 30ff 	mov.w	r0, #4294967295
 800ca94:	b01d      	add	sp, #116	; 0x74
 800ca96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9a:	4b7b      	ldr	r3, [pc, #492]	; (800cc88 <_vfiprintf_r+0x244>)
 800ca9c:	429d      	cmp	r5, r3
 800ca9e:	d101      	bne.n	800caa4 <_vfiprintf_r+0x60>
 800caa0:	68b5      	ldr	r5, [r6, #8]
 800caa2:	e7df      	b.n	800ca64 <_vfiprintf_r+0x20>
 800caa4:	4b79      	ldr	r3, [pc, #484]	; (800cc8c <_vfiprintf_r+0x248>)
 800caa6:	429d      	cmp	r5, r3
 800caa8:	bf08      	it	eq
 800caaa:	68f5      	ldreq	r5, [r6, #12]
 800caac:	e7da      	b.n	800ca64 <_vfiprintf_r+0x20>
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	0598      	lsls	r0, r3, #22
 800cab2:	d4ed      	bmi.n	800ca90 <_vfiprintf_r+0x4c>
 800cab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cab6:	f7ff fdaa 	bl	800c60e <__retarget_lock_release_recursive>
 800caba:	e7e9      	b.n	800ca90 <_vfiprintf_r+0x4c>
 800cabc:	2300      	movs	r3, #0
 800cabe:	9309      	str	r3, [sp, #36]	; 0x24
 800cac0:	2320      	movs	r3, #32
 800cac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800caca:	2330      	movs	r3, #48	; 0x30
 800cacc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc90 <_vfiprintf_r+0x24c>
 800cad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cad4:	f04f 0901 	mov.w	r9, #1
 800cad8:	4623      	mov	r3, r4
 800cada:	469a      	mov	sl, r3
 800cadc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cae0:	b10a      	cbz	r2, 800cae6 <_vfiprintf_r+0xa2>
 800cae2:	2a25      	cmp	r2, #37	; 0x25
 800cae4:	d1f9      	bne.n	800cada <_vfiprintf_r+0x96>
 800cae6:	ebba 0b04 	subs.w	fp, sl, r4
 800caea:	d00b      	beq.n	800cb04 <_vfiprintf_r+0xc0>
 800caec:	465b      	mov	r3, fp
 800caee:	4622      	mov	r2, r4
 800caf0:	4629      	mov	r1, r5
 800caf2:	4630      	mov	r0, r6
 800caf4:	f7ff ff93 	bl	800ca1e <__sfputs_r>
 800caf8:	3001      	adds	r0, #1
 800cafa:	f000 80aa 	beq.w	800cc52 <_vfiprintf_r+0x20e>
 800cafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb00:	445a      	add	r2, fp
 800cb02:	9209      	str	r2, [sp, #36]	; 0x24
 800cb04:	f89a 3000 	ldrb.w	r3, [sl]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f000 80a2 	beq.w	800cc52 <_vfiprintf_r+0x20e>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f04f 32ff 	mov.w	r2, #4294967295
 800cb14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb18:	f10a 0a01 	add.w	sl, sl, #1
 800cb1c:	9304      	str	r3, [sp, #16]
 800cb1e:	9307      	str	r3, [sp, #28]
 800cb20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb24:	931a      	str	r3, [sp, #104]	; 0x68
 800cb26:	4654      	mov	r4, sl
 800cb28:	2205      	movs	r2, #5
 800cb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2e:	4858      	ldr	r0, [pc, #352]	; (800cc90 <_vfiprintf_r+0x24c>)
 800cb30:	f7f3 fb36 	bl	80001a0 <memchr>
 800cb34:	9a04      	ldr	r2, [sp, #16]
 800cb36:	b9d8      	cbnz	r0, 800cb70 <_vfiprintf_r+0x12c>
 800cb38:	06d1      	lsls	r1, r2, #27
 800cb3a:	bf44      	itt	mi
 800cb3c:	2320      	movmi	r3, #32
 800cb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb42:	0713      	lsls	r3, r2, #28
 800cb44:	bf44      	itt	mi
 800cb46:	232b      	movmi	r3, #43	; 0x2b
 800cb48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb50:	2b2a      	cmp	r3, #42	; 0x2a
 800cb52:	d015      	beq.n	800cb80 <_vfiprintf_r+0x13c>
 800cb54:	9a07      	ldr	r2, [sp, #28]
 800cb56:	4654      	mov	r4, sl
 800cb58:	2000      	movs	r0, #0
 800cb5a:	f04f 0c0a 	mov.w	ip, #10
 800cb5e:	4621      	mov	r1, r4
 800cb60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb64:	3b30      	subs	r3, #48	; 0x30
 800cb66:	2b09      	cmp	r3, #9
 800cb68:	d94e      	bls.n	800cc08 <_vfiprintf_r+0x1c4>
 800cb6a:	b1b0      	cbz	r0, 800cb9a <_vfiprintf_r+0x156>
 800cb6c:	9207      	str	r2, [sp, #28]
 800cb6e:	e014      	b.n	800cb9a <_vfiprintf_r+0x156>
 800cb70:	eba0 0308 	sub.w	r3, r0, r8
 800cb74:	fa09 f303 	lsl.w	r3, r9, r3
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	9304      	str	r3, [sp, #16]
 800cb7c:	46a2      	mov	sl, r4
 800cb7e:	e7d2      	b.n	800cb26 <_vfiprintf_r+0xe2>
 800cb80:	9b03      	ldr	r3, [sp, #12]
 800cb82:	1d19      	adds	r1, r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	9103      	str	r1, [sp, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	bfbb      	ittet	lt
 800cb8c:	425b      	neglt	r3, r3
 800cb8e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb92:	9307      	strge	r3, [sp, #28]
 800cb94:	9307      	strlt	r3, [sp, #28]
 800cb96:	bfb8      	it	lt
 800cb98:	9204      	strlt	r2, [sp, #16]
 800cb9a:	7823      	ldrb	r3, [r4, #0]
 800cb9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb9e:	d10c      	bne.n	800cbba <_vfiprintf_r+0x176>
 800cba0:	7863      	ldrb	r3, [r4, #1]
 800cba2:	2b2a      	cmp	r3, #42	; 0x2a
 800cba4:	d135      	bne.n	800cc12 <_vfiprintf_r+0x1ce>
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	1d1a      	adds	r2, r3, #4
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	9203      	str	r2, [sp, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	bfb8      	it	lt
 800cbb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbb6:	3402      	adds	r4, #2
 800cbb8:	9305      	str	r3, [sp, #20]
 800cbba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cca0 <_vfiprintf_r+0x25c>
 800cbbe:	7821      	ldrb	r1, [r4, #0]
 800cbc0:	2203      	movs	r2, #3
 800cbc2:	4650      	mov	r0, sl
 800cbc4:	f7f3 faec 	bl	80001a0 <memchr>
 800cbc8:	b140      	cbz	r0, 800cbdc <_vfiprintf_r+0x198>
 800cbca:	2340      	movs	r3, #64	; 0x40
 800cbcc:	eba0 000a 	sub.w	r0, r0, sl
 800cbd0:	fa03 f000 	lsl.w	r0, r3, r0
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	4303      	orrs	r3, r0
 800cbd8:	3401      	adds	r4, #1
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe0:	482c      	ldr	r0, [pc, #176]	; (800cc94 <_vfiprintf_r+0x250>)
 800cbe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbe6:	2206      	movs	r2, #6
 800cbe8:	f7f3 fada 	bl	80001a0 <memchr>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d03f      	beq.n	800cc70 <_vfiprintf_r+0x22c>
 800cbf0:	4b29      	ldr	r3, [pc, #164]	; (800cc98 <_vfiprintf_r+0x254>)
 800cbf2:	bb1b      	cbnz	r3, 800cc3c <_vfiprintf_r+0x1f8>
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	3307      	adds	r3, #7
 800cbf8:	f023 0307 	bic.w	r3, r3, #7
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	9303      	str	r3, [sp, #12]
 800cc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc02:	443b      	add	r3, r7
 800cc04:	9309      	str	r3, [sp, #36]	; 0x24
 800cc06:	e767      	b.n	800cad8 <_vfiprintf_r+0x94>
 800cc08:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	2001      	movs	r0, #1
 800cc10:	e7a5      	b.n	800cb5e <_vfiprintf_r+0x11a>
 800cc12:	2300      	movs	r3, #0
 800cc14:	3401      	adds	r4, #1
 800cc16:	9305      	str	r3, [sp, #20]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	f04f 0c0a 	mov.w	ip, #10
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc24:	3a30      	subs	r2, #48	; 0x30
 800cc26:	2a09      	cmp	r2, #9
 800cc28:	d903      	bls.n	800cc32 <_vfiprintf_r+0x1ee>
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0c5      	beq.n	800cbba <_vfiprintf_r+0x176>
 800cc2e:	9105      	str	r1, [sp, #20]
 800cc30:	e7c3      	b.n	800cbba <_vfiprintf_r+0x176>
 800cc32:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc36:	4604      	mov	r4, r0
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e7f0      	b.n	800cc1e <_vfiprintf_r+0x1da>
 800cc3c:	ab03      	add	r3, sp, #12
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	462a      	mov	r2, r5
 800cc42:	4b16      	ldr	r3, [pc, #88]	; (800cc9c <_vfiprintf_r+0x258>)
 800cc44:	a904      	add	r1, sp, #16
 800cc46:	4630      	mov	r0, r6
 800cc48:	f3af 8000 	nop.w
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	1c78      	adds	r0, r7, #1
 800cc50:	d1d6      	bne.n	800cc00 <_vfiprintf_r+0x1bc>
 800cc52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc54:	07d9      	lsls	r1, r3, #31
 800cc56:	d405      	bmi.n	800cc64 <_vfiprintf_r+0x220>
 800cc58:	89ab      	ldrh	r3, [r5, #12]
 800cc5a:	059a      	lsls	r2, r3, #22
 800cc5c:	d402      	bmi.n	800cc64 <_vfiprintf_r+0x220>
 800cc5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc60:	f7ff fcd5 	bl	800c60e <__retarget_lock_release_recursive>
 800cc64:	89ab      	ldrh	r3, [r5, #12]
 800cc66:	065b      	lsls	r3, r3, #25
 800cc68:	f53f af12 	bmi.w	800ca90 <_vfiprintf_r+0x4c>
 800cc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc6e:	e711      	b.n	800ca94 <_vfiprintf_r+0x50>
 800cc70:	ab03      	add	r3, sp, #12
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	462a      	mov	r2, r5
 800cc76:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <_vfiprintf_r+0x258>)
 800cc78:	a904      	add	r1, sp, #16
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f000 f880 	bl	800cd80 <_printf_i>
 800cc80:	e7e4      	b.n	800cc4c <_vfiprintf_r+0x208>
 800cc82:	bf00      	nop
 800cc84:	0800df20 	.word	0x0800df20
 800cc88:	0800df40 	.word	0x0800df40
 800cc8c:	0800df00 	.word	0x0800df00
 800cc90:	0800df60 	.word	0x0800df60
 800cc94:	0800df6a 	.word	0x0800df6a
 800cc98:	00000000 	.word	0x00000000
 800cc9c:	0800ca1f 	.word	0x0800ca1f
 800cca0:	0800df66 	.word	0x0800df66

0800cca4 <_printf_common>:
 800cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	4616      	mov	r6, r2
 800ccaa:	4699      	mov	r9, r3
 800ccac:	688a      	ldr	r2, [r1, #8]
 800ccae:	690b      	ldr	r3, [r1, #16]
 800ccb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	bfb8      	it	lt
 800ccb8:	4613      	movlt	r3, r2
 800ccba:	6033      	str	r3, [r6, #0]
 800ccbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	b10a      	cbz	r2, 800ccca <_printf_common+0x26>
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	6033      	str	r3, [r6, #0]
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	0699      	lsls	r1, r3, #26
 800ccce:	bf42      	ittt	mi
 800ccd0:	6833      	ldrmi	r3, [r6, #0]
 800ccd2:	3302      	addmi	r3, #2
 800ccd4:	6033      	strmi	r3, [r6, #0]
 800ccd6:	6825      	ldr	r5, [r4, #0]
 800ccd8:	f015 0506 	ands.w	r5, r5, #6
 800ccdc:	d106      	bne.n	800ccec <_printf_common+0x48>
 800ccde:	f104 0a19 	add.w	sl, r4, #25
 800cce2:	68e3      	ldr	r3, [r4, #12]
 800cce4:	6832      	ldr	r2, [r6, #0]
 800cce6:	1a9b      	subs	r3, r3, r2
 800cce8:	42ab      	cmp	r3, r5
 800ccea:	dc26      	bgt.n	800cd3a <_printf_common+0x96>
 800ccec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccf0:	1e13      	subs	r3, r2, #0
 800ccf2:	6822      	ldr	r2, [r4, #0]
 800ccf4:	bf18      	it	ne
 800ccf6:	2301      	movne	r3, #1
 800ccf8:	0692      	lsls	r2, r2, #26
 800ccfa:	d42b      	bmi.n	800cd54 <_printf_common+0xb0>
 800ccfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd00:	4649      	mov	r1, r9
 800cd02:	4638      	mov	r0, r7
 800cd04:	47c0      	blx	r8
 800cd06:	3001      	adds	r0, #1
 800cd08:	d01e      	beq.n	800cd48 <_printf_common+0xa4>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	68e5      	ldr	r5, [r4, #12]
 800cd0e:	6832      	ldr	r2, [r6, #0]
 800cd10:	f003 0306 	and.w	r3, r3, #6
 800cd14:	2b04      	cmp	r3, #4
 800cd16:	bf08      	it	eq
 800cd18:	1aad      	subeq	r5, r5, r2
 800cd1a:	68a3      	ldr	r3, [r4, #8]
 800cd1c:	6922      	ldr	r2, [r4, #16]
 800cd1e:	bf0c      	ite	eq
 800cd20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd24:	2500      	movne	r5, #0
 800cd26:	4293      	cmp	r3, r2
 800cd28:	bfc4      	itt	gt
 800cd2a:	1a9b      	subgt	r3, r3, r2
 800cd2c:	18ed      	addgt	r5, r5, r3
 800cd2e:	2600      	movs	r6, #0
 800cd30:	341a      	adds	r4, #26
 800cd32:	42b5      	cmp	r5, r6
 800cd34:	d11a      	bne.n	800cd6c <_printf_common+0xc8>
 800cd36:	2000      	movs	r0, #0
 800cd38:	e008      	b.n	800cd4c <_printf_common+0xa8>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	4652      	mov	r2, sl
 800cd3e:	4649      	mov	r1, r9
 800cd40:	4638      	mov	r0, r7
 800cd42:	47c0      	blx	r8
 800cd44:	3001      	adds	r0, #1
 800cd46:	d103      	bne.n	800cd50 <_printf_common+0xac>
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd50:	3501      	adds	r5, #1
 800cd52:	e7c6      	b.n	800cce2 <_printf_common+0x3e>
 800cd54:	18e1      	adds	r1, r4, r3
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	2030      	movs	r0, #48	; 0x30
 800cd5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd5e:	4422      	add	r2, r4
 800cd60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd68:	3302      	adds	r3, #2
 800cd6a:	e7c7      	b.n	800ccfc <_printf_common+0x58>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	4622      	mov	r2, r4
 800cd70:	4649      	mov	r1, r9
 800cd72:	4638      	mov	r0, r7
 800cd74:	47c0      	blx	r8
 800cd76:	3001      	adds	r0, #1
 800cd78:	d0e6      	beq.n	800cd48 <_printf_common+0xa4>
 800cd7a:	3601      	adds	r6, #1
 800cd7c:	e7d9      	b.n	800cd32 <_printf_common+0x8e>
	...

0800cd80 <_printf_i>:
 800cd80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd84:	7e0f      	ldrb	r7, [r1, #24]
 800cd86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd88:	2f78      	cmp	r7, #120	; 0x78
 800cd8a:	4691      	mov	r9, r2
 800cd8c:	4680      	mov	r8, r0
 800cd8e:	460c      	mov	r4, r1
 800cd90:	469a      	mov	sl, r3
 800cd92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd96:	d807      	bhi.n	800cda8 <_printf_i+0x28>
 800cd98:	2f62      	cmp	r7, #98	; 0x62
 800cd9a:	d80a      	bhi.n	800cdb2 <_printf_i+0x32>
 800cd9c:	2f00      	cmp	r7, #0
 800cd9e:	f000 80d8 	beq.w	800cf52 <_printf_i+0x1d2>
 800cda2:	2f58      	cmp	r7, #88	; 0x58
 800cda4:	f000 80a3 	beq.w	800ceee <_printf_i+0x16e>
 800cda8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdb0:	e03a      	b.n	800ce28 <_printf_i+0xa8>
 800cdb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdb6:	2b15      	cmp	r3, #21
 800cdb8:	d8f6      	bhi.n	800cda8 <_printf_i+0x28>
 800cdba:	a101      	add	r1, pc, #4	; (adr r1, 800cdc0 <_printf_i+0x40>)
 800cdbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdc0:	0800ce19 	.word	0x0800ce19
 800cdc4:	0800ce2d 	.word	0x0800ce2d
 800cdc8:	0800cda9 	.word	0x0800cda9
 800cdcc:	0800cda9 	.word	0x0800cda9
 800cdd0:	0800cda9 	.word	0x0800cda9
 800cdd4:	0800cda9 	.word	0x0800cda9
 800cdd8:	0800ce2d 	.word	0x0800ce2d
 800cddc:	0800cda9 	.word	0x0800cda9
 800cde0:	0800cda9 	.word	0x0800cda9
 800cde4:	0800cda9 	.word	0x0800cda9
 800cde8:	0800cda9 	.word	0x0800cda9
 800cdec:	0800cf39 	.word	0x0800cf39
 800cdf0:	0800ce5d 	.word	0x0800ce5d
 800cdf4:	0800cf1b 	.word	0x0800cf1b
 800cdf8:	0800cda9 	.word	0x0800cda9
 800cdfc:	0800cda9 	.word	0x0800cda9
 800ce00:	0800cf5b 	.word	0x0800cf5b
 800ce04:	0800cda9 	.word	0x0800cda9
 800ce08:	0800ce5d 	.word	0x0800ce5d
 800ce0c:	0800cda9 	.word	0x0800cda9
 800ce10:	0800cda9 	.word	0x0800cda9
 800ce14:	0800cf23 	.word	0x0800cf23
 800ce18:	682b      	ldr	r3, [r5, #0]
 800ce1a:	1d1a      	adds	r2, r3, #4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	602a      	str	r2, [r5, #0]
 800ce20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e0a3      	b.n	800cf74 <_printf_i+0x1f4>
 800ce2c:	6820      	ldr	r0, [r4, #0]
 800ce2e:	6829      	ldr	r1, [r5, #0]
 800ce30:	0606      	lsls	r6, r0, #24
 800ce32:	f101 0304 	add.w	r3, r1, #4
 800ce36:	d50a      	bpl.n	800ce4e <_printf_i+0xce>
 800ce38:	680e      	ldr	r6, [r1, #0]
 800ce3a:	602b      	str	r3, [r5, #0]
 800ce3c:	2e00      	cmp	r6, #0
 800ce3e:	da03      	bge.n	800ce48 <_printf_i+0xc8>
 800ce40:	232d      	movs	r3, #45	; 0x2d
 800ce42:	4276      	negs	r6, r6
 800ce44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce48:	485e      	ldr	r0, [pc, #376]	; (800cfc4 <_printf_i+0x244>)
 800ce4a:	230a      	movs	r3, #10
 800ce4c:	e019      	b.n	800ce82 <_printf_i+0x102>
 800ce4e:	680e      	ldr	r6, [r1, #0]
 800ce50:	602b      	str	r3, [r5, #0]
 800ce52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce56:	bf18      	it	ne
 800ce58:	b236      	sxthne	r6, r6
 800ce5a:	e7ef      	b.n	800ce3c <_printf_i+0xbc>
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	6820      	ldr	r0, [r4, #0]
 800ce60:	1d19      	adds	r1, r3, #4
 800ce62:	6029      	str	r1, [r5, #0]
 800ce64:	0601      	lsls	r1, r0, #24
 800ce66:	d501      	bpl.n	800ce6c <_printf_i+0xec>
 800ce68:	681e      	ldr	r6, [r3, #0]
 800ce6a:	e002      	b.n	800ce72 <_printf_i+0xf2>
 800ce6c:	0646      	lsls	r6, r0, #25
 800ce6e:	d5fb      	bpl.n	800ce68 <_printf_i+0xe8>
 800ce70:	881e      	ldrh	r6, [r3, #0]
 800ce72:	4854      	ldr	r0, [pc, #336]	; (800cfc4 <_printf_i+0x244>)
 800ce74:	2f6f      	cmp	r7, #111	; 0x6f
 800ce76:	bf0c      	ite	eq
 800ce78:	2308      	moveq	r3, #8
 800ce7a:	230a      	movne	r3, #10
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce82:	6865      	ldr	r5, [r4, #4]
 800ce84:	60a5      	str	r5, [r4, #8]
 800ce86:	2d00      	cmp	r5, #0
 800ce88:	bfa2      	ittt	ge
 800ce8a:	6821      	ldrge	r1, [r4, #0]
 800ce8c:	f021 0104 	bicge.w	r1, r1, #4
 800ce90:	6021      	strge	r1, [r4, #0]
 800ce92:	b90e      	cbnz	r6, 800ce98 <_printf_i+0x118>
 800ce94:	2d00      	cmp	r5, #0
 800ce96:	d04d      	beq.n	800cf34 <_printf_i+0x1b4>
 800ce98:	4615      	mov	r5, r2
 800ce9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce9e:	fb03 6711 	mls	r7, r3, r1, r6
 800cea2:	5dc7      	ldrb	r7, [r0, r7]
 800cea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cea8:	4637      	mov	r7, r6
 800ceaa:	42bb      	cmp	r3, r7
 800ceac:	460e      	mov	r6, r1
 800ceae:	d9f4      	bls.n	800ce9a <_printf_i+0x11a>
 800ceb0:	2b08      	cmp	r3, #8
 800ceb2:	d10b      	bne.n	800cecc <_printf_i+0x14c>
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	07de      	lsls	r6, r3, #31
 800ceb8:	d508      	bpl.n	800cecc <_printf_i+0x14c>
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	6861      	ldr	r1, [r4, #4]
 800cebe:	4299      	cmp	r1, r3
 800cec0:	bfde      	ittt	le
 800cec2:	2330      	movle	r3, #48	; 0x30
 800cec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cecc:	1b52      	subs	r2, r2, r5
 800cece:	6122      	str	r2, [r4, #16]
 800ced0:	f8cd a000 	str.w	sl, [sp]
 800ced4:	464b      	mov	r3, r9
 800ced6:	aa03      	add	r2, sp, #12
 800ced8:	4621      	mov	r1, r4
 800ceda:	4640      	mov	r0, r8
 800cedc:	f7ff fee2 	bl	800cca4 <_printf_common>
 800cee0:	3001      	adds	r0, #1
 800cee2:	d14c      	bne.n	800cf7e <_printf_i+0x1fe>
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295
 800cee8:	b004      	add	sp, #16
 800ceea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceee:	4835      	ldr	r0, [pc, #212]	; (800cfc4 <_printf_i+0x244>)
 800cef0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cef4:	6829      	ldr	r1, [r5, #0]
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cefc:	6029      	str	r1, [r5, #0]
 800cefe:	061d      	lsls	r5, r3, #24
 800cf00:	d514      	bpl.n	800cf2c <_printf_i+0x1ac>
 800cf02:	07df      	lsls	r7, r3, #31
 800cf04:	bf44      	itt	mi
 800cf06:	f043 0320 	orrmi.w	r3, r3, #32
 800cf0a:	6023      	strmi	r3, [r4, #0]
 800cf0c:	b91e      	cbnz	r6, 800cf16 <_printf_i+0x196>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	f023 0320 	bic.w	r3, r3, #32
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	2310      	movs	r3, #16
 800cf18:	e7b0      	b.n	800ce7c <_printf_i+0xfc>
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	f043 0320 	orr.w	r3, r3, #32
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	2378      	movs	r3, #120	; 0x78
 800cf24:	4828      	ldr	r0, [pc, #160]	; (800cfc8 <_printf_i+0x248>)
 800cf26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf2a:	e7e3      	b.n	800cef4 <_printf_i+0x174>
 800cf2c:	0659      	lsls	r1, r3, #25
 800cf2e:	bf48      	it	mi
 800cf30:	b2b6      	uxthmi	r6, r6
 800cf32:	e7e6      	b.n	800cf02 <_printf_i+0x182>
 800cf34:	4615      	mov	r5, r2
 800cf36:	e7bb      	b.n	800ceb0 <_printf_i+0x130>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	6826      	ldr	r6, [r4, #0]
 800cf3c:	6961      	ldr	r1, [r4, #20]
 800cf3e:	1d18      	adds	r0, r3, #4
 800cf40:	6028      	str	r0, [r5, #0]
 800cf42:	0635      	lsls	r5, r6, #24
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	d501      	bpl.n	800cf4c <_printf_i+0x1cc>
 800cf48:	6019      	str	r1, [r3, #0]
 800cf4a:	e002      	b.n	800cf52 <_printf_i+0x1d2>
 800cf4c:	0670      	lsls	r0, r6, #25
 800cf4e:	d5fb      	bpl.n	800cf48 <_printf_i+0x1c8>
 800cf50:	8019      	strh	r1, [r3, #0]
 800cf52:	2300      	movs	r3, #0
 800cf54:	6123      	str	r3, [r4, #16]
 800cf56:	4615      	mov	r5, r2
 800cf58:	e7ba      	b.n	800ced0 <_printf_i+0x150>
 800cf5a:	682b      	ldr	r3, [r5, #0]
 800cf5c:	1d1a      	adds	r2, r3, #4
 800cf5e:	602a      	str	r2, [r5, #0]
 800cf60:	681d      	ldr	r5, [r3, #0]
 800cf62:	6862      	ldr	r2, [r4, #4]
 800cf64:	2100      	movs	r1, #0
 800cf66:	4628      	mov	r0, r5
 800cf68:	f7f3 f91a 	bl	80001a0 <memchr>
 800cf6c:	b108      	cbz	r0, 800cf72 <_printf_i+0x1f2>
 800cf6e:	1b40      	subs	r0, r0, r5
 800cf70:	6060      	str	r0, [r4, #4]
 800cf72:	6863      	ldr	r3, [r4, #4]
 800cf74:	6123      	str	r3, [r4, #16]
 800cf76:	2300      	movs	r3, #0
 800cf78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf7c:	e7a8      	b.n	800ced0 <_printf_i+0x150>
 800cf7e:	6923      	ldr	r3, [r4, #16]
 800cf80:	462a      	mov	r2, r5
 800cf82:	4649      	mov	r1, r9
 800cf84:	4640      	mov	r0, r8
 800cf86:	47d0      	blx	sl
 800cf88:	3001      	adds	r0, #1
 800cf8a:	d0ab      	beq.n	800cee4 <_printf_i+0x164>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	079b      	lsls	r3, r3, #30
 800cf90:	d413      	bmi.n	800cfba <_printf_i+0x23a>
 800cf92:	68e0      	ldr	r0, [r4, #12]
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	4298      	cmp	r0, r3
 800cf98:	bfb8      	it	lt
 800cf9a:	4618      	movlt	r0, r3
 800cf9c:	e7a4      	b.n	800cee8 <_printf_i+0x168>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	4632      	mov	r2, r6
 800cfa2:	4649      	mov	r1, r9
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	47d0      	blx	sl
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d09b      	beq.n	800cee4 <_printf_i+0x164>
 800cfac:	3501      	adds	r5, #1
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	9903      	ldr	r1, [sp, #12]
 800cfb2:	1a5b      	subs	r3, r3, r1
 800cfb4:	42ab      	cmp	r3, r5
 800cfb6:	dcf2      	bgt.n	800cf9e <_printf_i+0x21e>
 800cfb8:	e7eb      	b.n	800cf92 <_printf_i+0x212>
 800cfba:	2500      	movs	r5, #0
 800cfbc:	f104 0619 	add.w	r6, r4, #25
 800cfc0:	e7f5      	b.n	800cfae <_printf_i+0x22e>
 800cfc2:	bf00      	nop
 800cfc4:	0800df71 	.word	0x0800df71
 800cfc8:	0800df82 	.word	0x0800df82

0800cfcc <_sbrk_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d06      	ldr	r5, [pc, #24]	; (800cfe8 <_sbrk_r+0x1c>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	f7f3 fb4c 	bl	8000674 <_sbrk>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_sbrk_r+0x1a>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_sbrk_r+0x1a>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20001888 	.word	0x20001888

0800cfec <__sread>:
 800cfec:	b510      	push	{r4, lr}
 800cfee:	460c      	mov	r4, r1
 800cff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff4:	f000 fafc 	bl	800d5f0 <_read_r>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	bfab      	itete	ge
 800cffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cffe:	89a3      	ldrhlt	r3, [r4, #12]
 800d000:	181b      	addge	r3, r3, r0
 800d002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d006:	bfac      	ite	ge
 800d008:	6563      	strge	r3, [r4, #84]	; 0x54
 800d00a:	81a3      	strhlt	r3, [r4, #12]
 800d00c:	bd10      	pop	{r4, pc}

0800d00e <__swrite>:
 800d00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d012:	461f      	mov	r7, r3
 800d014:	898b      	ldrh	r3, [r1, #12]
 800d016:	05db      	lsls	r3, r3, #23
 800d018:	4605      	mov	r5, r0
 800d01a:	460c      	mov	r4, r1
 800d01c:	4616      	mov	r6, r2
 800d01e:	d505      	bpl.n	800d02c <__swrite+0x1e>
 800d020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d024:	2302      	movs	r3, #2
 800d026:	2200      	movs	r2, #0
 800d028:	f000 f9c8 	bl	800d3bc <_lseek_r>
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d036:	81a3      	strh	r3, [r4, #12]
 800d038:	4632      	mov	r2, r6
 800d03a:	463b      	mov	r3, r7
 800d03c:	4628      	mov	r0, r5
 800d03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	f000 b869 	b.w	800d118 <_write_r>

0800d046 <__sseek>:
 800d046:	b510      	push	{r4, lr}
 800d048:	460c      	mov	r4, r1
 800d04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04e:	f000 f9b5 	bl	800d3bc <_lseek_r>
 800d052:	1c43      	adds	r3, r0, #1
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	bf15      	itete	ne
 800d058:	6560      	strne	r0, [r4, #84]	; 0x54
 800d05a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d05e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d062:	81a3      	strheq	r3, [r4, #12]
 800d064:	bf18      	it	ne
 800d066:	81a3      	strhne	r3, [r4, #12]
 800d068:	bd10      	pop	{r4, pc}

0800d06a <__sclose>:
 800d06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06e:	f000 b8d3 	b.w	800d218 <_close_r>
	...

0800d074 <__swbuf_r>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	460e      	mov	r6, r1
 800d078:	4614      	mov	r4, r2
 800d07a:	4605      	mov	r5, r0
 800d07c:	b118      	cbz	r0, 800d086 <__swbuf_r+0x12>
 800d07e:	6983      	ldr	r3, [r0, #24]
 800d080:	b90b      	cbnz	r3, 800d086 <__swbuf_r+0x12>
 800d082:	f7ff fa25 	bl	800c4d0 <__sinit>
 800d086:	4b21      	ldr	r3, [pc, #132]	; (800d10c <__swbuf_r+0x98>)
 800d088:	429c      	cmp	r4, r3
 800d08a:	d12b      	bne.n	800d0e4 <__swbuf_r+0x70>
 800d08c:	686c      	ldr	r4, [r5, #4]
 800d08e:	69a3      	ldr	r3, [r4, #24]
 800d090:	60a3      	str	r3, [r4, #8]
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	071a      	lsls	r2, r3, #28
 800d096:	d52f      	bpl.n	800d0f8 <__swbuf_r+0x84>
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	b36b      	cbz	r3, 800d0f8 <__swbuf_r+0x84>
 800d09c:	6923      	ldr	r3, [r4, #16]
 800d09e:	6820      	ldr	r0, [r4, #0]
 800d0a0:	1ac0      	subs	r0, r0, r3
 800d0a2:	6963      	ldr	r3, [r4, #20]
 800d0a4:	b2f6      	uxtb	r6, r6
 800d0a6:	4283      	cmp	r3, r0
 800d0a8:	4637      	mov	r7, r6
 800d0aa:	dc04      	bgt.n	800d0b6 <__swbuf_r+0x42>
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f000 f948 	bl	800d344 <_fflush_r>
 800d0b4:	bb30      	cbnz	r0, 800d104 <__swbuf_r+0x90>
 800d0b6:	68a3      	ldr	r3, [r4, #8]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	60a3      	str	r3, [r4, #8]
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	6022      	str	r2, [r4, #0]
 800d0c2:	701e      	strb	r6, [r3, #0]
 800d0c4:	6963      	ldr	r3, [r4, #20]
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	4283      	cmp	r3, r0
 800d0ca:	d004      	beq.n	800d0d6 <__swbuf_r+0x62>
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	07db      	lsls	r3, r3, #31
 800d0d0:	d506      	bpl.n	800d0e0 <__swbuf_r+0x6c>
 800d0d2:	2e0a      	cmp	r6, #10
 800d0d4:	d104      	bne.n	800d0e0 <__swbuf_r+0x6c>
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f000 f933 	bl	800d344 <_fflush_r>
 800d0de:	b988      	cbnz	r0, 800d104 <__swbuf_r+0x90>
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e4:	4b0a      	ldr	r3, [pc, #40]	; (800d110 <__swbuf_r+0x9c>)
 800d0e6:	429c      	cmp	r4, r3
 800d0e8:	d101      	bne.n	800d0ee <__swbuf_r+0x7a>
 800d0ea:	68ac      	ldr	r4, [r5, #8]
 800d0ec:	e7cf      	b.n	800d08e <__swbuf_r+0x1a>
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <__swbuf_r+0xa0>)
 800d0f0:	429c      	cmp	r4, r3
 800d0f2:	bf08      	it	eq
 800d0f4:	68ec      	ldreq	r4, [r5, #12]
 800d0f6:	e7ca      	b.n	800d08e <__swbuf_r+0x1a>
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	f000 f81e 	bl	800d13c <__swsetup_r>
 800d100:	2800      	cmp	r0, #0
 800d102:	d0cb      	beq.n	800d09c <__swbuf_r+0x28>
 800d104:	f04f 37ff 	mov.w	r7, #4294967295
 800d108:	e7ea      	b.n	800d0e0 <__swbuf_r+0x6c>
 800d10a:	bf00      	nop
 800d10c:	0800df20 	.word	0x0800df20
 800d110:	0800df40 	.word	0x0800df40
 800d114:	0800df00 	.word	0x0800df00

0800d118 <_write_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	4d07      	ldr	r5, [pc, #28]	; (800d138 <_write_r+0x20>)
 800d11c:	4604      	mov	r4, r0
 800d11e:	4608      	mov	r0, r1
 800d120:	4611      	mov	r1, r2
 800d122:	2200      	movs	r2, #0
 800d124:	602a      	str	r2, [r5, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	f7fe f8f4 	bl	800b314 <_write>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d102      	bne.n	800d136 <_write_r+0x1e>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	b103      	cbz	r3, 800d136 <_write_r+0x1e>
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	20001888 	.word	0x20001888

0800d13c <__swsetup_r>:
 800d13c:	4b32      	ldr	r3, [pc, #200]	; (800d208 <__swsetup_r+0xcc>)
 800d13e:	b570      	push	{r4, r5, r6, lr}
 800d140:	681d      	ldr	r5, [r3, #0]
 800d142:	4606      	mov	r6, r0
 800d144:	460c      	mov	r4, r1
 800d146:	b125      	cbz	r5, 800d152 <__swsetup_r+0x16>
 800d148:	69ab      	ldr	r3, [r5, #24]
 800d14a:	b913      	cbnz	r3, 800d152 <__swsetup_r+0x16>
 800d14c:	4628      	mov	r0, r5
 800d14e:	f7ff f9bf 	bl	800c4d0 <__sinit>
 800d152:	4b2e      	ldr	r3, [pc, #184]	; (800d20c <__swsetup_r+0xd0>)
 800d154:	429c      	cmp	r4, r3
 800d156:	d10f      	bne.n	800d178 <__swsetup_r+0x3c>
 800d158:	686c      	ldr	r4, [r5, #4]
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d160:	0719      	lsls	r1, r3, #28
 800d162:	d42c      	bmi.n	800d1be <__swsetup_r+0x82>
 800d164:	06dd      	lsls	r5, r3, #27
 800d166:	d411      	bmi.n	800d18c <__swsetup_r+0x50>
 800d168:	2309      	movs	r3, #9
 800d16a:	6033      	str	r3, [r6, #0]
 800d16c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d170:	81a3      	strh	r3, [r4, #12]
 800d172:	f04f 30ff 	mov.w	r0, #4294967295
 800d176:	e03e      	b.n	800d1f6 <__swsetup_r+0xba>
 800d178:	4b25      	ldr	r3, [pc, #148]	; (800d210 <__swsetup_r+0xd4>)
 800d17a:	429c      	cmp	r4, r3
 800d17c:	d101      	bne.n	800d182 <__swsetup_r+0x46>
 800d17e:	68ac      	ldr	r4, [r5, #8]
 800d180:	e7eb      	b.n	800d15a <__swsetup_r+0x1e>
 800d182:	4b24      	ldr	r3, [pc, #144]	; (800d214 <__swsetup_r+0xd8>)
 800d184:	429c      	cmp	r4, r3
 800d186:	bf08      	it	eq
 800d188:	68ec      	ldreq	r4, [r5, #12]
 800d18a:	e7e6      	b.n	800d15a <__swsetup_r+0x1e>
 800d18c:	0758      	lsls	r0, r3, #29
 800d18e:	d512      	bpl.n	800d1b6 <__swsetup_r+0x7a>
 800d190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d192:	b141      	cbz	r1, 800d1a6 <__swsetup_r+0x6a>
 800d194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d198:	4299      	cmp	r1, r3
 800d19a:	d002      	beq.n	800d1a2 <__swsetup_r+0x66>
 800d19c:	4630      	mov	r0, r6
 800d19e:	f000 f9ab 	bl	800d4f8 <_free_r>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	6363      	str	r3, [r4, #52]	; 0x34
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1ac:	81a3      	strh	r3, [r4, #12]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	6063      	str	r3, [r4, #4]
 800d1b2:	6923      	ldr	r3, [r4, #16]
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	f043 0308 	orr.w	r3, r3, #8
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	b94b      	cbnz	r3, 800d1d6 <__swsetup_r+0x9a>
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1cc:	d003      	beq.n	800d1d6 <__swsetup_r+0x9a>
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f000 f92b 	bl	800d42c <__smakebuf_r>
 800d1d6:	89a0      	ldrh	r0, [r4, #12]
 800d1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1dc:	f010 0301 	ands.w	r3, r0, #1
 800d1e0:	d00a      	beq.n	800d1f8 <__swsetup_r+0xbc>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60a3      	str	r3, [r4, #8]
 800d1e6:	6963      	ldr	r3, [r4, #20]
 800d1e8:	425b      	negs	r3, r3
 800d1ea:	61a3      	str	r3, [r4, #24]
 800d1ec:	6923      	ldr	r3, [r4, #16]
 800d1ee:	b943      	cbnz	r3, 800d202 <__swsetup_r+0xc6>
 800d1f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1f4:	d1ba      	bne.n	800d16c <__swsetup_r+0x30>
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	0781      	lsls	r1, r0, #30
 800d1fa:	bf58      	it	pl
 800d1fc:	6963      	ldrpl	r3, [r4, #20]
 800d1fe:	60a3      	str	r3, [r4, #8]
 800d200:	e7f4      	b.n	800d1ec <__swsetup_r+0xb0>
 800d202:	2000      	movs	r0, #0
 800d204:	e7f7      	b.n	800d1f6 <__swsetup_r+0xba>
 800d206:	bf00      	nop
 800d208:	2000002c 	.word	0x2000002c
 800d20c:	0800df20 	.word	0x0800df20
 800d210:	0800df40 	.word	0x0800df40
 800d214:	0800df00 	.word	0x0800df00

0800d218 <_close_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d06      	ldr	r5, [pc, #24]	; (800d234 <_close_r+0x1c>)
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	4608      	mov	r0, r1
 800d222:	602b      	str	r3, [r5, #0]
 800d224:	f7f3 f9f2 	bl	800060c <_close>
 800d228:	1c43      	adds	r3, r0, #1
 800d22a:	d102      	bne.n	800d232 <_close_r+0x1a>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b103      	cbz	r3, 800d232 <_close_r+0x1a>
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	20001888 	.word	0x20001888

0800d238 <__sflush_r>:
 800d238:	898a      	ldrh	r2, [r1, #12]
 800d23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d23e:	4605      	mov	r5, r0
 800d240:	0710      	lsls	r0, r2, #28
 800d242:	460c      	mov	r4, r1
 800d244:	d458      	bmi.n	800d2f8 <__sflush_r+0xc0>
 800d246:	684b      	ldr	r3, [r1, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dc05      	bgt.n	800d258 <__sflush_r+0x20>
 800d24c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d24e:	2b00      	cmp	r3, #0
 800d250:	dc02      	bgt.n	800d258 <__sflush_r+0x20>
 800d252:	2000      	movs	r0, #0
 800d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d25a:	2e00      	cmp	r6, #0
 800d25c:	d0f9      	beq.n	800d252 <__sflush_r+0x1a>
 800d25e:	2300      	movs	r3, #0
 800d260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d264:	682f      	ldr	r7, [r5, #0]
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	d032      	beq.n	800d2d0 <__sflush_r+0x98>
 800d26a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	075a      	lsls	r2, r3, #29
 800d270:	d505      	bpl.n	800d27e <__sflush_r+0x46>
 800d272:	6863      	ldr	r3, [r4, #4]
 800d274:	1ac0      	subs	r0, r0, r3
 800d276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d278:	b10b      	cbz	r3, 800d27e <__sflush_r+0x46>
 800d27a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d27c:	1ac0      	subs	r0, r0, r3
 800d27e:	2300      	movs	r3, #0
 800d280:	4602      	mov	r2, r0
 800d282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d284:	6a21      	ldr	r1, [r4, #32]
 800d286:	4628      	mov	r0, r5
 800d288:	47b0      	blx	r6
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	d106      	bne.n	800d29e <__sflush_r+0x66>
 800d290:	6829      	ldr	r1, [r5, #0]
 800d292:	291d      	cmp	r1, #29
 800d294:	d82c      	bhi.n	800d2f0 <__sflush_r+0xb8>
 800d296:	4a2a      	ldr	r2, [pc, #168]	; (800d340 <__sflush_r+0x108>)
 800d298:	40ca      	lsrs	r2, r1
 800d29a:	07d6      	lsls	r6, r2, #31
 800d29c:	d528      	bpl.n	800d2f0 <__sflush_r+0xb8>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	6062      	str	r2, [r4, #4]
 800d2a2:	04d9      	lsls	r1, r3, #19
 800d2a4:	6922      	ldr	r2, [r4, #16]
 800d2a6:	6022      	str	r2, [r4, #0]
 800d2a8:	d504      	bpl.n	800d2b4 <__sflush_r+0x7c>
 800d2aa:	1c42      	adds	r2, r0, #1
 800d2ac:	d101      	bne.n	800d2b2 <__sflush_r+0x7a>
 800d2ae:	682b      	ldr	r3, [r5, #0]
 800d2b0:	b903      	cbnz	r3, 800d2b4 <__sflush_r+0x7c>
 800d2b2:	6560      	str	r0, [r4, #84]	; 0x54
 800d2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2b6:	602f      	str	r7, [r5, #0]
 800d2b8:	2900      	cmp	r1, #0
 800d2ba:	d0ca      	beq.n	800d252 <__sflush_r+0x1a>
 800d2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2c0:	4299      	cmp	r1, r3
 800d2c2:	d002      	beq.n	800d2ca <__sflush_r+0x92>
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	f000 f917 	bl	800d4f8 <_free_r>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	6360      	str	r0, [r4, #52]	; 0x34
 800d2ce:	e7c1      	b.n	800d254 <__sflush_r+0x1c>
 800d2d0:	6a21      	ldr	r1, [r4, #32]
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	47b0      	blx	r6
 800d2d8:	1c41      	adds	r1, r0, #1
 800d2da:	d1c7      	bne.n	800d26c <__sflush_r+0x34>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d0c4      	beq.n	800d26c <__sflush_r+0x34>
 800d2e2:	2b1d      	cmp	r3, #29
 800d2e4:	d001      	beq.n	800d2ea <__sflush_r+0xb2>
 800d2e6:	2b16      	cmp	r3, #22
 800d2e8:	d101      	bne.n	800d2ee <__sflush_r+0xb6>
 800d2ea:	602f      	str	r7, [r5, #0]
 800d2ec:	e7b1      	b.n	800d252 <__sflush_r+0x1a>
 800d2ee:	89a3      	ldrh	r3, [r4, #12]
 800d2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2f4:	81a3      	strh	r3, [r4, #12]
 800d2f6:	e7ad      	b.n	800d254 <__sflush_r+0x1c>
 800d2f8:	690f      	ldr	r7, [r1, #16]
 800d2fa:	2f00      	cmp	r7, #0
 800d2fc:	d0a9      	beq.n	800d252 <__sflush_r+0x1a>
 800d2fe:	0793      	lsls	r3, r2, #30
 800d300:	680e      	ldr	r6, [r1, #0]
 800d302:	bf08      	it	eq
 800d304:	694b      	ldreq	r3, [r1, #20]
 800d306:	600f      	str	r7, [r1, #0]
 800d308:	bf18      	it	ne
 800d30a:	2300      	movne	r3, #0
 800d30c:	eba6 0807 	sub.w	r8, r6, r7
 800d310:	608b      	str	r3, [r1, #8]
 800d312:	f1b8 0f00 	cmp.w	r8, #0
 800d316:	dd9c      	ble.n	800d252 <__sflush_r+0x1a>
 800d318:	6a21      	ldr	r1, [r4, #32]
 800d31a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d31c:	4643      	mov	r3, r8
 800d31e:	463a      	mov	r2, r7
 800d320:	4628      	mov	r0, r5
 800d322:	47b0      	blx	r6
 800d324:	2800      	cmp	r0, #0
 800d326:	dc06      	bgt.n	800d336 <__sflush_r+0xfe>
 800d328:	89a3      	ldrh	r3, [r4, #12]
 800d32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	f04f 30ff 	mov.w	r0, #4294967295
 800d334:	e78e      	b.n	800d254 <__sflush_r+0x1c>
 800d336:	4407      	add	r7, r0
 800d338:	eba8 0800 	sub.w	r8, r8, r0
 800d33c:	e7e9      	b.n	800d312 <__sflush_r+0xda>
 800d33e:	bf00      	nop
 800d340:	20400001 	.word	0x20400001

0800d344 <_fflush_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	690b      	ldr	r3, [r1, #16]
 800d348:	4605      	mov	r5, r0
 800d34a:	460c      	mov	r4, r1
 800d34c:	b913      	cbnz	r3, 800d354 <_fflush_r+0x10>
 800d34e:	2500      	movs	r5, #0
 800d350:	4628      	mov	r0, r5
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	b118      	cbz	r0, 800d35e <_fflush_r+0x1a>
 800d356:	6983      	ldr	r3, [r0, #24]
 800d358:	b90b      	cbnz	r3, 800d35e <_fflush_r+0x1a>
 800d35a:	f7ff f8b9 	bl	800c4d0 <__sinit>
 800d35e:	4b14      	ldr	r3, [pc, #80]	; (800d3b0 <_fflush_r+0x6c>)
 800d360:	429c      	cmp	r4, r3
 800d362:	d11b      	bne.n	800d39c <_fflush_r+0x58>
 800d364:	686c      	ldr	r4, [r5, #4]
 800d366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d0ef      	beq.n	800d34e <_fflush_r+0xa>
 800d36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d370:	07d0      	lsls	r0, r2, #31
 800d372:	d404      	bmi.n	800d37e <_fflush_r+0x3a>
 800d374:	0599      	lsls	r1, r3, #22
 800d376:	d402      	bmi.n	800d37e <_fflush_r+0x3a>
 800d378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d37a:	f7ff f947 	bl	800c60c <__retarget_lock_acquire_recursive>
 800d37e:	4628      	mov	r0, r5
 800d380:	4621      	mov	r1, r4
 800d382:	f7ff ff59 	bl	800d238 <__sflush_r>
 800d386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d388:	07da      	lsls	r2, r3, #31
 800d38a:	4605      	mov	r5, r0
 800d38c:	d4e0      	bmi.n	800d350 <_fflush_r+0xc>
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	059b      	lsls	r3, r3, #22
 800d392:	d4dd      	bmi.n	800d350 <_fflush_r+0xc>
 800d394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d396:	f7ff f93a 	bl	800c60e <__retarget_lock_release_recursive>
 800d39a:	e7d9      	b.n	800d350 <_fflush_r+0xc>
 800d39c:	4b05      	ldr	r3, [pc, #20]	; (800d3b4 <_fflush_r+0x70>)
 800d39e:	429c      	cmp	r4, r3
 800d3a0:	d101      	bne.n	800d3a6 <_fflush_r+0x62>
 800d3a2:	68ac      	ldr	r4, [r5, #8]
 800d3a4:	e7df      	b.n	800d366 <_fflush_r+0x22>
 800d3a6:	4b04      	ldr	r3, [pc, #16]	; (800d3b8 <_fflush_r+0x74>)
 800d3a8:	429c      	cmp	r4, r3
 800d3aa:	bf08      	it	eq
 800d3ac:	68ec      	ldreq	r4, [r5, #12]
 800d3ae:	e7da      	b.n	800d366 <_fflush_r+0x22>
 800d3b0:	0800df20 	.word	0x0800df20
 800d3b4:	0800df40 	.word	0x0800df40
 800d3b8:	0800df00 	.word	0x0800df00

0800d3bc <_lseek_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4d07      	ldr	r5, [pc, #28]	; (800d3dc <_lseek_r+0x20>)
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	4608      	mov	r0, r1
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	602a      	str	r2, [r5, #0]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	f7f3 f945 	bl	800065a <_lseek>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d102      	bne.n	800d3da <_lseek_r+0x1e>
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	b103      	cbz	r3, 800d3da <_lseek_r+0x1e>
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	bd38      	pop	{r3, r4, r5, pc}
 800d3dc:	20001888 	.word	0x20001888

0800d3e0 <__swhatbuf_r>:
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	460e      	mov	r6, r1
 800d3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e8:	2900      	cmp	r1, #0
 800d3ea:	b096      	sub	sp, #88	; 0x58
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	da08      	bge.n	800d404 <__swhatbuf_r+0x24>
 800d3f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	602a      	str	r2, [r5, #0]
 800d3fa:	061a      	lsls	r2, r3, #24
 800d3fc:	d410      	bmi.n	800d420 <__swhatbuf_r+0x40>
 800d3fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d402:	e00e      	b.n	800d422 <__swhatbuf_r+0x42>
 800d404:	466a      	mov	r2, sp
 800d406:	f000 f905 	bl	800d614 <_fstat_r>
 800d40a:	2800      	cmp	r0, #0
 800d40c:	dbf1      	blt.n	800d3f2 <__swhatbuf_r+0x12>
 800d40e:	9a01      	ldr	r2, [sp, #4]
 800d410:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d414:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d418:	425a      	negs	r2, r3
 800d41a:	415a      	adcs	r2, r3
 800d41c:	602a      	str	r2, [r5, #0]
 800d41e:	e7ee      	b.n	800d3fe <__swhatbuf_r+0x1e>
 800d420:	2340      	movs	r3, #64	; 0x40
 800d422:	2000      	movs	r0, #0
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	b016      	add	sp, #88	; 0x58
 800d428:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d42c <__smakebuf_r>:
 800d42c:	898b      	ldrh	r3, [r1, #12]
 800d42e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d430:	079d      	lsls	r5, r3, #30
 800d432:	4606      	mov	r6, r0
 800d434:	460c      	mov	r4, r1
 800d436:	d507      	bpl.n	800d448 <__smakebuf_r+0x1c>
 800d438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	6123      	str	r3, [r4, #16]
 800d440:	2301      	movs	r3, #1
 800d442:	6163      	str	r3, [r4, #20]
 800d444:	b002      	add	sp, #8
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	ab01      	add	r3, sp, #4
 800d44a:	466a      	mov	r2, sp
 800d44c:	f7ff ffc8 	bl	800d3e0 <__swhatbuf_r>
 800d450:	9900      	ldr	r1, [sp, #0]
 800d452:	4605      	mov	r5, r0
 800d454:	4630      	mov	r0, r6
 800d456:	f7ff f8fb 	bl	800c650 <_malloc_r>
 800d45a:	b948      	cbnz	r0, 800d470 <__smakebuf_r+0x44>
 800d45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d460:	059a      	lsls	r2, r3, #22
 800d462:	d4ef      	bmi.n	800d444 <__smakebuf_r+0x18>
 800d464:	f023 0303 	bic.w	r3, r3, #3
 800d468:	f043 0302 	orr.w	r3, r3, #2
 800d46c:	81a3      	strh	r3, [r4, #12]
 800d46e:	e7e3      	b.n	800d438 <__smakebuf_r+0xc>
 800d470:	4b0d      	ldr	r3, [pc, #52]	; (800d4a8 <__smakebuf_r+0x7c>)
 800d472:	62b3      	str	r3, [r6, #40]	; 0x28
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	6020      	str	r0, [r4, #0]
 800d478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d47c:	81a3      	strh	r3, [r4, #12]
 800d47e:	9b00      	ldr	r3, [sp, #0]
 800d480:	6163      	str	r3, [r4, #20]
 800d482:	9b01      	ldr	r3, [sp, #4]
 800d484:	6120      	str	r0, [r4, #16]
 800d486:	b15b      	cbz	r3, 800d4a0 <__smakebuf_r+0x74>
 800d488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d48c:	4630      	mov	r0, r6
 800d48e:	f000 f8d3 	bl	800d638 <_isatty_r>
 800d492:	b128      	cbz	r0, 800d4a0 <__smakebuf_r+0x74>
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	f023 0303 	bic.w	r3, r3, #3
 800d49a:	f043 0301 	orr.w	r3, r3, #1
 800d49e:	81a3      	strh	r3, [r4, #12]
 800d4a0:	89a0      	ldrh	r0, [r4, #12]
 800d4a2:	4305      	orrs	r5, r0
 800d4a4:	81a5      	strh	r5, [r4, #12]
 800d4a6:	e7cd      	b.n	800d444 <__smakebuf_r+0x18>
 800d4a8:	0800c469 	.word	0x0800c469

0800d4ac <memmove>:
 800d4ac:	4288      	cmp	r0, r1
 800d4ae:	b510      	push	{r4, lr}
 800d4b0:	eb01 0402 	add.w	r4, r1, r2
 800d4b4:	d902      	bls.n	800d4bc <memmove+0x10>
 800d4b6:	4284      	cmp	r4, r0
 800d4b8:	4623      	mov	r3, r4
 800d4ba:	d807      	bhi.n	800d4cc <memmove+0x20>
 800d4bc:	1e43      	subs	r3, r0, #1
 800d4be:	42a1      	cmp	r1, r4
 800d4c0:	d008      	beq.n	800d4d4 <memmove+0x28>
 800d4c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4ca:	e7f8      	b.n	800d4be <memmove+0x12>
 800d4cc:	4402      	add	r2, r0
 800d4ce:	4601      	mov	r1, r0
 800d4d0:	428a      	cmp	r2, r1
 800d4d2:	d100      	bne.n	800d4d6 <memmove+0x2a>
 800d4d4:	bd10      	pop	{r4, pc}
 800d4d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4de:	e7f7      	b.n	800d4d0 <memmove+0x24>

0800d4e0 <__malloc_lock>:
 800d4e0:	4801      	ldr	r0, [pc, #4]	; (800d4e8 <__malloc_lock+0x8>)
 800d4e2:	f7ff b893 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800d4e6:	bf00      	nop
 800d4e8:	2000187c 	.word	0x2000187c

0800d4ec <__malloc_unlock>:
 800d4ec:	4801      	ldr	r0, [pc, #4]	; (800d4f4 <__malloc_unlock+0x8>)
 800d4ee:	f7ff b88e 	b.w	800c60e <__retarget_lock_release_recursive>
 800d4f2:	bf00      	nop
 800d4f4:	2000187c 	.word	0x2000187c

0800d4f8 <_free_r>:
 800d4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4fa:	2900      	cmp	r1, #0
 800d4fc:	d044      	beq.n	800d588 <_free_r+0x90>
 800d4fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d502:	9001      	str	r0, [sp, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	f1a1 0404 	sub.w	r4, r1, #4
 800d50a:	bfb8      	it	lt
 800d50c:	18e4      	addlt	r4, r4, r3
 800d50e:	f7ff ffe7 	bl	800d4e0 <__malloc_lock>
 800d512:	4a1e      	ldr	r2, [pc, #120]	; (800d58c <_free_r+0x94>)
 800d514:	9801      	ldr	r0, [sp, #4]
 800d516:	6813      	ldr	r3, [r2, #0]
 800d518:	b933      	cbnz	r3, 800d528 <_free_r+0x30>
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	6014      	str	r4, [r2, #0]
 800d51e:	b003      	add	sp, #12
 800d520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d524:	f7ff bfe2 	b.w	800d4ec <__malloc_unlock>
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d908      	bls.n	800d53e <_free_r+0x46>
 800d52c:	6825      	ldr	r5, [r4, #0]
 800d52e:	1961      	adds	r1, r4, r5
 800d530:	428b      	cmp	r3, r1
 800d532:	bf01      	itttt	eq
 800d534:	6819      	ldreq	r1, [r3, #0]
 800d536:	685b      	ldreq	r3, [r3, #4]
 800d538:	1949      	addeq	r1, r1, r5
 800d53a:	6021      	streq	r1, [r4, #0]
 800d53c:	e7ed      	b.n	800d51a <_free_r+0x22>
 800d53e:	461a      	mov	r2, r3
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	b10b      	cbz	r3, 800d548 <_free_r+0x50>
 800d544:	42a3      	cmp	r3, r4
 800d546:	d9fa      	bls.n	800d53e <_free_r+0x46>
 800d548:	6811      	ldr	r1, [r2, #0]
 800d54a:	1855      	adds	r5, r2, r1
 800d54c:	42a5      	cmp	r5, r4
 800d54e:	d10b      	bne.n	800d568 <_free_r+0x70>
 800d550:	6824      	ldr	r4, [r4, #0]
 800d552:	4421      	add	r1, r4
 800d554:	1854      	adds	r4, r2, r1
 800d556:	42a3      	cmp	r3, r4
 800d558:	6011      	str	r1, [r2, #0]
 800d55a:	d1e0      	bne.n	800d51e <_free_r+0x26>
 800d55c:	681c      	ldr	r4, [r3, #0]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	6053      	str	r3, [r2, #4]
 800d562:	4421      	add	r1, r4
 800d564:	6011      	str	r1, [r2, #0]
 800d566:	e7da      	b.n	800d51e <_free_r+0x26>
 800d568:	d902      	bls.n	800d570 <_free_r+0x78>
 800d56a:	230c      	movs	r3, #12
 800d56c:	6003      	str	r3, [r0, #0]
 800d56e:	e7d6      	b.n	800d51e <_free_r+0x26>
 800d570:	6825      	ldr	r5, [r4, #0]
 800d572:	1961      	adds	r1, r4, r5
 800d574:	428b      	cmp	r3, r1
 800d576:	bf04      	itt	eq
 800d578:	6819      	ldreq	r1, [r3, #0]
 800d57a:	685b      	ldreq	r3, [r3, #4]
 800d57c:	6063      	str	r3, [r4, #4]
 800d57e:	bf04      	itt	eq
 800d580:	1949      	addeq	r1, r1, r5
 800d582:	6021      	streq	r1, [r4, #0]
 800d584:	6054      	str	r4, [r2, #4]
 800d586:	e7ca      	b.n	800d51e <_free_r+0x26>
 800d588:	b003      	add	sp, #12
 800d58a:	bd30      	pop	{r4, r5, pc}
 800d58c:	20001880 	.word	0x20001880

0800d590 <_realloc_r>:
 800d590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d594:	4680      	mov	r8, r0
 800d596:	4614      	mov	r4, r2
 800d598:	460e      	mov	r6, r1
 800d59a:	b921      	cbnz	r1, 800d5a6 <_realloc_r+0x16>
 800d59c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	f7ff b855 	b.w	800c650 <_malloc_r>
 800d5a6:	b92a      	cbnz	r2, 800d5b4 <_realloc_r+0x24>
 800d5a8:	f7ff ffa6 	bl	800d4f8 <_free_r>
 800d5ac:	4625      	mov	r5, r4
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b4:	f000 f850 	bl	800d658 <_malloc_usable_size_r>
 800d5b8:	4284      	cmp	r4, r0
 800d5ba:	4607      	mov	r7, r0
 800d5bc:	d802      	bhi.n	800d5c4 <_realloc_r+0x34>
 800d5be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5c2:	d812      	bhi.n	800d5ea <_realloc_r+0x5a>
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	f7ff f842 	bl	800c650 <_malloc_r>
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d0ed      	beq.n	800d5ae <_realloc_r+0x1e>
 800d5d2:	42bc      	cmp	r4, r7
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	bf28      	it	cs
 800d5da:	463a      	movcs	r2, r7
 800d5dc:	f7fe fe84 	bl	800c2e8 <memcpy>
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	f7ff ff88 	bl	800d4f8 <_free_r>
 800d5e8:	e7e1      	b.n	800d5ae <_realloc_r+0x1e>
 800d5ea:	4635      	mov	r5, r6
 800d5ec:	e7df      	b.n	800d5ae <_realloc_r+0x1e>
	...

0800d5f0 <_read_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	4d07      	ldr	r5, [pc, #28]	; (800d610 <_read_r+0x20>)
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	4608      	mov	r0, r1
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	602a      	str	r2, [r5, #0]
 800d5fe:	461a      	mov	r2, r3
 800d600:	f7f2 ffe7 	bl	80005d2 <_read>
 800d604:	1c43      	adds	r3, r0, #1
 800d606:	d102      	bne.n	800d60e <_read_r+0x1e>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b103      	cbz	r3, 800d60e <_read_r+0x1e>
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	20001888 	.word	0x20001888

0800d614 <_fstat_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d07      	ldr	r5, [pc, #28]	; (800d634 <_fstat_r+0x20>)
 800d618:	2300      	movs	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	4611      	mov	r1, r2
 800d620:	602b      	str	r3, [r5, #0]
 800d622:	f7f2 ffff 	bl	8000624 <_fstat>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d102      	bne.n	800d630 <_fstat_r+0x1c>
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	b103      	cbz	r3, 800d630 <_fstat_r+0x1c>
 800d62e:	6023      	str	r3, [r4, #0]
 800d630:	bd38      	pop	{r3, r4, r5, pc}
 800d632:	bf00      	nop
 800d634:	20001888 	.word	0x20001888

0800d638 <_isatty_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4d06      	ldr	r5, [pc, #24]	; (800d654 <_isatty_r+0x1c>)
 800d63c:	2300      	movs	r3, #0
 800d63e:	4604      	mov	r4, r0
 800d640:	4608      	mov	r0, r1
 800d642:	602b      	str	r3, [r5, #0]
 800d644:	f7f2 fffe 	bl	8000644 <_isatty>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_isatty_r+0x1a>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_isatty_r+0x1a>
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	20001888 	.word	0x20001888

0800d658 <_malloc_usable_size_r>:
 800d658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65c:	1f18      	subs	r0, r3, #4
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bfbc      	itt	lt
 800d662:	580b      	ldrlt	r3, [r1, r0]
 800d664:	18c0      	addlt	r0, r0, r3
 800d666:	4770      	bx	lr

0800d668 <_init>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	bf00      	nop
 800d66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66e:	bc08      	pop	{r3}
 800d670:	469e      	mov	lr, r3
 800d672:	4770      	bx	lr

0800d674 <_fini>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	bf00      	nop
 800d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67a:	bc08      	pop	{r3}
 800d67c:	469e      	mov	lr, r3
 800d67e:	4770      	bx	lr
