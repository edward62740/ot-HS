
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed20  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa0  0800ee60  0800ee60  0001ee60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f900  0800f900  0001f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f908  0800f908  0001f908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f90c  0800f90c  0001f90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000008  0800f910  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200000a4  0800f9ac  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001924  200000b8  0800f9bd  000200b8  2**2
                  ALLOC
  9 ._user_heap_stack 00002804  200019dc  0800f9bd  000219dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 14 .debug_info   0003e55b  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007bf1  00000000  00000000  0005e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030b8  00000000  00000000  00066238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002d60  00000000  00000000  000692f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033e0e  00000000  00000000  0006c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003e494  00000000  00000000  0009fe5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114cbb  00000000  00000000  000de2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f2fad  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d2dc  00000000  00000000  001f3000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000b8 	.word	0x200000b8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ee48 	.word	0x0800ee48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000bc 	.word	0x200000bc
 800017c:	0800ee48 	.word	0x0800ee48

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000560:	23ff      	movs	r3, #255	; 0xff
 8000562:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000564:	2300      	movs	r3, #0
 8000566:	81fb      	strh	r3, [r7, #14]
 8000568:	e021      	b.n	80005ae <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800056a:	89fb      	ldrh	r3, [r7, #14]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	4053      	eors	r3, r2
 8000576:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000578:	2308      	movs	r3, #8
 800057a:	733b      	strb	r3, [r7, #12]
 800057c:	e011      	b.n	80005a2 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800057e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da07      	bge.n	8000596 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25b      	sxtb	r3, r3
 800058c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000590:	b25b      	sxtb	r3, r3
 8000592:	737b      	strb	r3, [r7, #13]
 8000594:	e002      	b.n	800059c <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800059c:	7b3b      	ldrb	r3, [r7, #12]
 800059e:	3b01      	subs	r3, #1
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ea      	bne.n	800057e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	3301      	adds	r3, #1
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	89fa      	ldrh	r2, [r7, #14]
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d3d9      	bcc.n	800056a <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80005b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
 80005d0:	4613      	mov	r3, r2
 80005d2:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	4619      	mov	r1, r3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffbb 	bl	8000554 <sensirion_common_generate_crc>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	787b      	ldrb	r3, [r7, #1]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d002      	beq.n	80005ee <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	e000      	b.n	80005f0 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	461a      	mov	r2, r3
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	4413      	add	r3, r2
 8000610:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800061a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8a2 	bl	800076c <sensirion_i2c_read>
 8000628:	4603      	mov	r3, r0
 800062a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800062e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000636:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800063a:	e047      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800063c:	2300      	movs	r3, #0
 800063e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000642:	2300      	movs	r3, #0
 8000644:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000648:	e039      	b.n	80006be <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800064a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800064e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000650:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000652:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000656:	3302      	adds	r3, #2
 8000658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800065a:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	2102      	movs	r1, #2
 8000662:	f7ff ffaf 	bl	80005c4 <sensirion_common_check_crc>
 8000666:	4603      	mov	r3, r0
 8000668:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 800066c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000674:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000678:	e028      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800067a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800067e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000680:	441a      	add	r2, r3
 8000682:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000686:	1c59      	adds	r1, r3, #1
 8000688:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 800068c:	4619      	mov	r1, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	440b      	add	r3, r1
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000696:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800069a:	3301      	adds	r3, #1
 800069c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800069e:	441a      	add	r2, r3
 80006a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80006a4:	1c59      	adds	r1, r3, #1
 80006a6:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80006aa:	4619      	mov	r1, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	440b      	add	r3, r1
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80006b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80006b8:	3303      	adds	r3, #3
 80006ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80006be:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80006c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3bf      	bcc.n	800064a <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3758      	adds	r7, #88	; 0x58
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff84 	bl	80005f8 <sensirion_i2c_read_words_as_bytes>
 80006f0:	4603      	mov	r3, r0
 80006f2:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80006f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <sensirion_i2c_read_words+0x2e>
        return ret;
 80006fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000700:	e020      	b.n	8000744 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e017      	b.n	8000738 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	b21a      	sxth	r2, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b219      	sxth	r1, r3
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	b28a      	uxth	r2, r1
 8000730:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	b29b      	uxth	r3, r3
 800073c:	88ba      	ldrh	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d8e2      	bhi.n	8000708 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <sensirion_i2c_init+0x1c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000d4 	.word	0x200000d4

0800076c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <sensirion_i2c_read+0x34>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	b29b      	uxth	r3, r3
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b299      	uxth	r1, r3
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	2205      	movs	r2, #5
 800078c:	9200      	str	r2, [sp, #0]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	f004 ffae 	bl	80056f0 <HAL_I2C_Master_Receive>
 8000794:	4603      	mov	r3, r0
 8000796:	b25b      	sxtb	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000d4 	.word	0x200000d4

080007a4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <sensirion_i2c_write+0x34>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b299      	uxth	r1, r3
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	2205      	movs	r2, #5
 80007c4:	9200      	str	r2, [sp, #0]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	f004 fe9e 	bl	8005508 <HAL_I2C_Master_Transmit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b25b      	sxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000d4 	.word	0x200000d4

080007dc <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <sensirion_sleep_usec+0x40>)
 80007e8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ec:	099b      	lsrs	r3, r3, #6
 80007ee:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <sensirion_sleep_usec+0x40>)
 80007f4:	fba3 1302 	umull	r1, r3, r3, r2
 80007f8:	099b      	lsrs	r3, r3, #6
 80007fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007fe:	fb01 f303 	mul.w	r3, r1, r3
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <sensirion_sleep_usec+0x32>
        msec++;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f001 fe6e 	bl	80024f0 <HAL_Delay>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	10624dd3 	.word	0x10624dd3

08000820 <sht4x_activate_medium_heater>:
#define SHT_DRV_VERSION_STR "5.3.0"
static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


int16_t sht4x_activate_medium_heater(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	81fb      	strh	r3, [r7, #14]
    buffer[offset++] = (uint8_t)0x24;
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	81fa      	strh	r2, [r7, #14]
 8000830:	3310      	adds	r3, #16
 8000832:	443b      	add	r3, r7
 8000834:	2224      	movs	r2, #36	; 0x24
 8000836:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write(SHT4X_ADDRESS, &buffer[0], offset);
 800083a:	89fa      	ldrh	r2, [r7, #14]
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	2044      	movs	r0, #68	; 0x44
 8000842:	f7ff ffaf 	bl	80007a4 <sensirion_i2c_write>
 8000846:	4603      	mov	r3, r0
 8000848:	81bb      	strh	r3, [r7, #12]
    if (error) {
 800084a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <sht4x_activate_medium_heater+0x38>
        return error;
 8000852:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000856:	e003      	b.n	8000860 <sht4x_activate_medium_heater+0x40>
    }

    sensirion_sleep_usec(110000);
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <sht4x_activate_medium_heater+0x48>)
 800085a:	f7ff ffbf 	bl	80007dc <sensirion_sleep_usec>

    return NO_ERROR;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	0001adb0 	.word	0x0001adb0

0800086c <sht4x_measure>:
        return ret;
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
    return sht4x_read(temperature, humidity);
}

int16_t sht4x_measure(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	4904      	ldr	r1, [pc, #16]	; (8000884 <sht4x_measure+0x18>)
 8000874:	2044      	movs	r0, #68	; 0x44
 8000876:	f7ff ff95 	bl	80007a4 <sensirion_i2c_write>
 800087a:	4603      	mov	r3, r0
 800087c:	b21b      	sxth	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2202      	movs	r2, #2
 8000898:	4619      	mov	r1, r3
 800089a:	2044      	movs	r0, #68	; 0x44
 800089c:	f7ff ff1a 	bl	80006d4 <sensirion_i2c_read_words>
 80008a0:	4603      	mov	r3, r0
 80008a2:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 80008a4:	893b      	ldrh	r3, [r7, #8]
 80008a6:	461a      	mov	r2, r3
 80008a8:	f245 5373 	movw	r3, #21875	; 0x5573
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	135b      	asrs	r3, r3, #13
 80008b2:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80008b6:	3bc8      	subs	r3, #200	; 0xc8
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 80008bc:	897b      	ldrh	r3, [r7, #10]
 80008be:	461a      	mov	r2, r3
 80008c0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	135b      	asrs	r3, r3, #13
 80008ca:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 80008ce:	3b10      	subs	r3, #16
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	6013      	str	r3, [r2, #0]

    return ret;
 80008d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <sht4x_enable_low_power_mode+0x3c>)
 80008f2:	22e0      	movs	r2, #224	; 0xe0
 80008f4:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <sht4x_enable_low_power_mode+0x40>)
 80008f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008fc:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 80008fe:	e006      	b.n	800090e <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <sht4x_enable_low_power_mode+0x3c>)
 8000902:	22fd      	movs	r2, #253	; 0xfd
 8000904:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <sht4x_enable_low_power_mode+0x40>)
 8000908:	f242 7210 	movw	r2, #10000	; 0x2710
 800090c:	801a      	strh	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	2000000a 	.word	0x2000000a

08000924 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <platform_stts22h_init+0x3c>)
 800092e:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <platform_stts22h_init+0x40>)
 8000930:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <platform_stts22h_init+0x3c>)
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <platform_stts22h_init+0x44>)
 8000936:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <platform_stts22h_init+0x3c>)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <platform_stts22h_init+0x48>)
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <platform_stts22h_init+0x3c>)
 8000942:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <platform_stts22h_init+0x4c>)
 8000946:	f000 f944 	bl	8000bd2 <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <platform_stts22h_init+0x4c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2ba0      	cmp	r3, #160	; 0xa0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000d8 	.word	0x200000d8
 8000964:	08000975 	.word	0x08000975
 8000968:	080009ab 	.word	0x080009ab
 800096c:	200000e8 	.word	0x200000e8
 8000970:	200000ec 	.word	0x200000ec

08000974 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af02      	add	r7, sp, #8
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	461a      	mov	r2, r3
 8000980:	460b      	mov	r3, r1
 8000982:	72fb      	strb	r3, [r7, #11]
 8000984:	4613      	mov	r3, r2
 8000986:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	b29b      	uxth	r3, r3
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	b299      	uxth	r1, r3
 8000990:	893b      	ldrh	r3, [r7, #8]
 8000992:	2205      	movs	r2, #5
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f004 fea9 	bl	80056f0 <HAL_I2C_Master_Receive>
 800099e:	4603      	mov	r3, r0
 80009a0:	b25b      	sxtb	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af02      	add	r7, sp, #8
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	461a      	mov	r2, r3
 80009b6:	460b      	mov	r3, r1
 80009b8:	72fb      	strb	r3, [r7, #11]
 80009ba:	4613      	mov	r3, r2
 80009bc:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80009be:	7afb      	ldrb	r3, [r7, #11]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	b299      	uxth	r1, r3
 80009c6:	893b      	ldrh	r3, [r7, #8]
 80009c8:	2205      	movs	r2, #5
 80009ca:	9200      	str	r2, [sp, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f004 fd9a 	bl	8005508 <HAL_I2C_Master_Transmit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b25b      	sxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	4613      	mov	r3, r2
 80009ee:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <stts22h_read_reg+0x30>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	685c      	ldr	r4, [r3, #4]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <stts22h_read_reg+0x30>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68d8      	ldr	r0, [r3, #12]
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	79f9      	ldrb	r1, [r7, #7]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	47a0      	blx	r4
 8000a04:	60f8      	str	r0, [r7, #12]

  return ret;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	200000e8 	.word	0x200000e8

08000a14 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <stts22h_write_reg+0x30>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681c      	ldr	r4, [r3, #0]
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <stts22h_write_reg+0x30>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68d8      	ldr	r0, [r3, #12]
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	79f9      	ldrb	r1, [r7, #7]
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	47a0      	blx	r4
 8000a38:	60f8      	str	r0, [r7, #12]

  return ret;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	200000e8 	.word	0x200000e8

08000a48 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2004      	movs	r0, #4
 8000a5c:	f7ff ffc0 	bl	80009e0 <stts22h_read_reg>
 8000a60:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200c      	movs	r0, #12
 8000a72:	f7ff ffb5 	bl	80009e0 <stts22h_read_reg>
 8000a76:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d11d      	bne.n	8000aba <stts22h_temp_data_rate_set+0x72>
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d11a      	bne.n	8000aba <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000a84:	7c3b      	ldrb	r3, [r7, #16]
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	200c      	movs	r0, #12
 8000a96:	f7ff ffbd 	bl	8000a14 <stts22h_write_reg>
 8000a9a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10b      	bne.n	8000aba <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000aa2:	7c3b      	ldrb	r3, [r7, #16]
 8000aa4:	f36f 0341 	bfc	r3, #1, #1
 8000aa8:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	200c      	movs	r0, #12
 8000ab4:	f7ff ffae 	bl	8000a14 <stts22h_write_reg>
 8000ab8:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d008      	beq.n	8000ad2 <stts22h_temp_data_rate_set+0x8a>
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d005      	beq.n	8000ad2 <stts22h_temp_data_rate_set+0x8a>
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b22      	cmp	r3, #34	; 0x22
 8000aca:	d002      	beq.n	8000ad2 <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b32      	cmp	r3, #50	; 0x32
 8000ad0:	d123      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000ad2:	7b3b      	ldrb	r3, [r7, #12]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11d      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11a      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000ae4:	7c3b      	ldrb	r3, [r7, #16]
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	200c      	movs	r0, #12
 8000af6:	f7ff ff8d 	bl	8000a14 <stts22h_write_reg>
 8000afa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10b      	bne.n	8000b1a <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000b02:	7c3b      	ldrb	r3, [r7, #16]
 8000b04:	f36f 0341 	bfc	r3, #1, #1
 8000b08:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	200c      	movs	r0, #12
 8000b14:	f7ff ff7e 	bl	8000a14 <stts22h_write_reg>
 8000b18:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d125      	bne.n	8000b6c <stts22h_temp_data_rate_set+0x124>
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d122      	bne.n	8000b6c <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000b26:	7c3b      	ldrb	r3, [r7, #16]
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000b2e:	7c3b      	ldrb	r3, [r7, #16]
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	200c      	movs	r0, #12
 8000b40:	f7ff ff68 	bl	8000a14 <stts22h_write_reg>
 8000b44:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10f      	bne.n	8000b6c <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000b4c:	7c3b      	ldrb	r3, [r7, #16]
 8000b4e:	f36f 0341 	bfc	r3, #1, #1
 8000b52:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000b54:	7c3b      	ldrb	r3, [r7, #16]
 8000b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5a:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	2201      	movs	r2, #1
 8000b62:	4619      	mov	r1, r3
 8000b64:	200c      	movs	r0, #12
 8000b66:	f7ff ff55 	bl	8000a14 <stts22h_write_reg>
 8000b6a:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d12a      	bne.n	8000bc8 <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	7b3b      	ldrb	r3, [r7, #12]
 8000b7c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b80:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	7b3b      	ldrb	r3, [r7, #12]
 8000b8e:	f362 0382 	bfi	r3, r2, #2, #1
 8000b92:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ba0:	f362 13c7 	bfi	r3, r2, #7, #1
 8000ba4:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	091b      	lsrs	r3, r3, #4
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	7b3b      	ldrb	r3, [r7, #12]
 8000bb2:	f362 1305 	bfi	r3, r2, #4, #2
 8000bb6:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f7ff ff27 	bl	8000a14 <stts22h_write_reg>
 8000bc6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8000bc8:	697b      	ldr	r3, [r7, #20]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff fefe 	bl	80009e0 <stts22h_read_reg>
 8000be4:	60f8      	str	r0, [r7, #12]

  return ret;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000bf0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf4:	3304      	adds	r3, #4

08000bf6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000bfa:	d3f9      	bcc.n	8000bf0 <CopyDataInit>
  bx lr
 8000bfc:	4770      	bx	lr

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000bfe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c00:	3004      	adds	r0, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c02:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>
  bx lr
 8000c06:	4770      	bx	lr

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f003 fb62 	bl	80042d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <LoopForever+0x8>)
 8000c12:	490c      	ldr	r1, [pc, #48]	; (8000c44 <LoopForever+0xc>)
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <LoopForever+0x10>)
 8000c16:	2300      	movs	r3, #0
 8000c18:	f7ff ffed 	bl	8000bf6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <LoopForever+0x14>)
 8000c1e:	490c      	ldr	r1, [pc, #48]	; (8000c50 <LoopForever+0x18>)
 8000c20:	2300      	movs	r3, #0
 8000c22:	f7ff ffee 	bl	8000c02 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c26:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopForever+0x1c>)
 8000c28:	490b      	ldr	r1, [pc, #44]	; (8000c58 <LoopForever+0x20>)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f7ff ffe9 	bl	8000c02 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c30:	f00c fed4 	bl	800d9dc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000c34:	f002 fd38 	bl	80036a8 <main>

08000c38 <LoopForever>:

LoopForever:
  b LoopForever
 8000c38:	e7fe      	b.n	8000c38 <LoopForever>
 8000c3a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000c3c:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200000a4 	.word	0x200000a4
 8000c48:	0800f910 	.word	0x0800f910
  INIT_BSS _sbss, _ebss
 8000c4c:	200000b8 	.word	0x200000b8
 8000c50:	200019dc 	.word	0x200019dc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c54:	200300e8 	.word	0x200300e8
 8000c58:	20030c6a 	.word	0x20030c6a

08000c5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_IRQHandler>

08000c5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_kill>:

int _kill(int pid, int sig)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c78:	f00c fe98 	bl	800d9ac <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2216      	movs	r2, #22
 8000c80:	601a      	str	r2, [r3, #0]
  return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_exit>:

void _exit (int status)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c96:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffe7 	bl	8000c6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ca0:	e7fe      	b.n	8000ca0 <_exit+0x12>

08000ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e00a      	b.n	8000cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	4601      	mov	r1, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	60ba      	str	r2, [r7, #8]
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf0      	blt.n	8000cb4 <_read+0x12>
  }

  return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
  return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_isatty>:

int _isatty(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f00c fe1a 	bl	800d9ac <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20024000 	.word	0x20024000
 8000da4:	00002000 	.word	0x00002000
 8000da8:	200000f0 	.word	0x200000f0
 8000dac:	200019e0 	.word	0x200019e0

08000db0 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f009 ff6c 	bl	800aca0 <otCoapSendResponseWithParameters>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <APP_THREAD_Init>:
static otInstance* sInstance = NULL;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_THREAD_INIT_1 */

  /* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f00b fea9 	bl	800cb34 <UTIL_LPM_SetStopMode>
  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8000de2:	f000 faa9 	bl	8001338 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000de6:	482a      	ldr	r0, [pc, #168]	; (8000e90 <APP_THREAD_Init+0xbc>)
 8000de8:	f000 fd06 	bl	80017f8 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000dec:	2101      	movs	r1, #1
 8000dee:	2002      	movs	r0, #2
 8000df0:	f00b fed0 	bl	800cb94 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8000df4:	f000 fe32 	bl	8001a5c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000df8:	f000 fe18 	bl	8001a2c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000dfc:	f00a ff21 	bl	800bc42 <SHCI_C2_THREAD_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8000e04:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <APP_THREAD_Init+0xc0>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f00b ffef 	bl	800cdec <UTIL_SEQ_RegTask>



  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated, (HW_TS_pTimerCb_t)APP_THREAD_SendCoapMsg);
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <APP_THREAD_Init+0xc4>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	4922      	ldr	r1, [pc, #136]	; (8000e9c <APP_THREAD_Init+0xc8>)
 8000e14:	2000      	movs	r0, #0
 8000e16:	f002 f925 	bl	8003064 <HW_TS_Create>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &setThreadLpTimerId, hw_ts_SingleShot, APP_THREAD_SetSleepyEndDeviceMode);
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <APP_THREAD_Init+0xcc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4921      	ldr	r1, [pc, #132]	; (8000ea4 <APP_THREAD_Init+0xd0>)
 8000e20:	2000      	movs	r0, #0
 8000e22:	f002 f91f 	bl	8003064 <HW_TS_Create>
  HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <APP_THREAD_Init+0xc8>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	f642 0205 	movw	r2, #10245	; 0x2805
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 fa15 	bl	8003260 <HW_TS_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2102      	movs	r1, #2
 8000e3a:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <APP_THREAD_Init+0xd4>)
 8000e3c:	f004 fa5c 	bl	80052f8 <HAL_GPIO_WritePin>


  sInstance = otInstanceInitSingle();
 8000e40:	f009 ff96 	bl	800ad70 <otInstanceInitSingle>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <APP_THREAD_Init+0xd8>)
 8000e48:	6013      	str	r3, [r2, #0]
  assert(sInstance);
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <APP_THREAD_Init+0xd8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d105      	bne.n	8000e5e <APP_THREAD_Init+0x8a>
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <APP_THREAD_Init+0xdc>)
 8000e54:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <APP_THREAD_Init+0xe0>)
 8000e56:	21dc      	movs	r1, #220	; 0xdc
 8000e58:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <APP_THREAD_Init+0xe4>)
 8000e5a:	f00c fd89 	bl	800d970 <__assert_func>
  /* USER CODE BEGIN INIT TASKS */
  APP_THREAD_SetSleepyEndDeviceMode();
 8000e5e:	f000 f95d 	bl	800111c <APP_THREAD_SetSleepyEndDeviceMode>
  /* Initialize and configure the Thread device*/
  otPlatRadioSetTransmitPower(sInstance, 6);
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <APP_THREAD_Init+0xd8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2106      	movs	r1, #6
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00a feb7 	bl	800bbdc <otPlatRadioSetTransmitPower>
  APP_THREAD_DeviceConfig();
 8000e6e:	f000 f989 	bl	8001184 <APP_THREAD_DeviceConfig>
  appSrpInit();
 8000e72:	f000 f823 	bl	8000ebc <appSrpInit>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000e76:	2100      	movs	r1, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f00b fe5b 	bl	800cb34 <UTIL_LPM_SetStopMode>
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f00a ff0a 	bl	800bc9a <SHCI_C2_RADIO_AllowLowPower>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200300e8 	.word	0x200300e8
 8000e94:	08001af1 	.word	0x08001af1
 8000e98:	080015c1 	.word	0x080015c1
 8000e9c:	20000308 	.word	0x20000308
 8000ea0:	0800111d 	.word	0x0800111d
 8000ea4:	20000309 	.word	0x20000309
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	20000448 	.word	0x20000448
 8000eb0:	0800ee6c 	.word	0x0800ee6c
 8000eb4:	0800f72c 	.word	0x0800f72c
 8000eb8:	0800ee78 	.word	0x0800ee78

08000ebc <appSrpInit>:


void appSrpInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b090      	sub	sp, #64	; 0x40
 8000ec0:	af00      	add	r7, sp, #0
    otError error = OT_ERROR_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    char *hostName;
    char *HOST_NAME = "OT-HS-0";
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <appSrpInit+0xe4>)
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t size;
    hostName = otSrpClientBuffersGetHostNameString(sInstance, &size);
 8000ecc:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <appSrpInit+0xe8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00b f9a1 	bl	800c21e <otSrpClientBuffersGetHostNameString>
 8000edc:	6378      	str	r0, [r7, #52]	; 0x34
    error |= otSrpClientSetHostName(sInstance, HOST_NAME);
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <appSrpInit+0xe8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00b f90d 	bl	800c104 <otSrpClientSetHostName>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    memcpy(hostName, HOST_NAME, sizeof(HOST_NAME) + 1);
 8000ef8:	2205      	movs	r2, #5
 8000efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000efc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000efe:	f00c fd99 	bl	800da34 <memcpy>


    otSrpClientEnableAutoHostAddress(sInstance);
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <appSrpInit+0xe8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00b f92d 	bl	800c166 <otSrpClientEnableAutoHostAddress>


    otSrpClientBuffersServiceEntry *entry = NULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
    char *string;

    entry = otSrpClientBuffersAllocateService(sInstance);
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <appSrpInit+0xe8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00b f9b2 	bl	800c27e <otSrpClientBuffersAllocateService>
 8000f1a:	6338      	str	r0, [r7, #48]	; 0x30

    entry->mService.mPort = 33434;
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1e:	f248 229a 	movw	r2, #33434	; 0x829a
 8000f22:	821a      	strh	r2, [r3, #16]
    char INST_NAME[32];
    snprintf(INST_NAME, 32, "ipv6bc0000");
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <appSrpInit+0xec>)
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f00d f98e 	bl	800e24c <sniprintf>
    char *SERV_NAME = "_ot._udp";
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <appSrpInit+0xf0>)
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    string = otSrpClientBuffersGetServiceEntryInstanceNameString(entry, &size);
 8000f34:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f3c:	f00b f9fc 	bl	800c338 <otSrpClientBuffersGetServiceEntryInstanceNameString>
 8000f40:	62b8      	str	r0, [r7, #40]	; 0x28
    memcpy(string, INST_NAME, size);
 8000f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f44:	461a      	mov	r2, r3
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f4c:	f00c fd72 	bl	800da34 <memcpy>


    string = otSrpClientBuffersGetServiceEntryServiceNameString(entry, &size);
 8000f50:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000f54:	4619      	mov	r1, r3
 8000f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f58:	f00b f9bb 	bl	800c2d2 <otSrpClientBuffersGetServiceEntryServiceNameString>
 8000f5c:	62b8      	str	r0, [r7, #40]	; 0x28
    memcpy(string, SERV_NAME, size);
 8000f5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f60:	461a      	mov	r2, r3
 8000f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f66:	f00c fd65 	bl	800da34 <memcpy>

    error |= otSrpClientAddService(sInstance, &entry->mService);
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <appSrpInit+0xe8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00b f922 	bl	800c1bc <otSrpClientAddService>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f80:	4313      	orrs	r3, r2
 8000f82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    entry = NULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30

    otSrpClientEnableAutoStartMode(sInstance,  NULL,  NULL);
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <appSrpInit+0xe8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00b f882 	bl	800c09c <otSrpClientEnableAutoStartMode>

}
 8000f98:	bf00      	nop
 8000f9a:	3740      	adds	r7, #64	; 0x40
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	0800eed0 	.word	0x0800eed0
 8000fa4:	20000448 	.word	0x20000448
 8000fa8:	0800eed8 	.word	0x0800eed8
 8000fac:	0800eee4 	.word	0x0800eee4

08000fb0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b16      	cmp	r3, #22
 8000fbe:	f200 8081 	bhi.w	80010c4 <APP_THREAD_Error+0x114>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <APP_THREAD_Error+0x18>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001025 	.word	0x08001025
 8000fcc:	0800102f 	.word	0x0800102f
 8000fd0:	08001039 	.word	0x08001039
 8000fd4:	08001043 	.word	0x08001043
 8000fd8:	0800104d 	.word	0x0800104d
 8000fdc:	08001057 	.word	0x08001057
 8000fe0:	08001061 	.word	0x08001061
 8000fe4:	0800106b 	.word	0x0800106b
 8000fe8:	0800107f 	.word	0x0800107f
 8000fec:	08001089 	.word	0x08001089
 8000ff0:	08001093 	.word	0x08001093
 8000ff4:	0800109d 	.word	0x0800109d
 8000ff8:	080010c5 	.word	0x080010c5
 8000ffc:	080010a7 	.word	0x080010a7
 8001000:	080010b1 	.word	0x080010b1
 8001004:	080010c5 	.word	0x080010c5
 8001008:	080010c5 	.word	0x080010c5
 800100c:	080010c5 	.word	0x080010c5
 8001010:	080010c5 	.word	0x080010c5
 8001014:	080010c5 	.word	0x080010c5
 8001018:	080010bb 	.word	0x080010bb
 800101c:	080010c5 	.word	0x080010c5
 8001020:	08001075 	.word	0x08001075
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	482c      	ldr	r0, [pc, #176]	; (80010d8 <APP_THREAD_Error+0x128>)
 8001028:	f000 f972 	bl	8001310 <APP_THREAD_TraceError>
    break;
 800102c:	e04f      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800102e:	6839      	ldr	r1, [r7, #0]
 8001030:	482a      	ldr	r0, [pc, #168]	; (80010dc <APP_THREAD_Error+0x12c>)
 8001032:	f000 f96d 	bl	8001310 <APP_THREAD_TraceError>
    break;
 8001036:	e04a      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	4829      	ldr	r0, [pc, #164]	; (80010e0 <APP_THREAD_Error+0x130>)
 800103c:	f000 f968 	bl	8001310 <APP_THREAD_TraceError>
    break;
 8001040:	e045      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8001042:	6839      	ldr	r1, [r7, #0]
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <APP_THREAD_Error+0x134>)
 8001046:	f000 f963 	bl	8001310 <APP_THREAD_TraceError>
    break;
 800104a:	e040      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4826      	ldr	r0, [pc, #152]	; (80010e8 <APP_THREAD_Error+0x138>)
 8001050:	f000 f95e 	bl	8001310 <APP_THREAD_TraceError>
    break;
 8001054:	e03b      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8001056:	6839      	ldr	r1, [r7, #0]
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <APP_THREAD_Error+0x13c>)
 800105a:	f000 f959 	bl	8001310 <APP_THREAD_TraceError>
    break;
 800105e:	e036      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8001060:	6839      	ldr	r1, [r7, #0]
 8001062:	4823      	ldr	r0, [pc, #140]	; (80010f0 <APP_THREAD_Error+0x140>)
 8001064:	f000 f954 	bl	8001310 <APP_THREAD_TraceError>
    break;
 8001068:	e031      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 800106a:	6839      	ldr	r1, [r7, #0]
 800106c:	4821      	ldr	r0, [pc, #132]	; (80010f4 <APP_THREAD_Error+0x144>)
 800106e:	f000 f94f 	bl	8001310 <APP_THREAD_TraceError>
    break;
 8001072:	e02c      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8001074:	6839      	ldr	r1, [r7, #0]
 8001076:	4820      	ldr	r0, [pc, #128]	; (80010f8 <APP_THREAD_Error+0x148>)
 8001078:	f000 f94a 	bl	8001310 <APP_THREAD_TraceError>
    break;
 800107c:	e027      	b.n	80010ce <APP_THREAD_Error+0x11e>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <APP_THREAD_Error+0x14c>)
 8001082:	f000 f945 	bl	8001310 <APP_THREAD_TraceError>
    break;
 8001086:	e022      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8001088:	6839      	ldr	r1, [r7, #0]
 800108a:	481d      	ldr	r0, [pc, #116]	; (8001100 <APP_THREAD_Error+0x150>)
 800108c:	f000 f940 	bl	8001310 <APP_THREAD_TraceError>
    break;
 8001090:	e01d      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <APP_THREAD_Error+0x154>)
 8001096:	f000 f93b 	bl	8001310 <APP_THREAD_TraceError>
    break;
 800109a:	e018      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	481a      	ldr	r0, [pc, #104]	; (8001108 <APP_THREAD_Error+0x158>)
 80010a0:	f000 f936 	bl	8001310 <APP_THREAD_TraceError>
    break;
 80010a4:	e013      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	4818      	ldr	r0, [pc, #96]	; (800110c <APP_THREAD_Error+0x15c>)
 80010aa:	f000 f931 	bl	8001310 <APP_THREAD_TraceError>
    break;
 80010ae:	e00e      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <APP_THREAD_Error+0x160>)
 80010b4:	f000 f92c 	bl	8001310 <APP_THREAD_TraceError>
    break;
 80010b8:	e009      	b.n	80010ce <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MSG_COMPARE_FAILED:
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",ErrCode);
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	4815      	ldr	r0, [pc, #84]	; (8001114 <APP_THREAD_Error+0x164>)
 80010be:	f000 f927 	bl	8001310 <APP_THREAD_TraceError>
    break;
 80010c2:	e004      	b.n	80010ce <APP_THREAD_Error+0x11e>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 80010c4:	2100      	movs	r1, #0
 80010c6:	4814      	ldr	r0, [pc, #80]	; (8001118 <APP_THREAD_Error+0x168>)
 80010c8:	f000 f922 	bl	8001310 <APP_THREAD_TraceError>
    break;
 80010cc:	bf00      	nop
  }
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0800eef0 	.word	0x0800eef0
 80010dc:	0800ef14 	.word	0x0800ef14
 80010e0:	0800ef38 	.word	0x0800ef38
 80010e4:	0800ef58 	.word	0x0800ef58
 80010e8:	0800ef78 	.word	0x0800ef78
 80010ec:	0800ef98 	.word	0x0800ef98
 80010f0:	0800efb4 	.word	0x0800efb4
 80010f4:	0800efe0 	.word	0x0800efe0
 80010f8:	0800f004 	.word	0x0800f004
 80010fc:	0800f028 	.word	0x0800f028
 8001100:	0800f048 	.word	0x0800f048
 8001104:	0800f070 	.word	0x0800f070
 8001108:	0800f094 	.word	0x0800f094
 800110c:	0800f0bc 	.word	0x0800f0bc
 8001110:	0800f0dc 	.word	0x0800f0dc
 8001114:	0800f104 	.word	0x0800f104
 8001118:	0800f12c 	.word	0x0800f12c

0800111c <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	71fb      	strb	r3, [r7, #7]

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(sInstance, 5000);
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <APP_THREAD_SetSleepyEndDeviceMode+0x60>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f241 3188 	movw	r1, #5000	; 0x1388
 800112e:	4618      	mov	r0, r3
 8001130:	f009 fe75 	bl	800ae1e <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8001136:	7813      	ldrb	r3, [r2, #0]
 8001138:	f36f 0300 	bfc	r3, #0, #1
 800113c:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8001140:	7813      	ldrb	r3, [r2, #0]
 8001142:	f36f 0341 	bfc	r3, #1, #1
 8001146:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 0;
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 800114a:	7813      	ldrb	r3, [r2, #0]
 800114c:	f36f 0382 	bfc	r3, #2, #1
 8001150:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(sInstance,OT_LinkMode);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <APP_THREAD_SetSleepyEndDeviceMode+0x60>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8001158:	7811      	ldrb	r1, [r2, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f00b f94f 	bl	800c3fe <otThreadSetLinkMode>
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <APP_THREAD_SetSleepyEndDeviceMode+0x58>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4619      	mov	r1, r3
 800116e:	2011      	movs	r0, #17
 8001170:	f7ff ff1e 	bl	8000fb0 <APP_THREAD_Error>


}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000448 	.word	0x20000448
 8001180:	200000f4 	.word	0x200000f4

08001184 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b0a7      	sub	sp, #156	; 0x9c
 8001188:	af00      	add	r7, sp, #0

	static char aNetworkName[] = "OpenThread X-1";

	otOperationalDataset aDataset;

	memset(&aDataset, 0, sizeof(otOperationalDataset));
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2278      	movs	r2, #120	; 0x78
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f00c fc5c 	bl	800da50 <memset>
	 * Fields that can be configured in otOperationDataset to override defaults:
	 *     Network Name, Mesh Local Prefix, Extended PAN ID, PAN ID, Delay Timer,
	 *     Channel, Channel Mask Page 0, Network Key, PSKc, Security Policy
	 */
	//aDataset.mActiveTimestamp.mSeconds             = 1;
	aDataset.mComponents.mIsActiveTimestampPresent = true;
 8001198:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Channel to 15 */
	aDataset.mChannel = 15;
 80011a4:	230f      	movs	r3, #15
 80011a6:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	aDataset.mComponents.mIsChannelPresent = true;
 80011aa:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	/* Set Pan ID to 2222 */
	aDataset.mPanId = (otPanId) 0xDEAD;
 80011b6:	f64d 63ad 	movw	r3, #57005	; 0xdead
 80011ba:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	aDataset.mComponents.mIsPanIdPresent = true;
 80011be:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80011c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Extended Pan ID to  */
	uint8_t extPanId[OT_EXT_PAN_ID_SIZE] =
 80011ca:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <APP_THREAD_DeviceConfig+0x16c>)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d4:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 0x72, 0x53, 0xc0, 0xf9, 0x58, 0xe3, 0x3f, 0x94 };
	memcpy(aDataset.mExtendedPanId.m8, extPanId,
 80011d8:	f107 0259 	add.w	r2, r7, #89	; 0x59
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	cb03      	ldmia	r3!, {r0, r1}
 80011e2:	6010      	str	r0, [r2, #0]
 80011e4:	6051      	str	r1, [r2, #4]
			sizeof(aDataset.mExtendedPanId));
	aDataset.mComponents.mIsExtendedPanIdPresent = true;
 80011e6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set network key to  */
	uint8_t key[OT_NETWORK_KEY_SIZE] =
 80011f2:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <APP_THREAD_DeviceConfig+0x170>)
 80011f4:	463c      	mov	r4, r7
 80011f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ 0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9, 0xca, 0x86, 0x85, 0xab,
			0x99, 0xda, 0xc9, 0x51 };
	memcpy(aDataset.mNetworkKey.m8, key, sizeof(aDataset.mNetworkKey));
 80011fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001200:	463b      	mov	r3, r7
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	aDataset.mComponents.mIsNetworkKeyPresent = true;
 8001208:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Network Name */
	size_t length = strlen(aNetworkName);
 8001214:	4838      	ldr	r0, [pc, #224]	; (80012f8 <APP_THREAD_DeviceConfig+0x174>)
 8001216:	f7fe ffbd 	bl	8000194 <strlen>
 800121a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	assert(length <= OT_NETWORK_NAME_MAX_SIZE);
 800121e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001222:	2b10      	cmp	r3, #16
 8001224:	d906      	bls.n	8001234 <APP_THREAD_DeviceConfig+0xb0>
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <APP_THREAD_DeviceConfig+0x178>)
 8001228:	4a35      	ldr	r2, [pc, #212]	; (8001300 <APP_THREAD_DeviceConfig+0x17c>)
 800122a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800122e:	4835      	ldr	r0, [pc, #212]	; (8001304 <APP_THREAD_DeviceConfig+0x180>)
 8001230:	f00c fb9e 	bl	800d970 <__assert_func>
	memcpy(aDataset.mNetworkName.m8, aNetworkName, length);
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	3330      	adds	r3, #48	; 0x30
 800123a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800123e:	492e      	ldr	r1, [pc, #184]	; (80012f8 <APP_THREAD_DeviceConfig+0x174>)
 8001240:	4618      	mov	r0, r3
 8001242:	f00c fbf7 	bl	800da34 <memcpy>
	aDataset.mComponents.mIsNetworkNamePresent = true;
 8001246:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	/* Set the Active Operational Dataset to this dataset */
	error = otDatasetSetActive(sInstance, &aDataset);
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <APP_THREAD_DeviceConfig+0x184>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f107 0218 	add.w	r2, r7, #24
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f009 fd56 	bl	800ad0e <otDatasetSetActive>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	error = otIp6SetEnabled(sInstance, true);
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <APP_THREAD_DeviceConfig+0x184>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f009 fda5 	bl	800adbe <otIp6SetEnabled>
 8001274:	4603      	mov	r3, r0
 8001276:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  if (error != OT_ERROR_NONE)
 800127a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <APP_THREAD_DeviceConfig+0x10a>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8001282:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001286:	4619      	mov	r1, r3
 8001288:	2004      	movs	r0, #4
 800128a:	f7ff fe91 	bl	8000fb0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(sInstance, true);
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <APP_THREAD_DeviceConfig+0x184>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f00b f882 	bl	800c39e <otThreadSetEnabled>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  if (error != OT_ERROR_NONE)
 80012a0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <APP_THREAD_DeviceConfig+0x130>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80012a8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80012ac:	4619      	mov	r1, r3
 80012ae:	2005      	movs	r0, #5
 80012b0:	f7ff fe7e 	bl	8000fb0 <APP_THREAD_Error>
  }
  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(sInstance, OT_DEFAULT_COAP_PORT);
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <APP_THREAD_DeviceConfig+0x184>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f241 6133 	movw	r1, #5683	; 0x1633
 80012bc:	4618      	mov	r0, r3
 80012be:	f009 fc93 	bl	800abe8 <otCoapStart>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  if (error != OT_ERROR_NONE)
 80012c8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <APP_THREAD_DeviceConfig+0x158>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 80012d0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80012d4:	4619      	mov	r1, r3
 80012d6:	2008      	movs	r0, #8
 80012d8:	f7ff fe6a 	bl	8000fb0 <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(sInstance, &OT_Ressource);
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <APP_THREAD_DeviceConfig+0x184>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	490a      	ldr	r1, [pc, #40]	; (800130c <APP_THREAD_DeviceConfig+0x188>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f009 fcb0 	bl	800ac48 <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 80012e8:	bf00      	nop
 80012ea:	379c      	adds	r7, #156	; 0x9c
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	0800f160 	.word	0x0800f160
 80012f4:	0800f168 	.word	0x0800f168
 80012f8:	2000001c 	.word	0x2000001c
 80012fc:	0800f13c 	.word	0x0800f13c
 8001300:	0800f73c 	.word	0x0800f73c
 8001304:	0800ee78 	.word	0x0800ee78
 8001308:	20000448 	.word	0x20000448
 800130c:	2000000c 	.word	0x2000000c

08001310 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <APP_THREAD_TraceError+0x24>)
 8001322:	2101      	movs	r1, #1
 8001324:	2000      	movs	r0, #0
 8001326:	f002 ff35 	bl	8004194 <logApplication>

  /* USER CODE END TRACE_ERROR */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0800f178 	.word	0x0800f178

08001338 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f00a fcc8 	bl	800bcd8 <SHCI_GetWirelessFwInfo>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800134e:	2101      	movs	r1, #1
 8001350:	2016      	movs	r0, #22
 8001352:	f7ff fe2d 	bl	8000fb0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8001356:	e07c      	b.n	8001452 <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
    APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8001358:	4a40      	ldr	r2, [pc, #256]	; (800145c <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 800135a:	2101      	movs	r1, #1
 800135c:	2000      	movs	r0, #0
 800135e:	f002 ff19 	bl	8004194 <logApplication>
    APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	785b      	ldrb	r3, [r3, #1]
 800136c:	461a      	mov	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	789b      	ldrb	r3, [r3, #2]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	460b      	mov	r3, r1
 8001378:	4a39      	ldr	r2, [pc, #228]	; (8001460 <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 800137a:	2101      	movs	r1, #1
 800137c:	2000      	movs	r0, #0
 800137e:	f002 ff09 	bl	8004194 <logApplication>
    APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	4a37      	ldr	r2, [pc, #220]	; (8001464 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8001388:	2101      	movs	r1, #1
 800138a:	2000      	movs	r0, #0
 800138c:	f002 ff02 	bl	8004194 <logApplication>
    APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	78db      	ldrb	r3, [r3, #3]
 8001394:	4a34      	ldr	r2, [pc, #208]	; (8001468 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 8001396:	2101      	movs	r1, #1
 8001398:	2000      	movs	r0, #0
 800139a:	f002 fefb 	bl	8004194 <logApplication>
    APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	7a9b      	ldrb	r3, [r3, #10]
 80013a2:	4619      	mov	r1, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	7adb      	ldrb	r3, [r3, #11]
 80013a8:	461a      	mov	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	7b1b      	ldrb	r3, [r3, #12]
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	460b      	mov	r3, r1
 80013b4:	4a2d      	ldr	r2, [pc, #180]	; (800146c <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	2000      	movs	r0, #0
 80013ba:	f002 feeb 	bl	8004194 <logApplication>
    APP_DBG("Stack type: %d", p_wireless_info->StackType);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	7a5b      	ldrb	r3, [r3, #9]
 80013c2:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	2000      	movs	r0, #0
 80013c8:	f002 fee4 	bl	8004194 <logApplication>
    APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	7a1b      	ldrb	r3, [r3, #8]
 80013d0:	4a28      	ldr	r2, [pc, #160]	; (8001474 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2000      	movs	r0, #0
 80013d6:	f002 fedd 	bl	8004194 <logApplication>
    APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	79db      	ldrb	r3, [r3, #7]
 80013de:	4a26      	ldr	r2, [pc, #152]	; (8001478 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	2000      	movs	r0, #0
 80013e4:	f002 fed6 	bl	8004194 <logApplication>
    APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	799b      	ldrb	r3, [r3, #6]
 80013ec:	4a23      	ldr	r2, [pc, #140]	; (800147c <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	2000      	movs	r0, #0
 80013f2:	f002 fecf 	bl	8004194 <logApplication>
    APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	795b      	ldrb	r3, [r3, #5]
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2000      	movs	r0, #0
 8001400:	f002 fec8 	bl	8004194 <logApplication>
    switch(p_wireless_info->StackType)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	7a5b      	ldrb	r3, [r3, #9]
 8001408:	2b50      	cmp	r3, #80	; 0x50
 800140a:	d012      	beq.n	8001432 <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 800140c:	2b50      	cmp	r3, #80	; 0x50
 800140e:	dc16      	bgt.n	800143e <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8001410:	2b10      	cmp	r3, #16
 8001412:	d002      	beq.n	800141a <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8001414:	2b11      	cmp	r3, #17
 8001416:	d006      	beq.n	8001426 <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 8001418:	e011      	b.n	800143e <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
      APP_DBG("FW Type : Thread FTD");
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 800141c:	2101      	movs	r1, #1
 800141e:	2000      	movs	r0, #0
 8001420:	f002 feb8 	bl	8004194 <logApplication>
      break;
 8001424:	e010      	b.n	8001448 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Thread MTD");
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 8001428:	2101      	movs	r1, #1
 800142a:	2000      	movs	r0, #0
 800142c:	f002 feb2 	bl	8004194 <logApplication>
      break;
 8001430:	e00a      	b.n	8001448 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8001434:	2101      	movs	r1, #1
 8001436:	2000      	movs	r0, #0
 8001438:	f002 feac 	bl	8004194 <logApplication>
      break;
 800143c:	e004      	b.n	8001448 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800143e:	2101      	movs	r1, #1
 8001440:	2016      	movs	r0, #22
 8001442:	f7ff fdb5 	bl	8000fb0 <APP_THREAD_Error>
      break;
 8001446:	bf00      	nop
    APP_DBG("**********************************************************");
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 800144a:	2101      	movs	r1, #1
 800144c:	2000      	movs	r0, #0
 800144e:	f002 fea1 	bl	8004194 <logApplication>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	0800f19c 	.word	0x0800f19c
 8001460:	0800f1d8 	.word	0x0800f1d8
 8001464:	0800f1f4 	.word	0x0800f1f4
 8001468:	0800f210 	.word	0x0800f210
 800146c:	0800f228 	.word	0x0800f228
 8001470:	0800f244 	.word	0x0800f244
 8001474:	0800f254 	.word	0x0800f254
 8001478:	0800f268 	.word	0x0800f268
 800147c:	0800f27c 	.word	0x0800f27c
 8001480:	0800f290 	.word	0x0800f290
 8001484:	0800f2a4 	.word	0x0800f2a4
 8001488:	0800f2bc 	.word	0x0800f2bc
 800148c:	0800f2d4 	.word	0x0800f2d4
 8001490:	0800f300 	.word	0x0800f300

08001494 <APP_THREAD_CoapPermissionsRequestHandler>:


static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP,FALSE);
 80014a0:	2100      	movs	r1, #0
 80014a2:	2001      	movs	r0, #1
 80014a4:	f00a fbf9 	bl	800bc9a <SHCI_C2_RADIO_AllowLowPower>
	coapConnectionEstablished = true;
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <APP_THREAD_CoapPermissionsRequestHandler+0x110>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2102      	movs	r1, #2
 80014b2:	483d      	ldr	r0, [pc, #244]	; (80015a8 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 80014b4:	f003 ff20 	bl	80052f8 <HAL_GPIO_WritePin>
  APP_DBG(" **********************************************************************************"
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <APP_THREAD_CoapPermissionsRequestHandler+0x118>)
 80014bc:	2101      	movs	r1, #1
 80014be:	2000      	movs	r0, #0
 80014c0:	f002 fe68 	bl	8004194 <logApplication>
		  "******************************************************************************"
		  "***********************************************************************",pContext);
  /* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
  //GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
  //printIPv6Addr(&aMessageInfo->mPeerAddr);
  brAddr = pMessageInfo->mPeerAddr;
 80014c4:	4a3a      	ldr	r2, [pc, #232]	; (80015b0 <APP_THREAD_CoapPermissionsRequestHandler+0x11c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4614      	mov	r4, r2
 80014ca:	3310      	adds	r3, #16
 80014cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  otError error = OT_ERROR_NONE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	77fb      	strb	r3, [r7, #31]
  otMessage *responseMessage;
  otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 80014d6:	2344      	movs	r3, #68	; 0x44
 80014d8:	77bb      	strb	r3, [r7, #30]
  otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 80014da:	68b8      	ldr	r0, [r7, #8]
 80014dc:	f009 fa8e 	bl	800a9fc <otCoapMessageGetCode>
 80014e0:	4603      	mov	r3, r0
 80014e2:	777b      	strb	r3, [r7, #29]

  responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f009 f920 	bl	800a72c <otCoapNewMessage>
 80014ec:	61b8      	str	r0, [r7, #24]

  otCoapMessageInitResponse(responseMessage, pMessage,
 80014ee:	7fbb      	ldrb	r3, [r7, #30]
 80014f0:	2202      	movs	r2, #2
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	69b8      	ldr	r0, [r7, #24]
 80014f6:	f009 f97c 	bl	800a7f2 <otCoapMessageInitResponse>
                            OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
  otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 80014fa:	68b8      	ldr	r0, [r7, #8]
 80014fc:	f009 fb0a 	bl	800ab14 <otCoapMessageGetToken>
 8001500:	4604      	mov	r4, r0
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f009 fad8 	bl	800aab8 <otCoapMessageGetTokenLength>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4621      	mov	r1, r4
 800150e:	69b8      	ldr	r0, [r7, #24]
 8001510:	f009 f9ad 	bl	800a86e <otCoapMessageSetToken>
                        otCoapMessageGetTokenLength(pMessage));
  otCoapMessageSetPayloadMarker(responseMessage);
 8001514:	69b8      	ldr	r0, [r7, #24]
 8001516:	f009 fa43 	bl	800a9a0 <otCoapMessageSetPayloadMarker>


  uint16_t offset = otMessageGetOffset(pMessage);
 800151a:	68b8      	ldr	r0, [r7, #8]
 800151c:	f009 fcdb 	bl	800aed6 <otMessageGetOffset>
 8001520:	4603      	mov	r3, r0
 8001522:	82fb      	strh	r3, [r7, #22]
  otMessageRead(pMessage, offset, resource_name, sizeof(resource_name)-1);
 8001524:	8af9      	ldrh	r1, [r7, #22]
 8001526:	231f      	movs	r3, #31
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <APP_THREAD_CoapPermissionsRequestHandler+0x120>)
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f009 fd3c 	bl	800afa8 <otMessageRead>


  if (OT_COAP_CODE_GET == messageCode)
 8001530:	7f7b      	ldrb	r3, [r7, #29]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10e      	bne.n	8001554 <APP_THREAD_CoapPermissionsRequestHandler+0xc0>
  {

      error = otMessageAppend(responseMessage, "ack", 3);
 8001536:	2203      	movs	r2, #3
 8001538:	491f      	ldr	r1, [pc, #124]	; (80015b8 <APP_THREAD_CoapPermissionsRequestHandler+0x124>)
 800153a:	69b8      	ldr	r0, [r7, #24]
 800153c:	f009 fcfb 	bl	800af36 <otMessageAppend>
 8001540:	4603      	mov	r3, r0
 8001542:	77fb      	strb	r3, [r7, #31]
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff fc31 	bl	8000db0 <otCoapSendResponse>
 800154e:	4603      	mov	r3, r0
 8001550:	77fb      	strb	r3, [r7, #31]
 8001552:	e011      	b.n	8001578 <APP_THREAD_CoapPermissionsRequestHandler+0xe4>
                                 pMessageInfo);
  }
  else
  {
      error = otMessageAppend(responseMessage, "nack", 4);
 8001554:	2204      	movs	r2, #4
 8001556:	4919      	ldr	r1, [pc, #100]	; (80015bc <APP_THREAD_CoapPermissionsRequestHandler+0x128>)
 8001558:	69b8      	ldr	r0, [r7, #24]
 800155a:	f009 fcec 	bl	800af36 <otMessageAppend>
 800155e:	4603      	mov	r3, r0
 8001560:	77fb      	strb	r3, [r7, #31]
      otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 8001562:	2185      	movs	r1, #133	; 0x85
 8001564:	69b8      	ldr	r0, [r7, #24]
 8001566:	f009 fa77 	bl	800aa58 <otCoapMessageSetCode>
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	69b9      	ldr	r1, [r7, #24]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fc1e 	bl	8000db0 <otCoapSendResponse>
 8001574:	4603      	mov	r3, r0
 8001576:	77fb      	strb	r3, [r7, #31]
                                 pMessageInfo);
  }

  if (error != OT_ERROR_NONE && responseMessage != NULL)
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <APP_THREAD_CoapPermissionsRequestHandler+0xf6>
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <APP_THREAD_CoapPermissionsRequestHandler+0xf6>
  {
      otMessageFree(responseMessage);
 8001584:	69b8      	ldr	r0, [r7, #24]
 8001586:	f009 fc79 	bl	800ae7c <otMessageFree>
  }

  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 800158a:	2101      	movs	r1, #1
 800158c:	2001      	movs	r0, #1
 800158e:	f00a fb84 	bl	800bc9a <SHCI_C2_RADIO_AllowLowPower>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2102      	movs	r1, #2
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 8001598:	f003 feae 	bl	80052f8 <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3724      	adds	r7, #36	; 0x24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	20000444 	.word	0x20000444
 80015a8:	48000800 	.word	0x48000800
 80015ac:	0800f33c 	.word	0x0800f33c
 80015b0:	2000042c 	.word	0x2000042c
 80015b4:	2000040c 	.word	0x2000040c
 80015b8:	0800f510 	.word	0x0800f510
 80015bc:	0800f514 	.word	0x0800f514

080015c0 <APP_THREAD_SendCoapMsg>:
/**
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf, bool require_ack) {
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b0ad      	sub	sp, #180	; 0xb4
 80015c4:	af0e      	add	r7, sp, #56	; 0x38
 80015c6:	6278      	str	r0, [r7, #36]	; 0x24
 80015c8:	460b      	mov	r3, r1
 80015ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if(!coapConnectionEstablished) return;
 80015ce:	4b80      	ldr	r3, [pc, #512]	; (80017d0 <APP_THREAD_SendCoapMsg+0x210>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 80f5 	bne.w	80017c8 <APP_THREAD_SendCoapMsg+0x208>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP,FALSE);
 80015de:	2100      	movs	r1, #0
 80015e0:	2001      	movs	r0, #1
 80015e2:	f00a fb5a 	bl	800bc9a <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2102      	movs	r1, #2
 80015ea:	487a      	ldr	r0, [pc, #488]	; (80017d4 <APP_THREAD_SendCoapMsg+0x214>)
 80015ec:	f003 fe84 	bl	80052f8 <HAL_GPIO_WritePin>
	int8_t rssi;
	int16_t tmp_aux;
	require_ack = false;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	//otThreadGetParentLastRssi(NULL, &rssi);
	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 80015f6:	4978      	ldr	r1, [pc, #480]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 80015f8:	4878      	ldr	r0, [pc, #480]	; (80017dc <APP_THREAD_SendCoapMsg+0x21c>)
 80015fa:	f7ff f945 	bl	8000888 <sht4x_read>
	//stts22h_temperature_raw_get(&tmp_aux);
	sensor_data.temp_aux = tmp_aux;
 80015fe:	4a76      	ldr	r2, [pc, #472]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 8001600:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001604:	8113      	strh	r3, [r2, #8]
	int8_t state;
	int8_t ret = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	if(ret == RES_HEAT) sht4x_activate_medium_heater();
 800160c:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <APP_THREAD_SendCoapMsg+0x58>
 8001614:	f7ff f904 	bl	8000820 <sht4x_activate_medium_heater>
	 * opt_buf (uint32_t): light levels in lux
	 * vdd_meas (uint32_t): supply voltage in mV
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001618:	2301      	movs	r3, #1
 800161a:	469c      	mov	ip, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 800161c:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 800161e:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001620:	461d      	mov	r5, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001622:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 8001624:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001626:	461e      	mov	r6, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001628:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 800162a:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 800162c:	61fb      	str	r3, [r7, #28]
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 800162e:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 8001630:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001632:	61bb      	str	r3, [r7, #24]
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 8001636:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001638:	617b      	str	r3, [r7, #20]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 800163a:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 800163c:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 800163e:	613b      	str	r3, [r7, #16]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001640:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 8001642:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001644:	60fb      	str	r3, [r7, #12]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001646:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <APP_THREAD_SendCoapMsg+0x220>)
 8001648:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4b61      	ldr	r3, [pc, #388]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 8001652:	6819      	ldr	r1, [r3, #0]
			sensor_data.humidity, sensor_data.temp_aux, ret, rssi,state);
 8001654:	4b60      	ldr	r3, [pc, #384]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 8001656:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	f997 0073 	ldrsb.w	r0, [r7, #115]	; 0x73
 8001660:	f997 4072 	ldrsb.w	r4, [r7, #114]	; 0x72
 8001664:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8001668:	930d      	str	r3, [sp, #52]	; 0x34
 800166a:	940c      	str	r4, [sp, #48]	; 0x30
 800166c:	900b      	str	r0, [sp, #44]	; 0x2c
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	900a      	str	r0, [sp, #40]	; 0x28
 8001672:	9109      	str	r1, [sp, #36]	; 0x24
 8001674:	9208      	str	r2, [sp, #32]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	9207      	str	r2, [sp, #28]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	9206      	str	r2, [sp, #24]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	9205      	str	r2, [sp, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	9204      	str	r2, [sp, #16]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	9203      	str	r2, [sp, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	9601      	str	r6, [sp, #4]
 8001690:	9500      	str	r5, [sp, #0]
 8001692:	4663      	mov	r3, ip
 8001694:	4a53      	ldr	r2, [pc, #332]	; (80017e4 <APP_THREAD_SendCoapMsg+0x224>)
 8001696:	21fe      	movs	r1, #254	; 0xfe
 8001698:	4853      	ldr	r0, [pc, #332]	; (80017e8 <APP_THREAD_SendCoapMsg+0x228>)
 800169a:	f00c fdd7 	bl	800e24c <sniprintf>
	buf = tmp_tx_buf;
 800169e:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <APP_THREAD_SendCoapMsg+0x228>)
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d", sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
 80016a2:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	494b      	ldr	r1, [pc, #300]	; (80017d8 <APP_THREAD_SendCoapMsg+0x218>)
 80016ac:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80016b0:	9101      	str	r1, [sp, #4]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <APP_THREAD_SendCoapMsg+0x22c>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	2000      	movs	r0, #0
 80016bc:	f002 fd6a 	bl	8004194 <logApplication>
	otError error = OT_ERROR_NONE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	otMessage *message = NULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	66fb      	str	r3, [r7, #108]	; 0x6c
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	// Default parameters
	otCoapType coapType =
			require_ack ?
					OT_COAP_TYPE_CONFIRMABLE : OT_COAP_TYPE_NON_CONFIRMABLE;
 80016d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016d4:	f083 0301 	eor.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
	otCoapType coapType =
 80016da:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	otIp6Address coapDestinationIp = brAddr;
 80016de:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <APP_THREAD_SendCoapMsg+0x230>)
 80016e0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80016e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(NULL, NULL);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2000      	movs	r0, #0
 80016ee:	f009 f81d 	bl	800a72c <otCoapNewMessage>
 80016f2:	66f8      	str	r0, [r7, #108]	; 0x6c

	otCoapMessageInit(message, coapType, OT_COAP_CODE_PUT);
 80016f4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80016f8:	2203      	movs	r2, #3
 80016fa:	4619      	mov	r1, r3
 80016fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80016fe:	f009 f843 	bl	800a788 <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 8001702:	2102      	movs	r1, #2
 8001704:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001706:	f009 f8e9 	bl	800a8dc <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 800170a:	493a      	ldr	r1, [pc, #232]	; (80017f4 <APP_THREAD_SendCoapMsg+0x234>)
 800170c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800170e:	f009 f915 	bl	800a93c <otCoapMessageAppendUriPathOptions>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	payloadLength = strlen(buf);
 8001718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800171a:	f7fe fd3b 	bl	8000194 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	if (payloadLength > 0) {
 8001724:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <APP_THREAD_SendCoapMsg+0x178>
		error = otCoapMessageSetPayloadMarker(message);
 800172c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800172e:	f009 f937 	bl	800a9a0 <otCoapMessageSetPayloadMarker>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	// Embed content into message if given
	if (payloadLength > 0) {
 8001738:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <APP_THREAD_SendCoapMsg+0x194>
		error = otMessageAppend(message, buf, payloadLength);
 8001740:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001744:	461a      	mov	r2, r3
 8001746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001748:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800174a:	f009 fbf4 	bl	800af36 <otMessageAppend>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 8001754:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001758:	222c      	movs	r2, #44	; 0x2c
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f00c f977 	bl	800da50 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 8001762:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800176c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8001770:	f241 6333 	movw	r3, #5683	; 0x1633
 8001774:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	if(coapConnectionEstablished) {
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <APP_THREAD_SendCoapMsg+0x210>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <APP_THREAD_SendCoapMsg+0x1e6>
		error = otCoapSendRequestWithParameters(NULL, message, &messageInfo, NULL,
 8001780:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2300      	movs	r3, #0
 800178e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001790:	2000      	movs	r0, #0
 8001792:	f009 f9ec 	bl	800ab6e <otCoapSendRequestWithParameters>
 8001796:	4603      	mov	r3, r0
 8001798:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				NULL,
				NULL);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2102      	movs	r1, #2
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <APP_THREAD_SendCoapMsg+0x214>)
 80017a2:	f003 fda9 	bl	80052f8 <HAL_GPIO_WritePin>
	}

	if ((error != OT_ERROR_NONE) && (message != NULL)) {
 80017a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <APP_THREAD_SendCoapMsg+0x1fa>
 80017ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <APP_THREAD_SendCoapMsg+0x1fa>
		otMessageFree(message);
 80017b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80017b6:	f009 fb61 	bl	800ae7c <otMessageFree>
	}
	sht4x_measure();
 80017ba:	f7ff f857 	bl	800086c <sht4x_measure>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 80017be:	2101      	movs	r1, #1
 80017c0:	2001      	movs	r0, #1
 80017c2:	f00a fa6a 	bl	800bc9a <SHCI_C2_RADIO_AllowLowPower>
 80017c6:	e000      	b.n	80017ca <APP_THREAD_SendCoapMsg+0x20a>
	if(!coapConnectionEstablished) return;
 80017c8:	bf00      	nop
}
 80017ca:	377c      	adds	r7, #124	; 0x7c
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	20000444 	.word	0x20000444
 80017d4:	48000800 	.word	0x48000800
 80017d8:	200007ac 	.word	0x200007ac
 80017dc:	200007b0 	.word	0x200007b0
 80017e0:	2000043c 	.word	0x2000043c
 80017e4:	0800f580 	.word	0x0800f580
 80017e8:	2000030c 	.word	0x2000030c
 80017ec:	0800f5a8 	.word	0x0800f5a8
 80017f0:	2000042c 	.word	0x2000042c
 80017f4:	2000040c 	.word	0x2000040c

080017f8 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200002fc 	.word	0x200002fc

08001818 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	330c      	adds	r3, #12
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	200002fc 	.word	0x200002fc

08001830 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	330b      	adds	r3, #11
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	200002fc 	.word	0x200002fc

08001848 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	330b      	adds	r3, #11
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20000300 	.word	0x20000300

08001860 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <Ot_Cmd_Transfer_Common+0x44>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001870:	725a      	strb	r2, [r3, #9]
 8001872:	2200      	movs	r2, #0
 8001874:	f042 0202 	orr.w	r2, r2, #2
 8001878:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <Ot_Cmd_Transfer_Common+0x44>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	330c      	adds	r3, #12
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	3302      	adds	r3, #2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <Ot_Cmd_Transfer_Common+0x44>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8001892:	f00a ff0d 	bl	800c6b0 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8001896:	f000 f840 	bl	800191a <Wait_Getting_Ack_From_M0>

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002fc 	.word	0x200002fc

080018a8 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 80018ac:	f7ff ffd8 	bl	8001860 <Ot_Cmd_Transfer_Common>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <Ot_Cmd_TransferWithNotif>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_TransferWithNotif(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Flag to specify to UTIL_SEQ_EvtIdle that M0 to M4 notifications are allowed */
  g_ot_notification_allowed = 1U;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <Ot_Cmd_TransferWithNotif+0x14>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]

  Ot_Cmd_Transfer_Common();
 80018be:	f7ff ffcf 	bl	8001860 <Ot_Cmd_Transfer_Common>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000045c 	.word	0x2000045c

080018cc <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80018d4:	f000 f828 	bl	8001928 <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <TL_OT_CmdEvtReceived+0x1c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000045c 	.word	0x2000045c

080018ec <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <TL_THREAD_NotReceived+0x1c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80018fa:	f000 f81d 	bl	8001938 <Receive_Notification_From_M0>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000300 	.word	0x20000300

0800190c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001910:	2004      	movs	r0, #4
 8001912:	f00b fad9 	bl	800cec8 <UTIL_SEQ_WaitEvt>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}

0800191a <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800191e:	2002      	movs	r0, #2
 8001920:	f00b fad2 	bl	800cec8 <UTIL_SEQ_WaitEvt>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800192c:	2002      	movs	r0, #2
 800192e:	f00b faab 	bl	800ce88 <UTIL_SEQ_SetEvt>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <Receive_Notification_From_M0+0x1c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <Receive_Notification_From_M0+0x1c>)
 8001944:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 8001946:	2100      	movs	r1, #0
 8001948:	2001      	movs	r0, #1
 800194a:	f00b fa71 	bl	800ce30 <UTIL_SEQ_SetTask>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000304 	.word	0x20000304

08001958 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <RxCpltCallback+0x4c>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d816      	bhi.n	8001994 <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <RxCpltCallback+0x4c>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	b291      	uxth	r1, r2
 8001970:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <RxCpltCallback+0x4c>)
 8001972:	8011      	strh	r1, [r2, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <RxCpltCallback+0x50>)
 8001978:	7819      	ldrb	r1, [r3, #0]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <RxCpltCallback+0x54>)
 800197c:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <RxCpltCallback+0x50>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b0d      	cmp	r3, #13
 8001984:	d106      	bne.n	8001994 <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <RxCpltCallback+0x58>)
 8001988:	2201      	movs	r2, #1
 800198a:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 800198c:	2100      	movs	r1, #0
 800198e:	2002      	movs	r0, #2
 8001990:	f00b fa4e 	bl	800ce30 <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <RxCpltCallback+0x5c>)
 8001996:	2201      	movs	r2, #1
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <RxCpltCallback+0x50>)
 800199a:	2002      	movs	r0, #2
 800199c:	f001 fcf4 	bl	8003388 <HW_UART_Receive_IT>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200002f8 	.word	0x200002f8
 80019a8:	200000f8 	.word	0x200000f8
 80019ac:	200001f8 	.word	0x200001f8
 80019b0:	200002fa 	.word	0x200002fa
 80019b4:	08001959 	.word	0x08001959

080019b8 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	2100      	movs	r1, #0
 80019c0:	4812      	ldr	r0, [pc, #72]	; (8001a0c <Send_CLI_To_M0+0x54>)
 80019c2:	f00c f845 	bl	800da50 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <Send_CLI_To_M0+0x58>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4911      	ldr	r1, [pc, #68]	; (8001a14 <Send_CLI_To_M0+0x5c>)
 80019d0:	480e      	ldr	r0, [pc, #56]	; (8001a0c <Send_CLI_To_M0+0x54>)
 80019d2:	f00c f82f 	bl	800da34 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <Send_CLI_To_M0+0x58>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <Send_CLI_To_M0+0x60>)
 80019e0:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <Send_CLI_To_M0+0x60>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	725a      	strb	r2, [r3, #9]
 80019e8:	2200      	movs	r2, #0
 80019ea:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <Send_CLI_To_M0+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <Send_CLI_To_M0+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80019f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fc:	2100      	movs	r1, #0
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <Send_CLI_To_M0+0x5c>)
 8001a00:	f00c f826 	bl	800da50 <memset>

  TL_CLI_SendCmd();
 8001a04:	f00a fe62 	bl	800c6cc <TL_CLI_SendCmd>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2003030c 	.word	0x2003030c
 8001a10:	200002f8 	.word	0x200002f8
 8001a14:	200001f8 	.word	0x200001f8
 8001a18:	20030300 	.word	0x20030300
 8001a1c:	200002fa 	.word	0x200002fa

08001a20 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8001a24:	f00a fe6e 	bl	800c704 <TL_THREAD_CliSendAck>

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <APP_THREAD_Init_UART_CLI+0x24>)
 8001a32:	2100      	movs	r1, #0
 8001a34:	2002      	movs	r0, #2
 8001a36:	f00b f9d9 	bl	800cdec <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
 8001a3a:	f001 ff4b 	bl	80038d4 <MX_LPUART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <APP_THREAD_Init_UART_CLI+0x28>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	4905      	ldr	r1, [pc, #20]	; (8001a58 <APP_THREAD_Init_UART_CLI+0x2c>)
 8001a44:	2002      	movs	r0, #2
 8001a46:	f001 fc9f 	bl	8003388 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	080019b9 	.word	0x080019b9
 8001a54:	08001959 	.word	0x08001959
 8001a58:	200000f8 	.word	0x200000f8

08001a5c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8001a64:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001a68:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <APP_THREAD_TL_THREAD_INIT+0x30>)
 8001a6a:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8001a70:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <APP_THREAD_TL_THREAD_INIT+0x38>)
 8001a76:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001a7a:	f00a fdf9 	bl	800c670 <TL_THREAD_Init>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20030028 	.word	0x20030028
 8001a88:	200300e8 	.word	0x200300e8
 8001a8c:	200301f4 	.word	0x200301f4
 8001a90:	20030300 	.word	0x20030300
 8001a94:	2003040c 	.word	0x2003040c

08001a98 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	7adb      	ldrb	r3, [r3, #11]
 8001aa8:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	330c      	adds	r3, #12
 8001aae:	490b      	ldr	r1, [pc, #44]	; (8001adc <TL_THREAD_CliNotReceived+0x44>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fb65 	bl	8000180 <strcmp>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f103 010c 	add.w	r1, r3, #12
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <TL_THREAD_CliNotReceived+0x48>)
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f001 fc97 	bl	80033fc <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 8001ace:	e001      	b.n	8001ad4 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8001ad0:	f7ff ffa6 	bl	8001a20 <Send_CLI_Ack_For_OT>
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	0800f5d8 	.word	0x0800f5d8
 8001ae0:	08001ae5 	.word	0x08001ae5

08001ae4 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8001ae8:	f7ff ff9a 	bl	8001a20 <Send_CLI_Ack_For_OT>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00d      	beq.n	8001b18 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d904      	bls.n	8001b0e <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8001b04:	2100      	movs	r1, #0
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fa52 	bl	8000fb0 <APP_THREAD_Error>
 8001b0c:	e001      	b.n	8001b12 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8001b0e:	f009 fa8b 	bl	800b028 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8001b12:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000304 	.word	0x20000304

08001b20 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <LL_PWR_EnableBootC2+0x1c>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <LL_PWR_EnableBootC2+0x1c>)
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	58000400 	.word	0x58000400

08001b40 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001b4a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001b4e:	4905      	ldr	r1, [pc, #20]	; (8001b64 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	58000800 	.word	0x58000800

08001b68 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	4904      	ldr	r1, [pc, #16]	; (8001b88 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	620b      	str	r3, [r1, #32]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	58000800 	.word	0x58000800

08001b8c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	605a      	str	r2, [r3, #4]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	605a      	str	r2, [r3, #4]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	609a      	str	r2, [r3, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	041a      	lsls	r2, r3, #16
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	4013      	ands	r3, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d101      	bne.n	8001d1c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d101      	bne.n	8001d46 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001d58:	2102      	movs	r1, #2
 8001d5a:	482a      	ldr	r0, [pc, #168]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001d5c:	f7ff ffe5 	bl	8001d2a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HW_IPCC_Rx_Handler+0x26>
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001d74:	f000 f8f8 	bl	8001f68 <HW_IPCC_SYS_EvtHandler>
 8001d78:	e041      	b.n	8001dfe <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4821      	ldr	r0, [pc, #132]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001d7e:	f7ff ffd4 	bl	8001d2a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HW_IPCC_Rx_Handler+0x48>
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8001d96:	f000 f941 	bl	800201c <HW_IPCC_THREAD_NotEvtHandler>
 8001d9a:	e030      	b.n	8001dfe <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	4819      	ldr	r0, [pc, #100]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001da0:	f7ff ffc3 	bl	8001d2a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HW_IPCC_Rx_Handler+0x6a>
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001db8:	f000 f93c 	bl	8002034 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001dbc:	e01f      	b.n	8001dfe <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	4810      	ldr	r0, [pc, #64]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001dc2:	f7ff ffb2 	bl	8001d2a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HW_IPCC_Rx_Handler+0x8a>
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001dd8:	f000 f88a 	bl	8001ef0 <HW_IPCC_BLE_EvtHandler>
 8001ddc:	e00f      	b.n	8001dfe <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001dde:	2108      	movs	r1, #8
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001de2:	f7ff ffa2 	bl	8001d2a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HW_IPCC_Rx_Handler+0xac>
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HW_IPCC_Rx_Handler+0xb0>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001dfa:	f000 f967 	bl	80020cc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
}
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58000c00 	.word	0x58000c00

08001e08 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4822      	ldr	r0, [pc, #136]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e10:	f7ff ff76 	bl	8001d00 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HW_IPCC_Tx_Handler+0x26>
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001e28:	f000 f892 	bl	8001f50 <HW_IPCC_SYS_CmdEvtHandler>
 8001e2c:	e031      	b.n	8001e92 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001e2e:	2104      	movs	r1, #4
 8001e30:	4819      	ldr	r0, [pc, #100]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e32:	f7ff ff65 	bl	8001d00 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HW_IPCC_Tx_Handler+0x48>
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001e4a:	f000 f8db 	bl	8002004 <HW_IPCC_OT_CmdEvtHandler>
 8001e4e:	e020      	b.n	8001e92 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001e50:	2108      	movs	r1, #8
 8001e52:	4811      	ldr	r0, [pc, #68]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e54:	f7ff ff54 	bl	8001d00 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HW_IPCC_Tx_Handler+0x6a>
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001e6c:	f000 f910 	bl	8002090 <HW_IPCC_MM_FreeBufHandler>
 8001e70:	e00f      	b.n	8001e92 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001e72:	2120      	movs	r1, #32
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e76:	f7ff ff43 	bl	8001d00 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HW_IPCC_Tx_Handler+0x8c>
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HW_IPCC_Tx_Handler+0x90>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001e8e:	f000 f83b 	bl	8001f08 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
}
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58000c00 	.word	0x58000c00

08001e9c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001ea0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ea4:	f7ff fe8b 	bl	8001bbe <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001ea8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eac:	f7ff fe5c 	bl	8001b68 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001eb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eb4:	f7ff fe44 	bl	8001b40 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001eb8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001eba:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001ebc:	f7ff fe30 	bl	8001b20 <LL_PWR_EnableBootC2>

  return;
 8001ec0:	bf00      	nop
}
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001ec8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ecc:	f7ff fe5e 	bl	8001b8c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001ed0:	4806      	ldr	r0, [pc, #24]	; (8001eec <HW_IPCC_Init+0x28>)
 8001ed2:	f7ff fea0 	bl	8001c16 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <HW_IPCC_Init+0x28>)
 8001ed8:	f7ff fe8d 	bl	8001bf6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001edc:	202c      	movs	r0, #44	; 0x2c
 8001ede:	f002 fc62 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001ee2:	202d      	movs	r0, #45	; 0x2d
 8001ee4:	f002 fc5f 	bl	80047a6 <HAL_NVIC_EnableIRQ>

  return;
 8001ee8:	bf00      	nop
}
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	58000c00 	.word	0x58000c00

08001ef0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001ef4:	f00a fb04 	bl	800c500 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4802      	ldr	r0, [pc, #8]	; (8001f04 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001efc:	f7ff fee3 	bl	8001cc6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001f00:	bf00      	nop
}
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	58000c00 	.word	0x58000c00

08001f08 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001f10:	f7ff fea4 	bl	8001c5c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001f14:	f00a fb24 	bl	800c560 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001f18:	bf00      	nop
}
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58000c00 	.word	0x58000c00

08001f20 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001f24:	2102      	movs	r1, #2
 8001f26:	4802      	ldr	r0, [pc, #8]	; (8001f30 <HW_IPCC_SYS_Init+0x10>)
 8001f28:	f7ff feaa 	bl	8001c80 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001f2c:	bf00      	nop
}
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	58000c00 	.word	0x58000c00

08001f34 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4804      	ldr	r0, [pc, #16]	; (8001f4c <HW_IPCC_SYS_SendCmd+0x18>)
 8001f3c:	f7ff fed1 	bl	8001ce2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001f40:	2102      	movs	r1, #2
 8001f42:	4802      	ldr	r0, [pc, #8]	; (8001f4c <HW_IPCC_SYS_SendCmd+0x18>)
 8001f44:	f7ff fe77 	bl	8001c36 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001f48:	bf00      	nop
}
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	58000c00 	.word	0x58000c00

08001f50 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001f54:	2102      	movs	r1, #2
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001f58:	f7ff fe80 	bl	8001c5c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001f5c:	f00a fb50 	bl	800c600 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001f60:	bf00      	nop
}
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	58000c00 	.word	0x58000c00

08001f68 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001f6c:	f00a fb5e 	bl	800c62c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001f70:	2102      	movs	r1, #2
 8001f72:	4802      	ldr	r0, [pc, #8]	; (8001f7c <HW_IPCC_SYS_EvtHandler+0x14>)
 8001f74:	f7ff fea7 	bl	8001cc6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001f78:	bf00      	nop
}
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	58000c00 	.word	0x58000c00

08001f80 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001f84:	2104      	movs	r1, #4
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <HW_IPCC_THREAD_Init+0x18>)
 8001f88:	f7ff fe7a 	bl	8001c80 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <HW_IPCC_THREAD_Init+0x18>)
 8001f90:	f7ff fe76 	bl	8001c80 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001f94:	bf00      	nop
}
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	58000c00 	.word	0x58000c00

08001f9c <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <HW_IPCC_OT_SendCmd+0x18>)
 8001fa4:	f7ff fe9d 	bl	8001ce2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001fa8:	2104      	movs	r1, #4
 8001faa:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <HW_IPCC_OT_SendCmd+0x18>)
 8001fac:	f7ff fe43 	bl	8001c36 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001fb0:	bf00      	nop
}
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	58000c00 	.word	0x58000c00

08001fb8 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <HW_IPCC_CLI_SendCmd+0x10>)
 8001fc0:	f7ff fe8f 	bl	8001ce2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001fc4:	bf00      	nop
}
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	58000c00 	.word	0x58000c00

08001fcc <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <HW_IPCC_THREAD_SendAck+0x18>)
 8001fd4:	f7ff fe77 	bl	8001cc6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001fd8:	2104      	movs	r1, #4
 8001fda:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <HW_IPCC_THREAD_SendAck+0x18>)
 8001fdc:	f7ff fe50 	bl	8001c80 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001fe0:	bf00      	nop
}
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	58000c00 	.word	0x58000c00

08001fe8 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001fec:	2110      	movs	r1, #16
 8001fee:	4804      	ldr	r0, [pc, #16]	; (8002000 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001ff0:	f7ff fe69 	bl	8001cc6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	4802      	ldr	r0, [pc, #8]	; (8002000 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001ff8:	f7ff fe42 	bl	8001c80 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001ffc:	bf00      	nop
}
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	58000c00 	.word	0x58000c00

08002004 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8002008:	2104      	movs	r1, #4
 800200a:	4803      	ldr	r0, [pc, #12]	; (8002018 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800200c:	f7ff fe26 	bl	8001c5c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8002010:	f00a fb86 	bl	800c720 <HW_IPCC_OT_CmdEvtNot>

  return;
 8002014:	bf00      	nop
}
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58000c00 	.word	0x58000c00

0800201c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8002020:	2104      	movs	r1, #4
 8002022:	4803      	ldr	r0, [pc, #12]	; (8002030 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8002024:	f7ff fe3e 	bl	8001ca4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8002028:	f00a fb86 	bl	800c738 <HW_IPCC_THREAD_EvtNot>

  return;
 800202c:	bf00      	nop
}
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58000c00 	.word	0x58000c00

08002034 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8002038:	2110      	movs	r1, #16
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800203c:	f7ff fe32 	bl	8001ca4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8002040:	f00a fb86 	bl	800c750 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8002044:	bf00      	nop
}
 8002046:	bd80      	pop	{r7, pc}
 8002048:	58000c00 	.word	0x58000c00

0800204c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8002054:	2108      	movs	r1, #8
 8002056:	480c      	ldr	r0, [pc, #48]	; (8002088 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002058:	f7ff fe52 	bl	8001d00 <LL_C1_IPCC_IsActiveFlag_CHx>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002068:	2108      	movs	r1, #8
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800206c:	f7ff fde3 	bl	8001c36 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8002070:	e006      	b.n	8002080 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002076:	2108      	movs	r1, #8
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800207a:	f7ff fe32 	bl	8001ce2 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800207e:	bf00      	nop
}
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	58000c00 	.word	0x58000c00
 800208c:	2000044c 	.word	0x2000044c

08002090 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002094:	2108      	movs	r1, #8
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002098:	f7ff fde0 	bl	8001c5c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80020a2:	2108      	movs	r1, #8
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80020a6:	f7ff fe1c 	bl	8001ce2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80020aa:	bf00      	nop
}
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	58000c00 	.word	0x58000c00
 80020b4:	2000044c 	.word	0x2000044c

080020b8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80020bc:	2108      	movs	r1, #8
 80020be:	4802      	ldr	r0, [pc, #8]	; (80020c8 <HW_IPCC_TRACES_Init+0x10>)
 80020c0:	f7ff fdde 	bl	8001c80 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80020c4:	bf00      	nop
}
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	58000c00 	.word	0x58000c00

080020cc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80020d0:	f00a fbd0 	bl	800c874 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80020d4:	2108      	movs	r1, #8
 80020d6:	4802      	ldr	r0, [pc, #8]	; (80020e0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80020d8:	f7ff fdf5 	bl	8001cc6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80020dc:	bf00      	nop
}
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	58000c00 	.word	0x58000c00

080020e4 <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
	SensorQueueLL *ret = malloc(sizeof(SensorQueueLL));
 80020ea:	200c      	movs	r0, #12
 80020ec:	f00b fc9a 	bl	800da24 <malloc>
 80020f0:	4603      	mov	r3, r0
 80020f2:	607b      	str	r3, [r7, #4]
	ret->front = NULL;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
	ret->rear = NULL;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
	ret->size = 0;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	721a      	strb	r2, [r3, #8]
	return ret;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <app_algo_init>:

	return ret;
}

void app_algo_init(SensorData_t data)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 800211c:	f7ff ffe2 	bl	80020e4 <create_sensor_LL>
 8002120:	4603      	mov	r3, r0
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <app_algo_init+0x38>)
 8002124:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <app_algo_init+0x38>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <app_algo_init+0x38>)
 8002130:	2200      	movs	r2, #0
 8002132:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	4a02      	ldr	r2, [pc, #8]	; (8002148 <app_algo_init+0x38>)
 800213e:	6093      	str	r3, [r2, #8]
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000450 	.word	0x20000450

0800214c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <LL_C2_PWR_SetPowerMode+0x28>)
 8002156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4905      	ldr	r1, [pc, #20]	; (8002174 <LL_C2_PWR_SetPowerMode+0x28>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	58000400 	.word	0x58000400

08002178 <LL_EXTI_EnableIT_32_63>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <LL_EXTI_EnableIT_32_63+0x24>)
 8002182:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002186:	4905      	ldr	r1, [pc, #20]	; (800219c <LL_EXTI_EnableIT_32_63+0x24>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	58000800 	.word	0x58000800

080021a0 <LL_C2_EXTI_EnableIT_32_63>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80021aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80021ae:	4905      	ldr	r1, [pc, #20]	; (80021c4 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	58000800 	.word	0x58000800

080021c8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80021d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	cafecafe 	.word	0xcafecafe

08002204 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <LL_LPM_EnableSleep+0x1c>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <LL_LPM_EnableSleep+0x1c>)
 8002236:	f023 0304 	bic.w	r3, r3, #4
 800223a:	6113      	str	r3, [r2, #16]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	22ff      	movs	r2, #255	; 0xff
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	22ca      	movs	r2, #202	; 0xca
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2253      	movs	r2, #83	; 0x53
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 0207 	bic.w	r2, r3, #7
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	609a      	str	r2, [r3, #8]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <MX_APPE_Config+0x18>)
 80022b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022b6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80022b8:	f000 f83e 	bl	8002338 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80022bc:	f000 f843 	bl	8002346 <Config_HSE>

  return;
 80022c0:	bf00      	nop
}
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	58004000 	.word	0x58004000

080022c8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80022cc:	f000 f84f 	bl	800236e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80022d0:	f000 f868 	bl	80023a4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80022d4:	4908      	ldr	r1, [pc, #32]	; (80022f8 <MX_APPE_Init+0x30>)
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 fdea 	bl	8002eb0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 80022dc:	f000 f81c 	bl	8002318 <Init_Debug>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80022e0:	2101      	movs	r1, #1
 80022e2:	2001      	movs	r0, #1
 80022e4:	f00a fc26 	bl	800cb34 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80022e8:	2101      	movs	r1, #1
 80022ea:	2001      	movs	r0, #1
 80022ec:	f00a fc52 	bl	800cb94 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80022f0:	f000 f866 	bl	80023c0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80022f4:	bf00      	nop
}
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000788 	.word	0x20000788

080022fc <Init_Smps>:

void Init_Smps(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8002300:	bf00      	nop
}
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <Init_Exti>:

void Init_Exti(void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800230e:	2050      	movs	r0, #80	; 0x50
 8002310:	f7ff ff32 	bl	8002178 <LL_EXTI_EnableIT_32_63>

  return;
 8002314:	bf00      	nop
}
 8002316:	bd80      	pop	{r7, pc}

08002318 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800231c:	f002 f8d2 	bl	80044c4 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8002320:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002324:	f7ff ff28 	bl	8002178 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8002328:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800232c:	f7ff ff38 	bl	80021a0 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8002330:	f00a fb48 	bl	800c9c4 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8002334:	bf00      	nop
}
 8002336:	bd80      	pop	{r7, pc}

08002338 <Reset_Device>:
static void Reset_Device(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800233c:	bf00      	nop
}
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800234c:	2000      	movs	r0, #0
 800234e:	f00a fbb7 	bl	800cac0 <OTP_Read>
 8002352:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	799b      	ldrb	r3, [r3, #6]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff32 	bl	80021c8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8002364:	bf00      	nop
 8002366:	bf00      	nop
}
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <System_Init>:

static void System_Init(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
  Init_Smps();
 8002372:	f7ff ffc3 	bl	80022fc <Init_Smps>

  Init_Exti();
 8002376:	f7ff ffc8 	bl	800230a <Init_Exti>

  Init_Rtc();
 800237a:	f000 f803 	bl	8002384 <Init_Rtc>

  return;
 800237e:	bf00      	nop
}
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <Init_Rtc+0x1c>)
 800238a:	f7ff ff6c 	bl	8002266 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800238e:	2100      	movs	r1, #0
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <Init_Rtc+0x1c>)
 8002392:	f7ff ff78 	bl	8002286 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <Init_Rtc+0x1c>)
 8002398:	f7ff ff58 	bl	800224c <LL_RTC_EnableWriteProtection>

  return;
 800239c:	bf00      	nop
}
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40002800 	.word	0x40002800

080023a4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80023a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023ac:	f7ff ff2a 	bl	8002204 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80023b0:	f00a fbae 	bl	800cb10 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80023b4:	2004      	movs	r0, #4
 80023b6:	f7ff fec9 	bl	800214c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80023ba:	bf00      	nop
}
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80023c6:	f00a f861 	bl	800c48c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 80023ca:	4a11      	ldr	r2, [pc, #68]	; (8002410 <appe_Tl_Init+0x50>)
 80023cc:	2100      	movs	r1, #0
 80023ce:	2004      	movs	r0, #4
 80023d0:	f00a fd0c 	bl	800cdec <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <appe_Tl_Init+0x54>)
 80023d6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <appe_Tl_Init+0x58>)
 80023da:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	480e      	ldr	r0, [pc, #56]	; (800241c <appe_Tl_Init+0x5c>)
 80023e2:	f009 fd27 	bl	800be34 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <appe_Tl_Init+0x60>)
 80023ec:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <appe_Tl_Init+0x64>)
 80023f0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80023f2:	f240 533c 	movw	r3, #1340	; 0x53c
 80023f6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00a f9b3 	bl	800c768 <TL_MM_Init>

  TL_Enable();
 8002402:	f00a f83d 	bl	800c480 <TL_Enable>

  return;
 8002406:	bf00      	nop
}
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	0800be6d 	.word	0x0800be6d
 8002414:	20030a54 	.word	0x20030a54
 8002418:	08002429 	.word	0x08002429
 800241c:	0800243f 	.word	0x0800243f
 8002420:	20030b60 	.word	0x20030b60
 8002424:	20030518 	.word	0x20030518

08002428 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002432:	bf00      	nop
}
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	330b      	adds	r3, #11
 800244c:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8002458:	d004      	beq.n	8002464 <APPE_SysUserEvtRx+0x26>
 800245a:	f249 2201 	movw	r2, #37377	; 0x9201
 800245e:	4293      	cmp	r3, r2
 8002460:	d003      	beq.n	800246a <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8002462:	e008      	b.n	8002476 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8002464:	f000 f834 	bl	80024d0 <APPE_SysEvtReadyProcessing>
         break;
 8002468:	e005      	b.n	8002476 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	789b      	ldrb	r3, [r3, #2]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f806 	bl	8002480 <APPE_SysEvtError>
         break;
 8002474:	bf00      	nop
  }
  return;
 8002476:	bf00      	nop
}
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b7d      	cmp	r3, #125	; 0x7d
 800248e:	d002      	beq.n	8002496 <APPE_SysEvtError+0x16>
 8002490:	2b7e      	cmp	r3, #126	; 0x7e
 8002492:	d006      	beq.n	80024a2 <APPE_SysEvtError+0x22>
 8002494:	e00b      	b.n	80024ae <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <APPE_SysEvtError+0x44>)
 8002498:	2101      	movs	r1, #1
 800249a:	2000      	movs	r0, #0
 800249c:	f001 fe7a 	bl	8004194 <logApplication>
       break;
 80024a0:	e00c      	b.n	80024bc <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <APPE_SysEvtError+0x48>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2000      	movs	r0, #0
 80024a8:	f001 fe74 	bl	8004194 <logApplication>
       break;
 80024ac:	e006      	b.n	80024bc <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <APPE_SysEvtError+0x4c>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	2000      	movs	r0, #0
 80024b6:	f001 fe6d 	bl	8004194 <logApplication>
       break;
 80024ba:	bf00      	nop
  }
  return;
 80024bc:	bf00      	nop
}
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	0800f5dc 	.word	0x0800f5dc
 80024c8:	0800f600 	.word	0x0800f600
 80024cc:	0800f620 	.word	0x0800f620

080024d0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 80024d4:	f00a f9bc 	bl	800c850 <TL_TRACES_Init>

  APP_THREAD_Init();
 80024d8:	f7fe fc7c 	bl	8000dd4 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80024dc:	2100      	movs	r1, #0
 80024de:	2001      	movs	r0, #1
 80024e0:	f00a fb28 	bl	800cb34 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80024e4:	2100      	movs	r1, #0
 80024e6:	2001      	movs	r0, #1
 80024e8:	f00a fb54 	bl	800cb94 <UTIL_LPM_SetOffMode>
  return;
 80024ec:	bf00      	nop
}
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f001 ffc0 	bl	800447c <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d00a      	beq.n	8002520 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800250a:	f001 ffcf 	bl	80044ac <HAL_GetTickFreq>
 800250e:	4603      	mov	r3, r0
 8002510:	461a      	mov	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002518:	e002      	b.n	8002520 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800251a:	f7ff fe87 	bl	800222c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800251e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002520:	f001 ffac 	bl	800447c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f4      	bhi.n	800251a <HAL_Delay+0x2a>
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800253e:	f04f 30ff 	mov.w	r0, #4294967295
 8002542:	f00a fb57 	bl	800cbf4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}

0800254a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800254e:	bf00      	nop
}
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d003      	beq.n	8002570 <UTIL_SEQ_EvtIdle+0x18>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b04      	cmp	r3, #4
 800256c:	d00c      	beq.n	8002588 <UTIL_SEQ_EvtIdle+0x30>
 800256e:	e012      	b.n	8002596 <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <UTIL_SEQ_EvtIdle+0x50>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d103      	bne.n	8002580 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8002578:	2001      	movs	r0, #1
 800257a:	f00a fb3b 	bl	800cbf4 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 800257e:	e00f      	b.n	80025a0 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8002580:	2000      	movs	r0, #0
 8002582:	f00a fb37 	bl	800cbf4 <UTIL_SEQ_Run>
    break;
 8002586:	e00b      	b.n	80025a0 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8002588:	2004      	movs	r0, #4
 800258a:	f00a fc7d 	bl	800ce88 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 800258e:	2001      	movs	r0, #1
 8002590:	f00a fb30 	bl	800cbf4 <UTIL_SEQ_Run>
    break;
 8002594:	e004      	b.n	80025a0 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002596:	f04f 30ff 	mov.w	r0, #4294967295
 800259a:	f00a fb2b 	bl	800cbf4 <UTIL_SEQ_Run>
    break;
 800259e:	bf00      	nop
  }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000045c 	.word	0x2000045c

080025ac <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 80025b4:	2100      	movs	r1, #0
 80025b6:	2004      	movs	r0, #4
 80025b8:	f00a fc3a 	bl	800ce30 <UTIL_SEQ_SetTask>
  return;
 80025bc:	bf00      	nop
}
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f00a fc5b 	bl	800ce88 <UTIL_SEQ_SetEvt>
  return;
 80025d2:	bf00      	nop
}
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f00a fc70 	bl	800cec8 <UTIL_SEQ_WaitEvt>
  return;
 80025e8:	bf00      	nop
}
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	330b      	adds	r3, #11
 80025fc:	1c99      	adds	r1, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7a9b      	ldrb	r3, [r3, #10]
 8002602:	3b02      	subs	r3, #2
 8002604:	461a      	mov	r2, r3
 8002606:	2001      	movs	r0, #1
 8002608:	f00a fa02 	bl	800ca10 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f00a f8e7 	bl	800c7e0 <TL_MM_EvtDone>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
	MX_LPUART1_UART_Init();
 800261e:	f001 f959 	bl	80038d4 <MX_LPUART1_UART_Init>
  return;
 8002622:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 8002624:	bd80      	pop	{r7, pc}

08002626 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	460b      	mov	r3, r1
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002634:	897a      	ldrh	r2, [r7, #10]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	2002      	movs	r0, #2
 800263c:	f000 ff18 	bl	8003470 <HW_UART_Transmit_DMA>

  return;
 8002640:	bf00      	nop
}
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002656:	2101      	movs	r1, #1
 8002658:	2000      	movs	r0, #0
 800265a:	f001 fd9b 	bl	8004194 <logApplication>
  switch(GPIO_Pin)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d003      	beq.n	800266e <HAL_GPIO_EXTI_Callback+0x26>
 8002666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266a:	d005      	beq.n	8002678 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 800266c:	e005      	b.n	800267a <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 800266e:	2101      	movs	r1, #1
 8002670:	2008      	movs	r0, #8
 8002672:	f00a fbdd 	bl	800ce30 <UTIL_SEQ_SetTask>
        break;
 8002676:	e000      	b.n	800267a <HAL_GPIO_EXTI_Callback+0x32>
        break;
 8002678:	bf00      	nop
  }
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	0800f640 	.word	0x0800f640

08002688 <LL_EXTI_EnableIT_0_31>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <LL_EXTI_EnableIT_0_31+0x24>)
 8002692:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002696:	4905      	ldr	r1, [pc, #20]	; (80026ac <LL_EXTI_EnableIT_0_31+0x24>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	58000800 	.word	0x58000800

080026b0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4904      	ldr	r1, [pc, #16]	; (80026d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	58000800 	.word	0x58000800

080026d4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <ReadRtcSsrValue+0x3c>)
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	b29b      	uxth	r3, r3
 80026e0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <ReadRtcSsrValue+0x3c>)
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80026ea:	e005      	b.n	80026f8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <ReadRtcSsrValue+0x3c>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1f5      	bne.n	80026ec <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002700:	683b      	ldr	r3, [r7, #0]
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40002800 	.word	0x40002800

08002714 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	460a      	mov	r2, r1
 800271e:	71fb      	strb	r3, [r7, #7]
 8002720:	4613      	mov	r3, r2
 8002722:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002724:	79ba      	ldrb	r2, [r7, #6]
 8002726:	491d      	ldr	r1, [pc, #116]	; (800279c <LinkTimerAfter+0x88>)
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	3315      	adds	r3, #21
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b06      	cmp	r3, #6
 800273c:	d009      	beq.n	8002752 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	4916      	ldr	r1, [pc, #88]	; (800279c <LinkTimerAfter+0x88>)
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	3314      	adds	r3, #20
 800274e:	79fa      	ldrb	r2, [r7, #7]
 8002750:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002752:	79fa      	ldrb	r2, [r7, #7]
 8002754:	4911      	ldr	r1, [pc, #68]	; (800279c <LinkTimerAfter+0x88>)
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3315      	adds	r3, #21
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002766:	79fa      	ldrb	r2, [r7, #7]
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <LinkTimerAfter+0x88>)
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	3314      	adds	r3, #20
 8002776:	79ba      	ldrb	r2, [r7, #6]
 8002778:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800277a:	79ba      	ldrb	r2, [r7, #6]
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <LinkTimerAfter+0x88>)
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3315      	adds	r3, #21
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	701a      	strb	r2, [r3, #0]

  return;
 800278e:	bf00      	nop
}
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000460 	.word	0x20000460

080027a0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	460a      	mov	r2, r1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80027b0:	4b29      	ldr	r3, [pc, #164]	; (8002858 <LinkTimerBefore+0xb8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	79ba      	ldrb	r2, [r7, #6]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d032      	beq.n	8002822 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80027bc:	79ba      	ldrb	r2, [r7, #6]
 80027be:	4927      	ldr	r1, [pc, #156]	; (800285c <LinkTimerBefore+0xbc>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	3314      	adds	r3, #20
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	4922      	ldr	r1, [pc, #136]	; (800285c <LinkTimerBefore+0xbc>)
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	3315      	adds	r3, #21
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80027e4:	79fa      	ldrb	r2, [r7, #7]
 80027e6:	491d      	ldr	r1, [pc, #116]	; (800285c <LinkTimerBefore+0xbc>)
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	3315      	adds	r3, #21
 80027f4:	79ba      	ldrb	r2, [r7, #6]
 80027f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80027f8:	79fa      	ldrb	r2, [r7, #7]
 80027fa:	4918      	ldr	r1, [pc, #96]	; (800285c <LinkTimerBefore+0xbc>)
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3314      	adds	r3, #20
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800280c:	79ba      	ldrb	r2, [r7, #6]
 800280e:	4913      	ldr	r1, [pc, #76]	; (800285c <LinkTimerBefore+0xbc>)
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	3314      	adds	r3, #20
 800281c:	79fa      	ldrb	r2, [r7, #7]
 800281e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002820:	e014      	b.n	800284c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002822:	79fa      	ldrb	r2, [r7, #7]
 8002824:	490d      	ldr	r1, [pc, #52]	; (800285c <LinkTimerBefore+0xbc>)
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	3315      	adds	r3, #21
 8002832:	79ba      	ldrb	r2, [r7, #6]
 8002834:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002836:	79ba      	ldrb	r2, [r7, #6]
 8002838:	4908      	ldr	r1, [pc, #32]	; (800285c <LinkTimerBefore+0xbc>)
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	3314      	adds	r3, #20
 8002846:	79fa      	ldrb	r2, [r7, #7]
 8002848:	701a      	strb	r2, [r3, #0]
  return;
 800284a:	bf00      	nop
}
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200004f0 	.word	0x200004f0
 800285c:	20000460 	.word	0x20000460

08002860 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800286a:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <linkTimer+0x144>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b06      	cmp	r3, #6
 8002872:	d118      	bne.n	80028a6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002874:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <linkTimer+0x144>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <linkTimer+0x148>)
 800287c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800287e:	4a49      	ldr	r2, [pc, #292]	; (80029a4 <linkTimer+0x144>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002884:	79fa      	ldrb	r2, [r7, #7]
 8002886:	4949      	ldr	r1, [pc, #292]	; (80029ac <linkTimer+0x14c>)
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	3315      	adds	r3, #21
 8002894:	2206      	movs	r2, #6
 8002896:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002898:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <linkTimer+0x150>)
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	81fb      	strh	r3, [r7, #14]
 80028a4:	e078      	b.n	8002998 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80028a6:	f000 f909 	bl	8002abc <ReturnTimeElapsed>
 80028aa:	4603      	mov	r3, r0
 80028ac:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80028ae:	79fa      	ldrb	r2, [r7, #7]
 80028b0:	493e      	ldr	r1, [pc, #248]	; (80029ac <linkTimer+0x14c>)
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	3308      	adds	r3, #8
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	79fa      	ldrb	r2, [r7, #7]
 80028c4:	4419      	add	r1, r3
 80028c6:	4839      	ldr	r0, [pc, #228]	; (80029ac <linkTimer+0x14c>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4403      	add	r3, r0
 80028d2:	3308      	adds	r3, #8
 80028d4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80028d6:	79fa      	ldrb	r2, [r7, #7]
 80028d8:	4934      	ldr	r1, [pc, #208]	; (80029ac <linkTimer+0x14c>)
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	3308      	adds	r3, #8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80028ea:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <linkTimer+0x144>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	4619      	mov	r1, r3
 80028f2:	4a2e      	ldr	r2, [pc, #184]	; (80029ac <linkTimer+0x14c>)
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	3308      	adds	r3, #8
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	429a      	cmp	r2, r3
 8002906:	d337      	bcc.n	8002978 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <linkTimer+0x144>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800290e:	7b7a      	ldrb	r2, [r7, #13]
 8002910:	4926      	ldr	r1, [pc, #152]	; (80029ac <linkTimer+0x14c>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	3315      	adds	r3, #21
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002922:	e013      	b.n	800294c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002924:	7b7a      	ldrb	r2, [r7, #13]
 8002926:	4921      	ldr	r1, [pc, #132]	; (80029ac <linkTimer+0x14c>)
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	3315      	adds	r3, #21
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002938:	7b7a      	ldrb	r2, [r7, #13]
 800293a:	491c      	ldr	r1, [pc, #112]	; (80029ac <linkTimer+0x14c>)
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	3315      	adds	r3, #21
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800294c:	7b3b      	ldrb	r3, [r7, #12]
 800294e:	2b06      	cmp	r3, #6
 8002950:	d00b      	beq.n	800296a <linkTimer+0x10a>
 8002952:	7b3a      	ldrb	r2, [r7, #12]
 8002954:	4915      	ldr	r1, [pc, #84]	; (80029ac <linkTimer+0x14c>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3308      	adds	r3, #8
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	429a      	cmp	r2, r3
 8002968:	d2dc      	bcs.n	8002924 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800296a:	7b7a      	ldrb	r2, [r7, #13]
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fecf 	bl	8002714 <LinkTimerAfter>
 8002976:	e00f      	b.n	8002998 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <linkTimer+0x144>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff0c 	bl	80027a0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <linkTimer+0x144>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <linkTimer+0x148>)
 8002990:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <linkTimer+0x144>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002998:	89fb      	ldrh	r3, [r7, #14]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200004f0 	.word	0x200004f0
 80029a8:	200004f1 	.word	0x200004f1
 80029ac:	20000460 	.word	0x20000460
 80029b0:	200004f4 	.word	0x200004f4

080029b4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	460a      	mov	r2, r1
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <UnlinkTimer+0xf8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	79fa      	ldrb	r2, [r7, #7]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d111      	bne.n	80029f4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <UnlinkTimer+0xf8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <UnlinkTimer+0xfc>)
 80029d8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80029da:	79fa      	ldrb	r2, [r7, #7]
 80029dc:	4935      	ldr	r1, [pc, #212]	; (8002ab4 <UnlinkTimer+0x100>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3315      	adds	r3, #21
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <UnlinkTimer+0xf8>)
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e03e      	b.n	8002a72 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80029f4:	79fa      	ldrb	r2, [r7, #7]
 80029f6:	492f      	ldr	r1, [pc, #188]	; (8002ab4 <UnlinkTimer+0x100>)
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3314      	adds	r3, #20
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002a08:	79fa      	ldrb	r2, [r7, #7]
 8002a0a:	492a      	ldr	r1, [pc, #168]	; (8002ab4 <UnlinkTimer+0x100>)
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3315      	adds	r3, #21
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002a1c:	79f9      	ldrb	r1, [r7, #7]
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	4824      	ldr	r0, [pc, #144]	; (8002ab4 <UnlinkTimer+0x100>)
 8002a22:	460b      	mov	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	440b      	add	r3, r1
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4403      	add	r3, r0
 8002a2c:	3315      	adds	r3, #21
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2d8      	uxtb	r0, r3
 8002a32:	4920      	ldr	r1, [pc, #128]	; (8002ab4 <UnlinkTimer+0x100>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3315      	adds	r3, #21
 8002a40:	4602      	mov	r2, r0
 8002a42:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d013      	beq.n	8002a72 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002a4a:	79f9      	ldrb	r1, [r7, #7]
 8002a4c:	7bba      	ldrb	r2, [r7, #14]
 8002a4e:	4819      	ldr	r0, [pc, #100]	; (8002ab4 <UnlinkTimer+0x100>)
 8002a50:	460b      	mov	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4403      	add	r3, r0
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b2d8      	uxtb	r0, r3
 8002a60:	4914      	ldr	r1, [pc, #80]	; (8002ab4 <UnlinkTimer+0x100>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3314      	adds	r3, #20
 8002a6e:	4602      	mov	r2, r0
 8002a70:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002a72:	79fa      	ldrb	r2, [r7, #7]
 8002a74:	490f      	ldr	r1, [pc, #60]	; (8002ab4 <UnlinkTimer+0x100>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	330c      	adds	r3, #12
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <UnlinkTimer+0xf8>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d107      	bne.n	8002aa0 <UnlinkTimer+0xec>
 8002a90:	79bb      	ldrb	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d104      	bne.n	8002aa0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <UnlinkTimer+0x104>)
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  return;
 8002a9e:	bf00      	nop
 8002aa0:	bf00      	nop
}
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	200004f0 	.word	0x200004f0
 8002ab0:	200004f1 	.word	0x200004f1
 8002ab4:	20000460 	.word	0x20000460
 8002ab8:	200004f4 	.word	0x200004f4

08002abc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <ReturnTimeElapsed+0x70>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d026      	beq.n	8002b1a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002acc:	f7ff fe02 	bl	80026d4 <ReadRtcSsrValue>
 8002ad0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <ReturnTimeElapsed+0x70>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d805      	bhi.n	8002ae8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <ReturnTimeElapsed+0x70>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	e00a      	b.n	8002afe <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <ReturnTimeElapsed+0x74>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <ReturnTimeElapsed+0x70>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <ReturnTimeElapsed+0x78>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <ReturnTimeElapsed+0x7c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	40d3      	lsrs	r3, r2
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	e001      	b.n	8002b1e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	b29b      	uxth	r3, r3
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200004f4 	.word	0x200004f4
 8002b30:	200004fc 	.word	0x200004fc
 8002b34:	200004fa 	.word	0x200004fa
 8002b38:	200004f9 	.word	0x200004f9

08002b3c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d108      	bne.n	8002b5e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002b4c:	f7ff fdc2 	bl	80026d4 <ReadRtcSsrValue>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <RestartWakeupCounter+0x9c>)
 8002b54:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002b56:	2003      	movs	r0, #3
 8002b58:	f001 fe51 	bl	80047fe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002b5c:	e039      	b.n	8002bd2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d803      	bhi.n	8002b6c <RestartWakeupCounter+0x30>
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <RestartWakeupCounter+0xa0>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d002      	beq.n	8002b72 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002b72:	bf00      	nop
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <RestartWakeupCounter+0xa4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f8      	beq.n	8002b74 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <RestartWakeupCounter+0xa4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <RestartWakeupCounter+0xa4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b92:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <RestartWakeupCounter+0xa8>)
 8002b96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b9a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f001 fe3c 	bl	800481a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <RestartWakeupCounter+0xac>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	490e      	ldr	r1, [pc, #56]	; (8002be8 <RestartWakeupCounter+0xac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002bb2:	f7ff fd8f 	bl	80026d4 <ReadRtcSsrValue>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <RestartWakeupCounter+0x9c>)
 8002bba:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <RestartWakeupCounter+0xa4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <RestartWakeupCounter+0xa4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bca:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002bcc:	f3af 8000 	nop.w
  return ;
 8002bd0:	bf00      	nop
}
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	200004f4 	.word	0x200004f4
 8002bdc:	200004f9 	.word	0x200004f9
 8002be0:	20000788 	.word	0x20000788
 8002be4:	58000800 	.word	0x58000800
 8002be8:	40002800 	.word	0x40002800

08002bec <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002bf2:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <RescheduleTimerList+0x11c>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d107      	bne.n	8002c10 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002c00:	bf00      	nop
 8002c02:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <RescheduleTimerList+0x120>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f8      	bne.n	8002c02 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002c10:	4b3e      	ldr	r3, [pc, #248]	; (8002d0c <RescheduleTimerList+0x120>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <RescheduleTimerList+0x120>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <RescheduleTimerList+0x124>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	493a      	ldr	r1, [pc, #232]	; (8002d14 <RescheduleTimerList+0x128>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	3308      	adds	r3, #8
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002c3a:	f7ff ff3f 	bl	8002abc <ReturnTimeElapsed>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d205      	bcs.n	8002c56 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <RescheduleTimerList+0x12c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e04d      	b.n	8002cf2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	4a30      	ldr	r2, [pc, #192]	; (8002d1c <RescheduleTimerList+0x130>)
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	4413      	add	r3, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d906      	bls.n	8002c76 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002c68:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <RescheduleTimerList+0x130>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <RescheduleTimerList+0x12c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e03d      	b.n	8002cf2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <RescheduleTimerList+0x12c>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c86:	e034      	b.n	8002cf2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	4922      	ldr	r1, [pc, #136]	; (8002d14 <RescheduleTimerList+0x128>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3308      	adds	r3, #8
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d20a      	bcs.n	8002cb6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	491c      	ldr	r1, [pc, #112]	; (8002d14 <RescheduleTimerList+0x128>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	3308      	adds	r3, #8
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e013      	b.n	8002cde <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	4916      	ldr	r1, [pc, #88]	; (8002d14 <RescheduleTimerList+0x128>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	1ac9      	subs	r1, r1, r3
 8002cce:	4811      	ldr	r0, [pc, #68]	; (8002d14 <RescheduleTimerList+0x128>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4403      	add	r3, r0
 8002cda:	3308      	adds	r3, #8
 8002cdc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	490c      	ldr	r1, [pc, #48]	; (8002d14 <RescheduleTimerList+0x128>)
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	3315      	adds	r3, #21
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d1c7      	bne.n	8002c88 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002cf8:	89bb      	ldrh	r3, [r7, #12]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff1e 	bl	8002b3c <RestartWakeupCounter>

  return ;
 8002d00:	bf00      	nop
}
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40002800 	.word	0x40002800
 8002d0c:	20000788 	.word	0x20000788
 8002d10:	200004f0 	.word	0x200004f0
 8002d14:	20000460 	.word	0x20000460
 8002d18:	200004f8 	.word	0x200004f8
 8002d1c:	200004fe 	.word	0x200004fe

08002d20 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d26:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2a:	617b      	str	r3, [r7, #20]
  return(result);
 8002d2c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002d30:	b672      	cpsid	i
}
 8002d32:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	22ca      	movs	r2, #202	; 0xca
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d3c:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2253      	movs	r2, #83	; 0x53
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002d44:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d52:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002d54:	4b52      	ldr	r3, [pc, #328]	; (8002ea0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002d5c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d60:	4950      	ldr	r1, [pc, #320]	; (8002ea4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d16e      	bne.n	8002e54 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002d76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d7a:	494a      	ldr	r1, [pc, #296]	; (8002ea4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002d8a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d8e:	4945      	ldr	r1, [pc, #276]	; (8002ea4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	3310      	adds	r3, #16
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d04c      	beq.n	8002e44 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002daa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002dae:	493d      	ldr	r1, [pc, #244]	; (8002ea4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	330d      	adds	r3, #13
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d124      	bne.n	8002e0e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fdf2 	bl	80029b4 <UnlinkTimer>
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002ddc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002de0:	4930      	ldr	r1, [pc, #192]	; (8002ea4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3304      	adds	r3, #4
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fa32 	bl	8003260 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	22ca      	movs	r2, #202	; 0xca
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2253      	movs	r2, #83	; 0x53
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e0c:	e012      	b.n	8002e34 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f99a 	bl	8003158 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ca      	movs	r2, #202	; 0xca
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2253      	movs	r2, #83	; 0x53
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	69b8      	ldr	r0, [r7, #24]
 8002e3e:	f000 fa95 	bl	800336c <HW_TS_RTC_Int_AppNot>
 8002e42:	e022      	b.n	8002e8a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002e44:	f7ff fed2 	bl	8002bec <RescheduleTimerList>
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	e01a      	b.n	8002e8a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002e54:	bf00      	nop
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f8      	beq.n	8002e56 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e74:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002e78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002e92:	bf00      	nop
}
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000788 	.word	0x20000788
 8002ea0:	200004f0 	.word	0x200004f0
 8002ea4:	20000460 	.word	0x20000460
 8002ea8:	200004f8 	.word	0x200004f8
 8002eac:	58000800 	.word	0x58000800

08002eb0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ebc:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <HW_TS_Init+0x188>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	22ca      	movs	r2, #202	; 0xca
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ec4:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HW_TS_Init+0x188>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2253      	movs	r2, #83	; 0x53
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HW_TS_Init+0x18c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HW_TS_Init+0x18c>)
 8002ed2:	f043 0320 	orr.w	r3, r3, #32
 8002ed6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002ed8:	4b58      	ldr	r3, [pc, #352]	; (800303c <HW_TS_Init+0x18c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f1c3 0304 	rsb	r3, r3, #4
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4b55      	ldr	r3, [pc, #340]	; (8003040 <HW_TS_Init+0x190>)
 8002eec:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002eee:	4b53      	ldr	r3, [pc, #332]	; (800303c <HW_TS_Init+0x18c>)
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ef6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002efa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	2a00      	cmp	r2, #0
 8002f0c:	d101      	bne.n	8002f12 <HW_TS_Init+0x62>
  {
    return 32U;
 8002f0e:	2220      	movs	r2, #32
 8002f10:	e003      	b.n	8002f1a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	40d3      	lsrs	r3, r2
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HW_TS_Init+0x194>)
 8002f24:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002f26:	4b45      	ldr	r3, [pc, #276]	; (800303c <HW_TS_Init+0x18c>)
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b44      	ldr	r3, [pc, #272]	; (8003048 <HW_TS_Init+0x198>)
 8002f38:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002f3a:	4b43      	ldr	r3, [pc, #268]	; (8003048 <HW_TS_Init+0x198>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	4a40      	ldr	r2, [pc, #256]	; (8003044 <HW_TS_Init+0x194>)
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <HW_TS_Init+0x190>)
 8002f4e:	7812      	ldrb	r2, [r2, #0]
 8002f50:	40d3      	lsrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d904      	bls.n	8002f68 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HW_TS_Init+0x19c>)
 8002f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	e003      	b.n	8002f70 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <HW_TS_Init+0x19c>)
 8002f6e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002f70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f74:	f7ff fb9c 	bl	80026b0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002f78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f7c:	f7ff fb84 	bl	8002688 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d13d      	bne.n	8003002 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002f86:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HW_TS_Init+0x1a0>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HW_TS_Init+0x1a4>)
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f92:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e00c      	b.n	8002fb4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002f9a:	7ffa      	ldrb	r2, [r7, #31]
 8002f9c:	492e      	ldr	r1, [pc, #184]	; (8003058 <HW_TS_Init+0x1a8>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	330c      	adds	r3, #12
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002fae:	7ffb      	ldrb	r3, [r7, #31]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	2b05      	cmp	r3, #5
 8002fb8:	d9ef      	bls.n	8002f9a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <HW_TS_Init+0x1ac>)
 8002fbc:	2206      	movs	r2, #6
 8002fbe:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HW_TS_Init+0x188>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HW_TS_Init+0x188>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fce:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HW_TS_Init+0x188>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HW_TS_Init+0x188>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002fe0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HW_TS_Init+0x1b0>)
 8002fe4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002fe8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002fea:	2003      	movs	r0, #3
 8002fec:	f001 fc15 	bl	800481a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HW_TS_Init+0x188>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HW_TS_Init+0x188>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e009      	b.n	8003016 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HW_TS_Init+0x188>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003010:	2003      	movs	r0, #3
 8003012:	f001 fbf4 	bl	80047fe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HW_TS_Init+0x188>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800301e:	2200      	movs	r2, #0
 8003020:	2103      	movs	r1, #3
 8003022:	2003      	movs	r0, #3
 8003024:	f001 fba5 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003028:	2003      	movs	r0, #3
 800302a:	f001 fbbc 	bl	80047a6 <HAL_NVIC_EnableIRQ>

  return;
 800302e:	bf00      	nop
}
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000788 	.word	0x20000788
 800303c:	40002800 	.word	0x40002800
 8003040:	200004f9 	.word	0x200004f9
 8003044:	200004fa 	.word	0x200004fa
 8003048:	200004fc 	.word	0x200004fc
 800304c:	200004fe 	.word	0x200004fe
 8003050:	200004f8 	.word	0x200004f8
 8003054:	200004f4 	.word	0x200004f4
 8003058:	20000460 	.word	0x20000460
 800305c:	200004f0 	.word	0x200004f0
 8003060:	58000800 	.word	0x58000800

08003064 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003064:	b480      	push	{r7}
 8003066:	b08b      	sub	sp, #44	; 0x2c
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307a:	f3ef 8310 	mrs	r3, PRIMASK
 800307e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003080:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003082:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003084:	b672      	cpsid	i
}
 8003086:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003088:	e004      	b.n	8003094 <HW_TS_Create+0x30>
  {
    loop++;
 800308a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800308e:	3301      	adds	r3, #1
 8003090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003098:	2b05      	cmp	r3, #5
 800309a:	d80c      	bhi.n	80030b6 <HW_TS_Create+0x52>
 800309c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030a0:	492c      	ldr	r1, [pc, #176]	; (8003154 <HW_TS_Create+0xf0>)
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	330c      	adds	r3, #12
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e9      	bne.n	800308a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d038      	beq.n	8003130 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80030be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030c2:	4924      	ldr	r1, [pc, #144]	; (8003154 <HW_TS_Create+0xf0>)
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	330c      	adds	r3, #12
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80030e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030e4:	491b      	ldr	r1, [pc, #108]	; (8003154 <HW_TS_Create+0xf0>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	3310      	adds	r3, #16
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80030f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030fa:	4916      	ldr	r1, [pc, #88]	; (8003154 <HW_TS_Create+0xf0>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	330d      	adds	r3, #13
 8003108:	79fa      	ldrb	r2, [r7, #7]
 800310a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800310c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003110:	4910      	ldr	r1, [pc, #64]	; (8003154 <HW_TS_Create+0xf0>)
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003126:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800312e:	e008      	b.n	8003142 <HW_TS_Create+0xde>
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f383 8810 	msr	PRIMASK, r3
}
 800313a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003146:	4618      	mov	r0, r3
 8003148:	372c      	adds	r7, #44	; 0x2c
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000460 	.word	0x20000460

08003158 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003162:	f3ef 8310 	mrs	r3, PRIMASK
 8003166:	60fb      	str	r3, [r7, #12]
  return(result);
 8003168:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800316a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800316c:	b672      	cpsid	i
}
 800316e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003170:	2003      	movs	r0, #3
 8003172:	f001 fb26 	bl	80047c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HW_TS_Stop+0xf0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	22ca      	movs	r2, #202	; 0xca
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
 800317e:	4b32      	ldr	r3, [pc, #200]	; (8003248 <HW_TS_Stop+0xf0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2253      	movs	r2, #83	; 0x53
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003186:	79fa      	ldrb	r2, [r7, #7]
 8003188:	4930      	ldr	r1, [pc, #192]	; (800324c <HW_TS_Stop+0xf4>)
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	330c      	adds	r3, #12
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d142      	bne.n	8003224 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fc06 	bl	80029b4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <HW_TS_Stop+0xf8>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d12f      	bne.n	8003214 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80031b4:	4b27      	ldr	r3, [pc, #156]	; (8003254 <HW_TS_Stop+0xfc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c0:	d107      	bne.n	80031d2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80031c2:	bf00      	nop
 80031c4:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HW_TS_Stop+0xf0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f8      	bne.n	80031c4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HW_TS_Stop+0xf0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HW_TS_Stop+0xf0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80031e2:	bf00      	nop
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HW_TS_Stop+0xf0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f8      	beq.n	80031e4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HW_TS_Stop+0xf0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HW_TS_Stop+0xf0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003202:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HW_TS_Stop+0x100>)
 8003206:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800320a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800320c:	2003      	movs	r0, #3
 800320e:	f001 fb04 	bl	800481a <HAL_NVIC_ClearPendingIRQ>
 8003212:	e007      	b.n	8003224 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <HW_TS_Stop+0x104>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	7cfa      	ldrb	r2, [r7, #19]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003220:	f7ff fce4 	bl	8002bec <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HW_TS_Stop+0xf0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	22ff      	movs	r2, #255	; 0xff
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800322c:	2003      	movs	r0, #3
 800322e:	f001 faba 	bl	80047a6 <HAL_NVIC_EnableIRQ>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800323e:	bf00      	nop
}
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000788 	.word	0x20000788
 800324c:	20000460 	.word	0x20000460
 8003250:	200004f0 	.word	0x200004f0
 8003254:	40002800 	.word	0x40002800
 8003258:	58000800 	.word	0x58000800
 800325c:	200004f1 	.word	0x200004f1

08003260 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800326c:	79fa      	ldrb	r2, [r7, #7]
 800326e:	493b      	ldr	r1, [pc, #236]	; (800335c <HW_TS_Start+0xfc>)
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	330c      	adds	r3, #12
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d103      	bne.n	800328c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff66 	bl	8003158 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328c:	f3ef 8310 	mrs	r3, PRIMASK
 8003290:	60fb      	str	r3, [r7, #12]
  return(result);
 8003292:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003296:	b672      	cpsid	i
}
 8003298:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800329a:	2003      	movs	r0, #3
 800329c:	f001 fa91 	bl	80047c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <HW_TS_Start+0x100>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	22ca      	movs	r2, #202	; 0xca
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HW_TS_Start+0x100>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2253      	movs	r2, #83	; 0x53
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80032b0:	79fa      	ldrb	r2, [r7, #7]
 80032b2:	492a      	ldr	r1, [pc, #168]	; (800335c <HW_TS_Start+0xfc>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	330c      	adds	r3, #12
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80032c4:	79fa      	ldrb	r2, [r7, #7]
 80032c6:	4925      	ldr	r1, [pc, #148]	; (800335c <HW_TS_Start+0xfc>)
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	3308      	adds	r3, #8
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80032d8:	79fa      	ldrb	r2, [r7, #7]
 80032da:	4920      	ldr	r1, [pc, #128]	; (800335c <HW_TS_Start+0xfc>)
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	3304      	adds	r3, #4
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fab6 	bl	8002860 <linkTimer>
 80032f4:	4603      	mov	r3, r0
 80032f6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HW_TS_Start+0x104>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <HW_TS_Start+0x108>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	7c7a      	ldrb	r2, [r7, #17]
 8003306:	429a      	cmp	r2, r3
 8003308:	d002      	beq.n	8003310 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800330a:	f7ff fc6f 	bl	8002bec <RescheduleTimerList>
 800330e:	e013      	b.n	8003338 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003310:	79fa      	ldrb	r2, [r7, #7]
 8003312:	4912      	ldr	r1, [pc, #72]	; (800335c <HW_TS_Start+0xfc>)
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	3308      	adds	r3, #8
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	8a7b      	ldrh	r3, [r7, #18]
 8003324:	79fa      	ldrb	r2, [r7, #7]
 8003326:	1ac9      	subs	r1, r1, r3
 8003328:	480c      	ldr	r0, [pc, #48]	; (800335c <HW_TS_Start+0xfc>)
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4403      	add	r3, r0
 8003334:	3308      	adds	r3, #8
 8003336:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HW_TS_Start+0x100>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003340:	2003      	movs	r0, #3
 8003342:	f001 fa30 	bl	80047a6 <HAL_NVIC_EnableIRQ>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003352:	bf00      	nop
}
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000460 	.word	0x20000460
 8003360:	20000788 	.word	0x20000788
 8003364:	200004f0 	.word	0x200004f0
 8003368:	200004f1 	.word	0x200004f1

0800336c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	460b      	mov	r3, r1
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4798      	blx	r3

  return;
 800337e:	bf00      	nop
}
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	4603      	mov	r3, r0
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	4613      	mov	r3, r2
 8003398:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HW_UART_Receive_IT+0x1e>
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d00d      	beq.n	80033c0 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80033a4:	e019      	b.n	80033da <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 80033a6:	4a0f      	ldr	r2, [pc, #60]	; (80033e4 <HW_UART_Receive_IT+0x5c>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HW_UART_Receive_IT+0x60>)
 80033ae:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HW_UART_Receive_IT+0x64>)
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	89bb      	ldrh	r3, [r7, #12]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	480b      	ldr	r0, [pc, #44]	; (80033e8 <HW_UART_Receive_IT+0x60>)
 80033ba:	f004 ff41 	bl	8008240 <HAL_UART_Receive_IT>
            break;
 80033be:	e00c      	b.n	80033da <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80033c0:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <HW_UART_Receive_IT+0x68>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HW_UART_Receive_IT+0x6c>)
 80033c8:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <HW_UART_Receive_IT+0x70>)
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	89bb      	ldrh	r3, [r7, #12]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4808      	ldr	r0, [pc, #32]	; (80033f4 <HW_UART_Receive_IT+0x6c>)
 80033d4:	f004 ff34 	bl	8008240 <HAL_UART_Receive_IT>
            break;
 80033d8:	bf00      	nop
    }

    return;
 80033da:	bf00      	nop
}
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000500 	.word	0x20000500
 80033e8:	200005e0 	.word	0x200005e0
 80033ec:	40013800 	.word	0x40013800
 80033f0:	20000508 	.word	0x20000508
 80033f4:	2000054c 	.word	0x2000054c
 80033f8:	40008000 	.word	0x40008000

080033fc <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	4603      	mov	r3, r0
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	4613      	mov	r3, r2
 800340c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HW_UART_Transmit_IT+0x1e>
 8003414:	2b02      	cmp	r3, #2
 8003416:	d00d      	beq.n	8003434 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003418:	e019      	b.n	800344e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HW_UART_Transmit_IT+0x5c>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HW_UART_Transmit_IT+0x60>)
 8003422:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HW_UART_Transmit_IT+0x64>)
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	89bb      	ldrh	r3, [r7, #12]
 8003428:	461a      	mov	r2, r3
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	480b      	ldr	r0, [pc, #44]	; (800345c <HW_UART_Transmit_IT+0x60>)
 800342e:	f004 fe73 	bl	8008118 <HAL_UART_Transmit_IT>
            break;
 8003432:	e00c      	b.n	800344e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <HW_UART_Transmit_IT+0x68>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HW_UART_Transmit_IT+0x6c>)
 800343c:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HW_UART_Transmit_IT+0x70>)
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	89bb      	ldrh	r3, [r7, #12]
 8003442:	461a      	mov	r2, r3
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	4808      	ldr	r0, [pc, #32]	; (8003468 <HW_UART_Transmit_IT+0x6c>)
 8003448:	f004 fe66 	bl	8008118 <HAL_UART_Transmit_IT>
            break;
 800344c:	bf00      	nop
    }

    return;
 800344e:	bf00      	nop
}
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000504 	.word	0x20000504
 800345c:	200005e0 	.word	0x200005e0
 8003460:	40013800 	.word	0x40013800
 8003464:	2000050c 	.word	0x2000050c
 8003468:	2000054c 	.word	0x2000054c
 800346c:	40008000 	.word	0x40008000

08003470 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	4613      	mov	r3, r2
 8003480:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003486:	2300      	movs	r3, #0
 8003488:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HW_UART_Transmit_DMA+0x26>
 8003490:	2b02      	cmp	r3, #2
 8003492:	d00f      	beq.n	80034b4 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003494:	e01d      	b.n	80034d2 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HW_UART_Transmit_DMA+0xa4>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800349c:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HW_UART_Transmit_DMA+0xa8>)
 800349e:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HW_UART_Transmit_DMA+0xac>)
 80034a0:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80034a2:	89bb      	ldrh	r3, [r7, #12]
 80034a4:	461a      	mov	r2, r3
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	481b      	ldr	r0, [pc, #108]	; (8003518 <HW_UART_Transmit_DMA+0xa8>)
 80034aa:	f004 ff15 	bl	80082d8 <HAL_UART_Transmit_DMA>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]
            break;
 80034b2:	e00e      	b.n	80034d2 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80034b4:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HW_UART_Transmit_DMA+0xb0>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HW_UART_Transmit_DMA+0xb4>)
 80034bc:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HW_UART_Transmit_DMA+0xb8>)
 80034be:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80034c0:	89bb      	ldrh	r3, [r7, #12]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	4817      	ldr	r0, [pc, #92]	; (8003524 <HW_UART_Transmit_DMA+0xb4>)
 80034c8:	f004 ff06 	bl	80082d8 <HAL_UART_Transmit_DMA>
 80034cc:	4603      	mov	r3, r0
 80034ce:	75fb      	strb	r3, [r7, #23]
            break;
 80034d0:	bf00      	nop
    }

    switch (hal_status)
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d817      	bhi.n	8003508 <HW_UART_Transmit_DMA+0x98>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HW_UART_Transmit_DMA+0x70>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	080034f7 	.word	0x080034f7
 80034e8:	080034fd 	.word	0x080034fd
 80034ec:	08003503 	.word	0x08003503
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75bb      	strb	r3, [r7, #22]
            break;
 80034f4:	e009      	b.n	800350a <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75bb      	strb	r3, [r7, #22]
            break;
 80034fa:	e006      	b.n	800350a <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80034fc:	2302      	movs	r3, #2
 80034fe:	75bb      	strb	r3, [r7, #22]
            break;
 8003500:	e003      	b.n	800350a <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003502:	2303      	movs	r3, #3
 8003504:	75bb      	strb	r3, [r7, #22]
            break;
 8003506:	e000      	b.n	800350a <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8003508:	bf00      	nop
    }

    return hw_status;
 800350a:	7dbb      	ldrb	r3, [r7, #22]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000504 	.word	0x20000504
 8003518:	200005e0 	.word	0x200005e0
 800351c:	40013800 	.word	0x40013800
 8003520:	2000050c 	.word	0x2000050c
 8003524:	2000054c 	.word	0x2000054c
 8003528:	40008000 	.word	0x40008000

0800352c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_UART_RxCpltCallback+0x4c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00a      	beq.n	8003554 <HAL_UART_RxCpltCallback+0x28>
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_UART_RxCpltCallback+0x50>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10f      	bne.n	8003564 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_UART_RxCpltCallback+0x54>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_UART_RxCpltCallback+0x54>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4798      	blx	r3
            }
            break;
 8003552:	e009      	b.n	8003568 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_UART_RxCpltCallback+0x58>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_UART_RxCpltCallback+0x58>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4798      	blx	r3
            }
            break;
 8003562:	e003      	b.n	800356c <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_UART_RxCpltCallback+0x42>
            break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_UART_RxCpltCallback+0x42>
            break;
 800356c:	bf00      	nop
    }

    return;
 800356e:	bf00      	nop
}
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40008000 	.word	0x40008000
 800357c:	40013800 	.word	0x40013800
 8003580:	20000500 	.word	0x20000500
 8003584:	20000508 	.word	0x20000508

08003588 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <HAL_UART_TxCpltCallback+0x4c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00a      	beq.n	80035b0 <HAL_UART_TxCpltCallback+0x28>
 800359a:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <HAL_UART_TxCpltCallback+0x50>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10f      	bne.n	80035c0 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_UART_TxCpltCallback+0x54>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_UART_TxCpltCallback+0x54>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4798      	blx	r3
            }
            break;
 80035ae:	e009      	b.n	80035c4 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_UART_TxCpltCallback+0x58>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_UART_TxCpltCallback+0x58>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4798      	blx	r3
            }
            break;
 80035be:	e003      	b.n	80035c8 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80035c0:	bf00      	nop
 80035c2:	e002      	b.n	80035ca <HAL_UART_TxCpltCallback+0x42>
            break;
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <HAL_UART_TxCpltCallback+0x42>
            break;
 80035c8:	bf00      	nop
    }

    return;
 80035ca:	bf00      	nop
}
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40008000 	.word	0x40008000
 80035d8:	40013800 	.word	0x40013800
 80035dc:	20000504 	.word	0x20000504
 80035e0:	2000050c 	.word	0x2000050c

080035e4 <LL_RCC_LSE_SetDriveCapability>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f023 0218 	bic.w	r2, r3, #24
 80035f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_AHB1_GRP1_EnableClock>:
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800361e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4313      	orrs	r3, r2
 8003626:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003634:	68fb      	ldr	r3, [r7, #12]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_AHB2_GRP1_EnableClock>:
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4313      	orrs	r3, r2
 8003658:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4013      	ands	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_APB1_GRP1_EnableClock>:
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4313      	orrs	r3, r2
 800368a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80036ac:	f000 fe78 	bl	80043a0 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 80036b0:	f7fe fdfc 	bl	80022ac <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80036b4:	f000 f824 	bl	8003700 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80036b8:	f000 f87e 	bl	80037b8 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80036bc:	f000 f898 	bl	80037f0 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80036c0:	f000 f9aa 	bl	8003a18 <MX_GPIO_Init>
	MX_DMA_Init();
 80036c4:	f000 f98e 	bl	80039e4 <MX_DMA_Init>
	MX_RF_Init();
 80036c8:	f000 f950 	bl	800396c <MX_RF_Init>
	MX_RTC_Init();
 80036cc:	f000 f956 	bl	800397c <MX_RTC_Init>
	MX_I2C1_Init();
 80036d0:	f000 f8a2 	bl	8003818 <MX_I2C1_Init>

	/*--[ Scanning Done ]--*/
	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 80036d4:	f7fe fdf8 	bl	80022c8 <MX_APPE_Init>
	app_algo_init();
 80036d8:	f7fe fd1a 	bl	8002110 <app_algo_init>

	sensirion_i2c_init(&hi2c1);
 80036dc:	4807      	ldr	r0, [pc, #28]	; (80036fc <main+0x54>)
 80036de:	f7fd f835 	bl	800074c <sensirion_i2c_init>

	sht4x_enable_low_power_mode(1);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7fd f8fc 	bl	80008e0 <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 80036e8:	4804      	ldr	r0, [pc, #16]	; (80036fc <main+0x54>)
 80036ea:	f7fd f91b 	bl	8000924 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x04);
 80036ee:	2004      	movs	r0, #4
 80036f0:	f7fd f9aa 	bl	8000a48 <stts22h_temp_data_rate_set>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 80036f4:	f7fe ff21 	bl	800253a <MX_APPE_Process>
 80036f8:	e7fc      	b.n	80036f4 <main+0x4c>
 80036fa:	bf00      	nop
 80036fc:	20000734 	.word	0x20000734

08003700 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b09a      	sub	sp, #104	; 0x68
 8003704:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003706:	f107 0320 	add.w	r3, r7, #32
 800370a:	2248      	movs	r2, #72	; 0x48
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f00a f99e 	bl	800da50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	611a      	str	r2, [r3, #16]
 8003722:	615a      	str	r2, [r3, #20]
 8003724:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8003726:	f002 fc81 	bl	800602c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800372a:	2000      	movs	r0, #0
 800372c:	f7ff ff5a 	bl	80035e4 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003730:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <SystemClock_Config+0xb4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003738:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <SystemClock_Config+0xb4>)
 800373a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <SystemClock_Config+0xb4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800374c:	2307      	movs	r3, #7
 800374e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003756:	2301      	movs	r3, #1
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800375a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003760:	2340      	movs	r3, #64	; 0x40
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003764:	2300      	movs	r3, #0
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003768:	f107 0320 	add.w	r3, r7, #32
 800376c:	4618      	mov	r0, r3
 800376e:	f003 f86f 	bl	8006850 <HAL_RCC_OscConfig>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SystemClock_Config+0x7c>
		Error_Handler();
 8003778:	f000 f978 	bl	8003a6c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 800377c:	236f      	movs	r3, #111	; 0x6f
 800377e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003780:	2302      	movs	r3, #2
 8003782:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fbcb 	bl	8006f38 <HAL_RCC_ClockConfig>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <SystemClock_Config+0xac>
		Error_Handler();
 80037a8:	f000 f960 	bl	8003a6c <Error_Handler>
	}
}
 80037ac:	bf00      	nop
 80037ae:	3768      	adds	r7, #104	; 0x68
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	58000400 	.word	0x58000400

080037b8 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b094      	sub	sp, #80	; 0x50
 80037bc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80037be:	463b      	mov	r3, r7
 80037c0:	2250      	movs	r2, #80	; 0x50
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f00a f943 	bl	800da50 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 80037ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ce:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80037d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
	//PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
	// PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80037d6:	463b      	mov	r3, r7
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 ffea 	bl	80077b2 <HAL_RCCEx_PeriphCLKConfig>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <PeriphCommonClock_Config+0x30>
		Error_Handler();
 80037e4:	f000 f942 	bl	8003a6c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 80037e8:	bf00      	nop
 80037ea:	3750      	adds	r7, #80	; 0x50
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <MX_IPCC_Init+0x20>)
 80037f6:	4a07      	ldr	r2, [pc, #28]	; (8003814 <MX_IPCC_Init+0x24>)
 80037f8:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <MX_IPCC_Init+0x20>)
 80037fc:	f002 fb90 	bl	8005f20 <HAL_IPCC_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_IPCC_Init+0x1a>
		Error_Handler();
 8003806:	f000 f931 	bl	8003a6c <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000510 	.word	0x20000510
 8003814:	58000c00 	.word	0x58000c00

08003818 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 800381e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003822:	f7ff ff27 	bl	8003674 <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	2002      	movs	r0, #2
 8003828:	f7ff ff0b 	bl	8003642 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800382c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003830:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 8003832:	2312      	movs	r3, #18
 8003834:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 8003836:	2301      	movs	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383a:	2303      	movs	r3, #3
 800383c:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 800383e:	2304      	movs	r3, #4
 8003840:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 8003842:	1d3b      	adds	r3, r7, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4820      	ldr	r0, [pc, #128]	; (80038c8 <MX_I2C1_Init+0xb0>)
 8003848:	f001 fbe6 	bl	8005018 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 800384c:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <MX_I2C1_Init+0xb4>)
 800384e:	4a20      	ldr	r2, [pc, #128]	; (80038d0 <MX_I2C1_Init+0xb8>)
 8003850:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <MX_I2C1_Init+0xb4>)
 8003854:	f640 6214 	movw	r2, #3604	; 0xe14
 8003858:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <MX_I2C1_Init+0xb4>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <MX_I2C1_Init+0xb4>)
 8003862:	2201      	movs	r2, #1
 8003864:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <MX_I2C1_Init+0xb4>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <MX_I2C1_Init+0xb4>)
 800386e:	2200      	movs	r2, #0
 8003870:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <MX_I2C1_Init+0xb4>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <MX_I2C1_Init+0xb4>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <MX_I2C1_Init+0xb4>)
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003884:	4811      	ldr	r0, [pc, #68]	; (80038cc <MX_I2C1_Init+0xb4>)
 8003886:	f001 fda5 	bl	80053d4 <HAL_I2C_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_I2C1_Init+0x7c>
		Error_Handler();
 8003890:	f000 f8ec 	bl	8003a6c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8003894:	2100      	movs	r1, #0
 8003896:	480d      	ldr	r0, [pc, #52]	; (80038cc <MX_I2C1_Init+0xb4>)
 8003898:	f002 fa98 	bl	8005dcc <HAL_I2CEx_ConfigAnalogFilter>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80038a2:	f000 f8e3 	bl	8003a6c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80038a6:	2100      	movs	r1, #0
 80038a8:	4808      	ldr	r0, [pc, #32]	; (80038cc <MX_I2C1_Init+0xb4>)
 80038aa:	f002 fada 	bl	8005e62 <HAL_I2CEx_ConfigDigitalFilter>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_I2C1_Init+0xa0>
		Error_Handler();
 80038b4:	f000 f8da 	bl	8003a6c <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80038b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80038bc:	f002 fb1e 	bl	8005efc <HAL_I2CEx_EnableFastModePlus>
}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	48000400 	.word	0x48000400
 80038cc:	20000734 	.word	0x20000734
 80038d0:	40005400 	.word	0x40005400

080038d4 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_LPUART1_UART_Init(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 80038da:	4a23      	ldr	r2, [pc, #140]	; (8003968 <MX_LPUART1_UART_Init+0x94>)
 80038dc:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 80038e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038e4:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80038f8:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 80038fa:	220c      	movs	r2, #12
 80038fc:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038fe:	4b19      	ldr	r3, [pc, #100]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 8003906:	2200      	movs	r2, #0
 8003908:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 800390c:	2200      	movs	r2, #0
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 8003912:	2200      	movs	r2, #0
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 8003918:	2200      	movs	r2, #0
 800391a:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 800391c:	4811      	ldr	r0, [pc, #68]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 800391e:	f004 fbab 	bl	8008078 <HAL_UART_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 8003928:	f000 f8a0 	bl	8003a6c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 800392c:	2100      	movs	r1, #0
 800392e:	480d      	ldr	r0, [pc, #52]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 8003930:	f006 fe31 	bl	800a596 <HAL_UARTEx_SetTxFifoThreshold>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800393a:	f000 f897 	bl	8003a6c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 800393e:	2100      	movs	r1, #0
 8003940:	4808      	ldr	r0, [pc, #32]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 8003942:	f006 fe66 	bl	800a612 <HAL_UARTEx_SetRxFifoThreshold>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800394c:	f000 f88e 	bl	8003a6c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8003950:	4804      	ldr	r0, [pc, #16]	; (8003964 <MX_LPUART1_UART_Init+0x90>)
 8003952:	f006 fde7 	bl	800a524 <HAL_UARTEx_DisableFifoMode>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 800395c:	f000 f886 	bl	8003a6c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	2000054c 	.word	0x2000054c
 8003968:	40008000 	.word	0x40008000

0800396c <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003980:	4b16      	ldr	r3, [pc, #88]	; (80039dc <MX_RTC_Init+0x60>)
 8003982:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <MX_RTC_Init+0x64>)
 8003984:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <MX_RTC_Init+0x60>)
 8003988:	2200      	movs	r2, #0
 800398a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <MX_RTC_Init+0x60>)
 800398e:	220f      	movs	r2, #15
 8003990:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <MX_RTC_Init+0x60>)
 8003994:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003998:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <MX_RTC_Init+0x60>)
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <MX_RTC_Init+0x60>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <MX_RTC_Init+0x60>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <MX_RTC_Init+0x60>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80039b2:	480a      	ldr	r0, [pc, #40]	; (80039dc <MX_RTC_Init+0x60>)
 80039b4:	f004 f984 	bl	8007cc0 <HAL_RTC_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_RTC_Init+0x46>
		Error_Handler();
 80039be:	f000 f855 	bl	8003a6c <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_RTC_Init+0x60>)
 80039c8:	f004 fa7a 	bl	8007ec0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80039d2:	f000 f84b 	bl	8003a6c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000788 	.word	0x20000788
 80039e0:	40002800 	.word	0x40002800

080039e4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80039e8:	2004      	movs	r0, #4
 80039ea:	f7ff fe11 	bl	8003610 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80039ee:	2001      	movs	r0, #1
 80039f0:	f7ff fe0e 	bl	8003610 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	200b      	movs	r0, #11
 80039fa:	f000 feba 	bl	8004772 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80039fe:	200b      	movs	r0, #11
 8003a00:	f000 fed1 	bl	80047a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	200c      	movs	r0, #12
 8003a0a:	f000 feb2 	bl	8004772 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003a0e:	200c      	movs	r0, #12
 8003a10:	f000 fec9 	bl	80047a6 <HAL_NVIC_EnableIRQ>

}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003a1e:	2004      	movs	r0, #4
 8003a20:	f7ff fe0f 	bl	8003642 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a24:	2001      	movs	r0, #1
 8003a26:	f7ff fe0c 	bl	8003642 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	f7ff fe09 	bl	8003642 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a42:	2301      	movs	r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4805      	ldr	r0, [pc, #20]	; (8003a68 <MX_GPIO_Init+0x50>)
 8003a54:	f001 fae0 	bl	8005018 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4803      	ldr	r0, [pc, #12]	; (8003a68 <MX_GPIO_Init+0x50>)
 8003a5c:	f001 fc64 	bl	8005328 <HAL_GPIO_TogglePin>

}
 8003a60:	bf00      	nop
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	48000800 	.word	0x48000800

08003a6c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_AHB2_GRP1_EnableClock>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_AHB3_GRP1_EnableClock>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_APB1_GRP1_EnableClock>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b50:	68fb      	ldr	r3, [r7, #12]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_APB1_GRP2_EnableClock>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_APB2_GRP1_EnableClock>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003bc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bca:	f7ff ff96 	bl	8003afa <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f000 fdcd 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f000 fde4 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2004      	movs	r0, #4
 8003be4:	f000 fdc5 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003be8:	2004      	movs	r0, #4
 8003bea:	f000 fddc 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	2005      	movs	r0, #5
 8003bf4:	f000 fdbd 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003bf8:	2005      	movs	r0, #5
 8003bfa:	f000 fdd4 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	2015      	movs	r0, #21
 8003c04:	f000 fdb5 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003c08:	2015      	movs	r0, #21
 8003c0a:	f000 fdcc 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	202b      	movs	r0, #43	; 0x2b
 8003c14:	f000 fdad 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003c18:	202b      	movs	r0, #43	; 0x2b
 8003c1a:	f000 fdc4 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	202e      	movs	r0, #46	; 0x2e
 8003c24:	f000 fda5 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003c28:	202e      	movs	r0, #46	; 0x2e
 8003c2a:	f000 fdbc 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	2036      	movs	r0, #54	; 0x36
 8003c34:	f000 fd9d 	bl	8004772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003c38:	2036      	movs	r0, #54	; 0x36
 8003c3a:	f000 fdb4 	bl	80047a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <HAL_IPCC_MspInit+0x44>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d113      	bne.n	8003c7e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003c56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c5a:	f7ff ff4e 	bl	8003afa <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	202c      	movs	r0, #44	; 0x2c
 8003c64:	f000 fd85 	bl	8004772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003c68:	202c      	movs	r0, #44	; 0x2c
 8003c6a:	f000 fd9c 	bl	80047a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	202d      	movs	r0, #45	; 0x2d
 8003c74:	f000 fd7d 	bl	8004772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003c78:	202d      	movs	r0, #45	; 0x2d
 8003c7a:	f000 fd94 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	58000c00 	.word	0x58000c00

08003c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b09c      	sub	sp, #112	; 0x70
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	2250      	movs	r2, #80	; 0x50
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f009 fecf 	bl	800da50 <memset>
  if(huart->Instance==LPUART1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a67      	ldr	r2, [pc, #412]	; (8003e54 <HAL_UART_MspInit+0x1c8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d156      	bne.n	8003d6a <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 fd72 	bl	80077b2 <HAL_RCCEx_PeriphCLKConfig>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003cd4:	f7ff feca 	bl	8003a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f7ff ff40 	bl	8003b5e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f7ff fef2 	bl	8003ac8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d02:	f001 f989 	bl	8005018 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d08:	4a54      	ldr	r2, [pc, #336]	; (8003e5c <HAL_UART_MspInit+0x1d0>)
 8003d0a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003d0c:	4b52      	ldr	r3, [pc, #328]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d0e:	2211      	movs	r2, #17
 8003d10:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d12:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d14:	2210      	movs	r2, #16
 8003d16:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d18:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d24:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d2a:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003d30:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d36:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003d3c:	4846      	ldr	r0, [pc, #280]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d3e:	f000 fd7b 	bl	8004838 <HAL_DMA_Init>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003d48:	f7ff fe90 	bl	8003a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a42      	ldr	r2, [pc, #264]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d50:	67da      	str	r2, [r3, #124]	; 0x7c
 8003d52:	4a41      	ldr	r2, [pc, #260]	; (8003e58 <HAL_UART_MspInit+0x1cc>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	2025      	movs	r0, #37	; 0x25
 8003d5e:	f000 fd08 	bl	8004772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003d62:	2025      	movs	r0, #37	; 0x25
 8003d64:	f000 fd1f 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003d68:	e06f      	b.n	8003e4a <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3c      	ldr	r2, [pc, #240]	; (8003e60 <HAL_UART_MspInit+0x1d4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d16a      	bne.n	8003e4a <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d74:	2301      	movs	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 fd16 	bl	80077b2 <HAL_RCCEx_PeriphCLKConfig>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8003d8c:	f7ff fe6e 	bl	8003a6c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d94:	f7ff fefc 	bl	8003b90 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7ff fe95 	bl	8003ac8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	2002      	movs	r0, #2
 8003da0:	f7ff fe92 	bl	8003ac8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	2300      	movs	r3, #0
 8003db4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003db6:	2307      	movs	r3, #7
 8003db8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc4:	f001 f928 	bl	8005018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dc8:	23c0      	movs	r3, #192	; 0xc0
 8003dca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dd8:	2307      	movs	r3, #7
 8003dda:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ddc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003de0:	4619      	mov	r1, r3
 8003de2:	4820      	ldr	r0, [pc, #128]	; (8003e64 <HAL_UART_MspInit+0x1d8>)
 8003de4:	f001 f918 	bl	8005018 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003de8:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003dea:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_UART_MspInit+0x1e0>)
 8003dec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003df0:	220f      	movs	r2, #15
 8003df2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003df6:	2210      	movs	r2, #16
 8003df8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e06:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e0c:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e1e:	4812      	ldr	r0, [pc, #72]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e20:	f000 fd0a 	bl	8004838 <HAL_DMA_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8003e2a:	f7ff fe1f 	bl	8003a6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e32:	67da      	str	r2, [r3, #124]	; 0x7c
 8003e34:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <HAL_UART_MspInit+0x1dc>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	2024      	movs	r0, #36	; 0x24
 8003e40:	f000 fc97 	bl	8004772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e44:	2024      	movs	r0, #36	; 0x24
 8003e46:	f000 fcae 	bl	80047a6 <HAL_NVIC_EnableIRQ>
}
 8003e4a:	bf00      	nop
 8003e4c:	3770      	adds	r7, #112	; 0x70
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40008000 	.word	0x40008000
 8003e58:	20000674 	.word	0x20000674
 8003e5c:	40020008 	.word	0x40020008
 8003e60:	40013800 	.word	0x40013800
 8003e64:	48000400 	.word	0x48000400
 8003e68:	200006d4 	.word	0x200006d4
 8003e6c:	4002001c 	.word	0x4002001c

08003e70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b096      	sub	sp, #88	; 0x58
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e78:	f107 0308 	add.w	r3, r7, #8
 8003e7c:	2250      	movs	r2, #80	; 0x50
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f009 fde5 	bl	800da50 <memset>
  if(hrtc->Instance==RTC)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_RTC_MspInit+0x80>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d12b      	bne.n	8003ee8 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003e90:	f002 f8cc 	bl	800602c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003e94:	f002 f8ca 	bl	800602c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003e98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e9c:	f7ff fded 	bl	8003a7a <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ea4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 fc7e 	bl	80077b2 <HAL_RCCEx_PeriphCLKConfig>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003ebc:	f7ff fdd6 	bl	8003a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ec0:	f7ff fdf1 	bl	8003aa6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003ec4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003ec8:	f7ff fe30 	bl	8003b2c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2003      	movs	r0, #3
 8003ed2:	f000 fc4e 	bl	8004772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003ed6:	2003      	movs	r0, #3
 8003ed8:	f000 fc65 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <HAL_RTC_MspInit+0x80>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a03      	ldr	r2, [pc, #12]	; (8003ef0 <HAL_RTC_MspInit+0x80>)
 8003ee2:	f023 0307 	bic.w	r3, r3, #7
 8003ee6:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003ee8:	bf00      	nop
 8003eea:	3758      	adds	r7, #88	; 0x58
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40002800 	.word	0x40002800

08003ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f06:	e7fe      	b.n	8003f06 <HardFault_Handler+0x4>

08003f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <MemManage_Handler+0x4>

08003f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f12:	e7fe      	b.n	8003f12 <BusFault_Handler+0x4>

08003f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <UsageFault_Handler+0x4>

08003f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f48:	f000 fa84 	bl	8004454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003f54:	f002 f8d0 	bl	80060f8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003f60:	f7fe fede 	bl	8002d20 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003f6c:	f000 ff96 	bl	8004e9c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <DMA1_Channel1_IRQHandler+0x10>)
 8003f8a:	f000 fe36 	bl	8004bfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000674 	.word	0x20000674

08003f98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f9c:	4802      	ldr	r0, [pc, #8]	; (8003fa8 <DMA1_Channel2_IRQHandler+0x10>)
 8003f9e:	f000 fe2c 	bl	8004bfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200006d4 	.word	0x200006d4

08003fac <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <USART1_IRQHandler+0x10>)
 8003fc2:	f004 fa09 	bl	80083d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200005e0 	.word	0x200005e0

08003fd0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <LPUART1_IRQHandler+0x10>)
 8003fd6:	f004 f9ff 	bl	80083d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	2000054c 	.word	0x2000054c

08003fe4 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003ff6:	f7fd fead 	bl	8001d54 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004002:	f7fd ff01 	bl	8001e08 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}

0800400a <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800400e:	f001 f9bd 	bl	800538c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}

08004016 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8004028:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800402c:	f001 f996 	bl	800535c <HAL_GPIO_EXTI_IRQHandler>
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}

08004034 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8004034:	b5b0      	push	{r4, r5, r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
 8004040:	4613      	mov	r3, r2
 8004042:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8004044:	787b      	ldrb	r3, [r7, #1]
 8004046:	3b01      	subs	r3, #1
 8004048:	2b04      	cmp	r3, #4
 800404a:	d83e      	bhi.n	80040ca <logRegion+0x96>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <logRegion+0x20>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004069 	.word	0x08004069
 8004058:	0800407d 	.word	0x0800407d
 800405c:	08004091 	.word	0x08004091
 8004060:	080040a3 	.word	0x080040a3
 8004064:	080040b7 	.word	0x080040b7
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <logRegion+0xc4>)
 800406e:	461c      	mov	r4, r3
 8004070:	4615      	mov	r5, r2
 8004072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	7023      	strb	r3, [r4, #0]
      break;
 800407a:	e02f      	b.n	80040dc <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 800407c:	f107 0308 	add.w	r3, r7, #8
 8004080:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <logRegion+0xc8>)
 8004082:	461c      	mov	r4, r3
 8004084:	4615      	mov	r5, r2
 8004086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	6023      	str	r3, [r4, #0]
      break;
 800408e:	e025      	b.n	80040dc <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 8004090:	f107 0308 	add.w	r3, r7, #8
 8004094:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <logRegion+0xcc>)
 8004096:	461c      	mov	r4, r3
 8004098:	4613      	mov	r3, r2
 800409a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800409c:	c407      	stmia	r4!, {r0, r1, r2}
 800409e:	8023      	strh	r3, [r4, #0]
      break;
 80040a0:	e01c      	b.n	80040dc <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4a17      	ldr	r2, [pc, #92]	; (8004104 <logRegion+0xd0>)
 80040a8:	461c      	mov	r4, r3
 80040aa:	4615      	mov	r5, r2
 80040ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	8023      	strh	r3, [r4, #0]
      break;
 80040b4:	e012      	b.n	80040dc <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <logRegion+0xd4>)
 80040bc:	461c      	mov	r4, r3
 80040be:	4615      	mov	r5, r2
 80040c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	7023      	strb	r3, [r4, #0]
      break;
 80040c8:	e008      	b.n	80040dc <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4a0f      	ldr	r2, [pc, #60]	; (800410c <logRegion+0xd8>)
 80040d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040d4:	6018      	str	r0, [r3, #0]
 80040d6:	3304      	adds	r3, #4
 80040d8:	7019      	strb	r1, [r3, #0]
      break;
 80040da:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80040dc:	8879      	ldrh	r1, [r7, #2]
 80040de:	f107 0308 	add.w	r3, r7, #8
 80040e2:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <logRegion+0xdc>)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f00a f8b1 	bl	800e24c <sniprintf>
 80040ea:	4603      	mov	r3, r0
 80040ec:	b29b      	uxth	r3, r3
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3728      	adds	r7, #40	; 0x28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bdb0      	pop	{r4, r5, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	0800f670 	.word	0x0800f670
 80040fc:	0800f684 	.word	0x0800f684
 8004100:	0800f698 	.word	0x0800f698
 8004104:	0800f6a8 	.word	0x0800f6a8
 8004108:	0800f6bc 	.word	0x0800f6bc
 800410c:	0800f6d0 	.word	0x0800f6d0
 8004110:	0800f6d8 	.word	0x0800f6d8

08004114 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d00a      	beq.n	800413a <levelToString+0x26>
 8004124:	2b03      	cmp	r3, #3
 8004126:	dc0a      	bgt.n	800413e <levelToString+0x2a>
 8004128:	2b01      	cmp	r3, #1
 800412a:	d002      	beq.n	8004132 <levelToString+0x1e>
 800412c:	2b02      	cmp	r3, #2
 800412e:	d002      	beq.n	8004136 <levelToString+0x22>
 8004130:	e005      	b.n	800413e <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <levelToString+0x38>)
 8004134:	e004      	b.n	8004140 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <levelToString+0x3c>)
 8004138:	e002      	b.n	8004140 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <levelToString+0x40>)
 800413c:	e000      	b.n	8004140 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <levelToString+0x44>)
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	0800f6dc 	.word	0x0800f6dc
 8004150:	0800f6e4 	.word	0x0800f6e4
 8004154:	0800f6ec 	.word	0x0800f6ec
 8004158:	0800f6f4 	.word	0x0800f6f4

0800415c <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 800416c:	887c      	ldrh	r4, [r7, #2]
 800416e:	787b      	ldrb	r3, [r7, #1]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ffcf 	bl	8004114 <levelToString>
 8004176:	4603      	mov	r3, r0
 8004178:	4a05      	ldr	r2, [pc, #20]	; (8004190 <logLevel+0x34>)
 800417a:	4621      	mov	r1, r4
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f00a f865 	bl	800e24c <sniprintf>
 8004182:	4603      	mov	r3, r0
 8004184:	b29b      	uxth	r3, r3
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}
 800418e:	bf00      	nop
 8004190:	0800f6fc 	.word	0x0800f6fc

08004194 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8004194:	b40c      	push	{r2, r3}
 8004196:	b580      	push	{r7, lr}
 8004198:	b0c4      	sub	sp, #272	; 0x110
 800419a:	af00      	add	r7, sp, #0
 800419c:	4602      	mov	r2, r0
 800419e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041a2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041ac:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80041b0:	460a      	mov	r2, r1
 80041b2:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80041ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80041be:	f107 020c 	add.w	r2, r7, #12
 80041c2:	18d0      	adds	r0, r2, r3
 80041c4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80041c8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80041cc:	b299      	uxth	r1, r3
 80041ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041d2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	f7ff ffbf 	bl	800415c <logLevel>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80041e6:	4413      	add	r3, r2
 80041e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80041ec:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80041f0:	f107 020c 	add.w	r2, r7, #12
 80041f4:	18d0      	adds	r0, r2, r3
 80041f6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80041fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80041fe:	b299      	uxth	r1, r3
 8004200:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004204:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f7ff ff12 	bl	8004034 <logRegion>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004218:	4413      	add	r3, r2
 800421a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800421e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8004222:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800422a:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800422c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004230:	f107 020c 	add.w	r2, r7, #12
 8004234:	18d0      	adds	r0, r2, r3
 8004236:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800423a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 800423e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800424c:	f00a f85e 	bl	800e30c <vsniprintf>
 8004250:	4603      	mov	r3, r0
 8004252:	b29a      	uxth	r2, r3
 8004254:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004258:	4413      	add	r3, r2
 800425a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 800425e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8004268:	461a      	mov	r2, r3
 800426a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800426e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004272:	210d      	movs	r1, #13
 8004274:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8004276:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8004280:	461a      	mov	r2, r3
 8004282:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800428a:	210a      	movs	r1, #10
 800428c:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 800428e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8004298:	461a      	mov	r2, r3
 800429a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800429e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 80042a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042aa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d805      	bhi.n	80042c0 <logApplication+0x12c>
  {
    printf("%s", logString);
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4619      	mov	r1, r3
 80042ba:	4805      	ldr	r0, [pc, #20]	; (80042d0 <logApplication+0x13c>)
 80042bc:	f009 ff9e 	bl	800e1fc <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80042c0:	bf00      	nop
 80042c2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80042c6:	46bd      	mov	sp, r7
 80042c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042cc:	b002      	add	sp, #8
 80042ce:	4770      	bx	lr
 80042d0:	0800f6fc 	.word	0x0800f6fc

080042d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <SystemInit+0xa0>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80042de:	4b25      	ldr	r3, [pc, #148]	; (8004374 <SystemInit+0xa0>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	4a23      	ldr	r2, [pc, #140]	; (8004374 <SystemInit+0xa0>)
 80042e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004306:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <SystemInit+0xa4>)
 8004314:	4013      	ands	r3, r2
 8004316:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004324:	f023 0305 	bic.w	r3, r3, #5
 8004328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <SystemInit+0xa8>)
 8004346:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	4a0b      	ldr	r2, [pc, #44]	; (800437c <SystemInit+0xa8>)
 800434e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800435a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00
 8004378:	faf6fefb 	.word	0xfaf6fefb
 800437c:	22041000 	.word	0x22041000

08004380 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6053      	str	r3, [r2, #4]
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e0042000 	.word	0xe0042000

080043a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <HAL_Init+0x3c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <HAL_Init+0x3c>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b6:	2003      	movs	r0, #3
 80043b8:	f000 f9d0 	bl	800475c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043bc:	2000      	movs	r0, #0
 80043be:	f000 f80f 	bl	80043e0 <HAL_InitTick>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	71fb      	strb	r3, [r7, #7]
 80043cc:	e001      	b.n	80043d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043ce:	f7ff fbf8 	bl	8003bc2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043d2:	79fb      	ldrb	r3, [r7, #7]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	58004000 	.word	0x58004000

080043e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <HAL_InitTick+0x6c>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d024      	beq.n	800443e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80043f4:	f002 ff4c 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_InitTick+0x6c>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	4619      	mov	r1, r3
 8004400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004404:	fbb3 f3f1 	udiv	r3, r3, r1
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f9ea 	bl	80047e6 <HAL_SYSTICK_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10f      	bne.n	8004438 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b0f      	cmp	r3, #15
 800441c:	d809      	bhi.n	8004432 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800441e:	2200      	movs	r2, #0
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	f000 f9a4 	bl	8004772 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_InitTick+0x70>)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e007      	b.n	8004442 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e004      	b.n	8004442 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	e001      	b.n	8004442 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000034 	.word	0x20000034
 8004450:	20000030 	.word	0x20000030

08004454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_IncTick+0x20>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_IncTick+0x24>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4413      	add	r3, r2
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_IncTick+0x24>)
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000034 	.word	0x20000034
 8004478:	200007b8 	.word	0x200007b8

0800447c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return uwTick;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_GetTick+0x14>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	200007b8 	.word	0x200007b8

08004494 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_GetTickPrio+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000030 	.word	0x20000030

080044ac <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <HAL_GetTickFreq+0x14>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000034 	.word	0x20000034

080044c4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80044c8:	f7ff ff5a 	bl	8004380 <LL_DBGMCU_EnableDBGSleepMode>
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <__NVIC_SetPriorityGrouping+0x44>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044ec:	4013      	ands	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004502:	4a04      	ldr	r2, [pc, #16]	; (8004514 <__NVIC_SetPriorityGrouping+0x44>)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	60d3      	str	r3, [r2, #12]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <__NVIC_GetPriorityGrouping+0x18>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	f003 0307 	and.w	r3, r3, #7
}
 8004526:	4618      	mov	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	2b00      	cmp	r3, #0
 8004544:	db0b      	blt.n	800455e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	f003 021f 	and.w	r2, r3, #31
 800454c:	4907      	ldr	r1, [pc, #28]	; (800456c <__NVIC_EnableIRQ+0x38>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2001      	movs	r0, #1
 8004556:	fa00 f202 	lsl.w	r2, r0, r2
 800455a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	e000e100 	.word	0xe000e100

08004570 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	db12      	blt.n	80045a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	490a      	ldr	r1, [pc, #40]	; (80045b4 <__NVIC_DisableIRQ+0x44>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2001      	movs	r0, #1
 8004592:	fa00 f202 	lsl.w	r2, r0, r2
 8004596:	3320      	adds	r3, #32
 8004598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800459c:	f3bf 8f4f 	dsb	sy
}
 80045a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045a2:	f3bf 8f6f 	isb	sy
}
 80045a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	db0c      	blt.n	80045e4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	f003 021f 	and.w	r2, r3, #31
 80045d0:	4907      	ldr	r1, [pc, #28]	; (80045f0 <__NVIC_SetPendingIRQ+0x38>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	2001      	movs	r0, #1
 80045da:	fa00 f202 	lsl.w	r2, r0, r2
 80045de:	3340      	adds	r3, #64	; 0x40
 80045e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000e100 	.word	0xe000e100

080045f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	2b00      	cmp	r3, #0
 8004604:	db0c      	blt.n	8004620 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	4907      	ldr	r1, [pc, #28]	; (800462c <__NVIC_ClearPendingIRQ+0x38>)
 800460e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2001      	movs	r0, #1
 8004616:	fa00 f202 	lsl.w	r2, r0, r2
 800461a:	3360      	adds	r3, #96	; 0x60
 800461c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100

08004630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db0a      	blt.n	800465a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	490c      	ldr	r1, [pc, #48]	; (800467c <__NVIC_SetPriority+0x4c>)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	440b      	add	r3, r1
 8004654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004658:	e00a      	b.n	8004670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4908      	ldr	r1, [pc, #32]	; (8004680 <__NVIC_SetPriority+0x50>)
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3b04      	subs	r3, #4
 8004668:	0112      	lsls	r2, r2, #4
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	440b      	add	r3, r1
 800466e:	761a      	strb	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000e100 	.word	0xe000e100
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	; 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	bf28      	it	cs
 80046a2:	2304      	movcs	r3, #4
 80046a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d902      	bls.n	80046b4 <NVIC_EncodePriority+0x30>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b03      	subs	r3, #3
 80046b2:	e000      	b.n	80046b6 <NVIC_EncodePriority+0x32>
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43da      	mvns	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	401a      	ands	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046cc:	f04f 31ff 	mov.w	r1, #4294967295
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	43d9      	mvns	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046dc:	4313      	orrs	r3, r2
         );
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80046f0:	f3bf 8f4f 	dsb	sy
}
 80046f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <__NVIC_SystemReset+0x24>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80046fe:	4904      	ldr	r1, [pc, #16]	; (8004710 <__NVIC_SystemReset+0x24>)
 8004700:	4b04      	ldr	r3, [pc, #16]	; (8004714 <__NVIC_SystemReset+0x28>)
 8004702:	4313      	orrs	r3, r2
 8004704:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004706:	f3bf 8f4f 	dsb	sy
}
 800470a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <__NVIC_SystemReset+0x20>
 8004710:	e000ed00 	.word	0xe000ed00
 8004714:	05fa0004 	.word	0x05fa0004

08004718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3b01      	subs	r3, #1
 8004724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004728:	d301      	bcc.n	800472e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800472a:	2301      	movs	r3, #1
 800472c:	e00f      	b.n	800474e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800472e:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <SysTick_Config+0x40>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3b01      	subs	r3, #1
 8004734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004736:	210f      	movs	r1, #15
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	f7ff ff78 	bl	8004630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <SysTick_Config+0x40>)
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <SysTick_Config+0x40>)
 8004748:	2207      	movs	r2, #7
 800474a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	e000e010 	.word	0xe000e010

0800475c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff feb3 	bl	80044d0 <__NVIC_SetPriorityGrouping>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	4603      	mov	r3, r0
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004780:	f7ff feca 	bl	8004518 <__NVIC_GetPriorityGrouping>
 8004784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	6978      	ldr	r0, [r7, #20]
 800478c:	f7ff ff7a 	bl	8004684 <NVIC_EncodePriority>
 8004790:	4602      	mov	r2, r0
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff ff49 	bl	8004630 <__NVIC_SetPriority>
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff febd 	bl	8004534 <__NVIC_EnableIRQ>
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	4603      	mov	r3, r0
 80047ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fecd 	bl	8004570 <__NVIC_DisableIRQ>
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80047e2:	f7ff ff83 	bl	80046ec <__NVIC_SystemReset>

080047e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff92 	bl	8004718 <SysTick_Config>
 80047f4:	4603      	mov	r3, r0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fed3 	bl	80045b8 <__NVIC_SetPendingIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	4603      	mov	r3, r0
 8004822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fee3 	bl	80045f4 <__NVIC_ClearPendingIRQ>
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e08e      	b.n	8004968 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_DMA_Init+0x138>)
 8004852:	429a      	cmp	r2, r3
 8004854:	d80f      	bhi.n	8004876 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	4b45      	ldr	r3, [pc, #276]	; (8004974 <HAL_DMA_Init+0x13c>)
 800485e:	4413      	add	r3, r2
 8004860:	4a45      	ldr	r2, [pc, #276]	; (8004978 <HAL_DMA_Init+0x140>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	009a      	lsls	r2, r3, #2
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a42      	ldr	r2, [pc, #264]	; (800497c <HAL_DMA_Init+0x144>)
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
 8004874:	e00e      	b.n	8004894 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	4b40      	ldr	r3, [pc, #256]	; (8004980 <HAL_DMA_Init+0x148>)
 800487e:	4413      	add	r3, r2
 8004880:	4a3d      	ldr	r2, [pc, #244]	; (8004978 <HAL_DMA_Init+0x140>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	009a      	lsls	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a3c      	ldr	r2, [pc, #240]	; (8004984 <HAL_DMA_Init+0x14c>)
 8004892:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa74 	bl	8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f4:	d102      	bne.n	80048fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004904:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004908:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004912:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d010      	beq.n	800493e <HAL_DMA_Init+0x106>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b04      	cmp	r3, #4
 8004922:	d80c      	bhi.n	800493e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa93 	bl	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	e008      	b.n	8004950 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40020407 	.word	0x40020407
 8004974:	bffdfff8 	.word	0xbffdfff8
 8004978:	cccccccd 	.word	0xcccccccd
 800497c:	40020000 	.word	0x40020000
 8004980:	bffdfbf8 	.word	0xbffdfbf8
 8004984:	40020400 	.word	0x40020400

08004988 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_DMA_Start_IT+0x20>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e066      	b.n	8004a76 <HAL_DMA_Start_IT+0xee>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d155      	bne.n	8004a68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f9b9 	bl	8004d58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 020e 	orr.w	r2, r2, #14
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e00f      	b.n	8004a20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0204 	bic.w	r2, r2, #4
 8004a0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 020a 	orr.w	r2, r2, #10
 8004a1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e005      	b.n	8004a74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
 8004a72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e04f      	b.n	8004b30 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d008      	beq.n	8004aae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e040      	b.n	8004b30 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 020e 	bic.w	r2, r2, #14
 8004abc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004acc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f003 021c 	and.w	r2, r3, #28
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f202 	lsl.w	r2, r1, r2
 8004af0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004afa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d005      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2204      	movs	r2, #4
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
 8004b5e:	e047      	b.n	8004bf0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 020e 	bic.w	r2, r2, #14
 8004b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	f003 021c 	and.w	r2, r3, #28
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
    }
  }
  return status;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	f003 031c 	and.w	r3, r3, #28
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d026      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x7a>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d021      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d107      	bne.n	8004c4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0204 	bic.w	r2, r2, #4
 8004c4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f003 021c 	and.w	r2, r3, #28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d071      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c72:	e06c      	b.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f003 031c 	and.w	r3, r3, #28
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02e      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0xec>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d029      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 020a 	bic.w	r2, r2, #10
 8004cae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	f003 021c 	and.w	r2, r3, #28
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d038      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ce4:	e033      	b.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f003 031c 	and.w	r3, r3, #28
 8004cee:	2208      	movs	r2, #8
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02a      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x156>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d025      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 020e 	bic.w	r2, r2, #14
 8004d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	f003 021c 	and.w	r2, r3, #28
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f202 	lsl.w	r2, r1, r2
 8004d26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
}
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f003 021c 	and.w	r2, r3, #28
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2101      	movs	r1, #1
 8004d90:	fa01 f202 	lsl.w	r2, r1, r2
 8004d94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d108      	bne.n	8004db8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004db6:	e007      	b.n	8004dc8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d80a      	bhi.n	8004dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	089b      	lsrs	r3, r3, #2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004df4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6493      	str	r3, [r2, #72]	; 0x48
 8004dfc:	e007      	b.n	8004e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	009a      	lsls	r2, r3, #2
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	3b08      	subs	r3, #8
 8004e16:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e24:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40020407 	.word	0x40020407
 8004e44:	4002081c 	.word	0x4002081c
 8004e48:	cccccccd 	.word	0xcccccccd
 8004e4c:	40020880 	.word	0x40020880

08004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e60:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004e74:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2201      	movs	r2, #1
 8004e80:	409a      	lsls	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	1000823f 	.word	0x1000823f
 8004e98:	40020940 	.word	0x40020940

08004e9c <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 8004ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea6:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004ea8:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004eb4:	4b3e      	ldr	r3, [pc, #248]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	493c      	ldr	r1, [pc, #240]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	4b3b      	ldr	r3, [pc, #236]	; (8004fb8 <HAL_FLASH_IRQHandler+0x11c>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004ed0:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	e008      	b.n	8004eea <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 8004ed8:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004ee4:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d022      	beq.n	8004f36 <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004ef0:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004efa:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_FLASH_IRQHandler+0x7a>
 8004f06:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004f10:	4927      	ldr	r1, [pc, #156]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	618b      	str	r3, [r1, #24]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_FLASH_IRQHandler+0x8e>
 8004f20:	4a23      	ldr	r2, [pc, #140]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f28:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f84d 	bl	8004fd0 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004f36:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d124      	bne.n	8004f8c <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d117      	bne.n	8004f80 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004f50:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f58:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004f5a:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 8004f62:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	3301      	adds	r3, #1
 8004f68:	4a12      	ldr	r2, [pc, #72]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f6a:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f837 	bl	8004fe4 <FLASH_PageErase>
 8004f76:	e006      	b.n	8004f86 <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	e002      	b.n	8004f86 <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004f80:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f818 	bl	8004fbc <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004f8c:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d108      	bne.n	8004fa6 <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <HAL_FLASH_IRQHandler+0x114>)
 8004f9a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004f9e:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <HAL_FLASH_IRQHandler+0x118>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	58004000 	.word	0x58004000
 8004fb4:	200007bc 	.word	0x200007bc
 8004fb8:	00040001 	.word	0x00040001

08004fbc <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <FLASH_PageErase+0x30>)
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	4a06      	ldr	r2, [pc, #24]	; (8005014 <FLASH_PageErase+0x30>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	6153      	str	r3, [r2, #20]
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	58004000 	.word	0x58004000

08005018 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005026:	e14c      	b.n	80052c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	2101      	movs	r1, #1
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 813e 	beq.w	80052bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d005      	beq.n	8005058 <HAL_GPIO_Init+0x40>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d130      	bne.n	80050ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	2203      	movs	r2, #3
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4013      	ands	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800508e:	2201      	movs	r2, #1
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4013      	ands	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	091b      	lsrs	r3, r3, #4
 80050a4:	f003 0201 	and.w	r2, r3, #1
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d017      	beq.n	80050f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	2203      	movs	r2, #3
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d123      	bne.n	800514a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	08da      	lsrs	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3208      	adds	r2, #8
 800510a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	220f      	movs	r2, #15
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4013      	ands	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	08da      	lsrs	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3208      	adds	r2, #8
 8005144:	6939      	ldr	r1, [r7, #16]
 8005146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2203      	movs	r2, #3
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4013      	ands	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0203 	and.w	r2, r3, #3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8098 	beq.w	80052bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800518c:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_GPIO_Init+0x2c8>)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	089b      	lsrs	r3, r3, #2
 8005192:	3302      	adds	r3, #2
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051b6:	d019      	beq.n	80051ec <HAL_GPIO_Init+0x1d4>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a4a      	ldr	r2, [pc, #296]	; (80052e4 <HAL_GPIO_Init+0x2cc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <HAL_GPIO_Init+0x1d0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a49      	ldr	r2, [pc, #292]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00d      	beq.n	80051e4 <HAL_GPIO_Init+0x1cc>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a48      	ldr	r2, [pc, #288]	; (80052ec <HAL_GPIO_Init+0x2d4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <HAL_GPIO_Init+0x1c8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a47      	ldr	r2, [pc, #284]	; (80052f0 <HAL_GPIO_Init+0x2d8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d101      	bne.n	80051dc <HAL_GPIO_Init+0x1c4>
 80051d8:	2304      	movs	r3, #4
 80051da:	e008      	b.n	80051ee <HAL_GPIO_Init+0x1d6>
 80051dc:	2307      	movs	r3, #7
 80051de:	e006      	b.n	80051ee <HAL_GPIO_Init+0x1d6>
 80051e0:	2303      	movs	r3, #3
 80051e2:	e004      	b.n	80051ee <HAL_GPIO_Init+0x1d6>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e002      	b.n	80051ee <HAL_GPIO_Init+0x1d6>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <HAL_GPIO_Init+0x1d6>
 80051ec:	2300      	movs	r3, #0
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	f002 0203 	and.w	r2, r2, #3
 80051f4:	0092      	lsls	r2, r2, #2
 80051f6:	4093      	lsls	r3, r2
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051fe:	4938      	ldr	r1, [pc, #224]	; (80052e0 <HAL_GPIO_Init+0x2c8>)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	3302      	adds	r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800520c:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	43db      	mvns	r3, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005230:	4a30      	ldr	r2, [pc, #192]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005236:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	43db      	mvns	r3, r3
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800525a:	4a26      	ldr	r2, [pc, #152]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 8005262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	43db      	mvns	r3, r3
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005286:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800528e:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 8005290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	43db      	mvns	r3, r3
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4013      	ands	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052b4:	4a0f      	ldr	r2, [pc, #60]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3301      	adds	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f47f aeab 	bne.w	8005028 <HAL_GPIO_Init+0x10>
  }
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40010000 	.word	0x40010000
 80052e4:	48000400 	.word	0x48000400
 80052e8:	48000800 	.word	0x48000800
 80052ec:	48000c00 	.word	0x48000c00
 80052f0:	48001000 	.word	0x48001000
 80052f4:	58000800 	.word	0x58000800

080052f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	807b      	strh	r3, [r7, #2]
 8005304:	4613      	mov	r3, r2
 8005306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005308:	787b      	ldrb	r3, [r7, #1]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005314:	e002      	b.n	800531c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4013      	ands	r3, r2
 8005340:	041a      	lsls	r2, r3, #16
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	43d9      	mvns	r1, r3
 8005346:	887b      	ldrh	r3, [r7, #2]
 8005348:	400b      	ands	r3, r1
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005372:	4a05      	ldr	r2, [pc, #20]	; (8005388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	4618      	mov	r0, r3
 800537c:	f7fd f964 	bl	8002648 <HAL_GPIO_EXTI_Callback>
  }
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	58000800 	.word	0x58000800

0800538c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_HSEM_IRQHandler+0x30>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005398:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_HSEM_IRQHandler+0x30>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	43db      	mvns	r3, r3
 80053a0:	4906      	ldr	r1, [pc, #24]	; (80053bc <HAL_HSEM_IRQHandler+0x30>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80053a6:	4a05      	ldr	r2, [pc, #20]	; (80053bc <HAL_HSEM_IRQHandler+0x30>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f807 	bl	80053c0 <HAL_HSEM_FreeCallback>
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	58001500 	.word	0x58001500

080053c0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e081      	b.n	80054ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f879 	bl	80054f2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005424:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005434:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d107      	bne.n	800544e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	e006      	b.n	800545c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800545a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d104      	bne.n	800546e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800547c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69d9      	ldr	r1, [r3, #28]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	461a      	mov	r2, r3
 8005514:	460b      	mov	r3, r1
 8005516:	817b      	strh	r3, [r7, #10]
 8005518:	4613      	mov	r3, r2
 800551a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b20      	cmp	r3, #32
 8005526:	f040 80da 	bne.w	80056de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_I2C_Master_Transmit+0x30>
 8005534:	2302      	movs	r3, #2
 8005536:	e0d3      	b.n	80056e0 <HAL_I2C_Master_Transmit+0x1d8>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005540:	f7fe ff9c 	bl	800447c <HAL_GetTick>
 8005544:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2319      	movs	r3, #25
 800554c:	2201      	movs	r2, #1
 800554e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f9e6 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0be      	b.n	80056e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2221      	movs	r2, #33	; 0x21
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2210      	movs	r2, #16
 800556e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	893a      	ldrh	r2, [r7, #8]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	2bff      	cmp	r3, #255	; 0xff
 8005592:	d90e      	bls.n	80055b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	22ff      	movs	r2, #255	; 0xff
 8005598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	8979      	ldrh	r1, [r7, #10]
 80055a2:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fbdc 	bl	8005d68 <I2C_TransferConfig>
 80055b0:	e06c      	b.n	800568c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	8979      	ldrh	r1, [r7, #10]
 80055c4:	4b48      	ldr	r3, [pc, #288]	; (80056e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fbcb 	bl	8005d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80055d2:	e05b      	b.n	800568c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	6a39      	ldr	r1, [r7, #32]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f9e3 	bl	80059a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e07b      	b.n	80056e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d034      	beq.n	800568c <HAL_I2C_Master_Transmit+0x184>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d130      	bne.n	800568c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f975 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e04d      	b.n	80056e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	2bff      	cmp	r3, #255	; 0xff
 800564c:	d90e      	bls.n	800566c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	22ff      	movs	r2, #255	; 0xff
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005658:	b2da      	uxtb	r2, r3
 800565a:	8979      	ldrh	r1, [r7, #10]
 800565c:	2300      	movs	r3, #0
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fb7f 	bl	8005d68 <I2C_TransferConfig>
 800566a:	e00f      	b.n	800568c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	b2da      	uxtb	r2, r3
 800567c:	8979      	ldrh	r1, [r7, #10]
 800567e:	2300      	movs	r3, #0
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 fb6e 	bl	8005d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d19e      	bne.n	80055d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	6a39      	ldr	r1, [r7, #32]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f9c2 	bl	8005a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e01a      	b.n	80056e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2220      	movs	r2, #32
 80056b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_I2C_Master_Transmit+0x1e4>)
 80056be:	400b      	ands	r3, r1
 80056c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	e000      	b.n	80056e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056de:	2302      	movs	r3, #2
  }
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	80002000 	.word	0x80002000
 80056ec:	fe00e800 	.word	0xfe00e800

080056f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	461a      	mov	r2, r3
 80056fc:	460b      	mov	r3, r1
 80056fe:	817b      	strh	r3, [r7, #10]
 8005700:	4613      	mov	r3, r2
 8005702:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b20      	cmp	r3, #32
 800570e:	f040 80db 	bne.w	80058c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_I2C_Master_Receive+0x30>
 800571c:	2302      	movs	r3, #2
 800571e:	e0d4      	b.n	80058ca <HAL_I2C_Master_Receive+0x1da>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005728:	f7fe fea8 	bl	800447c <HAL_GetTick>
 800572c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2319      	movs	r3, #25
 8005734:	2201      	movs	r2, #1
 8005736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f8f2 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0bf      	b.n	80058ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2222      	movs	r2, #34	; 0x22
 800574e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2210      	movs	r2, #16
 8005756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	893a      	ldrh	r2, [r7, #8]
 800576a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2bff      	cmp	r3, #255	; 0xff
 800577a:	d90e      	bls.n	800579a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	22ff      	movs	r2, #255	; 0xff
 8005780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	b2da      	uxtb	r2, r3
 8005788:	8979      	ldrh	r1, [r7, #10]
 800578a:	4b52      	ldr	r3, [pc, #328]	; (80058d4 <HAL_I2C_Master_Receive+0x1e4>)
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fae8 	bl	8005d68 <I2C_TransferConfig>
 8005798:	e06d      	b.n	8005876 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	8979      	ldrh	r1, [r7, #10]
 80057ac:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <HAL_I2C_Master_Receive+0x1e4>)
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fad7 	bl	8005d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80057ba:	e05c      	b.n	8005876 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	6a39      	ldr	r1, [r7, #32]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f96b 	bl	8005a9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e07c      	b.n	80058ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d034      	beq.n	8005876 <HAL_I2C_Master_Receive+0x186>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d130      	bne.n	8005876 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2200      	movs	r2, #0
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f880 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e04d      	b.n	80058ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	2bff      	cmp	r3, #255	; 0xff
 8005836:	d90e      	bls.n	8005856 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	22ff      	movs	r2, #255	; 0xff
 800583c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	b2da      	uxtb	r2, r3
 8005844:	8979      	ldrh	r1, [r7, #10]
 8005846:	2300      	movs	r3, #0
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fa8a 	bl	8005d68 <I2C_TransferConfig>
 8005854:	e00f      	b.n	8005876 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005864:	b2da      	uxtb	r2, r3
 8005866:	8979      	ldrh	r1, [r7, #10]
 8005868:	2300      	movs	r3, #0
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fa79 	bl	8005d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d19d      	bne.n	80057bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	6a39      	ldr	r1, [r7, #32]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f8cd 	bl	8005a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e01a      	b.n	80058ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2220      	movs	r2, #32
 800589a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <HAL_I2C_Master_Receive+0x1e8>)
 80058a8:	400b      	ands	r3, r1
 80058aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e000      	b.n	80058ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
  }
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	80002400 	.word	0x80002400
 80058d8:	fe00e800 	.word	0xfe00e800

080058dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d103      	bne.n	80058fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d007      	beq.n	8005918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	619a      	str	r2, [r3, #24]
  }
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005934:	e022      	b.n	800597c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d01e      	beq.n	800597c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fe fd9d 	bl	800447c <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d113      	bne.n	800597c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005958:	f043 0220 	orr.w	r2, r3, #32
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e00f      	b.n	800599c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	429a      	cmp	r2, r3
 8005998:	d0cd      	beq.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059b0:	e02c      	b.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f8ea 	bl	8005b90 <I2C_IsErrorOccurred>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e02a      	b.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d01e      	beq.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ce:	f7fe fd55 	bl	800447c <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d302      	bcc.n	80059e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d113      	bne.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e007      	b.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d1cb      	bne.n	80059b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a30:	e028      	b.n	8005a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f8aa 	bl	8005b90 <I2C_IsErrorOccurred>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e026      	b.n	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fe fd19 	bl	800447c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d113      	bne.n	8005a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e007      	b.n	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d1cf      	bne.n	8005a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aa8:	e064      	b.n	8005b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f86e 	bl	8005b90 <I2C_IsErrorOccurred>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e062      	b.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d138      	bne.n	8005b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d105      	bne.n	8005ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e04e      	b.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d107      	bne.n	8005b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2210      	movs	r2, #16
 8005afa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2204      	movs	r2, #4
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44
 8005b02:	e002      	b.n	8005b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6859      	ldr	r1, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005b1e:	400b      	ands	r3, r1
 8005b20:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e022      	b.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fe fc9d 	bl	800447c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10f      	bne.n	8005b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b58:	f043 0220 	orr.w	r2, r3, #32
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e007      	b.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d193      	bne.n	8005aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	fe00e800 	.word	0xfe00e800

08005b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	; 0x28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d075      	beq.n	8005ca8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2210      	movs	r2, #16
 8005bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bc4:	e056      	b.n	8005c74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d052      	beq.n	8005c74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fe fc55 	bl	800447c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_IsErrorOccurred+0x54>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d147      	bne.n	8005c74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c06:	d12e      	bne.n	8005c66 <I2C_IsErrorOccurred+0xd6>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c0e:	d02a      	beq.n	8005c66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d027      	beq.n	8005c66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c26:	f7fe fc29 	bl	800447c <HAL_GetTick>
 8005c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c2c:	e01b      	b.n	8005c66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c2e:	f7fe fc25 	bl	800447c <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b19      	cmp	r3, #25
 8005c3a:	d914      	bls.n	8005c66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d1dc      	bne.n	8005c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d003      	beq.n	8005c8a <I2C_IsErrorOccurred+0xfa>
 8005c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d09d      	beq.n	8005bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2220      	movs	r2, #32
 8005c98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f043 0304 	orr.w	r3, r3, #4
 8005ca0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	f043 0308 	orr.w	r3, r3, #8
 8005ce2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01c      	beq.n	8005d58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff fddc 	bl	80058dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <I2C_IsErrorOccurred+0x1d4>)
 8005d30:	400b      	ands	r3, r1
 8005d32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3728      	adds	r7, #40	; 0x28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	fe00e800 	.word	0xfe00e800

08005d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	460b      	mov	r3, r1
 8005d74:	817b      	strh	r3, [r7, #10]
 8005d76:	4613      	mov	r3, r2
 8005d78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d7a:	897b      	ldrh	r3, [r7, #10]
 8005d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d80:	7a7b      	ldrb	r3, [r7, #9]
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	0d5b      	lsrs	r3, r3, #21
 8005da2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <I2C_TransferConfig+0x60>)
 8005da8:	430b      	orrs	r3, r1
 8005daa:	43db      	mvns	r3, r3
 8005dac:	ea02 0103 	and.w	r1, r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	03ff63ff 	.word	0x03ff63ff

08005dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d138      	bne.n	8005e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e032      	b.n	8005e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	; 0x24
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6819      	ldr	r1, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d139      	bne.n	8005eec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e033      	b.n	8005eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2224      	movs	r2, #36	; 0x24
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005eb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	4904      	ldr	r1, [pc, #16]	; (8005f1c <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	40010000 	.word	0x40010000

08005f20 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01e      	beq.n	8005f70 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005f32:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <HAL_IPCC_Init+0x60>)
 8005f34:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fd fe7e 	bl	8003c44 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005f48:	68b8      	ldr	r0, [r7, #8]
 8005f4a:	f000 f85b 	bl	8006004 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f82c 	bl	8005fb8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005f6e:	e001      	b.n	8005f74 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	58000c00 	.word	0x58000c00

08005f84 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e00f      	b.n	8005fe6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <IPCC_SetDefaultCallbacks+0x44>)
 8005fd0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3306      	adds	r3, #6
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	4a08      	ldr	r2, [pc, #32]	; (8006000 <IPCC_SetDefaultCallbacks+0x48>)
 8005fde:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b05      	cmp	r3, #5
 8005fea:	d9ec      	bls.n	8005fc6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	08005f85 	.word	0x08005f85
 8006000:	08005f9f 	.word	0x08005f9f

08006004 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8006018:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	223f      	movs	r2, #63	; 0x3f
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a04      	ldr	r2, [pc, #16]	; (8006048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603a:	6013      	str	r3, [r2, #0]
}
 800603c:	bf00      	nop
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	58000400 	.word	0x58000400

0800604c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8006050:	bf00      	nop
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
	...

0800605c <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <LL_EXTI_ReadFlag_0_31+0x1c>)
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4013      	ands	r3, r2
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	58000800 	.word	0x58000800

0800607c <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <LL_EXTI_ReadFlag_32_63+0x1c>)
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4013      	ands	r3, r2
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	58000800 	.word	0x58000800

0800609c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80060a4:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60d3      	str	r3, [r2, #12]
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	58000800 	.word	0x58000800

080060bc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80060c4:	4a04      	ldr	r2, [pc, #16]	; (80060d8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	58000800 	.word	0x58000800

080060dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	58000400 	.word	0x58000400

080060f8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 80060fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006100:	f7ff ffac 	bl	800605c <LL_EXTI_ReadFlag_0_31>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800610a:	f7ff ff9f 	bl	800604c <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800610e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006112:	f7ff ffc3 	bl	800609c <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8006116:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800611a:	f7ff ff9f 	bl	800605c <LL_EXTI_ReadFlag_0_31>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8006124:	f000 f811 	bl	800614a <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8006128:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800612c:	f7ff ffb6 	bl	800609c <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8006130:	2002      	movs	r0, #2
 8006132:	f7ff ffa3 	bl	800607c <LL_EXTI_ReadFlag_32_63>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800613c:	f000 f80c 	bl	8006158 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8006140:	2002      	movs	r0, #2
 8006142:	f7ff ffbb 	bl	80060bc <LL_EXTI_ClearFlag_32_63>
  }
}
 8006146:	bf00      	nop
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800614a:	b480      	push	{r7}
 800614c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006166:	b480      	push	{r7}
 8006168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006178:	d101      	bne.n	800617e <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <LL_RCC_HSE_Enable>:
{
 800618a:	b480      	push	{r7}
 800618c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619c:	6013      	str	r3, [r2, #0]
}
 800619e:	bf00      	nop
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <LL_RCC_HSE_Disable>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80061ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <LL_RCC_HSE_IsReady>:
{
 80061c6:	b480      	push	{r7}
 80061c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061d8:	d101      	bne.n	80061de <LL_RCC_HSE_IsReady+0x18>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <LL_RCC_HSE_IsReady+0x1a>
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_RCC_HSI_Enable>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fc:	6013      	str	r3, [r2, #0]
}
 80061fe:	bf00      	nop
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <LL_RCC_HSI_Disable>:
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800620c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800621a:	6013      	str	r3, [r2, #0]
}
 800621c:	bf00      	nop
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <LL_RCC_HSI_IsReady>:
{
 8006226:	b480      	push	{r7}
 8006228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006238:	d101      	bne.n	800623e <LL_RCC_HSI_IsReady+0x18>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <LL_RCC_HSI_IsReady+0x1a>
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <LL_RCC_HSI_SetCalibTrimming>:
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	061b      	lsls	r3, r3, #24
 8006260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006264:	4313      	orrs	r3, r2
 8006266:	604b      	str	r3, [r1, #4]
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <LL_RCC_HSI48_Enable>:
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <LL_RCC_HSI48_Disable>:
{
 8006296:	b480      	push	{r7}
 8006298:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800629a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80062ae:	bf00      	nop
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <LL_RCC_HSI48_IsReady>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80062bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d101      	bne.n	80062d0 <LL_RCC_HSI48_IsReady+0x18>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <LL_RCC_HSI48_IsReady+0x1a>
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <LL_RCC_LSE_Enable>:
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_LSE_Disable>:
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_RCC_LSE_EnableBypass>:
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006330:	f043 0304 	orr.w	r3, r3, #4
 8006334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_RCC_LSE_DisableBypass>:
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006352:	f023 0304 	bic.w	r3, r3, #4
 8006356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800635a:	bf00      	nop
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <LL_RCC_LSE_IsReady>:
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d101      	bne.n	800637c <LL_RCC_LSE_IsReady+0x18>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <LL_RCC_LSE_IsReady+0x1a>
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_RCC_LSI1_Enable>:
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800638c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_RCC_LSI1_Disable>:
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <LL_RCC_LSI1_IsReady>:
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d101      	bne.n	80063e4 <LL_RCC_LSI1_IsReady+0x18>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <LL_RCC_LSI1_IsReady+0x1a>
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LL_RCC_LSI2_Enable>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80063f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006400:	f043 0304 	orr.w	r3, r3, #4
 8006404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006408:	bf00      	nop
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <LL_RCC_LSI2_Disable>:
{
 8006412:	b480      	push	{r7}
 8006414:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800641e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006422:	f023 0304 	bic.w	r3, r3, #4
 8006426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800642a:	bf00      	nop
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <LL_RCC_LSI2_IsReady>:
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b08      	cmp	r3, #8
 8006446:	d101      	bne.n	800644c <LL_RCC_LSI2_IsReady+0x18>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <LL_RCC_LSI2_IsReady+0x1a>
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_RCC_LSI2_SetTrimming>:
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006468:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <LL_RCC_MSI_Enable>:
{
 8006486:	b480      	push	{r7}
 8006488:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800648a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	6013      	str	r3, [r2, #0]
}
 800649a:	bf00      	nop
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <LL_RCC_MSI_Disable>:
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80064a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	6013      	str	r3, [r2, #0]
}
 80064b8:	bf00      	nop
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <LL_RCC_MSI_IsReady>:
{
 80064c2:	b480      	push	{r7}
 80064c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d101      	bne.n	80064d8 <LL_RCC_MSI_IsReady+0x16>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <LL_RCC_MSI_IsReady+0x18>
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <LL_RCC_MSI_SetRange>:
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80064ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	600b      	str	r3, [r1, #0]
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <LL_RCC_MSI_GetRange>:
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800651c:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2bb0      	cmp	r3, #176	; 0xb0
 8006522:	d901      	bls.n	8006528 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006524:	23b0      	movs	r3, #176	; 0xb0
 8006526:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006528:	687b      	ldr	r3, [r7, #4]
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006550:	4313      	orrs	r3, r2
 8006552:	604b      	str	r3, [r1, #4]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <LL_RCC_SetSysClkSource>:
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 0203 	bic.w	r2, r3, #3
 8006572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4313      	orrs	r3, r2
 800657a:	608b      	str	r3, [r1, #8]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <LL_RCC_GetSysClkSource>:
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
}
 8006596:	4618      	mov	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_RCC_SetAHBPrescaler>:
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	608b      	str	r3, [r1, #8]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LL_C2_RCC_SetAHBPrescaler>:
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80065d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <LL_RCC_SetAHB4Prescaler>:
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80065fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006600:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006604:	f023 020f 	bic.w	r2, r3, #15
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <LL_RCC_SetAPB1Prescaler>:
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800662a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <LL_RCC_SetAPB2Prescaler>:
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800665c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <LL_RCC_GetAHBPrescaler>:
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006680:	4618      	mov	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <LL_RCC_GetAHB4Prescaler>:
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006692:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800669c:	4618      	mov	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <LL_RCC_GetAPB1Prescaler>:
{
 80066a6:	b480      	push	{r7}
 80066a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <LL_RCC_GetAPB2Prescaler>:
{
 80066be:	b480      	push	{r7}
 80066c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80066c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80066d6:	b480      	push	{r7}
 80066d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80066da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066e8:	6013      	str	r3, [r2, #0]
}
 80066ea:	bf00      	nop
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80066f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006706:	6013      	str	r3, [r2, #0]
}
 8006708:	bf00      	nop
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006712:	b480      	push	{r7}
 8006714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006724:	d101      	bne.n	800672a <LL_RCC_PLL_IsReady+0x18>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <LL_RCC_PLL_IsReady+0x1a>
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006736:	b480      	push	{r7}
 8006738:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800673a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	0a1b      	lsrs	r3, r3, #8
 8006742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006746:	4618      	mov	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800675e:	4618      	mov	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800676c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006776:	4618      	mov	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0303 	and.w	r3, r3, #3
}
 800678e:	4618      	mov	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800679c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067aa:	d101      	bne.n	80067b0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80067c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067d0:	d101      	bne.n	80067d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80067e2:	b480      	push	{r7}
 80067e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80067e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f6:	d101      	bne.n	80067fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800680c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800681a:	d101      	bne.n	8006820 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800683a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800683e:	d101      	bne.n	8006844 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b08d      	sub	sp, #52	; 0x34
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e363      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 808d 	beq.w	800698a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006870:	f7ff fe8a 	bl	8006588 <LL_RCC_GetSysClkSource>
 8006874:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006876:	f7ff ff83 	bl	8006780 <LL_RCC_PLL_GetMainSource>
 800687a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_RCC_OscConfig+0x3e>
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	2b0c      	cmp	r3, #12
 8006886:	d147      	bne.n	8006918 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2b01      	cmp	r3, #1
 800688c:	d144      	bne.n	8006918 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e347      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800689e:	f7ff fe35 	bl	800650c <LL_RCC_MSI_GetRange>
 80068a2:	4603      	mov	r3, r0
 80068a4:	429c      	cmp	r4, r3
 80068a6:	d914      	bls.n	80068d2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fd2f 	bl	8007310 <RCC_SetFlashLatencyFromMSIRange>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e336      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff fe0f 	bl	80064e4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fe33 	bl	8006536 <LL_RCC_MSI_SetCalibTrimming>
 80068d0:	e013      	b.n	80068fa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fe04 	bl	80064e4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fe28 	bl	8006536 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fd10 	bl	8007310 <RCC_SetFlashLatencyFromMSIRange>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e317      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80068fa:	f000 fcc9 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 80068fe:	4603      	mov	r3, r0
 8006900:	4aa4      	ldr	r2, [pc, #656]	; (8006b94 <HAL_RCC_OscConfig+0x344>)
 8006902:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006904:	4ba4      	ldr	r3, [pc, #656]	; (8006b98 <HAL_RCC_OscConfig+0x348>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f7fd fd69 	bl	80043e0 <HAL_InitTick>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d039      	beq.n	8006988 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e308      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01e      	beq.n	800695e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006920:	f7ff fdb1 	bl	8006486 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006924:	f7fd fdaa 	bl	800447c <HAL_GetTick>
 8006928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800692c:	f7fd fda6 	bl	800447c <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e2f5      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800693e:	f7ff fdc0 	bl	80064c2 <LL_RCC_MSI_IsReady>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f1      	beq.n	800692c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fdc9 	bl	80064e4 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fded 	bl	8006536 <LL_RCC_MSI_SetCalibTrimming>
 800695c:	e015      	b.n	800698a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800695e:	f7ff fda1 	bl	80064a4 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006962:	f7fd fd8b 	bl	800447c <HAL_GetTick>
 8006966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800696a:	f7fd fd87 	bl	800447c <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e2d6      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800697c:	f7ff fda1 	bl	80064c2 <LL_RCC_MSI_IsReady>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f1      	bne.n	800696a <HAL_RCC_OscConfig+0x11a>
 8006986:	e000      	b.n	800698a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006988:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d047      	beq.n	8006a26 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006996:	f7ff fdf7 	bl	8006588 <LL_RCC_GetSysClkSource>
 800699a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800699c:	f7ff fef0 	bl	8006780 <LL_RCC_PLL_GetMainSource>
 80069a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d005      	beq.n	80069b4 <HAL_RCC_OscConfig+0x164>
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	2b0c      	cmp	r3, #12
 80069ac:	d108      	bne.n	80069c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d105      	bne.n	80069c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d134      	bne.n	8006a26 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e2b4      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c8:	d102      	bne.n	80069d0 <HAL_RCC_OscConfig+0x180>
 80069ca:	f7ff fbde 	bl	800618a <LL_RCC_HSE_Enable>
 80069ce:	e001      	b.n	80069d4 <HAL_RCC_OscConfig+0x184>
 80069d0:	f7ff fbea 	bl	80061a8 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fd fd4e 	bl	800447c <HAL_GetTick>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e4:	f7fd fd4a 	bl	800447c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b64      	cmp	r3, #100	; 0x64
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e299      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80069f6:	f7ff fbe6 	bl	80061c6 <LL_RCC_HSE_IsReady>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f1      	beq.n	80069e4 <HAL_RCC_OscConfig+0x194>
 8006a00:	e011      	b.n	8006a26 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a02:	f7fd fd3b 	bl	800447c <HAL_GetTick>
 8006a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a0a:	f7fd fd37 	bl	800447c <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b64      	cmp	r3, #100	; 0x64
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e286      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006a1c:	f7ff fbd3 	bl	80061c6 <LL_RCC_HSE_IsReady>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f1      	bne.n	8006a0a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04c      	beq.n	8006acc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a32:	f7ff fda9 	bl	8006588 <LL_RCC_GetSysClkSource>
 8006a36:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a38:	f7ff fea2 	bl	8006780 <LL_RCC_PLL_GetMainSource>
 8006a3c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d005      	beq.n	8006a50 <HAL_RCC_OscConfig+0x200>
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b0c      	cmp	r3, #12
 8006a48:	d10e      	bne.n	8006a68 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d10b      	bne.n	8006a68 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e266      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fbf2 	bl	800624a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a66:	e031      	b.n	8006acc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d019      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a70:	f7ff fbbb 	bl	80061ea <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fd fd02 	bl	800447c <HAL_GetTick>
 8006a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7c:	f7fd fcfe 	bl	800447c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e24d      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006a8e:	f7ff fbca 	bl	8006226 <LL_RCC_HSI_IsReady>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f1      	beq.n	8006a7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff fbd4 	bl	800624a <LL_RCC_HSI_SetCalibTrimming>
 8006aa2:	e013      	b.n	8006acc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aa4:	f7ff fbb0 	bl	8006208 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fd fce8 	bl	800447c <HAL_GetTick>
 8006aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fd fce4 	bl	800447c <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e233      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006ac2:	f7ff fbb0 	bl	8006226 <LL_RCC_HSI_IsReady>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f1      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d106      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80a3 	beq.w	8006c2c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d076      	beq.n	8006bdc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d046      	beq.n	8006b88 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006afa:	f7ff fc67 	bl	80063cc <LL_RCC_LSI1_IsReady>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006b04:	f7ff fc40 	bl	8006388 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b08:	f7fd fcb8 	bl	800447c <HAL_GetTick>
 8006b0c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b10:	f7fd fcb4 	bl	800447c <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e203      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006b22:	f7ff fc53 	bl	80063cc <LL_RCC_LSI1_IsReady>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f1      	beq.n	8006b10 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006b2c:	f7ff fc60 	bl	80063f0 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fd fca4 	bl	800447c <HAL_GetTick>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006b38:	f7fd fca0 	bl	800447c <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e1ef      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006b4a:	f7ff fc73 	bl	8006434 <LL_RCC_LSI2_IsReady>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0f1      	beq.n	8006b38 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fc7d 	bl	8006458 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006b5e:	f7ff fc24 	bl	80063aa <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b62:	f7fd fc8b 	bl	800447c <HAL_GetTick>
 8006b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b6a:	f7fd fc87 	bl	800447c <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e1d6      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006b7c:	f7ff fc26 	bl	80063cc <LL_RCC_LSI1_IsReady>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1f1      	bne.n	8006b6a <HAL_RCC_OscConfig+0x31a>
 8006b86:	e051      	b.n	8006c2c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006b88:	f7ff fbfe 	bl	8006388 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fd fc76 	bl	800447c <HAL_GetTick>
 8006b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006b92:	e00c      	b.n	8006bae <HAL_RCC_OscConfig+0x35e>
 8006b94:	2000002c 	.word	0x2000002c
 8006b98:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b9c:	f7fd fc6e 	bl	800447c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e1bd      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006bae:	f7ff fc0d 	bl	80063cc <LL_RCC_LSI1_IsReady>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0f1      	beq.n	8006b9c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006bb8:	f7ff fc2b 	bl	8006412 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006bbe:	f7fd fc5d 	bl	800447c <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e1ac      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006bd0:	f7ff fc30 	bl	8006434 <LL_RCC_LSI2_IsReady>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f1      	bne.n	8006bbe <HAL_RCC_OscConfig+0x36e>
 8006bda:	e027      	b.n	8006c2c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006bdc:	f7ff fc19 	bl	8006412 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be0:	f7fd fc4c 	bl	800447c <HAL_GetTick>
 8006be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006be8:	f7fd fc48 	bl	800447c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e197      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006bfa:	f7ff fc1b 	bl	8006434 <LL_RCC_LSI2_IsReady>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f1      	bne.n	8006be8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006c04:	f7ff fbd1 	bl	80063aa <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c08:	f7fd fc38 	bl	800447c <HAL_GetTick>
 8006c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006c10:	f7fd fc34 	bl	800447c <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e183      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006c22:	f7ff fbd3 	bl	80063cc <LL_RCC_LSI1_IsReady>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f1      	bne.n	8006c10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d05b      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c38:	4ba7      	ldr	r3, [pc, #668]	; (8006ed8 <HAL_RCC_OscConfig+0x688>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d114      	bne.n	8006c6e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006c44:	f7ff f9f2 	bl	800602c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c48:	f7fd fc18 	bl	800447c <HAL_GetTick>
 8006c4c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c50:	f7fd fc14 	bl	800447c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e163      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c62:	4b9d      	ldr	r3, [pc, #628]	; (8006ed8 <HAL_RCC_OscConfig+0x688>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d102      	bne.n	8006c7c <HAL_RCC_OscConfig+0x42c>
 8006c76:	f7ff fb31 	bl	80062dc <LL_RCC_LSE_Enable>
 8006c7a:	e00c      	b.n	8006c96 <HAL_RCC_OscConfig+0x446>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2b05      	cmp	r3, #5
 8006c82:	d104      	bne.n	8006c8e <HAL_RCC_OscConfig+0x43e>
 8006c84:	f7ff fb4c 	bl	8006320 <LL_RCC_LSE_EnableBypass>
 8006c88:	f7ff fb28 	bl	80062dc <LL_RCC_LSE_Enable>
 8006c8c:	e003      	b.n	8006c96 <HAL_RCC_OscConfig+0x446>
 8006c8e:	f7ff fb36 	bl	80062fe <LL_RCC_LSE_Disable>
 8006c92:	f7ff fb56 	bl	8006342 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d014      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9e:	f7fd fbed 	bl	800447c <HAL_GetTick>
 8006ca2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006ca4:	e00a      	b.n	8006cbc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca6:	f7fd fbe9 	bl	800447c <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e136      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006cbc:	f7ff fb52 	bl	8006364 <LL_RCC_LSE_IsReady>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0ef      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x456>
 8006cc6:	e013      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fd fbd8 	bl	800447c <HAL_GetTick>
 8006ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006cce:	e00a      	b.n	8006ce6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd0:	f7fd fbd4 	bl	800447c <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e121      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006ce6:	f7ff fb3d 	bl	8006364 <LL_RCC_LSE_IsReady>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ef      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d02c      	beq.n	8006d56 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d014      	beq.n	8006d2e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d04:	f7ff fab6 	bl	8006274 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d08:	f7fd fbb8 	bl	800447c <HAL_GetTick>
 8006d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d10:	f7fd fbb4 	bl	800447c <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e103      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006d22:	f7ff fac9 	bl	80062b8 <LL_RCC_HSI48_IsReady>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f1      	beq.n	8006d10 <HAL_RCC_OscConfig+0x4c0>
 8006d2c:	e013      	b.n	8006d56 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d2e:	f7ff fab2 	bl	8006296 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d32:	f7fd fba3 	bl	800447c <HAL_GetTick>
 8006d36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d3a:	f7fd fb9f 	bl	800447c <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0ee      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006d4c:	f7ff fab4 	bl	80062b8 <LL_RCC_HSI48_IsReady>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f1      	bne.n	8006d3a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80e4 	beq.w	8006f28 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d60:	f7ff fc12 	bl	8006588 <LL_RCC_GetSysClkSource>
 8006d64:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	f040 80b4 	bne.w	8006ee0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 0203 	and.w	r2, r3, #3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d123      	bne.n	8006dce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d11c      	bne.n	8006dce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d114      	bne.n	8006dce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d10d      	bne.n	8006dce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d106      	bne.n	8006dce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d05d      	beq.n	8006e8a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b0c      	cmp	r3, #12
 8006dd2:	d058      	beq.n	8006e86 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e0a1      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006de6:	f7ff fc85 	bl	80066f4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006dea:	f7fd fb47 	bl	800447c <HAL_GetTick>
 8006dee:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df2:	f7fd fb43 	bl	800447c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e092      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ef      	bne.n	8006df2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	4b30      	ldr	r3, [pc, #192]	; (8006edc <HAL_RCC_OscConfig+0x68c>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e24:	4311      	orrs	r1, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e2a:	0212      	lsls	r2, r2, #8
 8006e2c:	4311      	orrs	r1, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e32:	4311      	orrs	r1, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e38:	4311      	orrs	r1, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e48:	f7ff fc45 	bl	80066d6 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e5c:	f7fd fb0e 	bl	800447c <HAL_GetTick>
 8006e60:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e64:	f7fd fb0a 	bl	800447c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e059      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0ef      	beq.n	8006e64 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e84:	e050      	b.n	8006f28 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e04f      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d147      	bne.n	8006f28 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e98:	f7ff fc1d 	bl	80066d6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006eac:	f7fd fae6 	bl	800447c <HAL_GetTick>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb4:	f7fd fae2 	bl	800447c <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e031      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0ef      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x664>
 8006ed4:	e028      	b.n	8006f28 <HAL_RCC_OscConfig+0x6d8>
 8006ed6:	bf00      	nop
 8006ed8:	58000400 	.word	0x58000400
 8006edc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b0c      	cmp	r3, #12
 8006ee4:	d01e      	beq.n	8006f24 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee6:	f7ff fc05 	bl	80066f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eea:	f7fd fac7 	bl	800447c <HAL_GetTick>
 8006eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef2:	f7fd fac3 	bl	800447c <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e012      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1ef      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCC_OscConfig+0x6e4>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	60cb      	str	r3, [r1, #12]
 8006f22:	e001      	b.n	8006f28 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3734      	adds	r7, #52	; 0x34
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd90      	pop	{r4, r7, pc}
 8006f32:	bf00      	nop
 8006f34:	eefefffc 	.word	0xeefefffc

08006f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e12d      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f4c:	4b98      	ldr	r3, [pc, #608]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d91b      	bls.n	8006f92 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5a:	4b95      	ldr	r3, [pc, #596]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f023 0207 	bic.w	r2, r3, #7
 8006f62:	4993      	ldr	r1, [pc, #588]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f6a:	f7fd fa87 	bl	800447c <HAL_GetTick>
 8006f6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006f72:	f7fd fa83 	bl	800447c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e111      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f84:	4b8a      	ldr	r3, [pc, #552]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d1ef      	bne.n	8006f72 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d016      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fafc 	bl	80065a0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006fa8:	f7fd fa68 	bl	800447c <HAL_GetTick>
 8006fac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006fb0:	f7fd fa64 	bl	800447c <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e0f2      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006fc2:	f7ff fbe9 	bl	8006798 <LL_RCC_IsActiveFlag_HPRE>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0f1      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d016      	beq.n	8007006 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff faf3 	bl	80065c8 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006fe2:	f7fd fa4b 	bl	800447c <HAL_GetTick>
 8006fe6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006fea:	f7fd fa47 	bl	800447c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e0d5      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006ffc:	f7ff fbde 	bl	80067bc <LL_RCC_IsActiveFlag_C2HPRE>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0f1      	beq.n	8006fea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d016      	beq.n	8007040 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff faec 	bl	80065f4 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800701c:	f7fd fa2e 	bl	800447c <HAL_GetTick>
 8007020:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007022:	e008      	b.n	8007036 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007024:	f7fd fa2a 	bl	800447c <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e0b8      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007036:	f7ff fbd4 	bl	80067e2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f1      	beq.n	8007024 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d016      	beq.n	800707a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fae6 	bl	8006622 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007056:	f7fd fa11 	bl	800447c <HAL_GetTick>
 800705a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800705c:	e008      	b.n	8007070 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800705e:	f7fd fa0d 	bl	800447c <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e09b      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007070:	f7ff fbca 	bl	8006808 <LL_RCC_IsActiveFlag_PPRE1>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f1      	beq.n	800705e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d017      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff fadc 	bl	800664a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007092:	f7fd f9f3 	bl	800447c <HAL_GetTick>
 8007096:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007098:	e008      	b.n	80070ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800709a:	f7fd f9ef 	bl	800447c <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e07d      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80070ac:	f7ff fbbe 	bl	800682c <LL_RCC_IsActiveFlag_PPRE2>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0f1      	beq.n	800709a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d043      	beq.n	800714a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d106      	bne.n	80070d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80070ca:	f7ff f87c 	bl	80061c6 <LL_RCC_HSE_IsReady>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11e      	bne.n	8007112 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e067      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d106      	bne.n	80070ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80070e0:	f7ff fb17 	bl	8006712 <LL_RCC_PLL_IsReady>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d113      	bne.n	8007112 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e05c      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80070f6:	f7ff f9e4 	bl	80064c2 <LL_RCC_MSI_IsReady>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e051      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007104:	f7ff f88f 	bl	8006226 <LL_RCC_HSI_IsReady>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e04a      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fa22 	bl	8006560 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711c:	f7fd f9ae 	bl	800447c <HAL_GetTick>
 8007120:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007122:	e00a      	b.n	800713a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007124:	f7fd f9aa 	bl	800447c <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007132:	4293      	cmp	r3, r2
 8007134:	d901      	bls.n	800713a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e036      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800713a:	f7ff fa25 	bl	8006588 <LL_RCC_GetSysClkSource>
 800713e:	4602      	mov	r2, r0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	429a      	cmp	r2, r3
 8007148:	d1ec      	bne.n	8007124 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800714a:	4b19      	ldr	r3, [pc, #100]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d21b      	bcs.n	8007190 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f023 0207 	bic.w	r2, r3, #7
 8007160:	4913      	ldr	r1, [pc, #76]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	4313      	orrs	r3, r2
 8007166:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007168:	f7fd f988 	bl	800447c <HAL_GetTick>
 800716c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800716e:	e008      	b.n	8007182 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007170:	f7fd f984 	bl	800447c <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e012      	b.n	80071a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007182:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <HAL_RCC_ClockConfig+0x278>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d1ef      	bne.n	8007170 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007190:	f000 f87e 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 8007194:	4603      	mov	r3, r0
 8007196:	4a07      	ldr	r2, [pc, #28]	; (80071b4 <HAL_RCC_ClockConfig+0x27c>)
 8007198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800719a:	f7fd f97b 	bl	8004494 <HAL_GetTickPrio>
 800719e:	4603      	mov	r3, r0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fd f91d 	bl	80043e0 <HAL_InitTick>
 80071a6:	4603      	mov	r3, r0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	58004000 	.word	0x58004000
 80071b4:	2000002c 	.word	0x2000002c

080071b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071be:	f7ff f9e3 	bl	8006588 <LL_RCC_GetSysClkSource>
 80071c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80071ca:	f7ff f99f 	bl	800650c <LL_RCC_MSI_GetRange>
 80071ce:	4603      	mov	r3, r0
 80071d0:	091b      	lsrs	r3, r3, #4
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	4a2b      	ldr	r2, [pc, #172]	; (8007284 <HAL_RCC_GetSysClockFreq+0xcc>)
 80071d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	e04b      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d102      	bne.n	80071ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071e6:	4b28      	ldr	r3, [pc, #160]	; (8007288 <HAL_RCC_GetSysClockFreq+0xd0>)
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e045      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d10a      	bne.n	8007208 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80071f2:	f7fe ffb8 	bl	8006166 <LL_RCC_HSE_IsEnabledDiv2>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d102      	bne.n	8007202 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80071fc:	4b22      	ldr	r3, [pc, #136]	; (8007288 <HAL_RCC_GetSysClockFreq+0xd0>)
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e03a      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007202:	4b22      	ldr	r3, [pc, #136]	; (800728c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e037      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007208:	f7ff faba 	bl	8006780 <LL_RCC_PLL_GetMainSource>
 800720c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d003      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0x64>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b03      	cmp	r3, #3
 8007218:	d003      	beq.n	8007222 <HAL_RCC_GetSysClockFreq+0x6a>
 800721a:	e00d      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <HAL_RCC_GetSysClockFreq+0xd0>)
 800721e:	60bb      	str	r3, [r7, #8]
        break;
 8007220:	e015      	b.n	800724e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007222:	f7fe ffa0 	bl	8006166 <LL_RCC_HSE_IsEnabledDiv2>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d102      	bne.n	8007232 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800722c:	4b16      	ldr	r3, [pc, #88]	; (8007288 <HAL_RCC_GetSysClockFreq+0xd0>)
 800722e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007230:	e00d      	b.n	800724e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007234:	60bb      	str	r3, [r7, #8]
        break;
 8007236:	e00a      	b.n	800724e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007238:	f7ff f968 	bl	800650c <LL_RCC_MSI_GetRange>
 800723c:	4603      	mov	r3, r0
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	f003 030f 	and.w	r3, r3, #15
 8007244:	4a0f      	ldr	r2, [pc, #60]	; (8007284 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724a:	60bb      	str	r3, [r7, #8]
        break;
 800724c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800724e:	f7ff fa72 	bl	8006736 <LL_RCC_PLL_GetN>
 8007252:	4602      	mov	r2, r0
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	fb03 f402 	mul.w	r4, r3, r2
 800725a:	f7ff fa85 	bl	8006768 <LL_RCC_PLL_GetDivider>
 800725e:	4603      	mov	r3, r0
 8007260:	091b      	lsrs	r3, r3, #4
 8007262:	3301      	adds	r3, #1
 8007264:	fbb4 f4f3 	udiv	r4, r4, r3
 8007268:	f7ff fa72 	bl	8006750 <LL_RCC_PLL_GetR>
 800726c:	4603      	mov	r3, r0
 800726e:	0f5b      	lsrs	r3, r3, #29
 8007270:	3301      	adds	r3, #1
 8007272:	fbb4 f3f3 	udiv	r3, r4, r3
 8007276:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007278:	68fb      	ldr	r3, [r7, #12]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	bd90      	pop	{r4, r7, pc}
 8007282:	bf00      	nop
 8007284:	0800f7b4 	.word	0x0800f7b4
 8007288:	00f42400 	.word	0x00f42400
 800728c:	01e84800 	.word	0x01e84800

08007290 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007290:	b598      	push	{r3, r4, r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007294:	f7ff ff90 	bl	80071b8 <HAL_RCC_GetSysClockFreq>
 8007298:	4604      	mov	r4, r0
 800729a:	f7ff f9ea 	bl	8006672 <LL_RCC_GetAHBPrescaler>
 800729e:	4603      	mov	r3, r0
 80072a0:	091b      	lsrs	r3, r3, #4
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	4a03      	ldr	r2, [pc, #12]	; (80072b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80072a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	bd98      	pop	{r3, r4, r7, pc}
 80072b4:	0800f754 	.word	0x0800f754

080072b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b8:	b598      	push	{r3, r4, r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80072bc:	f7ff ffe8 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 80072c0:	4604      	mov	r4, r0
 80072c2:	f7ff f9f0 	bl	80066a6 <LL_RCC_GetAPB1Prescaler>
 80072c6:	4603      	mov	r3, r0
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80072dc:	4618      	mov	r0, r3
 80072de:	bd98      	pop	{r3, r4, r7, pc}
 80072e0:	0800f794 	.word	0x0800f794

080072e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072e4:	b598      	push	{r3, r4, r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80072e8:	f7ff ffd2 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 80072ec:	4604      	mov	r4, r0
 80072ee:	f7ff f9e6 	bl	80066be <LL_RCC_GetAPB2Prescaler>
 80072f2:	4603      	mov	r3, r0
 80072f4:	0adb      	lsrs	r3, r3, #11
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	4a04      	ldr	r2, [pc, #16]	; (800730c <HAL_RCC_GetPCLK2Freq+0x28>)
 80072fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007308:	4618      	mov	r0, r3
 800730a:	bd98      	pop	{r3, r4, r7, pc}
 800730c:	0800f794 	.word	0x0800f794

08007310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2bb0      	cmp	r3, #176	; 0xb0
 800731c:	d903      	bls.n	8007326 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800731e:	4b15      	ldr	r3, [pc, #84]	; (8007374 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	e007      	b.n	8007336 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	4a11      	ldr	r2, [pc, #68]	; (8007374 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007334:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007336:	f7ff f9a8 	bl	800668a <LL_RCC_GetAHB4Prescaler>
 800733a:	4603      	mov	r3, r0
 800733c:	091b      	lsrs	r3, r3, #4
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	4a0d      	ldr	r2, [pc, #52]	; (8007378 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4a0a      	ldr	r2, [pc, #40]	; (800737c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007354:	fba2 2303 	umull	r2, r3, r2, r3
 8007358:	0c9c      	lsrs	r4, r3, #18
 800735a:	f7fe febf 	bl	80060dc <HAL_PWREx_GetVoltageRange>
 800735e:	4603      	mov	r3, r0
 8007360:	4619      	mov	r1, r3
 8007362:	4620      	mov	r0, r4
 8007364:	f000 f80c 	bl	8007380 <RCC_SetFlashLatency>
 8007368:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	bd90      	pop	{r4, r7, pc}
 8007372:	bf00      	nop
 8007374:	0800f7b4 	.word	0x0800f7b4
 8007378:	0800f754 	.word	0x0800f754
 800737c:	431bde83 	.word	0x431bde83

08007380 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b093      	sub	sp, #76	; 0x4c
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800738a:	4b37      	ldr	r3, [pc, #220]	; (8007468 <RCC_SetFlashLatency+0xe8>)
 800738c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007396:	4a35      	ldr	r2, [pc, #212]	; (800746c <RCC_SetFlashLatency+0xec>)
 8007398:	f107 031c 	add.w	r3, r7, #28
 800739c:	ca07      	ldmia	r2, {r0, r1, r2}
 800739e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80073a2:	4b33      	ldr	r3, [pc, #204]	; (8007470 <RCC_SetFlashLatency+0xf0>)
 80073a4:	f107 040c 	add.w	r4, r7, #12
 80073a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80073ae:	2300      	movs	r3, #0
 80073b0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b8:	d11a      	bne.n	80073f0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	643b      	str	r3, [r7, #64]	; 0x40
 80073be:	e013      	b.n	80073e8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80073c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	3348      	adds	r3, #72	; 0x48
 80073c6:	443b      	add	r3, r7
 80073c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d807      	bhi.n	80073e2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80073d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	3348      	adds	r3, #72	; 0x48
 80073d8:	443b      	add	r3, r7
 80073da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80073de:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80073e0:	e020      	b.n	8007424 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80073e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e4:	3301      	adds	r3, #1
 80073e6:	643b      	str	r3, [r7, #64]	; 0x40
 80073e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d9e8      	bls.n	80073c0 <RCC_SetFlashLatency+0x40>
 80073ee:	e019      	b.n	8007424 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f4:	e013      	b.n	800741e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80073f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	3348      	adds	r3, #72	; 0x48
 80073fc:	443b      	add	r3, r7
 80073fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d807      	bhi.n	8007418 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	3348      	adds	r3, #72	; 0x48
 800740e:	443b      	add	r3, r7
 8007410:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007414:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007416:	e005      	b.n	8007424 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741a:	3301      	adds	r3, #1
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007420:	2b02      	cmp	r3, #2
 8007422:	d9e8      	bls.n	80073f6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007424:	4b13      	ldr	r3, [pc, #76]	; (8007474 <RCC_SetFlashLatency+0xf4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f023 0207 	bic.w	r2, r3, #7
 800742c:	4911      	ldr	r1, [pc, #68]	; (8007474 <RCC_SetFlashLatency+0xf4>)
 800742e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007430:	4313      	orrs	r3, r2
 8007432:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007434:	f7fd f822 	bl	800447c <HAL_GetTick>
 8007438:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800743a:	e008      	b.n	800744e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800743c:	f7fd f81e 	bl	800447c <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e007      	b.n	800745e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800744e:	4b09      	ldr	r3, [pc, #36]	; (8007474 <RCC_SetFlashLatency+0xf4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007458:	429a      	cmp	r2, r3
 800745a:	d1ef      	bne.n	800743c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	374c      	adds	r7, #76	; 0x4c
 8007462:	46bd      	mov	sp, r7
 8007464:	bd90      	pop	{r4, r7, pc}
 8007466:	bf00      	nop
 8007468:	0800f700 	.word	0x0800f700
 800746c:	0800f710 	.word	0x0800f710
 8007470:	0800f71c 	.word	0x0800f71c
 8007474:	58004000 	.word	0x58004000

08007478 <LL_RCC_LSE_IsEnabled>:
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800747c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <LL_RCC_LSE_IsEnabled+0x18>
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <LL_RCC_LSE_IsEnabled+0x1a>
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <LL_RCC_LSE_IsReady>:
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80074a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d101      	bne.n	80074b4 <LL_RCC_LSE_IsReady+0x18>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e000      	b.n	80074b6 <LL_RCC_LSE_IsReady+0x1a>
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LL_RCC_SetRFWKPClockSource>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80074c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <LL_RCC_SetSMPSClockSource>:
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80074f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	f023 0203 	bic.w	r2, r3, #3
 80074fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4313      	orrs	r3, r2
 8007506:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <LL_RCC_SetSMPSPrescaler>:
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800751c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4313      	orrs	r3, r2
 800752e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <LL_RCC_SetUSARTClockSource>:
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f023 0203 	bic.w	r2, r3, #3
 8007550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <LL_RCC_SetLPUARTClockSource>:
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007578:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800757c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <LL_RCC_SetI2CClockSource>:
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800759c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	091b      	lsrs	r3, r3, #4
 80075a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80075ac:	43db      	mvns	r3, r3
 80075ae:	401a      	ands	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80075b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <LL_RCC_SetLPTIMClockSource>:
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80075d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0c1b      	lsrs	r3, r3, #16
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	43db      	mvns	r3, r3
 80075e6:	401a      	ands	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <LL_RCC_SetSAIClockSource>:
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800760a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007612:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <LL_RCC_SetRNGClockSource>:
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4313      	orrs	r3, r2
 800764a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <LL_RCC_SetCLK48ClockSource>:
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800766e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4313      	orrs	r3, r2
 8007676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <LL_RCC_SetUSBClockSource>:
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ffe3 	bl	800765a <LL_RCC_SetCLK48ClockSource>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <LL_RCC_SetADCClockSource>:
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80076a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <LL_RCC_SetRTCClockSource>:
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80076d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <LL_RCC_GetRTCClockSource>:
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80076f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007700:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007704:	4618      	mov	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <LL_RCC_ForceBackupDomainReset>:
{
 800770e:	b480      	push	{r7}
 8007710:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800771e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007748:	bf00      	nop
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <LL_RCC_PLLSAI1_Enable>:
{
 8007752:	b480      	push	{r7}
 8007754:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007764:	6013      	str	r3, [r2, #0]
}
 8007766:	bf00      	nop
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <LL_RCC_PLLSAI1_Disable>:
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800777e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007782:	6013      	str	r3, [r2, #0]
}
 8007784:	bf00      	nop
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <LL_RCC_PLLSAI1_IsReady>:
{
 800778e:	b480      	push	{r7}
 8007790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800779c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077a0:	d101      	bne.n	80077a6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b088      	sub	sp, #32
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80077ba:	2300      	movs	r3, #0
 80077bc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80077be:	2300      	movs	r3, #0
 80077c0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d034      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077d6:	d021      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80077d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077dc:	d81b      	bhi.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077e2:	d01d      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80077e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077e8:	d815      	bhi.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80077ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077f2:	d110      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80077f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007802:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007804:	e00d      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f947 	bl	8007a9e <RCCEx_PLLSAI1_ConfigNP>
 8007810:	4603      	mov	r3, r0
 8007812:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007814:	e005      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	77fb      	strb	r3, [r7, #31]
        break;
 800781a:	e002      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800781c:	bf00      	nop
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007822:	7ffb      	ldrb	r3, [r7, #31]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d105      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fee8 	bl	8007602 <LL_RCC_SetSAIClockSource>
 8007832:	e001      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	7ffb      	ldrb	r3, [r7, #31]
 8007836:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007840:	2b00      	cmp	r3, #0
 8007842:	d046      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007844:	f7ff ff56 	bl	80076f4 <LL_RCC_GetRTCClockSource>
 8007848:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	429a      	cmp	r2, r3
 8007852:	d03c      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007854:	f7fe fbea 	bl	800602c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d105      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff ff30 	bl	80076c8 <LL_RCC_SetRTCClockSource>
 8007868:	e02e      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800786a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007872:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007874:	f7ff ff4b 	bl	800770e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007878:	f7ff ff5a 	bl	8007730 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800788a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007894:	f7ff fdf0 	bl	8007478 <LL_RCC_LSE_IsEnabled>
 8007898:	4603      	mov	r3, r0
 800789a:	2b01      	cmp	r3, #1
 800789c:	d114      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800789e:	f7fc fded 	bl	800447c <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80078a4:	e00b      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a6:	f7fc fde9 	bl	800447c <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d902      	bls.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	77fb      	strb	r3, [r7, #31]
              break;
 80078bc:	e004      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80078be:	f7ff fded 	bl	800749c <LL_RCC_LSE_IsReady>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d1ee      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80078c8:	7ffb      	ldrb	r3, [r7, #31]
 80078ca:	77bb      	strb	r3, [r7, #30]
 80078cc:	e001      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	7ffb      	ldrb	r3, [r7, #31]
 80078d0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff fe2a 	bl	800753c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fe35 	bl	8007568 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fe5d 	bl	80075ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fe52 	bl	80075ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fe2a 	bl	8007594 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff fe1f 	bl	8007594 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d022      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff fe8d 	bl	8007686 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007974:	d107      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007984:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800798e:	d10b      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f000 f8dd 	bl	8007b54 <RCCEx_PLLSAI1_ConfigNQ>
 800799a:	4603      	mov	r3, r0
 800799c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800799e:	7ffb      	ldrb	r3, [r7, #31]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80079a4:	7ffb      	ldrb	r3, [r7, #31]
 80079a6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d02b      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079bc:	d008      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c6:	d003      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d105      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff fe2a 	bl	800762e <LL_RCC_SetRNGClockSource>
 80079da:	e00a      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	2000      	movs	r0, #0
 80079e8:	f7ff fe21 	bl	800762e <LL_RCC_SetRNGClockSource>
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7ff fe34 	bl	800765a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80079fa:	d107      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80079fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d022      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff fe3d 	bl	800769c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a2a:	d107      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a3a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a44:	d10b      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f8dd 	bl	8007c0a <RCCEx_PLLSAI1_ConfigNR>
 8007a50:	4603      	mov	r3, r0
 8007a52:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007a54:	7ffb      	ldrb	r3, [r7, #31]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007a5a:	7ffb      	ldrb	r3, [r7, #31]
 8007a5c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d004      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fd26 	bl	80074c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fd45 	bl	8007514 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fd2c 	bl	80074ec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007a94:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007aaa:	f7ff fe61 	bl	8007770 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007aae:	f7fc fce5 	bl	800447c <HAL_GetTick>
 8007ab2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007ab4:	e009      	b.n	8007aca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ab6:	f7fc fce1 	bl	800447c <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d902      	bls.n	8007aca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac8:	e004      	b.n	8007ad4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007aca:	f7ff fe60 	bl	800778e <LL_RCC_PLLSAI1_IsReady>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1f0      	bne.n	8007ab6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d137      	bne.n	8007b4a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aee:	4313      	orrs	r3, r2
 8007af0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b04:	4313      	orrs	r3, r2
 8007b06:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b08:	f7ff fe23 	bl	8007752 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b0c:	f7fc fcb6 	bl	800447c <HAL_GetTick>
 8007b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b12:	e009      	b.n	8007b28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b14:	f7fc fcb2 	bl	800447c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d902      	bls.n	8007b28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	73fb      	strb	r3, [r7, #15]
        break;
 8007b26:	e004      	b.n	8007b32 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b28:	f7ff fe31 	bl	800778e <LL_RCC_PLLSAI1_IsReady>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d1f0      	bne.n	8007b14 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d108      	bne.n	8007b4a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3c:	691a      	ldr	r2, [r3, #16]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b46:	4313      	orrs	r3, r2
 8007b48:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007b60:	f7ff fe06 	bl	8007770 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b64:	f7fc fc8a 	bl	800447c <HAL_GetTick>
 8007b68:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b6a:	e009      	b.n	8007b80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b6c:	f7fc fc86 	bl	800447c <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d902      	bls.n	8007b80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7e:	e004      	b.n	8007b8a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b80:	f7ff fe05 	bl	800778e <LL_RCC_PLLSAI1_IsReady>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d137      	bne.n	8007c00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007bbe:	f7ff fdc8 	bl	8007752 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc2:	f7fc fc5b 	bl	800447c <HAL_GetTick>
 8007bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bc8:	e009      	b.n	8007bde <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bca:	f7fc fc57 	bl	800447c <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d902      	bls.n	8007bde <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	73fb      	strb	r3, [r7, #15]
        break;
 8007bdc:	e004      	b.n	8007be8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bde:	f7ff fdd6 	bl	800778e <LL_RCC_PLLSAI1_IsReady>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d1f0      	bne.n	8007bca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d108      	bne.n	8007c00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007c16:	f7ff fdab 	bl	8007770 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c1a:	f7fc fc2f 	bl	800447c <HAL_GetTick>
 8007c1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c20:	e009      	b.n	8007c36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c22:	f7fc fc2b 	bl	800447c <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d902      	bls.n	8007c36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	73fb      	strb	r3, [r7, #15]
      break;
 8007c34:	e004      	b.n	8007c40 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c36:	f7ff fdaa 	bl	800778e <LL_RCC_PLLSAI1_IsReady>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1f0      	bne.n	8007c22 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d137      	bne.n	8007cb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c70:	4313      	orrs	r3, r2
 8007c72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007c74:	f7ff fd6d 	bl	8007752 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c78:	f7fc fc00 	bl	800447c <HAL_GetTick>
 8007c7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c7e:	e009      	b.n	8007c94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c80:	f7fc fbfc 	bl	800447c <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d902      	bls.n	8007c94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	73fb      	strb	r3, [r7, #15]
        break;
 8007c92:	e004      	b.n	8007c9e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c94:	f7ff fd7b 	bl	800778e <LL_RCC_PLLSAI1_IsReady>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d1f0      	bne.n	8007c80 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d108      	bne.n	8007cb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca8:	691a      	ldr	r2, [r3, #16]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e09f      	b.n	8007e12 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7fc f8c2 	bl	8003e70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007cf4:	4b49      	ldr	r3, [pc, #292]	; (8007e1c <HAL_RTC_Init+0x15c>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0310 	and.w	r3, r3, #16
 8007cfc:	2b10      	cmp	r3, #16
 8007cfe:	d07e      	beq.n	8007dfe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	22ca      	movs	r2, #202	; 0xca
 8007d06:	625a      	str	r2, [r3, #36]	; 0x24
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2253      	movs	r2, #83	; 0x53
 8007d0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8ab 	bl	8007e6c <RTC_EnterInitMode>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	22ff      	movs	r2, #255	; 0xff
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2204      	movs	r2, #4
 8007d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]
 8007d30:	e067      	b.n	8007e02 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d44:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6899      	ldr	r1, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	68d2      	ldr	r2, [r2, #12]
 8007d6c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6919      	ldr	r1, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	041a      	lsls	r2, r3, #16
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d90:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0203 	bic.w	r2, r2, #3
 8007da0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0320 	and.w	r3, r3, #32
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d113      	bne.n	8007df0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f829 	bl	8007e20 <HAL_RTC_WaitForSynchro>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00d      	beq.n	8007df0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	22ff      	movs	r2, #255	; 0xff
 8007dda:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e010      	b.n	8007e12 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	22ff      	movs	r2, #255	; 0xff
 8007df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e001      	b.n	8007e02 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40002800 	.word	0x40002800

08007e20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007e38:	f7fc fb20 	bl	800447c <HAL_GetTick>
 8007e3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e3e:	e009      	b.n	8007e54 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e40:	f7fc fb1c 	bl	800447c <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e4e:	d901      	bls.n	8007e54 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e007      	b.n	8007e64 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0ee      	beq.n	8007e40 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d119      	bne.n	8007eb6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e8c:	f7fc faf6 	bl	800447c <HAL_GetTick>
 8007e90:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e92:	e009      	b.n	8007ea8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e94:	f7fc faf2 	bl	800447c <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ea2:	d901      	bls.n	8007ea8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e007      	b.n	8007eb8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0ee      	beq.n	8007e94 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e0a8      	b.n	800802c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	22ca      	movs	r2, #202	; 0xca
 8007ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2253      	movs	r2, #83	; 0x53
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d020      	beq.n	8007f4a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007f08:	f7fc fab8 	bl	800447c <HAL_GetTick>
 8007f0c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007f0e:	e015      	b.n	8007f3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f10:	f7fc fab4 	bl	800447c <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f1e:	d90d      	bls.n	8007f3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2203      	movs	r2, #3
 8007f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e077      	b.n	800802c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e2      	bne.n	8007f10 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f58:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007f6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007f6c:	f7fc fa86 	bl	800447c <HAL_GetTick>
 8007f70:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f72:	e015      	b.n	8007fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f74:	f7fc fa82 	bl	800447c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f82:	d90d      	bls.n	8007fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	22ff      	movs	r2, #255	; 0xff
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2203      	movs	r2, #3
 8007f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e045      	b.n	800802c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0e2      	beq.n	8007f74 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0207 	bic.w	r2, r2, #7
 8007fc4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6899      	ldr	r1, [r3, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007fd6:	4b17      	ldr	r3, [pc, #92]	; (8008034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fdc:	4a15      	ldr	r2, [pc, #84]	; (8008034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fe2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007fe6:	4b13      	ldr	r3, [pc, #76]	; (8008034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a12      	ldr	r2, [pc, #72]	; (8008034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ff0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008000:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008010:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	22ff      	movs	r2, #255	; 0xff
 8008018:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	58000800 	.word	0x58000800

08008038 <LL_RCC_GetUSARTClockSource>:
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008044:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4013      	ands	r3, r2
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <LL_RCC_GetLPUARTClockSource>:
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008064:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4013      	ands	r3, r2
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e042      	b.n	8008110 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	2b00      	cmp	r3, #0
 8008092:	d106      	bne.n	80080a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fb fdf5 	bl	8003c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2224      	movs	r2, #36	; 0x24
 80080a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fcd0 	bl	8008a60 <UART_SetConfig>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e022      	b.n	8008110 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 feec 	bl	8008eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0201 	orr.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 ff73 	bl	8008ff4 <UART_CheckIdleState>
 800810e:	4603      	mov	r3, r0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008118:	b480      	push	{r7}
 800811a:	b091      	sub	sp, #68	; 0x44
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812c:	2b20      	cmp	r3, #32
 800812e:	d178      	bne.n	8008222 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_UART_Transmit_IT+0x24>
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e071      	b.n	8008224 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	88fa      	ldrh	r2, [r7, #6]
 800814a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2221      	movs	r2, #33	; 0x21
 8008168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008174:	d12a      	bne.n	80081cc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817e:	d107      	bne.n	8008190 <HAL_UART_Transmit_IT+0x78>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4a29      	ldr	r2, [pc, #164]	; (8008230 <HAL_UART_Transmit_IT+0x118>)
 800818c:	679a      	str	r2, [r3, #120]	; 0x78
 800818e:	e002      	b.n	8008196 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a28      	ldr	r2, [pc, #160]	; (8008234 <HAL_UART_Transmit_IT+0x11c>)
 8008194:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3308      	adds	r3, #8
 800819c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081b6:	637a      	str	r2, [r7, #52]	; 0x34
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e5      	bne.n	8008196 <HAL_UART_Transmit_IT+0x7e>
 80081ca:	e028      	b.n	800821e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d4:	d107      	bne.n	80081e6 <HAL_UART_Transmit_IT+0xce>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d103      	bne.n	80081e6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <HAL_UART_Transmit_IT+0x120>)
 80081e2:	679a      	str	r2, [r3, #120]	; 0x78
 80081e4:	e002      	b.n	80081ec <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4a14      	ldr	r2, [pc, #80]	; (800823c <HAL_UART_Transmit_IT+0x124>)
 80081ea:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	613b      	str	r3, [r7, #16]
   return(result);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820a:	623b      	str	r3, [r7, #32]
 800820c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	69f9      	ldr	r1, [r7, #28]
 8008210:	6a3a      	ldr	r2, [r7, #32]
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	61bb      	str	r3, [r7, #24]
   return(result);
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e000      	b.n	8008224 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008222:	2302      	movs	r3, #2
  }
}
 8008224:	4618      	mov	r0, r3
 8008226:	3744      	adds	r7, #68	; 0x44
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	0800996f 	.word	0x0800996f
 8008234:	0800988f 	.word	0x0800988f
 8008238:	080097cd 	.word	0x080097cd
 800823c:	08009715 	.word	0x08009715

08008240 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	; 0x28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008254:	2b20      	cmp	r3, #32
 8008256:	d137      	bne.n	80082c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_UART_Receive_IT+0x24>
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e030      	b.n	80082ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <HAL_UART_Receive_IT+0x94>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d01f      	beq.n	80082b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	69f9      	ldr	r1, [r7, #28]
 80082aa:	6a3a      	ldr	r2, [r7, #32]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e6      	bne.n	8008286 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	461a      	mov	r2, r3
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 ffae 	bl	8009220 <UART_Start_Receive_IT>
 80082c4:	4603      	mov	r3, r0
 80082c6:	e000      	b.n	80082ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082c8:	2302      	movs	r3, #2
  }
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3728      	adds	r7, #40	; 0x28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	40008000 	.word	0x40008000

080082d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	; 0x28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d167      	bne.n	80083c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <HAL_UART_Transmit_DMA+0x24>
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e060      	b.n	80083c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2221      	movs	r2, #33	; 0x21
 8008322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d028      	beq.n	8008380 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	4a26      	ldr	r2, [pc, #152]	; (80083cc <HAL_UART_Transmit_DMA+0xf4>)
 8008334:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833a:	4a25      	ldr	r2, [pc, #148]	; (80083d0 <HAL_UART_Transmit_DMA+0xf8>)
 800833c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008342:	4a24      	ldr	r2, [pc, #144]	; (80083d4 <HAL_UART_Transmit_DMA+0xfc>)
 8008344:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834a:	2200      	movs	r2, #0
 800834c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008356:	4619      	mov	r1, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3328      	adds	r3, #40	; 0x28
 800835e:	461a      	mov	r2, r3
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	f7fc fb11 	bl	8004988 <HAL_DMA_Start_IT>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d009      	beq.n	8008380 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2210      	movs	r2, #16
 8008370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e020      	b.n	80083c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2240      	movs	r2, #64	; 0x40
 8008386:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	613b      	str	r3, [r7, #16]
   return(result);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a8:	623a      	str	r2, [r7, #32]
 80083aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	6a3a      	ldr	r2, [r7, #32]
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e5      	bne.n	8008388 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	e000      	b.n	80083c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80083c0:	2302      	movs	r3, #2
  }
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3728      	adds	r7, #40	; 0x28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	080095b3 	.word	0x080095b3
 80083d0:	0800964d 	.word	0x0800964d
 80083d4:	08009669 	.word	0x08009669

080083d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b0ba      	sub	sp, #232	; 0xe8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008402:	f640 030f 	movw	r3, #2063	; 0x80f
 8008406:	4013      	ands	r3, r2
 8008408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800840c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d11b      	bne.n	800844c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008418:	f003 0320 	and.w	r3, r3, #32
 800841c:	2b00      	cmp	r3, #0
 800841e:	d015      	beq.n	800844c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d105      	bne.n	8008438 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800842c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 82e3 	beq.w	8008a08 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
      }
      return;
 800844a:	e2dd      	b.n	8008a08 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800844c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8123 	beq.w	800869c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008456:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800845a:	4b8d      	ldr	r3, [pc, #564]	; (8008690 <HAL_UART_IRQHandler+0x2b8>)
 800845c:	4013      	ands	r3, r2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008462:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008466:	4b8b      	ldr	r3, [pc, #556]	; (8008694 <HAL_UART_IRQHandler+0x2bc>)
 8008468:	4013      	ands	r3, r2
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8116 	beq.w	800869c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d011      	beq.n	80084a0 <HAL_UART_IRQHandler+0xc8>
 800847c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2201      	movs	r2, #1
 800848e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008496:	f043 0201 	orr.w	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d011      	beq.n	80084d0 <HAL_UART_IRQHandler+0xf8>
 80084ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2202      	movs	r2, #2
 80084be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c6:	f043 0204 	orr.w	r2, r3, #4
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d011      	beq.n	8008500 <HAL_UART_IRQHandler+0x128>
 80084dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2204      	movs	r2, #4
 80084ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f6:	f043 0202 	orr.w	r2, r3, #2
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d017      	beq.n	800853c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008518:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800851c:	4b5c      	ldr	r3, [pc, #368]	; (8008690 <HAL_UART_IRQHandler+0x2b8>)
 800851e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2208      	movs	r2, #8
 800852a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008532:	f043 0208 	orr.w	r2, r3, #8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800853c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008544:	2b00      	cmp	r3, #0
 8008546:	d012      	beq.n	800856e <HAL_UART_IRQHandler+0x196>
 8008548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800855c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008564:	f043 0220 	orr.w	r2, r3, #32
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 8249 	beq.w	8008a0c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800857a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d013      	beq.n	80085ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d007      	beq.n	80085ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c2:	2b40      	cmp	r3, #64	; 0x40
 80085c4:	d005      	beq.n	80085d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d054      	beq.n	800867c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 ff87 	bl	80094e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d146      	bne.n	8008674 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3308      	adds	r3, #8
 80085ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008612:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800861e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800862a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1d9      	bne.n	80085e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008638:	2b00      	cmp	r3, #0
 800863a:	d017      	beq.n	800866c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008642:	4a15      	ldr	r2, [pc, #84]	; (8008698 <HAL_UART_IRQHandler+0x2c0>)
 8008644:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864c:	4618      	mov	r0, r3
 800864e:	f7fc fa75 	bl	8004b3c <HAL_DMA_Abort_IT>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d019      	beq.n	800868c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008666:	4610      	mov	r0, r2
 8008668:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866a:	e00f      	b.n	800868c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9e1 	bl	8008a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008672:	e00b      	b.n	800868c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f9dd 	bl	8008a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800867a:	e007      	b.n	800868c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f9d9 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800868a:	e1bf      	b.n	8008a0c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868c:	bf00      	nop
    return;
 800868e:	e1bd      	b.n	8008a0c <HAL_UART_IRQHandler+0x634>
 8008690:	10000001 	.word	0x10000001
 8008694:	04000120 	.word	0x04000120
 8008698:	080096e9 	.word	0x080096e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	f040 8153 	bne.w	800894c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 814c 	beq.w	800894c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8145 	beq.w	800894c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2210      	movs	r2, #16
 80086c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b40      	cmp	r3, #64	; 0x40
 80086d6:	f040 80bb 	bne.w	8008850 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 818f 	beq.w	8008a10 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086fc:	429a      	cmp	r2, r3
 80086fe:	f080 8187 	bcs.w	8008a10 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 8087 	bne.w	800882e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800873c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800874a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800874e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008756:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1da      	bne.n	8008720 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3308      	adds	r3, #8
 8008770:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800877a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3308      	adds	r3, #8
 800878a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800878e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008792:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008796:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e1      	bne.n	800876a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3308      	adds	r3, #8
 80087ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e3      	bne.n	80087a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087fc:	f023 0310 	bic.w	r3, r3, #16
 8008800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800880e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008810:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008814:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800881c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e4      	bne.n	80087ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008828:	4618      	mov	r0, r3
 800882a:	f7fc f928 	bl	8004a7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008840:	b29b      	uxth	r3, r3
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	b29b      	uxth	r3, r3
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f8fd 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800884e:	e0df      	b.n	8008a10 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800885c:	b29b      	uxth	r3, r3
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80d1 	beq.w	8008a14 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80cc 	beq.w	8008a14 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800889e:	647b      	str	r3, [r7, #68]	; 0x44
 80088a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e4      	bne.n	800887c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3308      	adds	r3, #8
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	623b      	str	r3, [r7, #32]
   return(result);
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088da:	633a      	str	r2, [r7, #48]	; 0x30
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e1      	bne.n	80088b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0310 	bic.w	r3, r3, #16
 8008916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	69b9      	ldr	r1, [r7, #24]
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	617b      	str	r3, [r7, #20]
   return(result);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e4      	bne.n	8008902 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800893e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f87f 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800894a:	e063      	b.n	8008a14 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800894c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00e      	beq.n	8008976 <HAL_UART_IRQHandler+0x59e>
 8008958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800895c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800896c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fdba 	bl	800a4e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008974:	e051      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800897e:	2b00      	cmp	r3, #0
 8008980:	d014      	beq.n	80089ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898a:	2b00      	cmp	r3, #0
 800898c:	d105      	bne.n	800899a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800898e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d008      	beq.n	80089ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d03a      	beq.n	8008a18 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
    }
    return;
 80089aa:	e035      	b.n	8008a18 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d009      	beq.n	80089cc <HAL_UART_IRQHandler+0x5f4>
 80089b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f847 	bl	8009a58 <UART_EndTransmit_IT>
    return;
 80089ca:	e026      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <HAL_UART_IRQHandler+0x614>
 80089d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fd93 	bl	800a510 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ea:	e016      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d010      	beq.n	8008a1a <HAL_UART_IRQHandler+0x642>
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da0c      	bge.n	8008a1a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 fd7b 	bl	800a4fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a06:	e008      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
      return;
 8008a08:	bf00      	nop
 8008a0a:	e006      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
    return;
 8008a0c:	bf00      	nop
 8008a0e:	e004      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
      return;
 8008a10:	bf00      	nop
 8008a12:	e002      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
      return;
 8008a14:	bf00      	nop
 8008a16:	e000      	b.n	8008a1a <HAL_UART_IRQHandler+0x642>
    return;
 8008a18:	bf00      	nop
  }
}
 8008a1a:	37e8      	adds	r7, #232	; 0xe8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a64:	b08c      	sub	sp, #48	; 0x30
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	4baf      	ldr	r3, [pc, #700]	; (8008d4c <UART_SetConfig+0x2ec>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	6812      	ldr	r2, [r2, #0]
 8008a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4aa4      	ldr	r2, [pc, #656]	; (8008d50 <UART_SetConfig+0x2f0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d004      	beq.n	8008acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008ad6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	f023 010f 	bic.w	r1, r3, #15
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a95      	ldr	r2, [pc, #596]	; (8008d54 <UART_SetConfig+0x2f4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d125      	bne.n	8008b50 <UART_SetConfig+0xf0>
 8008b04:	2003      	movs	r0, #3
 8008b06:	f7ff fa97 	bl	8008038 <LL_RCC_GetUSARTClockSource>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d81b      	bhi.n	8008b48 <UART_SetConfig+0xe8>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <UART_SetConfig+0xb8>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b29 	.word	0x08008b29
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	08008b31 	.word	0x08008b31
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	2301      	movs	r3, #1
 8008b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b2e:	e042      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008b30:	2302      	movs	r3, #2
 8008b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b36:	e03e      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008b38:	2304      	movs	r3, #4
 8008b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b3e:	e03a      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008b40:	2308      	movs	r3, #8
 8008b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b46:	e036      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008b48:	2310      	movs	r3, #16
 8008b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b4e:	e032      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a7e      	ldr	r2, [pc, #504]	; (8008d50 <UART_SetConfig+0x2f0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d12a      	bne.n	8008bb0 <UART_SetConfig+0x150>
 8008b5a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008b5e:	f7ff fa7b 	bl	8008058 <LL_RCC_GetLPUARTClockSource>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b68:	d01a      	beq.n	8008ba0 <UART_SetConfig+0x140>
 8008b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b6e:	d81b      	bhi.n	8008ba8 <UART_SetConfig+0x148>
 8008b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b74:	d00c      	beq.n	8008b90 <UART_SetConfig+0x130>
 8008b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b7a:	d815      	bhi.n	8008ba8 <UART_SetConfig+0x148>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <UART_SetConfig+0x128>
 8008b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b84:	d008      	beq.n	8008b98 <UART_SetConfig+0x138>
 8008b86:	e00f      	b.n	8008ba8 <UART_SetConfig+0x148>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b8e:	e012      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008b90:	2302      	movs	r3, #2
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b96:	e00e      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b9e:	e00a      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba6:	e006      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008ba8:	2310      	movs	r3, #16
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bae:	e002      	b.n	8008bb6 <UART_SetConfig+0x156>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a65      	ldr	r2, [pc, #404]	; (8008d50 <UART_SetConfig+0x2f0>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	f040 8097 	bne.w	8008cf0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	d823      	bhi.n	8008c12 <UART_SetConfig+0x1b2>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x170>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008c13 	.word	0x08008c13
 8008bd8:	08008bfd 	.word	0x08008bfd
 8008bdc:	08008c13 	.word	0x08008c13
 8008be0:	08008c03 	.word	0x08008c03
 8008be4:	08008c13 	.word	0x08008c13
 8008be8:	08008c13 	.word	0x08008c13
 8008bec:	08008c13 	.word	0x08008c13
 8008bf0:	08008c0b 	.word	0x08008c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf4:	f7fe fb60 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8008bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bfa:	e010      	b.n	8008c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bfc:	4b56      	ldr	r3, [pc, #344]	; (8008d58 <UART_SetConfig+0x2f8>)
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c00:	e00d      	b.n	8008c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c02:	f7fe fad9 	bl	80071b8 <HAL_RCC_GetSysClockFreq>
 8008c06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c08:	e009      	b.n	8008c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0a:	f248 0306 	movw	r3, #32774	; 0x8006
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c10:	e005      	b.n	8008c1e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 812b 	beq.w	8008e7c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	4a4c      	ldr	r2, [pc, #304]	; (8008d5c <UART_SetConfig+0x2fc>)
 8008c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	4413      	add	r3, r2
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d305      	bcc.n	8008c56 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d903      	bls.n	8008c5e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c5c:	e10e      	b.n	8008e7c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	2200      	movs	r2, #0
 8008c62:	60bb      	str	r3, [r7, #8]
 8008c64:	60fa      	str	r2, [r7, #12]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	4a3c      	ldr	r2, [pc, #240]	; (8008d5c <UART_SetConfig+0x2fc>)
 8008c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2200      	movs	r2, #0
 8008c74:	603b      	str	r3, [r7, #0]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c80:	f7f7 fae6 	bl	8000250 <__aeabi_uldivmod>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	020b      	lsls	r3, r1, #8
 8008c96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c9a:	0202      	lsls	r2, r0, #8
 8008c9c:	6979      	ldr	r1, [r7, #20]
 8008c9e:	6849      	ldr	r1, [r1, #4]
 8008ca0:	0849      	lsrs	r1, r1, #1
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	eb12 0804 	adds.w	r8, r2, r4
 8008cac:	eb43 0905 	adc.w	r9, r3, r5
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	469a      	mov	sl, r3
 8008cb8:	4693      	mov	fp, r2
 8008cba:	4652      	mov	r2, sl
 8008cbc:	465b      	mov	r3, fp
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fac5 	bl	8000250 <__aeabi_uldivmod>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4613      	mov	r3, r2
 8008ccc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cd4:	d308      	bcc.n	8008ce8 <UART_SetConfig+0x288>
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cdc:	d204      	bcs.n	8008ce8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6a3a      	ldr	r2, [r7, #32]
 8008ce4:	60da      	str	r2, [r3, #12]
 8008ce6:	e0c9      	b.n	8008e7c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008cee:	e0c5      	b.n	8008e7c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf8:	d16d      	bne.n	8008dd6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	d82d      	bhi.n	8008d60 <UART_SetConfig+0x300>
 8008d04:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <UART_SetConfig+0x2ac>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d61 	.word	0x08008d61
 8008d18:	08008d3b 	.word	0x08008d3b
 8008d1c:	08008d61 	.word	0x08008d61
 8008d20:	08008d61 	.word	0x08008d61
 8008d24:	08008d61 	.word	0x08008d61
 8008d28:	08008d43 	.word	0x08008d43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d2c:	f7fe fada 	bl	80072e4 <HAL_RCC_GetPCLK2Freq>
 8008d30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d32:	e01b      	b.n	8008d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <UART_SetConfig+0x2f8>)
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d38:	e018      	b.n	8008d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d3a:	f7fe fa3d 	bl	80071b8 <HAL_RCC_GetSysClockFreq>
 8008d3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d40:	e014      	b.n	8008d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d42:	f248 0306 	movw	r3, #32774	; 0x8006
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d48:	e010      	b.n	8008d6c <UART_SetConfig+0x30c>
 8008d4a:	bf00      	nop
 8008d4c:	cfff69f3 	.word	0xcfff69f3
 8008d50:	40008000 	.word	0x40008000
 8008d54:	40013800 	.word	0x40013800
 8008d58:	00f42400 	.word	0x00f42400
 8008d5c:	0800f7f4 	.word	0x0800f7f4
      default:
        pclk = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8084 	beq.w	8008e7c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	4a4b      	ldr	r2, [pc, #300]	; (8008ea8 <UART_SetConfig+0x448>)
 8008d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d86:	005a      	lsls	r2, r3, #1
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	085b      	lsrs	r3, r3, #1
 8008d8e:	441a      	add	r2, r3
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d98:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	2b0f      	cmp	r3, #15
 8008d9e:	d916      	bls.n	8008dce <UART_SetConfig+0x36e>
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da6:	d212      	bcs.n	8008dce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f023 030f 	bic.w	r3, r3, #15
 8008db0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	085b      	lsrs	r3, r3, #1
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	8bfb      	ldrh	r3, [r7, #30]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	8bfa      	ldrh	r2, [r7, #30]
 8008dca:	60da      	str	r2, [r3, #12]
 8008dcc:	e056      	b.n	8008e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008dd4:	e052      	b.n	8008e7c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	2b07      	cmp	r3, #7
 8008dde:	d822      	bhi.n	8008e26 <UART_SetConfig+0x3c6>
 8008de0:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <UART_SetConfig+0x388>)
 8008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de6:	bf00      	nop
 8008de8:	08008e09 	.word	0x08008e09
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e27 	.word	0x08008e27
 8008df4:	08008e17 	.word	0x08008e17
 8008df8:	08008e27 	.word	0x08008e27
 8008dfc:	08008e27 	.word	0x08008e27
 8008e00:	08008e27 	.word	0x08008e27
 8008e04:	08008e1f 	.word	0x08008e1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e08:	f7fe fa6c 	bl	80072e4 <HAL_RCC_GetPCLK2Freq>
 8008e0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e0e:	e010      	b.n	8008e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e10:	4b26      	ldr	r3, [pc, #152]	; (8008eac <UART_SetConfig+0x44c>)
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e14:	e00d      	b.n	8008e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e16:	f7fe f9cf 	bl	80071b8 <HAL_RCC_GetSysClockFreq>
 8008e1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e1c:	e009      	b.n	8008e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e1e:	f248 0306 	movw	r3, #32774	; 0x8006
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e24:	e005      	b.n	8008e32 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e30:	bf00      	nop
    }

    if (pclk != 0U)
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d021      	beq.n	8008e7c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	4a1a      	ldr	r2, [pc, #104]	; (8008ea8 <UART_SetConfig+0x448>)
 8008e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e42:	461a      	mov	r2, r3
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	085b      	lsrs	r3, r3, #1
 8008e50:	441a      	add	r2, r3
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	2b0f      	cmp	r3, #15
 8008e60:	d909      	bls.n	8008e76 <UART_SetConfig+0x416>
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e68:	d205      	bcs.n	8008e76 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60da      	str	r2, [r3, #12]
 8008e74:	e002      	b.n	8008e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2200      	movs	r2, #0
 8008e96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008e98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3730      	adds	r7, #48	; 0x30
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ea6:	bf00      	nop
 8008ea8:	0800f7f4 	.word	0x0800f7f4
 8008eac:	00f42400 	.word	0x00f42400

08008eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01a      	beq.n	8008fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fae:	d10a      	bne.n	8008fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	605a      	str	r2, [r3, #4]
  }
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009004:	f7fb fa3a 	bl	800447c <HAL_GetTick>
 8009008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b08      	cmp	r3, #8
 8009016:	d10e      	bne.n	8009036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f832 	bl	8009090 <UART_WaitOnFlagUntilTimeout>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e028      	b.n	8009088 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b04      	cmp	r3, #4
 8009042:	d10e      	bne.n	8009062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f81c 	bl	8009090 <UART_WaitOnFlagUntilTimeout>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e012      	b.n	8009088 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b09c      	sub	sp, #112	; 0x70
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	4613      	mov	r3, r2
 800909e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a0:	e0a9      	b.n	80091f6 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a8:	f000 80a5 	beq.w	80091f6 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ac:	f7fb f9e6 	bl	800447c <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d302      	bcc.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x32>
 80090bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d140      	bne.n	8009144 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090d6:	667b      	str	r3, [r7, #100]	; 0x64
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090e2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3308      	adds	r3, #8
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	663b      	str	r3, [r7, #96]	; 0x60
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3308      	adds	r3, #8
 8009112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009114:	64ba      	str	r2, [r7, #72]	; 0x48
 8009116:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800911a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e5      	bne.n	80090f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2220      	movs	r2, #32
 800912c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2220      	movs	r2, #32
 8009134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e069      	b.n	8009218 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d051      	beq.n	80091f6 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800915c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009160:	d149      	bne.n	80091f6 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800916a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009180:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800918a:	637b      	str	r3, [r7, #52]	; 0x34
 800918c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	613b      	str	r3, [r7, #16]
   return(result);
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f023 0301 	bic.w	r3, r3, #1
 80091b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091be:	623a      	str	r2, [r7, #32]
 80091c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	69f9      	ldr	r1, [r7, #28]
 80091c4:	6a3a      	ldr	r2, [r7, #32]
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e5      	bne.n	800919e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2220      	movs	r2, #32
 80091de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e010      	b.n	8009218 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69da      	ldr	r2, [r3, #28]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4013      	ands	r3, r2
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	429a      	cmp	r2, r3
 8009204:	bf0c      	ite	eq
 8009206:	2301      	moveq	r3, #1
 8009208:	2300      	movne	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	461a      	mov	r2, r3
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	429a      	cmp	r2, r3
 8009212:	f43f af46 	beq.w	80090a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3770      	adds	r7, #112	; 0x70
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009220:	b480      	push	{r7}
 8009222:	b0a3      	sub	sp, #140	; 0x8c
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4613      	mov	r3, r2
 800922c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	88fa      	ldrh	r2, [r7, #6]
 8009238:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	88fa      	ldrh	r2, [r7, #6]
 8009240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009252:	d10e      	bne.n	8009272 <UART_Start_Receive_IT+0x52>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d105      	bne.n	8009268 <UART_Start_Receive_IT+0x48>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009262:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009266:	e02d      	b.n	80092c4 <UART_Start_Receive_IT+0xa4>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	22ff      	movs	r2, #255	; 0xff
 800926c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009270:	e028      	b.n	80092c4 <UART_Start_Receive_IT+0xa4>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10d      	bne.n	8009296 <UART_Start_Receive_IT+0x76>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d104      	bne.n	800928c <UART_Start_Receive_IT+0x6c>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	22ff      	movs	r2, #255	; 0xff
 8009286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800928a:	e01b      	b.n	80092c4 <UART_Start_Receive_IT+0xa4>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	227f      	movs	r2, #127	; 0x7f
 8009290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009294:	e016      	b.n	80092c4 <UART_Start_Receive_IT+0xa4>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800929e:	d10d      	bne.n	80092bc <UART_Start_Receive_IT+0x9c>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <UART_Start_Receive_IT+0x92>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	227f      	movs	r2, #127	; 0x7f
 80092ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092b0:	e008      	b.n	80092c4 <UART_Start_Receive_IT+0xa4>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	223f      	movs	r2, #63	; 0x3f
 80092b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092ba:	e003      	b.n	80092c4 <UART_Start_Receive_IT+0xa4>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2222      	movs	r2, #34	; 0x22
 80092d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3308      	adds	r3, #8
 80092da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092e6:	f043 0301 	orr.w	r3, r3, #1
 80092ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80092f8:	673a      	str	r2, [r7, #112]	; 0x70
 80092fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80092fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e3      	bne.n	80092d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009314:	d14f      	bne.n	80093b6 <UART_Start_Receive_IT+0x196>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800931c:	88fa      	ldrh	r2, [r7, #6]
 800931e:	429a      	cmp	r2, r3
 8009320:	d349      	bcc.n	80093b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932a:	d107      	bne.n	800933c <UART_Start_Receive_IT+0x11c>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d103      	bne.n	800933c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a47      	ldr	r2, [pc, #284]	; (8009454 <UART_Start_Receive_IT+0x234>)
 8009338:	675a      	str	r2, [r3, #116]	; 0x74
 800933a:	e002      	b.n	8009342 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4a46      	ldr	r2, [pc, #280]	; (8009458 <UART_Start_Receive_IT+0x238>)
 8009340:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01a      	beq.n	8009380 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800935e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800936c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800936e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009372:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800937a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e4      	bne.n	800934a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009396:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80093a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80093a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e5      	bne.n	8009380 <UART_Start_Receive_IT+0x160>
 80093b4:	e046      	b.n	8009444 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093be:	d107      	bne.n	80093d0 <UART_Start_Receive_IT+0x1b0>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d103      	bne.n	80093d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4a24      	ldr	r2, [pc, #144]	; (800945c <UART_Start_Receive_IT+0x23c>)
 80093cc:	675a      	str	r2, [r3, #116]	; 0x74
 80093ce:	e002      	b.n	80093d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4a23      	ldr	r2, [pc, #140]	; (8009460 <UART_Start_Receive_IT+0x240>)
 80093d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d019      	beq.n	8009412 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80093f2:	677b      	str	r3, [r7, #116]	; 0x74
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093fc:	637b      	str	r3, [r7, #52]	; 0x34
 80093fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e6      	bne.n	80093de <UART_Start_Receive_IT+0x1be>
 8009410:	e018      	b.n	8009444 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	613b      	str	r3, [r7, #16]
   return(result);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f043 0320 	orr.w	r3, r3, #32
 8009426:	67bb      	str	r3, [r7, #120]	; 0x78
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009430:	623b      	str	r3, [r7, #32]
 8009432:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	69f9      	ldr	r1, [r7, #28]
 8009436:	6a3a      	ldr	r2, [r7, #32]
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	61bb      	str	r3, [r7, #24]
   return(result);
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e6      	bne.n	8009412 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	378c      	adds	r7, #140	; 0x8c
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	0800a181 	.word	0x0800a181
 8009458:	08009e21 	.word	0x08009e21
 800945c:	08009c69 	.word	0x08009c69
 8009460:	08009ab1 	.word	0x08009ab1

08009464 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009464:	b480      	push	{r7}
 8009466:	b08f      	sub	sp, #60	; 0x3c
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	61fb      	str	r3, [r7, #28]
   return(result);
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009480:	637b      	str	r3, [r7, #52]	; 0x34
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800948c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e6      	bne.n	800946c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3308      	adds	r3, #8
 80094a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80094b4:	633b      	str	r3, [r7, #48]	; 0x30
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094be:	61ba      	str	r2, [r7, #24]
 80094c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6979      	ldr	r1, [r7, #20]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	613b      	str	r3, [r7, #16]
   return(result);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e5      	bne.n	800949e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80094da:	bf00      	nop
 80094dc:	373c      	adds	r7, #60	; 0x3c
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b095      	sub	sp, #84	; 0x54
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800950c:	643b      	str	r3, [r7, #64]	; 0x40
 800950e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e6      	bne.n	80094ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3308      	adds	r3, #8
 8009526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009536:	f023 0301 	bic.w	r3, r3, #1
 800953a:	64bb      	str	r3, [r7, #72]	; 0x48
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3308      	adds	r3, #8
 8009542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800954a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e3      	bne.n	8009520 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955c:	2b01      	cmp	r3, #1
 800955e:	d118      	bne.n	8009592 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	60bb      	str	r3, [r7, #8]
   return(result);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f023 0310 	bic.w	r3, r3, #16
 8009574:	647b      	str	r3, [r7, #68]	; 0x44
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800957e:	61bb      	str	r3, [r7, #24]
 8009580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6979      	ldr	r1, [r7, #20]
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	613b      	str	r3, [r7, #16]
   return(result);
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e6      	bne.n	8009560 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2220      	movs	r2, #32
 8009596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80095a6:	bf00      	nop
 80095a8:	3754      	adds	r7, #84	; 0x54
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b090      	sub	sp, #64	; 0x40
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d137      	bne.n	800963e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80095ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	623b      	str	r3, [r7, #32]
   return(result);
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80095ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f6:	633a      	str	r2, [r7, #48]	; 0x30
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e5      	bne.n	80095d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	60fb      	str	r3, [r7, #12]
   return(result);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	61fb      	str	r3, [r7, #28]
 800962a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	69b9      	ldr	r1, [r7, #24]
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	e841 2300 	strex	r3, r2, [r1]
 8009634:	617b      	str	r3, [r7, #20]
   return(result);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e6      	bne.n	800960a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800963c:	e002      	b.n	8009644 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800963e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009640:	f7f9 ffa2 	bl	8003588 <HAL_UART_TxCpltCallback>
}
 8009644:	bf00      	nop
 8009646:	3740      	adds	r7, #64	; 0x40
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f7ff f9e0 	bl	8008a20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009684:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009690:	2b80      	cmp	r3, #128	; 0x80
 8009692:	d109      	bne.n	80096a8 <UART_DMAError+0x40>
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2b21      	cmp	r3, #33	; 0x21
 8009698:	d106      	bne.n	80096a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2200      	movs	r2, #0
 800969e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80096a2:	6978      	ldr	r0, [r7, #20]
 80096a4:	f7ff fede 	bl	8009464 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b2:	2b40      	cmp	r3, #64	; 0x40
 80096b4:	d109      	bne.n	80096ca <UART_DMAError+0x62>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b22      	cmp	r3, #34	; 0x22
 80096ba:	d106      	bne.n	80096ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80096c4:	6978      	ldr	r0, [r7, #20]
 80096c6:	f7ff ff0e 	bl	80094e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d0:	f043 0210 	orr.w	r2, r3, #16
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096da:	6978      	ldr	r0, [r7, #20]
 80096dc:	f7ff f9aa 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff f994 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b08f      	sub	sp, #60	; 0x3c
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009722:	2b21      	cmp	r3, #33	; 0x21
 8009724:	d14c      	bne.n	80097c0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d132      	bne.n	8009798 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009746:	637b      	str	r3, [r7, #52]	; 0x34
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009752:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e6      	bne.n	8009732 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	60bb      	str	r3, [r7, #8]
   return(result);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009778:	633b      	str	r3, [r7, #48]	; 0x30
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6979      	ldr	r1, [r7, #20]
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	613b      	str	r3, [r7, #16]
   return(result);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e6      	bne.n	8009764 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009796:	e013      	b.n	80097c0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80097c0:	bf00      	nop
 80097c2:	373c      	adds	r7, #60	; 0x3c
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b091      	sub	sp, #68	; 0x44
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097da:	2b21      	cmp	r3, #33	; 0x21
 80097dc:	d151      	bne.n	8009882 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d132      	bne.n	8009850 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	623b      	str	r3, [r7, #32]
   return(result);
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	633b      	str	r3, [r7, #48]	; 0x30
 800980a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800980e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e6      	bne.n	80097ea <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	60fb      	str	r3, [r7, #12]
   return(result);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	69b9      	ldr	r1, [r7, #24]
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	617b      	str	r3, [r7, #20]
   return(result);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e6      	bne.n	800981c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800984e:	e018      	b.n	8009882 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009854:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009864:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986a:	1c9a      	adds	r2, r3, #2
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009882:	bf00      	nop
 8009884:	3744      	adds	r7, #68	; 0x44
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800988e:	b480      	push	{r7}
 8009890:	b091      	sub	sp, #68	; 0x44
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989c:	2b21      	cmp	r3, #33	; 0x21
 800989e:	d160      	bne.n	8009962 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80098a8:	e057      	b.n	800995a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d133      	bne.n	800991e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3308      	adds	r3, #8
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	623b      	str	r3, [r7, #32]
   return(result);
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80098cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3308      	adds	r3, #8
 80098d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098d6:	633a      	str	r2, [r7, #48]	; 0x30
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e5      	bne.n	80098b6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	69b9      	ldr	r1, [r7, #24]
 800990e:	69fa      	ldr	r2, [r7, #28]
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	617b      	str	r3, [r7, #20]
   return(result);
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e6      	bne.n	80098ea <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800991c:	e021      	b.n	8009962 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009928:	2b00      	cmp	r3, #0
 800992a:	d013      	beq.n	8009954 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	b29a      	uxth	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009954:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009956:	3b01      	subs	r3, #1
 8009958:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800995a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1a4      	bne.n	80098aa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009960:	e7ff      	b.n	8009962 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009962:	bf00      	nop
 8009964:	3744      	adds	r7, #68	; 0x44
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800996e:	b480      	push	{r7}
 8009970:	b091      	sub	sp, #68	; 0x44
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997c:	2b21      	cmp	r3, #33	; 0x21
 800997e:	d165      	bne.n	8009a4c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009986:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009988:	e05c      	b.n	8009a44 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009990:	b29b      	uxth	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d133      	bne.n	80099fe <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3308      	adds	r3, #8
 800999c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80099ac:	637b      	str	r3, [r7, #52]	; 0x34
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e5      	bne.n	8009996 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099de:	633b      	str	r3, [r7, #48]	; 0x30
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	461a      	mov	r2, r3
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	6979      	ldr	r1, [r7, #20]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	613b      	str	r3, [r7, #16]
   return(result);
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e6      	bne.n	80099ca <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80099fc:	e026      	b.n	8009a4c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d018      	beq.n	8009a3e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a10:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a20:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a26:	1c9a      	adds	r2, r3, #2
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009a3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009a40:	3b01      	subs	r3, #1
 8009a42:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009a44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d19f      	bne.n	800998a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009a4a:	e7ff      	b.n	8009a4c <UART_TxISR_16BIT_FIFOEN+0xde>
 8009a4c:	bf00      	nop
 8009a4e:	3744      	adds	r7, #68	; 0x44
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a74:	61fb      	str	r3, [r7, #28]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	61bb      	str	r3, [r7, #24]
 8009a80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6979      	ldr	r1, [r7, #20]
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e6      	bne.n	8009a60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7f9 fd71 	bl	8003588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aa6:	bf00      	nop
 8009aa8:	3720      	adds	r7, #32
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b09c      	sub	sp, #112	; 0x70
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009abe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac8:	2b22      	cmp	r3, #34	; 0x22
 8009aca:	f040 80be 	bne.w	8009c4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ad8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009adc:	b2d9      	uxtb	r1, r3
 8009ade:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae8:	400a      	ands	r2, r1
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f040 80a1 	bne.w	8009c5a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b36:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e6      	bne.n	8009b18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	667b      	str	r3, [r7, #100]	; 0x64
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3308      	adds	r3, #8
 8009b68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8009b6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e5      	bne.n	8009b4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a33      	ldr	r2, [pc, #204]	; (8009c64 <UART_RxISR_8BIT+0x1b4>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d01f      	beq.n	8009bdc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d018      	beq.n	8009bdc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009bbe:	663b      	str	r3, [r7, #96]	; 0x60
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8009bca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e6      	bne.n	8009baa <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d12e      	bne.n	8009c42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0310 	bic.w	r3, r3, #16
 8009bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	461a      	mov	r2, r3
 8009c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c08:	61fb      	str	r3, [r7, #28]
 8009c0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	69b9      	ldr	r1, [r7, #24]
 8009c0e:	69fa      	ldr	r2, [r7, #28]
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	617b      	str	r3, [r7, #20]
   return(result);
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e6      	bne.n	8009bea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	f003 0310 	and.w	r3, r3, #16
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d103      	bne.n	8009c32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2210      	movs	r2, #16
 8009c30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fe ff04 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c40:	e00b      	b.n	8009c5a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7f9 fc72 	bl	800352c <HAL_UART_RxCpltCallback>
}
 8009c48:	e007      	b.n	8009c5a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	699a      	ldr	r2, [r3, #24]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f042 0208 	orr.w	r2, r2, #8
 8009c58:	619a      	str	r2, [r3, #24]
}
 8009c5a:	bf00      	nop
 8009c5c:	3770      	adds	r7, #112	; 0x70
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	40008000 	.word	0x40008000

08009c68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b09c      	sub	sp, #112	; 0x70
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c80:	2b22      	cmp	r3, #34	; 0x22
 8009c82:	f040 80be 	bne.w	8009e02 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c94:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009c9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ca4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009caa:	1c9a      	adds	r2, r3, #2
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f040 80a1 	bne.w	8009e12 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cee:	657b      	str	r3, [r7, #84]	; 0x54
 8009cf0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1e6      	bne.n	8009cd0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3308      	adds	r3, #8
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	f023 0301 	bic.w	r3, r3, #1
 8009d18:	663b      	str	r3, [r7, #96]	; 0x60
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3308      	adds	r3, #8
 8009d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d22:	643a      	str	r2, [r7, #64]	; 0x40
 8009d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e5      	bne.n	8009d02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a33      	ldr	r2, [pc, #204]	; (8009e1c <UART_RxISR_16BIT+0x1b4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d01f      	beq.n	8009d94 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d018      	beq.n	8009d94 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d82:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e6      	bne.n	8009d62 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d12e      	bne.n	8009dfa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f023 0310 	bic.w	r3, r3, #16
 8009db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dc0:	61bb      	str	r3, [r7, #24]
 8009dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6979      	ldr	r1, [r7, #20]
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e6      	bne.n	8009da2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f003 0310 	and.w	r3, r3, #16
 8009dde:	2b10      	cmp	r3, #16
 8009de0:	d103      	bne.n	8009dea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2210      	movs	r2, #16
 8009de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe fe28 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009df8:	e00b      	b.n	8009e12 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7f9 fb96 	bl	800352c <HAL_UART_RxCpltCallback>
}
 8009e00:	e007      	b.n	8009e12 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	699a      	ldr	r2, [r3, #24]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f042 0208 	orr.w	r2, r2, #8
 8009e10:	619a      	str	r2, [r3, #24]
}
 8009e12:	bf00      	nop
 8009e14:	3770      	adds	r7, #112	; 0x70
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	40008000 	.word	0x40008000

08009e20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b0ac      	sub	sp, #176	; 0xb0
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e56:	2b22      	cmp	r3, #34	; 0x22
 8009e58:	f040 8182 	bne.w	800a160 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e62:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e66:	e125      	b.n	800a0b4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009e76:	b2d9      	uxtb	r1, r3
 8009e78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e82:	400a      	ands	r2, r1
 8009e84:	b2d2      	uxtb	r2, r2
 8009e86:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d053      	beq.n	8009f62 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d011      	beq.n	8009eea <UART_RxISR_8BIT_FIFOEN+0xca>
 8009ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee0:	f043 0201 	orr.w	r2, r3, #1
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d011      	beq.n	8009f1a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00b      	beq.n	8009f1a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2202      	movs	r2, #2
 8009f08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f10:	f043 0204 	orr.w	r2, r3, #4
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f1e:	f003 0304 	and.w	r3, r3, #4
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d011      	beq.n	8009f4a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00b      	beq.n	8009f4a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2204      	movs	r2, #4
 8009f38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f40:	f043 0202 	orr.w	r2, r3, #2
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d006      	beq.n	8009f62 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7fe fd6d 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f040 80a2 	bne.w	800a0b4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f94:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009f98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e4      	bne.n	8009f70 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fbc:	f023 0301 	bic.w	r3, r3, #1
 8009fc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009fce:	66ba      	str	r2, [r7, #104]	; 0x68
 8009fd0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009fd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e1      	bne.n	8009fa6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a5f      	ldr	r2, [pc, #380]	; (800a178 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d021      	beq.n	800a044 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01a      	beq.n	800a044 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a016:	e853 3f00 	ldrex	r3, [r3]
 800a01a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a030:	657b      	str	r3, [r7, #84]	; 0x54
 800a032:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a036:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e4      	bne.n	800a00e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d130      	bne.n	800a0ae <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	f023 0310 	bic.w	r3, r3, #16
 800a066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a074:	643b      	str	r3, [r7, #64]	; 0x40
 800a076:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a07a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e4      	bne.n	800a052 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	f003 0310 	and.w	r3, r3, #16
 800a092:	2b10      	cmp	r3, #16
 800a094:	d103      	bne.n	800a09e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2210      	movs	r2, #16
 800a09c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7fe fcce 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
 800a0ac:	e002      	b.n	800a0b4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7f9 fa3c 	bl	800352c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0b4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d006      	beq.n	800a0ca <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0c0:	f003 0320 	and.w	r3, r3, #32
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f47f aecf 	bne.w	8009e68 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a0d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d049      	beq.n	800a170 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0e2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d242      	bcs.n	800a170 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3308      	adds	r3, #8
 800a10a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a10e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a116:	e841 2300 	strex	r3, r2, [r1]
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e3      	bne.n	800a0ea <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a15      	ldr	r2, [pc, #84]	; (800a17c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a126:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	e853 3f00 	ldrex	r3, [r3]
 800a134:	60bb      	str	r3, [r7, #8]
   return(result);
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f043 0320 	orr.w	r3, r3, #32
 800a13c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a14a:	61bb      	str	r3, [r7, #24]
 800a14c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6979      	ldr	r1, [r7, #20]
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	613b      	str	r3, [r7, #16]
   return(result);
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e4      	bne.n	800a128 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a15e:	e007      	b.n	800a170 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699a      	ldr	r2, [r3, #24]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0208 	orr.w	r2, r2, #8
 800a16e:	619a      	str	r2, [r3, #24]
}
 800a170:	bf00      	nop
 800a172:	37b0      	adds	r7, #176	; 0xb0
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	40008000 	.word	0x40008000
 800a17c:	08009ab1 	.word	0x08009ab1

0800a180 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b0ae      	sub	sp, #184	; 0xb8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a18e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1b6:	2b22      	cmp	r3, #34	; 0x22
 800a1b8:	f040 8186 	bne.w	800a4c8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1c6:	e129      	b.n	800a41c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a1da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a1de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a1ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f0:	1c9a      	adds	r2, r3, #2
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	3b01      	subs	r3, #1
 800a200:	b29a      	uxth	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d053      	beq.n	800a2c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a21e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d011      	beq.n	800a24e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a22a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a22e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00b      	beq.n	800a24e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2201      	movs	r2, #1
 800a23c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a244:	f043 0201 	orr.w	r2, r3, #1
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a24e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d011      	beq.n	800a27e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00b      	beq.n	800a27e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2202      	movs	r2, #2
 800a26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a274:	f043 0204 	orr.w	r2, r3, #4
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a27e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a282:	f003 0304 	and.w	r3, r3, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	d011      	beq.n	800a2ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a28a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2204      	movs	r2, #4
 800a29c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a4:	f043 0202 	orr.w	r2, r3, #2
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7fe fbbb 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f040 80a4 	bne.w	800a41c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a2e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2fa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a2fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e2      	bne.n	800a2d4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3308      	adds	r3, #8
 800a314:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a31e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a324:	f023 0301 	bic.w	r3, r3, #1
 800a328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3308      	adds	r3, #8
 800a332:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a336:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a33c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e1      	bne.n	800a30e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a5f      	ldr	r2, [pc, #380]	; (800a4e0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d021      	beq.n	800a3ac <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d01a      	beq.n	800a3ac <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a38a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a398:	65bb      	str	r3, [r7, #88]	; 0x58
 800a39a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a39e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e4      	bne.n	800a376 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d130      	bne.n	800a416 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ca:	f023 0310 	bic.w	r3, r3, #16
 800a3ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a3de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e4      	bne.n	800a3ba <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	f003 0310 	and.w	r3, r3, #16
 800a3fa:	2b10      	cmp	r3, #16
 800a3fc:	d103      	bne.n	800a406 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2210      	movs	r2, #16
 800a404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7fe fb1a 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
 800a414:	e002      	b.n	800a41c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7f9 f888 	bl	800352c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a41c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a420:	2b00      	cmp	r3, #0
 800a422:	d006      	beq.n	800a432 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a424:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f47f aecb 	bne.w	800a1c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a438:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a43c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a440:	2b00      	cmp	r3, #0
 800a442:	d049      	beq.n	800a4d8 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a44a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a44e:	429a      	cmp	r2, r3
 800a450:	d242      	bcs.n	800a4d8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	623b      	str	r3, [r7, #32]
   return(result);
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a476:	633a      	str	r2, [r7, #48]	; 0x30
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e3      	bne.n	800a452 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a15      	ldr	r2, [pc, #84]	; (800a4e4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a48e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f043 0320 	orr.w	r3, r3, #32
 800a4a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4b2:	61fb      	str	r3, [r7, #28]
 800a4b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	69b9      	ldr	r1, [r7, #24]
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	617b      	str	r3, [r7, #20]
   return(result);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e4      	bne.n	800a490 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4c6:	e007      	b.n	800a4d8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699a      	ldr	r2, [r3, #24]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0208 	orr.w	r2, r2, #8
 800a4d6:	619a      	str	r2, [r3, #24]
}
 800a4d8:	bf00      	nop
 800a4da:	37b8      	adds	r7, #184	; 0xb8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	40008000 	.word	0x40008000
 800a4e4:	08009c69 	.word	0x08009c69

0800a4e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a532:	2b01      	cmp	r3, #1
 800a534:	d101      	bne.n	800a53a <HAL_UARTEx_DisableFifoMode+0x16>
 800a536:	2302      	movs	r3, #2
 800a538:	e027      	b.n	800a58a <HAL_UARTEx_DisableFifoMode+0x66>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2224      	movs	r2, #36	; 0x24
 800a546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0201 	bic.w	r2, r2, #1
 800a560:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a568:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d101      	bne.n	800a5ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	e02d      	b.n	800a60a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2224      	movs	r2, #36	; 0x24
 800a5ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0201 	bic.w	r2, r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f850 	bl	800a690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a622:	2b01      	cmp	r3, #1
 800a624:	d101      	bne.n	800a62a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a626:	2302      	movs	r3, #2
 800a628:	e02d      	b.n	800a686 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2224      	movs	r2, #36	; 0x24
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0201 	bic.w	r2, r2, #1
 800a650:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f812 	bl	800a690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2220      	movs	r2, #32
 800a678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d108      	bne.n	800a6b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6b0:	e031      	b.n	800a716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6b6:	2308      	movs	r3, #8
 800a6b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	0e5b      	lsrs	r3, r3, #25
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	0f5b      	lsrs	r3, r3, #29
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 0307 	and.w	r3, r3, #7
 800a6d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	7b3a      	ldrb	r2, [r7, #12]
 800a6de:	4911      	ldr	r1, [pc, #68]	; (800a724 <UARTEx_SetNbDataToProcess+0x94>)
 800a6e0:	5c8a      	ldrb	r2, [r1, r2]
 800a6e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6e6:	7b3a      	ldrb	r2, [r7, #12]
 800a6e8:	490f      	ldr	r1, [pc, #60]	; (800a728 <UARTEx_SetNbDataToProcess+0x98>)
 800a6ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	7b7a      	ldrb	r2, [r7, #13]
 800a6fc:	4909      	ldr	r1, [pc, #36]	; (800a724 <UARTEx_SetNbDataToProcess+0x94>)
 800a6fe:	5c8a      	ldrb	r2, [r1, r2]
 800a700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a704:	7b7a      	ldrb	r2, [r7, #13]
 800a706:	4908      	ldr	r1, [pc, #32]	; (800a728 <UARTEx_SetNbDataToProcess+0x98>)
 800a708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a70a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a70e:	b29a      	uxth	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	0800f80c 	.word	0x0800f80c
 800a728:	0800f814 	.word	0x0800f814

0800a72c <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a736:	f7f7 f8e9 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a73a:	f7f7 f86d 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800a73e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f062 0208 	orn	r2, r2, #8
 800a748:	701a      	strb	r2, [r3, #0]
 800a74a:	2200      	movs	r2, #0
 800a74c:	705a      	strb	r2, [r3, #1]
 800a74e:	2200      	movs	r2, #0
 800a750:	709a      	strb	r2, [r3, #2]
 800a752:	2200      	movs	r2, #0
 800a754:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f042 0201 	orr.w	r2, r2, #1
 800a75e:	711a      	strb	r2, [r3, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	715a      	strb	r2, [r3, #5]
 800a764:	2200      	movs	r2, #0
 800a766:	719a      	strb	r2, [r3, #6]
 800a768:	2200      	movs	r2, #0
 800a76a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a772:	f7f7 f899 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a776:	f7f7 f85b 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a77a:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	689b      	ldr	r3, [r3, #8]

}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
 800a794:	4613      	mov	r3, r2
 800a796:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a798:	f7f7 f8b8 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a79c:	f7f7 f83c 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800a7a0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f062 0228 	orn	r2, r2, #40	; 0x28
 800a7aa:	701a      	strb	r2, [r3, #0]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	705a      	strb	r2, [r3, #1]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	709a      	strb	r2, [r3, #2]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f042 0203 	orr.w	r2, r2, #3
 800a7c0:	711a      	strb	r2, [r3, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	715a      	strb	r2, [r3, #5]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	719a      	strb	r2, [r3, #6]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 800a7d4:	78fa      	ldrb	r2, [r7, #3]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 800a7da:	78ba      	ldrb	r2, [r7, #2]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a7e0:	f7f7 f862 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a7e4:	f7f7 f824 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a7e8:	60f8      	str	r0, [r7, #12]
}
 800a7ea:	bf00      	nop
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	461a      	mov	r2, r3
 800a800:	460b      	mov	r3, r1
 800a802:	71fb      	strb	r3, [r7, #7]
 800a804:	4613      	mov	r3, r2
 800a806:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800a808:	f7f7 f880 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a80c:	f7f7 f804 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800a810:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2200      	movs	r2, #0
 800a816:	f062 0227 	orn	r2, r2, #39	; 0x27
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	2200      	movs	r2, #0
 800a81e:	705a      	strb	r2, [r3, #1]
 800a820:	2200      	movs	r2, #0
 800a822:	709a      	strb	r2, [r3, #2]
 800a824:	2200      	movs	r2, #0
 800a826:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f042 0204 	orr.w	r2, r2, #4
 800a830:	711a      	strb	r2, [r3, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	715a      	strb	r2, [r3, #5]
 800a836:	2200      	movs	r2, #0
 800a838:	719a      	strb	r2, [r3, #6]
 800a83a:	2200      	movs	r2, #0
 800a83c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 800a84a:	79fa      	ldrb	r2, [r7, #7]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 800a850:	79ba      	ldrb	r2, [r7, #6]
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800a856:	f7f7 f827 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a85a:	f7f6 ffe9 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a85e:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	b2db      	uxtb	r3, r3
}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b086      	sub	sp, #24
 800a872:	af00      	add	r7, sp, #0
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	60b9      	str	r1, [r7, #8]
 800a878:	4613      	mov	r3, r2
 800a87a:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 800a87c:	f7f7 f846 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a880:	f7f6 ffca 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800a884:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2200      	movs	r2, #0
 800a88a:	f062 0226 	orn	r2, r2, #38	; 0x26
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	2200      	movs	r2, #0
 800a892:	705a      	strb	r2, [r3, #1]
 800a894:	2200      	movs	r2, #0
 800a896:	709a      	strb	r2, [r3, #2]
 800a898:	2200      	movs	r2, #0
 800a89a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f042 0203 	orr.w	r2, r2, #3
 800a8a4:	711a      	strb	r2, [r3, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	715a      	strb	r2, [r3, #5]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	719a      	strb	r2, [r3, #6]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 800a8be:	79fa      	ldrb	r2, [r7, #7]
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a8c4:	f7f6 fff0 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a8c8:	f7f6 ffb2 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a8cc:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	b2db      	uxtb	r3, r3
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a8e8:	f7f7 f810 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a8ec:	f7f6 ff94 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800a8f0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f062 0225 	orn	r2, r2, #37	; 0x25
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	705a      	strb	r2, [r3, #1]
 800a900:	2200      	movs	r2, #0
 800a902:	709a      	strb	r2, [r3, #2]
 800a904:	2200      	movs	r2, #0
 800a906:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f042 0202 	orr.w	r2, r2, #2
 800a910:	711a      	strb	r2, [r3, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	715a      	strb	r2, [r3, #5]
 800a916:	2200      	movs	r2, #0
 800a918:	719a      	strb	r2, [r3, #6]
 800a91a:	2200      	movs	r2, #0
 800a91c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a92a:	f7f6 ffbd 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a92e:	f7f6 ff7f 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a932:	60f8      	str	r0, [r7, #12]
}
 800a934:	bf00      	nop
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a946:	f7f6 ffe1 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a94a:	f7f6 ff65 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800a94e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	f062 0220 	orn	r2, r2, #32
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	2200      	movs	r2, #0
 800a95c:	705a      	strb	r2, [r3, #1]
 800a95e:	2200      	movs	r2, #0
 800a960:	709a      	strb	r2, [r3, #2]
 800a962:	2200      	movs	r2, #0
 800a964:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f042 0202 	orr.w	r2, r2, #2
 800a96e:	711a      	strb	r2, [r3, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	715a      	strb	r2, [r3, #5]
 800a974:	2200      	movs	r2, #0
 800a976:	719a      	strb	r2, [r3, #6]
 800a978:	2200      	movs	r2, #0
 800a97a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a988:	f7f6 ff8e 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a98c:	f7f6 ff50 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a990:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	b2db      	uxtb	r3, r3
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a9a8:	f7f6 ffb0 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a9ac:	f7f6 ff34 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800a9b0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f062 0219 	orn	r2, r2, #25
 800a9ba:	701a      	strb	r2, [r3, #0]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	705a      	strb	r2, [r3, #1]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	709a      	strb	r2, [r3, #2]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f042 0201 	orr.w	r2, r2, #1
 800a9d0:	711a      	strb	r2, [r3, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	715a      	strb	r2, [r3, #5]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	719a      	strb	r2, [r3, #6]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a9e4:	f7f6 ff60 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a9e8:	f7f6 ff22 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a9ec:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	b2db      	uxtb	r3, r3
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aa04:	f7f6 ff82 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa08:	f7f6 ff06 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800aa0c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f062 0217 	orn	r2, r2, #23
 800aa16:	701a      	strb	r2, [r3, #0]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	705a      	strb	r2, [r3, #1]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	709a      	strb	r2, [r3, #2]
 800aa20:	2200      	movs	r2, #0
 800aa22:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f042 0201 	orr.w	r2, r2, #1
 800aa2c:	711a      	strb	r2, [r3, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	715a      	strb	r2, [r3, #5]
 800aa32:	2200      	movs	r2, #0
 800aa34:	719a      	strb	r2, [r3, #6]
 800aa36:	2200      	movs	r2, #0
 800aa38:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aa40:	f7f6 ff32 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aa44:	f7f6 fef4 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aa48:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	b2db      	uxtb	r3, r3
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800aa64:	f7f6 ff52 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa68:	f7f6 fed6 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800aa6c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f062 0216 	orn	r2, r2, #22
 800aa76:	701a      	strb	r2, [r3, #0]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	705a      	strb	r2, [r3, #1]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	709a      	strb	r2, [r3, #2]
 800aa80:	2200      	movs	r2, #0
 800aa82:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f042 0202 	orr.w	r2, r2, #2
 800aa8c:	711a      	strb	r2, [r3, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	715a      	strb	r2, [r3, #5]
 800aa92:	2200      	movs	r2, #0
 800aa94:	719a      	strb	r2, [r3, #6]
 800aa96:	2200      	movs	r2, #0
 800aa98:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800aaa6:	f7f6 feff 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aaaa:	f7f6 fec1 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aaae:	60f8      	str	r0, [r7, #12]
}
 800aab0:	bf00      	nop
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aac0:	f7f6 ff24 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aac4:	f7f6 fea8 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800aac8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f062 0213 	orn	r2, r2, #19
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	2200      	movs	r2, #0
 800aad6:	705a      	strb	r2, [r3, #1]
 800aad8:	2200      	movs	r2, #0
 800aada:	709a      	strb	r2, [r3, #2]
 800aadc:	2200      	movs	r2, #0
 800aade:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f042 0201 	orr.w	r2, r2, #1
 800aae8:	711a      	strb	r2, [r3, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	715a      	strb	r2, [r3, #5]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	719a      	strb	r2, [r3, #6]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aafc:	f7f6 fed4 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ab00:	f7f6 fe96 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ab04:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	b2db      	uxtb	r3, r3
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ab1c:	f7f6 fef6 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ab20:	f7f6 fe7a 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800ab24:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f062 0212 	orn	r2, r2, #18
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	2200      	movs	r2, #0
 800ab32:	705a      	strb	r2, [r3, #1]
 800ab34:	2200      	movs	r2, #0
 800ab36:	709a      	strb	r2, [r3, #2]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f042 0201 	orr.w	r2, r2, #1
 800ab44:	711a      	strb	r2, [r3, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	715a      	strb	r2, [r3, #5]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	719a      	strb	r2, [r3, #6]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ab58:	f7f6 fea6 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ab5c:	f7f6 fe68 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ab60:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689b      	ldr	r3, [r3, #8]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b086      	sub	sp, #24
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	607a      	str	r2, [r7, #4]
 800ab7a:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800ab7c:	f7f6 fec6 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ab80:	f7f6 fe4a 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800ab84:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f062 0209 	orn	r2, r2, #9
 800ab8e:	701a      	strb	r2, [r3, #0]
 800ab90:	2200      	movs	r2, #0
 800ab92:	705a      	strb	r2, [r3, #1]
 800ab94:	2200      	movs	r2, #0
 800ab96:	709a      	strb	r2, [r3, #2]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f042 0205 	orr.w	r2, r2, #5
 800aba4:	711a      	strb	r2, [r3, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	715a      	strb	r2, [r3, #5]
 800abaa:	2200      	movs	r2, #0
 800abac:	719a      	strb	r2, [r3, #6]
 800abae:	2200      	movs	r2, #0
 800abb0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 800abc4:	6a3a      	ldr	r2, [r7, #32]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 800abca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 800abd0:	f7f6 fe6a 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800abd4:	f7f6 fe2c 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800abd8:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	b2db      	uxtb	r3, r3
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800abf4:	f7f6 fe8a 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800abf8:	f7f6 fe0e 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800abfc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f062 0207 	orn	r2, r2, #7
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	705a      	strb	r2, [r3, #1]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	709a      	strb	r2, [r3, #2]
 800ac10:	2200      	movs	r2, #0
 800ac12:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f042 0201 	orr.w	r2, r2, #1
 800ac1c:	711a      	strb	r2, [r3, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	715a      	strb	r2, [r3, #5]
 800ac22:	2200      	movs	r2, #0
 800ac24:	719a      	strb	r2, [r3, #6]
 800ac26:	2200      	movs	r2, #0
 800ac28:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800ac2a:	887a      	ldrh	r2, [r7, #2]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ac30:	f7f6 fe3a 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ac34:	f7f6 fdfc 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ac38:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	b2db      	uxtb	r3, r3
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800ac52:	f7f6 fe5b 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ac56:	f7f6 fddf 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800ac5a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f062 0203 	orn	r2, r2, #3
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	2200      	movs	r2, #0
 800ac68:	705a      	strb	r2, [r3, #1]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	709a      	strb	r2, [r3, #2]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f042 0201 	orr.w	r2, r2, #1
 800ac7a:	711a      	strb	r2, [r3, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	715a      	strb	r2, [r3, #5]
 800ac80:	2200      	movs	r2, #0
 800ac82:	719a      	strb	r2, [r3, #6]
 800ac84:	2200      	movs	r2, #0
 800ac86:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ac8e:	f7f6 fe0b 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ac92:	f7f6 fdcd 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ac96:	60f8      	str	r0, [r7, #12]
}
 800ac98:	bf00      	nop
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800acae:	f7f6 fe2d 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800acb2:	f7f6 fdb1 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800acb6:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2200      	movs	r2, #0
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f042 0201 	orr.w	r2, r2, #1
 800acc4:	705a      	strb	r2, [r3, #1]
 800acc6:	2200      	movs	r2, #0
 800acc8:	709a      	strb	r2, [r3, #2]
 800acca:	2200      	movs	r2, #0
 800accc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f042 0203 	orr.w	r2, r2, #3
 800acd6:	711a      	strb	r2, [r3, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	715a      	strb	r2, [r3, #5]
 800acdc:	2200      	movs	r2, #0
 800acde:	719a      	strb	r2, [r3, #6]
 800ace0:	2200      	movs	r2, #0
 800ace2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800acf6:	f7f6 fdd7 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800acfa:	f7f6 fd99 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800acfe:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	b2db      	uxtb	r3, r3
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <otDatasetSetActive>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otDatasetSetActive(otInstance *aInstance, const otOperationalDataset *aDataset)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800ad18:	f7f6 fdf8 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ad1c:	f7f6 fd7c 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800ad20:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_DATASET_SET_ACTIVE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f042 0201 	orr.w	r2, r2, #1
 800ad32:	705a      	strb	r2, [r3, #1]
 800ad34:	2200      	movs	r2, #0
 800ad36:	709a      	strb	r2, [r3, #2]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f042 0201 	orr.w	r2, r2, #1
 800ad44:	711a      	strb	r2, [r3, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	715a      	strb	r2, [r3, #5]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	719a      	strb	r2, [r3, #6]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aDataset;
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ad58:	f7f6 fda6 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ad5c:	f7f6 fd68 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ad60:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	b2db      	uxtb	r3, r3
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 800ad76:	f7f6 fdc9 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ad7a:	f7f6 fd4d 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800ad7e:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f062 0235 	orn	r2, r2, #53	; 0x35
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	705a      	strb	r2, [r3, #1]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	709a      	strb	r2, [r3, #2]
 800ad92:	2200      	movs	r2, #0
 800ad94:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	711a      	strb	r2, [r3, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	715a      	strb	r2, [r3, #5]
 800ada0:	2200      	movs	r2, #0
 800ada2:	719a      	strb	r2, [r3, #6]
 800ada4:	2200      	movs	r2, #0
 800ada6:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ada8:	f7f6 fd7e 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800adac:	f7f6 fd40 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800adb0:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689b      	ldr	r3, [r3, #8]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	460b      	mov	r3, r1
 800adc8:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800adca:	f7f6 fd9f 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800adce:	f7f6 fd23 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800add2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800addc:	701a      	strb	r2, [r3, #0]
 800adde:	2200      	movs	r2, #0
 800ade0:	705a      	strb	r2, [r3, #1]
 800ade2:	2200      	movs	r2, #0
 800ade4:	709a      	strb	r2, [r3, #2]
 800ade6:	2200      	movs	r2, #0
 800ade8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	f042 0201 	orr.w	r2, r2, #1
 800adf2:	711a      	strb	r2, [r3, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	715a      	strb	r2, [r3, #5]
 800adf8:	2200      	movs	r2, #0
 800adfa:	719a      	strb	r2, [r3, #6]
 800adfc:	2200      	movs	r2, #0
 800adfe:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800ae00:	78fa      	ldrb	r2, [r7, #3]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ae06:	f7f6 fd4f 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ae0a:	f7f6 fd11 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ae0e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	b2db      	uxtb	r3, r3
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800ae28:	f7f6 fd70 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ae2c:	f7f6 fcf4 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800ae30:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f042 0210 	orr.w	r2, r2, #16
 800ae3a:	701a      	strb	r2, [r3, #0]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	705a      	strb	r2, [r3, #1]
 800ae40:	2200      	movs	r2, #0
 800ae42:	709a      	strb	r2, [r3, #2]
 800ae44:	2200      	movs	r2, #0
 800ae46:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f042 0201 	orr.w	r2, r2, #1
 800ae50:	711a      	strb	r2, [r3, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	715a      	strb	r2, [r3, #5]
 800ae56:	2200      	movs	r2, #0
 800ae58:	719a      	strb	r2, [r3, #6]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ae64:	f7f6 fd20 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ae68:	f7f6 fce2 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ae6c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	b2db      	uxtb	r3, r3
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ae84:	f7f6 fd42 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ae88:	f7f6 fcc6 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800ae8c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f042 0216 	orr.w	r2, r2, #22
 800ae96:	701a      	strb	r2, [r3, #0]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f042 0201 	orr.w	r2, r2, #1
 800ae9e:	705a      	strb	r2, [r3, #1]
 800aea0:	2200      	movs	r2, #0
 800aea2:	709a      	strb	r2, [r3, #2]
 800aea4:	2200      	movs	r2, #0
 800aea6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f042 0201 	orr.w	r2, r2, #1
 800aeb0:	711a      	strb	r2, [r3, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	715a      	strb	r2, [r3, #5]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	719a      	strb	r2, [r3, #6]
 800aeba:	2200      	movs	r2, #0
 800aebc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aec4:	f7f6 fcf0 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aec8:	f7f6 fcb2 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aecc:	60f8      	str	r0, [r7, #12]
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aede:	f7f6 fd15 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aee2:	f7f6 fc99 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800aee6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f042 0219 	orr.w	r2, r2, #25
 800aef0:	701a      	strb	r2, [r3, #0]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f042 0201 	orr.w	r2, r2, #1
 800aef8:	705a      	strb	r2, [r3, #1]
 800aefa:	2200      	movs	r2, #0
 800aefc:	709a      	strb	r2, [r3, #2]
 800aefe:	2200      	movs	r2, #0
 800af00:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f042 0201 	orr.w	r2, r2, #1
 800af0a:	711a      	strb	r2, [r3, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	715a      	strb	r2, [r3, #5]
 800af10:	2200      	movs	r2, #0
 800af12:	719a      	strb	r2, [r3, #6]
 800af14:	2200      	movs	r2, #0
 800af16:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800af1e:	f7f6 fcc3 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800af22:	f7f6 fc85 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800af26:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	b29b      	uxth	r3, r3
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b086      	sub	sp, #24
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	4613      	mov	r3, r2
 800af42:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800af44:	f7f6 fce2 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800af48:	f7f6 fc66 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800af4c:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2200      	movs	r2, #0
 800af52:	f042 021e 	orr.w	r2, r2, #30
 800af56:	701a      	strb	r2, [r3, #0]
 800af58:	2200      	movs	r2, #0
 800af5a:	f042 0201 	orr.w	r2, r2, #1
 800af5e:	705a      	strb	r2, [r3, #1]
 800af60:	2200      	movs	r2, #0
 800af62:	709a      	strb	r2, [r3, #2]
 800af64:	2200      	movs	r2, #0
 800af66:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f042 0203 	orr.w	r2, r2, #3
 800af70:	711a      	strb	r2, [r3, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	715a      	strb	r2, [r3, #5]
 800af76:	2200      	movs	r2, #0
 800af78:	719a      	strb	r2, [r3, #6]
 800af7a:	2200      	movs	r2, #0
 800af7c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 800af8a:	88fa      	ldrh	r2, [r7, #6]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800af90:	f7f6 fc8a 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800af94:	f7f6 fc4c 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800af98:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	b2db      	uxtb	r3, r3
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	607a      	str	r2, [r7, #4]
 800afb2:	461a      	mov	r2, r3
 800afb4:	460b      	mov	r3, r1
 800afb6:	817b      	strh	r3, [r7, #10]
 800afb8:	4613      	mov	r3, r2
 800afba:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 800afbc:	f7f6 fca6 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800afc0:	f7f6 fc2a 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800afc4:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2200      	movs	r2, #0
 800afca:	f042 021f 	orr.w	r2, r2, #31
 800afce:	701a      	strb	r2, [r3, #0]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f042 0201 	orr.w	r2, r2, #1
 800afd6:	705a      	strb	r2, [r3, #1]
 800afd8:	2200      	movs	r2, #0
 800afda:	709a      	strb	r2, [r3, #2]
 800afdc:	2200      	movs	r2, #0
 800afde:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f042 0204 	orr.w	r2, r2, #4
 800afe8:	711a      	strb	r2, [r3, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	715a      	strb	r2, [r3, #5]
 800afee:	2200      	movs	r2, #0
 800aff0:	719a      	strb	r2, [r3, #6]
 800aff2:	2200      	movs	r2, #0
 800aff4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 800affc:	897a      	ldrh	r2, [r7, #10]
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 800b008:	893a      	ldrh	r2, [r7, #8]
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800b00e:	f7f6 fc4b 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b012:	f7f6 fc0d 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800b016:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	b29b      	uxth	r3, r3
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800b028:	b5b0      	push	{r4, r5, r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800b032:	f7f6 fc09 	bl	8001848 <THREAD_Get_NotificationPayloadBuffer>
 800b036:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	2b48      	cmp	r3, #72	; 0x48
 800b040:	f200 8543 	bhi.w	800baca <OpenThread_CallBack_Processing+0xaa2>
 800b044:	a201      	add	r2, pc, #4	; (adr r2, 800b04c <OpenThread_CallBack_Processing+0x24>)
 800b046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04a:	bf00      	nop
 800b04c:	0800b3b7 	.word	0x0800b3b7
 800b050:	0800b46f 	.word	0x0800b46f
 800b054:	0800b4c7 	.word	0x0800b4c7
 800b058:	0800b573 	.word	0x0800b573
 800b05c:	0800b57f 	.word	0x0800b57f
 800b060:	0800b59d 	.word	0x0800b59d
 800b064:	0800bacb 	.word	0x0800bacb
 800b068:	0800b5c7 	.word	0x0800b5c7
 800b06c:	0800b5e1 	.word	0x0800b5e1
 800b070:	0800b615 	.word	0x0800b615
 800b074:	0800b633 	.word	0x0800b633
 800b078:	0800b651 	.word	0x0800b651
 800b07c:	0800bacb 	.word	0x0800bacb
 800b080:	0800b67b 	.word	0x0800b67b
 800b084:	0800b6dd 	.word	0x0800b6dd
 800b088:	0800b703 	.word	0x0800b703
 800b08c:	0800b723 	.word	0x0800b723
 800b090:	0800b741 	.word	0x0800b741
 800b094:	0800bacb 	.word	0x0800bacb
 800b098:	0800b769 	.word	0x0800b769
 800b09c:	0800b791 	.word	0x0800b791
 800b0a0:	0800bacb 	.word	0x0800bacb
 800b0a4:	0800b7af 	.word	0x0800b7af
 800b0a8:	0800b7d3 	.word	0x0800b7d3
 800b0ac:	0800b7fd 	.word	0x0800b7fd
 800b0b0:	0800b1dd 	.word	0x0800b1dd
 800b0b4:	0800b201 	.word	0x0800b201
 800b0b8:	0800b225 	.word	0x0800b225
 800b0bc:	0800b24f 	.word	0x0800b24f
 800b0c0:	0800bacb 	.word	0x0800bacb
 800b0c4:	0800b81d 	.word	0x0800b81d
 800b0c8:	0800bacb 	.word	0x0800bacb
 800b0cc:	0800bacb 	.word	0x0800bacb
 800b0d0:	0800bacb 	.word	0x0800bacb
 800b0d4:	0800bacb 	.word	0x0800bacb
 800b0d8:	0800bacb 	.word	0x0800bacb
 800b0dc:	0800b4a5 	.word	0x0800b4a5
 800b0e0:	0800b505 	.word	0x0800b505
 800b0e4:	0800b52b 	.word	0x0800b52b
 800b0e8:	0800b551 	.word	0x0800b551
 800b0ec:	0800b83f 	.word	0x0800b83f
 800b0f0:	0800b87d 	.word	0x0800b87d
 800b0f4:	0800b895 	.word	0x0800b895
 800b0f8:	0800b3d3 	.word	0x0800b3d3
 800b0fc:	0800b439 	.word	0x0800b439
 800b100:	0800bacb 	.word	0x0800bacb
 800b104:	0800b279 	.word	0x0800b279
 800b108:	0800b299 	.word	0x0800b299
 800b10c:	0800b2b9 	.word	0x0800b2b9
 800b110:	0800b2d9 	.word	0x0800b2d9
 800b114:	0800b2fb 	.word	0x0800b2fb
 800b118:	0800b31d 	.word	0x0800b31d
 800b11c:	0800bacb 	.word	0x0800bacb
 800b120:	0800bacb 	.word	0x0800bacb
 800b124:	0800b171 	.word	0x0800b171
 800b128:	0800b195 	.word	0x0800b195
 800b12c:	0800b1b9 	.word	0x0800b1b9
 800b130:	0800bacb 	.word	0x0800bacb
 800b134:	0800bacb 	.word	0x0800bacb
 800b138:	0800b33f 	.word	0x0800b33f
 800b13c:	0800b35d 	.word	0x0800b35d
 800b140:	0800bacb 	.word	0x0800bacb
 800b144:	0800b38f 	.word	0x0800b38f
 800b148:	0800b451 	.word	0x0800b451
 800b14c:	0800b8c3 	.word	0x0800b8c3
 800b150:	0800b8e1 	.word	0x0800b8e1
 800b154:	0800b8ff 	.word	0x0800b8ff
 800b158:	0800b97d 	.word	0x0800b97d
 800b15c:	0800b9ab 	.word	0x0800b9ab
 800b160:	0800b9ef 	.word	0x0800b9ef
 800b164:	0800ba59 	.word	0x0800ba59
 800b168:	0800ba97 	.word	0x0800ba97
 800b16c:	0800ba23 	.word	0x0800ba23
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 800b170:	4b9f      	ldr	r3, [pc, #636]	; (800b3f0 <OpenThread_CallBack_Processing+0x3c8>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 84ab 	beq.w	800bad0 <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800b17a:	4b9d      	ldr	r3, [pc, #628]	; (800b3f0 <OpenThread_CallBack_Processing+0x3c8>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	6892      	ldr	r2, [r2, #8]
 800b182:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800b188:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800b18e:	4798      	blx	r3
    }
    break;
 800b190:	f000 bc9e 	b.w	800bad0 <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 800b194:	4b97      	ldr	r3, [pc, #604]	; (800b3f4 <OpenThread_CallBack_Processing+0x3cc>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 849b 	beq.w	800bad4 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800b19e:	4b95      	ldr	r3, [pc, #596]	; (800b3f4 <OpenThread_CallBack_Processing+0x3cc>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	6892      	ldr	r2, [r2, #8]
 800b1a6:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800b1ac:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800b1b2:	4798      	blx	r3
    }
    break;
 800b1b4:	f000 bc8e 	b.w	800bad4 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 800b1b8:	4b8f      	ldr	r3, [pc, #572]	; (800b3f8 <OpenThread_CallBack_Processing+0x3d0>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 848b 	beq.w	800bad8 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800b1c2:	4b8d      	ldr	r3, [pc, #564]	; (800b3f8 <OpenThread_CallBack_Processing+0x3d0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	6892      	ldr	r2, [r2, #8]
 800b1ca:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800b1d0:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800b1d6:	4798      	blx	r3
    }
    break;
 800b1d8:	f000 bc7e 	b.w	800bad8 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 800b1dc:	4b87      	ldr	r3, [pc, #540]	; (800b3fc <OpenThread_CallBack_Processing+0x3d4>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 847b 	beq.w	800badc <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800b1e6:	4b85      	ldr	r3, [pc, #532]	; (800b3fc <OpenThread_CallBack_Processing+0x3d4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	6892      	ldr	r2, [r2, #8]
 800b1ee:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800b1f4:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800b1fa:	4798      	blx	r3
    }
    break;
 800b1fc:	f000 bc6e 	b.w	800badc <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 800b200:	4b7f      	ldr	r3, [pc, #508]	; (800b400 <OpenThread_CallBack_Processing+0x3d8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 846b 	beq.w	800bae0 <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800b20a:	4b7d      	ldr	r3, [pc, #500]	; (800b400 <OpenThread_CallBack_Processing+0x3d8>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	6892      	ldr	r2, [r2, #8]
 800b212:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800b218:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800b21e:	4798      	blx	r3
    }
    break;
 800b220:	f000 bc5e 	b.w	800bae0 <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 800b224:	4b77      	ldr	r3, [pc, #476]	; (800b404 <OpenThread_CallBack_Processing+0x3dc>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 845b 	beq.w	800bae4 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b22e:	4b75      	ldr	r3, [pc, #468]	; (800b404 <OpenThread_CallBack_Processing+0x3dc>)
 800b230:	681c      	ldr	r4, [r3, #0]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b23c:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b242:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b248:	47a0      	blx	r4
    }
    break;
 800b24a:	f000 bc4b 	b.w	800bae4 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 800b24e:	4b6e      	ldr	r3, [pc, #440]	; (800b408 <OpenThread_CallBack_Processing+0x3e0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	f000 8448 	beq.w	800bae8 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b258:	4b6b      	ldr	r3, [pc, #428]	; (800b408 <OpenThread_CallBack_Processing+0x3e0>)
 800b25a:	681c      	ldr	r4, [r3, #0]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b266:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b26c:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b272:	47a0      	blx	r4
    }
    break;
 800b274:	f000 bc38 	b.w	800bae8 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 800b278:	4b64      	ldr	r3, [pc, #400]	; (800b40c <OpenThread_CallBack_Processing+0x3e4>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 8435 	beq.w	800baec <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800b282:	4b62      	ldr	r3, [pc, #392]	; (800b40c <OpenThread_CallBack_Processing+0x3e4>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	6892      	ldr	r2, [r2, #8]
 800b28a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800b290:	4611      	mov	r1, r2
 800b292:	4798      	blx	r3
    }
    break;
 800b294:	f000 bc2a 	b.w	800baec <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 800b298:	4b5d      	ldr	r3, [pc, #372]	; (800b410 <OpenThread_CallBack_Processing+0x3e8>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 8427 	beq.w	800baf0 <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800b2a2:	4b5b      	ldr	r3, [pc, #364]	; (800b410 <OpenThread_CallBack_Processing+0x3e8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	6892      	ldr	r2, [r2, #8]
 800b2aa:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4798      	blx	r3
    }
    break;
 800b2b4:	f000 bc1c 	b.w	800baf0 <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800b2b8:	4b56      	ldr	r3, [pc, #344]	; (800b414 <OpenThread_CallBack_Processing+0x3ec>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 8419 	beq.w	800baf4 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800b2c2:	4b54      	ldr	r3, [pc, #336]	; (800b414 <OpenThread_CallBack_Processing+0x3ec>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	6892      	ldr	r2, [r2, #8]
 800b2ca:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800b2d0:	4611      	mov	r1, r2
 800b2d2:	4798      	blx	r3
    }
    break;
 800b2d4:	f000 bc0e 	b.w	800baf4 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 800b2d8:	4b4f      	ldr	r3, [pc, #316]	; (800b418 <OpenThread_CallBack_Processing+0x3f0>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 840b 	beq.w	800baf8 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800b2e2:	4b4d      	ldr	r3, [pc, #308]	; (800b418 <OpenThread_CallBack_Processing+0x3f0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	6892      	ldr	r2, [r2, #8]
 800b2ea:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800b2f0:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800b2f6:	4798      	blx	r3
    }
    break;
 800b2f8:	e3fe      	b.n	800baf8 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 800b2fa:	4b48      	ldr	r3, [pc, #288]	; (800b41c <OpenThread_CallBack_Processing+0x3f4>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 83fc 	beq.w	800bafc <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 800b304:	4b45      	ldr	r3, [pc, #276]	; (800b41c <OpenThread_CallBack_Processing+0x3f4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	6892      	ldr	r2, [r2, #8]
 800b30c:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 800b312:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 800b318:	4798      	blx	r3
    }
    break;
 800b31a:	e3ef      	b.n	800bafc <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 800b31c:	4b3f      	ldr	r3, [pc, #252]	; (800b41c <OpenThread_CallBack_Processing+0x3f4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 83ed 	beq.w	800bb00 <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 800b326:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <OpenThread_CallBack_Processing+0x3f8>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	6892      	ldr	r2, [r2, #8]
 800b32e:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 800b334:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800b33a:	4798      	blx	r3
    }
    break;
 800b33c:	e3e0      	b.n	800bb00 <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 800b33e:	4b39      	ldr	r3, [pc, #228]	; (800b424 <OpenThread_CallBack_Processing+0x3fc>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 83de 	beq.w	800bb04 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800b348:	4b36      	ldr	r3, [pc, #216]	; (800b424 <OpenThread_CallBack_Processing+0x3fc>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	6892      	ldr	r2, [r2, #8]
 800b350:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800b356:	4611      	mov	r1, r2
 800b358:	4798      	blx	r3
    }
    break;
 800b35a:	e3d3      	b.n	800bb04 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 800b35c:	4b32      	ldr	r3, [pc, #200]	; (800b428 <OpenThread_CallBack_Processing+0x400>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 83d1 	beq.w	800bb08 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 800b366:	4b30      	ldr	r3, [pc, #192]	; (800b428 <OpenThread_CallBack_Processing+0x400>)
 800b368:	681c      	ldr	r4, [r3, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 800b374:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 800b37a:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 800b380:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	462b      	mov	r3, r5
 800b38a:	47a0      	blx	r4
    }
    break;
 800b38c:	e3bc      	b.n	800bb08 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 800b38e:	4b27      	ldr	r3, [pc, #156]	; (800b42c <OpenThread_CallBack_Processing+0x404>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 83ba 	beq.w	800bb0c <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b398:	4b24      	ldr	r3, [pc, #144]	; (800b42c <OpenThread_CallBack_Processing+0x404>)
 800b39a:	681c      	ldr	r4, [r3, #0]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b3a6:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b3ac:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b3b2:	47a0      	blx	r4
    }
    break;
 800b3b4:	e3aa      	b.n	800bb0c <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800b3b6:	4b1e      	ldr	r3, [pc, #120]	; (800b430 <OpenThread_CallBack_Processing+0x408>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 83a8 	beq.w	800bb10 <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800b3c0:	4b1b      	ldr	r3, [pc, #108]	; (800b430 <OpenThread_CallBack_Processing+0x408>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	4798      	blx	r3
    }
    break;
 800b3d0:	e39e      	b.n	800bb10 <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 800b3d2:	4b18      	ldr	r3, [pc, #96]	; (800b434 <OpenThread_CallBack_Processing+0x40c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f000 839c 	beq.w	800bb14 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800b3dc:	4b15      	ldr	r3, [pc, #84]	; (800b434 <OpenThread_CallBack_Processing+0x40c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	6892      	ldr	r2, [r2, #8]
 800b3e4:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	4798      	blx	r3
    }
    break;
 800b3ee:	e391      	b.n	800bb14 <OpenThread_CallBack_Processing+0xaec>
 800b3f0:	20000868 	.word	0x20000868
 800b3f4:	20000870 	.word	0x20000870
 800b3f8:	2000086c 	.word	0x2000086c
 800b3fc:	200007fc 	.word	0x200007fc
 800b400:	200007f8 	.word	0x200007f8
 800b404:	20000800 	.word	0x20000800
 800b408:	200007f4 	.word	0x200007f4
 800b40c:	20000874 	.word	0x20000874
 800b410:	20000878 	.word	0x20000878
 800b414:	2000087c 	.word	0x2000087c
 800b418:	20000884 	.word	0x20000884
 800b41c:	20000880 	.word	0x20000880
 800b420:	20000888 	.word	0x20000888
 800b424:	20000894 	.word	0x20000894
 800b428:	20000890 	.word	0x20000890
 800b42c:	2000088c 	.word	0x2000088c
 800b430:	200007d4 	.word	0x200007d4
 800b434:	20000804 	.word	0x20000804
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 800b438:	4b97      	ldr	r3, [pc, #604]	; (800b698 <OpenThread_CallBack_Processing+0x670>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 836b 	beq.w	800bb18 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 800b442:	4b95      	ldr	r3, [pc, #596]	; (800b698 <OpenThread_CallBack_Processing+0x670>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	6892      	ldr	r2, [r2, #8]
 800b44a:	4610      	mov	r0, r2
 800b44c:	4798      	blx	r3
    }
    break;
 800b44e:	e363      	b.n	800bb18 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 800b450:	4b92      	ldr	r3, [pc, #584]	; (800b69c <OpenThread_CallBack_Processing+0x674>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 8361 	beq.w	800bb1c <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800b45a:	4b90      	ldr	r3, [pc, #576]	; (800b69c <OpenThread_CallBack_Processing+0x674>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	6892      	ldr	r2, [r2, #8]
 800b462:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800b468:	4611      	mov	r1, r2
 800b46a:	4798      	blx	r3
    }
    break;
 800b46c:	e356      	b.n	800bb1c <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	461a      	mov	r2, r3
 800b474:	4b8a      	ldr	r3, [pc, #552]	; (800b6a0 <OpenThread_CallBack_Processing+0x678>)
 800b476:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800b478:	4b89      	ldr	r3, [pc, #548]	; (800b6a0 <OpenThread_CallBack_Processing+0x678>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	4a89      	ldr	r2, [pc, #548]	; (800b6a4 <OpenThread_CallBack_Processing+0x67c>)
 800b480:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800b482:	4b88      	ldr	r3, [pc, #544]	; (800b6a4 <OpenThread_CallBack_Processing+0x67c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 834a 	beq.w	800bb20 <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800b48c:	4b85      	ldr	r3, [pc, #532]	; (800b6a4 <OpenThread_CallBack_Processing+0x67c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a83      	ldr	r2, [pc, #524]	; (800b6a0 <OpenThread_CallBack_Processing+0x678>)
 800b492:	6812      	ldr	r2, [r2, #0]
 800b494:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800b49a:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800b4a0:	4798      	blx	r3
    }
    break;
 800b4a2:	e33d      	b.n	800bb20 <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800b4a4:	4b80      	ldr	r3, [pc, #512]	; (800b6a8 <OpenThread_CallBack_Processing+0x680>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 833b 	beq.w	800bb24 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800b4ae:	4b7e      	ldr	r3, [pc, #504]	; (800b6a8 <OpenThread_CallBack_Processing+0x680>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	6892      	ldr	r2, [r2, #8]
 800b4b6:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800b4bc:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800b4c2:	4798      	blx	r3
    }
    break;
 800b4c4:	e32e      	b.n	800bb24 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	4b77      	ldr	r3, [pc, #476]	; (800b6ac <OpenThread_CallBack_Processing+0x684>)
 800b4ce:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800b4d0:	4b76      	ldr	r3, [pc, #472]	; (800b6ac <OpenThread_CallBack_Processing+0x684>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	4a76      	ldr	r2, [pc, #472]	; (800b6b0 <OpenThread_CallBack_Processing+0x688>)
 800b4d8:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800b4da:	4b75      	ldr	r3, [pc, #468]	; (800b6b0 <OpenThread_CallBack_Processing+0x688>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 8322 	beq.w	800bb28 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b4e4:	4b72      	ldr	r3, [pc, #456]	; (800b6b0 <OpenThread_CallBack_Processing+0x688>)
 800b4e6:	681c      	ldr	r4, [r3, #0]
 800b4e8:	4b70      	ldr	r3, [pc, #448]	; (800b6ac <OpenThread_CallBack_Processing+0x684>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b4f2:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b4f8:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	47a0      	blx	r4
    }
    break;
 800b502:	e311      	b.n	800bb28 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800b504:	4b6b      	ldr	r3, [pc, #428]	; (800b6b4 <OpenThread_CallBack_Processing+0x68c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 830f 	beq.w	800bb2c <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b50e:	4b69      	ldr	r3, [pc, #420]	; (800b6b4 <OpenThread_CallBack_Processing+0x68c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	6892      	ldr	r2, [r2, #8]
 800b516:	2a00      	cmp	r2, #0
 800b518:	bf14      	ite	ne
 800b51a:	2201      	movne	r2, #1
 800b51c:	2200      	moveq	r2, #0
 800b51e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b524:	4611      	mov	r1, r2
 800b526:	4798      	blx	r3
    }
    break;
 800b528:	e300      	b.n	800bb2c <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800b52a:	4b62      	ldr	r3, [pc, #392]	; (800b6b4 <OpenThread_CallBack_Processing+0x68c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 82fe 	beq.w	800bb30 <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b534:	4b5f      	ldr	r3, [pc, #380]	; (800b6b4 <OpenThread_CallBack_Processing+0x68c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	6892      	ldr	r2, [r2, #8]
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	bf14      	ite	ne
 800b540:	2201      	movne	r2, #1
 800b542:	2200      	moveq	r2, #0
 800b544:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b54a:	4611      	mov	r1, r2
 800b54c:	4798      	blx	r3
    }
    break;
 800b54e:	e2ef      	b.n	800bb30 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800b550:	4b59      	ldr	r3, [pc, #356]	; (800b6b8 <OpenThread_CallBack_Processing+0x690>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 82ed 	beq.w	800bb34 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800b55a:	4b57      	ldr	r3, [pc, #348]	; (800b6b8 <OpenThread_CallBack_Processing+0x690>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	6892      	ldr	r2, [r2, #8]
 800b562:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800b568:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800b56e:	4798      	blx	r3
    }
    break;
 800b570:	e2e0      	b.n	800bb34 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800b572:	2001      	movs	r0, #1
 800b574:	f000 fb78 	bl	800bc68 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800b578:	f7f9 f931 	bl	80047de <HAL_NVIC_SystemReset>
    break;
 800b57c:	e317      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800b57e:	4b4f      	ldr	r3, [pc, #316]	; (800b6bc <OpenThread_CallBack_Processing+0x694>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f000 82d8 	beq.w	800bb38 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800b588:	4b4c      	ldr	r3, [pc, #304]	; (800b6bc <OpenThread_CallBack_Processing+0x694>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	6892      	ldr	r2, [r2, #8]
 800b590:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800b596:	4611      	mov	r1, r2
 800b598:	4798      	blx	r3
    }
    break;
 800b59a:	e2cd      	b.n	800bb38 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800b59c:	4b48      	ldr	r3, [pc, #288]	; (800b6c0 <OpenThread_CallBack_Processing+0x698>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 82cb 	beq.w	800bb3c <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800b5a6:	4b46      	ldr	r3, [pc, #280]	; (800b6c0 <OpenThread_CallBack_Processing+0x698>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	6892      	ldr	r2, [r2, #8]
 800b5ae:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800b5b4:	2a00      	cmp	r2, #0
 800b5b6:	bf14      	ite	ne
 800b5b8:	2201      	movne	r2, #1
 800b5ba:	2200      	moveq	r2, #0
 800b5bc:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800b5c2:	4798      	blx	r3
    }
    break;
 800b5c4:	e2ba      	b.n	800bb3c <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800b5c6:	4b3f      	ldr	r3, [pc, #252]	; (800b6c4 <OpenThread_CallBack_Processing+0x69c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 82b8 	beq.w	800bb40 <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800b5d0:	4b3c      	ldr	r3, [pc, #240]	; (800b6c4 <OpenThread_CallBack_Processing+0x69c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800b5d8:	4611      	mov	r1, r2
 800b5da:	2000      	movs	r0, #0
 800b5dc:	4798      	blx	r3
    }
    break;
 800b5de:	e2af      	b.n	800bb40 <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 800b5e0:	4b39      	ldr	r3, [pc, #228]	; (800b6c8 <OpenThread_CallBack_Processing+0x6a0>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 82ad 	beq.w	800bb44 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b5ea:	4b37      	ldr	r3, [pc, #220]	; (800b6c8 <OpenThread_CallBack_Processing+0x6a0>)
 800b5ec:	681c      	ldr	r4, [r3, #0]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b5f8:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b5fe:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b604:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	462b      	mov	r3, r5
 800b610:	47a0      	blx	r4
    }
    break;
 800b612:	e297      	b.n	800bb44 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800b614:	4b2d      	ldr	r3, [pc, #180]	; (800b6cc <OpenThread_CallBack_Processing+0x6a4>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 8295 	beq.w	800bb48 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800b61e:	4b2b      	ldr	r3, [pc, #172]	; (800b6cc <OpenThread_CallBack_Processing+0x6a4>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	6892      	ldr	r2, [r2, #8]
 800b626:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800b62c:	4611      	mov	r1, r2
 800b62e:	4798      	blx	r3
    }
    break;
 800b630:	e28a      	b.n	800bb48 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800b632:	4b27      	ldr	r3, [pc, #156]	; (800b6d0 <OpenThread_CallBack_Processing+0x6a8>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 8288 	beq.w	800bb4c <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800b63c:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <OpenThread_CallBack_Processing+0x6a8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	6892      	ldr	r2, [r2, #8]
 800b644:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800b64a:	4611      	mov	r1, r2
 800b64c:	4798      	blx	r3
    }
    break;
 800b64e:	e27d      	b.n	800bb4c <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800b650:	4b20      	ldr	r3, [pc, #128]	; (800b6d4 <OpenThread_CallBack_Processing+0x6ac>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 827b 	beq.w	800bb50 <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800b65a:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <OpenThread_CallBack_Processing+0x6ac>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	6892      	ldr	r2, [r2, #8]
 800b662:	4610      	mov	r0, r2
          p_notification->Data[1],
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800b668:	2a00      	cmp	r2, #0
 800b66a:	bf14      	ite	ne
 800b66c:	2201      	movne	r2, #1
 800b66e:	2200      	moveq	r2, #0
 800b670:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800b676:	4798      	blx	r3
    }
    break;
 800b678:	e26a      	b.n	800bb50 <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800b67a:	4b17      	ldr	r3, [pc, #92]	; (800b6d8 <OpenThread_CallBack_Processing+0x6b0>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f000 8268 	beq.w	800bb54 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800b684:	4b14      	ldr	r3, [pc, #80]	; (800b6d8 <OpenThread_CallBack_Processing+0x6b0>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	6892      	ldr	r2, [r2, #8]
 800b68c:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800b692:	4611      	mov	r1, r2
 800b694:	4798      	blx	r3
    }
    break;
 800b696:	e25d      	b.n	800bb54 <OpenThread_CallBack_Processing+0xb2c>
 800b698:	20000808 	.word	0x20000808
 800b69c:	2000080c 	.word	0x2000080c
 800b6a0:	20000850 	.word	0x20000850
 800b6a4:	20000844 	.word	0x20000844
 800b6a8:	20000848 	.word	0x20000848
 800b6ac:	20000854 	.word	0x20000854
 800b6b0:	2000084c 	.word	0x2000084c
 800b6b4:	2000085c 	.word	0x2000085c
 800b6b8:	20000858 	.word	0x20000858
 800b6bc:	200007dc 	.word	0x200007dc
 800b6c0:	200007e0 	.word	0x200007e0
 800b6c4:	200007d8 	.word	0x200007d8
 800b6c8:	200007e4 	.word	0x200007e4
 800b6cc:	200007e8 	.word	0x200007e8
 800b6d0:	200007ec 	.word	0x200007ec
 800b6d4:	200007f0 	.word	0x200007f0
 800b6d8:	20000810 	.word	0x20000810
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800b6dc:	4b95      	ldr	r3, [pc, #596]	; (800b934 <OpenThread_CallBack_Processing+0x90c>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 8239 	beq.w	800bb58 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b6e6:	4b93      	ldr	r3, [pc, #588]	; (800b934 <OpenThread_CallBack_Processing+0x90c>)
 800b6e8:	681c      	ldr	r4, [r3, #0]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b6f2:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b6f8:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b6fe:	47a0      	blx	r4
    }
    break;
 800b700:	e22a      	b.n	800bb58 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800b702:	4b8d      	ldr	r3, [pc, #564]	; (800b938 <OpenThread_CallBack_Processing+0x910>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 8228 	beq.w	800bb5c <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800b70c:	4b8a      	ldr	r3, [pc, #552]	; (800b938 <OpenThread_CallBack_Processing+0x910>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	6892      	ldr	r2, [r2, #8]
 800b714:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800b71e:	4798      	blx	r3
    }
    break;
 800b720:	e21c      	b.n	800bb5c <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800b722:	4b86      	ldr	r3, [pc, #536]	; (800b93c <OpenThread_CallBack_Processing+0x914>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 821a 	beq.w	800bb60 <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800b72c:	4b83      	ldr	r3, [pc, #524]	; (800b93c <OpenThread_CallBack_Processing+0x914>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	6892      	ldr	r2, [r2, #8]
 800b734:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800b73a:	4611      	mov	r1, r2
 800b73c:	4798      	blx	r3
    }
    break;
 800b73e:	e20f      	b.n	800bb60 <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800b740:	4b7f      	ldr	r3, [pc, #508]	; (800b940 <OpenThread_CallBack_Processing+0x918>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 820d 	beq.w	800bb64 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b74a:	4b7d      	ldr	r3, [pc, #500]	; (800b940 <OpenThread_CallBack_Processing+0x918>)
 800b74c:	681c      	ldr	r4, [r3, #0]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b758:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b75e:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b764:	47a0      	blx	r4
    }
    break;
 800b766:	e1fd      	b.n	800bb64 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800b768:	4b76      	ldr	r3, [pc, #472]	; (800b944 <OpenThread_CallBack_Processing+0x91c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 81fb 	beq.w	800bb68 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b772:	4b74      	ldr	r3, [pc, #464]	; (800b944 <OpenThread_CallBack_Processing+0x91c>)
 800b774:	681c      	ldr	r4, [r3, #0]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b780:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b786:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b78c:	47a0      	blx	r4
    }
    break;
 800b78e:	e1eb      	b.n	800bb68 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800b790:	4b6d      	ldr	r3, [pc, #436]	; (800b948 <OpenThread_CallBack_Processing+0x920>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 81e9 	beq.w	800bb6c <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800b79a:	4b6b      	ldr	r3, [pc, #428]	; (800b948 <OpenThread_CallBack_Processing+0x920>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	6892      	ldr	r2, [r2, #8]
 800b7a2:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	4798      	blx	r3
    }
    break;
 800b7ac:	e1de      	b.n	800bb6c <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800b7ae:	4b67      	ldr	r3, [pc, #412]	; (800b94c <OpenThread_CallBack_Processing+0x924>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 81dc 	beq.w	800bb70 <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800b7b8:	4b64      	ldr	r3, [pc, #400]	; (800b94c <OpenThread_CallBack_Processing+0x924>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	6892      	ldr	r2, [r2, #8]
 800b7c0:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800b7c6:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800b7c8:	683a      	ldr	r2, [r7, #0]
 800b7ca:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800b7cc:	b2d2      	uxtb	r2, r2
 800b7ce:	4798      	blx	r3
    }
    break;
 800b7d0:	e1ce      	b.n	800bb70 <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800b7d2:	4b5f      	ldr	r3, [pc, #380]	; (800b950 <OpenThread_CallBack_Processing+0x928>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 81cc 	beq.w	800bb74 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800b7dc:	4b5c      	ldr	r3, [pc, #368]	; (800b950 <OpenThread_CallBack_Processing+0x928>)
 800b7de:	681c      	ldr	r4, [r3, #0]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800b7ea:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800b7f0:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	47a0      	blx	r4
    }
    break;
 800b7fa:	e1bb      	b.n	800bb74 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800b7fc:	4b55      	ldr	r3, [pc, #340]	; (800b954 <OpenThread_CallBack_Processing+0x92c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 81b9 	beq.w	800bb78 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800b806:	4b53      	ldr	r3, [pc, #332]	; (800b954 <OpenThread_CallBack_Processing+0x92c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	6892      	ldr	r2, [r2, #8]
 800b80e:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800b814:	b252      	sxtb	r2, r2
 800b816:	4611      	mov	r1, r2
 800b818:	4798      	blx	r3
    }
    break;
 800b81a:	e1ad      	b.n	800bb78 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800b81c:	4b4e      	ldr	r3, [pc, #312]	; (800b958 <OpenThread_CallBack_Processing+0x930>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 81ab 	beq.w	800bb7c <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800b826:	4b4c      	ldr	r3, [pc, #304]	; (800b958 <OpenThread_CallBack_Processing+0x930>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	6892      	ldr	r2, [r2, #8]
 800b82e:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800b834:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800b83a:	4798      	blx	r3
    }
    break;
 800b83c:	e19e      	b.n	800bb7c <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	461a      	mov	r2, r3
 800b844:	4b45      	ldr	r3, [pc, #276]	; (800b95c <OpenThread_CallBack_Processing+0x934>)
 800b846:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800b848:	4b44      	ldr	r3, [pc, #272]	; (800b95c <OpenThread_CallBack_Processing+0x934>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	4a44      	ldr	r2, [pc, #272]	; (800b960 <OpenThread_CallBack_Processing+0x938>)
 800b850:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800b852:	4b43      	ldr	r3, [pc, #268]	; (800b960 <OpenThread_CallBack_Processing+0x938>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 8192 	beq.w	800bb80 <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b85c:	4b40      	ldr	r3, [pc, #256]	; (800b960 <OpenThread_CallBack_Processing+0x938>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a3e      	ldr	r2, [pc, #248]	; (800b95c <OpenThread_CallBack_Processing+0x934>)
 800b862:	6812      	ldr	r2, [r2, #0]
 800b864:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b86a:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b870:	4798      	blx	r3
 800b872:	4603      	mov	r3, r0
 800b874:	461a      	mov	r2, r3
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	609a      	str	r2, [r3, #8]
      }
      break;
 800b87a:	e181      	b.n	800bb80 <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800b87c:	4b39      	ldr	r3, [pc, #228]	; (800b964 <OpenThread_CallBack_Processing+0x93c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 817f 	beq.w	800bb84 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800b886:	4b37      	ldr	r3, [pc, #220]	; (800b964 <OpenThread_CallBack_Processing+0x93c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	6892      	ldr	r2, [r2, #8]
 800b88e:	4610      	mov	r0, r2
 800b890:	4798      	blx	r3
    }
    break;
 800b892:	e177      	b.n	800bb84 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800b894:	4b34      	ldr	r3, [pc, #208]	; (800b968 <OpenThread_CallBack_Processing+0x940>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 8175 	beq.w	800bb88 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b89e:	4b32      	ldr	r3, [pc, #200]	; (800b968 <OpenThread_CallBack_Processing+0x940>)
 800b8a0:	6819      	ldr	r1, [r3, #0]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	461c      	mov	r4, r3
 800b8b0:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	462b      	mov	r3, r5
 800b8be:	4788      	blx	r1
    }
    break;
 800b8c0:	e162      	b.n	800bb88 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 800b8c2:	4b2a      	ldr	r3, [pc, #168]	; (800b96c <OpenThread_CallBack_Processing+0x944>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 8160 	beq.w	800bb8c <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800b8cc:	4b27      	ldr	r3, [pc, #156]	; (800b96c <OpenThread_CallBack_Processing+0x944>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	6892      	ldr	r2, [r2, #8]
 800b8d4:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800b8da:	4611      	mov	r1, r2
 800b8dc:	4798      	blx	r3
    }
    break;
 800b8de:	e155      	b.n	800bb8c <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 800b8e0:	4b23      	ldr	r3, [pc, #140]	; (800b970 <OpenThread_CallBack_Processing+0x948>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 8153 	beq.w	800bb90 <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800b8ea:	4b21      	ldr	r3, [pc, #132]	; (800b970 <OpenThread_CallBack_Processing+0x948>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	6892      	ldr	r2, [r2, #8]
 800b8f2:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4798      	blx	r3
    }
    break;
 800b8fc:	e148      	b.n	800bb90 <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b906:	4a1b      	ldr	r2, [pc, #108]	; (800b974 <OpenThread_CallBack_Processing+0x94c>)
 800b908:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 800b90a:	4b1a      	ldr	r3, [pc, #104]	; (800b974 <OpenThread_CallBack_Processing+0x94c>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	695b      	ldr	r3, [r3, #20]
 800b910:	4a19      	ldr	r2, [pc, #100]	; (800b978 <OpenThread_CallBack_Processing+0x950>)
 800b912:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 800b914:	4b18      	ldr	r3, [pc, #96]	; (800b978 <OpenThread_CallBack_Processing+0x950>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 813b 	beq.w	800bb94 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800b91e:	4b16      	ldr	r3, [pc, #88]	; (800b978 <OpenThread_CallBack_Processing+0x950>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	6892      	ldr	r2, [r2, #8]
 800b926:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800b92c:	b2d2      	uxtb	r2, r2
 800b92e:	4611      	mov	r1, r2
 800b930:	4798      	blx	r3
    }
    break;
 800b932:	e12f      	b.n	800bb94 <OpenThread_CallBack_Processing+0xb6c>
 800b934:	2000081c 	.word	0x2000081c
 800b938:	20000820 	.word	0x20000820
 800b93c:	20000814 	.word	0x20000814
 800b940:	20000818 	.word	0x20000818
 800b944:	20000824 	.word	0x20000824
 800b948:	20000828 	.word	0x20000828
 800b94c:	2000082c 	.word	0x2000082c
 800b950:	20000830 	.word	0x20000830
 800b954:	20000834 	.word	0x20000834
 800b958:	20000838 	.word	0x20000838
 800b95c:	20000840 	.word	0x20000840
 800b960:	2000083c 	.word	0x2000083c
 800b964:	20000860 	.word	0x20000860
 800b968:	20000864 	.word	0x20000864
 800b96c:	20000898 	.word	0x20000898
 800b970:	2000089c 	.word	0x2000089c
 800b974:	200008a0 	.word	0x200008a0
 800b978:	200008a8 	.word	0x200008a8
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b984:	4a8d      	ldr	r2, [pc, #564]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800b986:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800b988:	4b8c      	ldr	r3, [pc, #560]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	4a8c      	ldr	r2, [pc, #560]	; (800bbc0 <OpenThread_CallBack_Processing+0xb98>)
 800b990:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 800b992:	4b8b      	ldr	r3, [pc, #556]	; (800bbc0 <OpenThread_CallBack_Processing+0xb98>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 80fe 	beq.w	800bb98 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800b99c:	4b88      	ldr	r3, [pc, #544]	; (800bbc0 <OpenThread_CallBack_Processing+0xb98>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	6892      	ldr	r2, [r2, #8]
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	4798      	blx	r3
    }
    break;
 800b9a8:	e0f6      	b.n	800bb98 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b9b2:	4a82      	ldr	r2, [pc, #520]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800b9b4:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800b9b6:	4b81      	ldr	r3, [pc, #516]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	4a81      	ldr	r2, [pc, #516]	; (800bbc4 <OpenThread_CallBack_Processing+0xb9c>)
 800b9be:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 800b9c0:	4b80      	ldr	r3, [pc, #512]	; (800bbc4 <OpenThread_CallBack_Processing+0xb9c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 80e9 	beq.w	800bb9c <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b9ca:	4b7e      	ldr	r3, [pc, #504]	; (800bbc4 <OpenThread_CallBack_Processing+0xb9c>)
 800b9cc:	681c      	ldr	r4, [r3, #0]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bf14      	ite	ne
 800b9e0:	2301      	movne	r3, #1
 800b9e2:	2300      	moveq	r3, #0
 800b9e4:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b9ea:	47a0      	blx	r4
    }
    break;
 800b9ec:	e0d6      	b.n	800bb9c <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b9f6:	4a71      	ldr	r2, [pc, #452]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800b9f8:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 800b9fa:	4b70      	ldr	r3, [pc, #448]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	4a71      	ldr	r2, [pc, #452]	; (800bbc8 <OpenThread_CallBack_Processing+0xba0>)
 800ba02:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800ba04:	4b70      	ldr	r3, [pc, #448]	; (800bbc8 <OpenThread_CallBack_Processing+0xba0>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 80c9 	beq.w	800bba0 <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800ba0e:	4b6e      	ldr	r3, [pc, #440]	; (800bbc8 <OpenThread_CallBack_Processing+0xba0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	6892      	ldr	r2, [r2, #8]
 800ba16:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	4798      	blx	r3
    }
    break;
 800ba20:	e0be      	b.n	800bba0 <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ba2a:	4a64      	ldr	r2, [pc, #400]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800ba2c:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800ba2e:	4b63      	ldr	r3, [pc, #396]	; (800bbbc <OpenThread_CallBack_Processing+0xb94>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	4a65      	ldr	r2, [pc, #404]	; (800bbcc <OpenThread_CallBack_Processing+0xba4>)
 800ba36:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800ba38:	4b64      	ldr	r3, [pc, #400]	; (800bbcc <OpenThread_CallBack_Processing+0xba4>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 80b1 	beq.w	800bba4 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800ba42:	4b62      	ldr	r3, [pc, #392]	; (800bbcc <OpenThread_CallBack_Processing+0xba4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	6892      	ldr	r2, [r2, #8]
 800ba4a:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800ba54:	4798      	blx	r3
    }
    break;
 800ba56:	e0a5      	b.n	800bba4 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	4a5c      	ldr	r2, [pc, #368]	; (800bbd0 <OpenThread_CallBack_Processing+0xba8>)
 800ba60:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 800ba62:	4b5b      	ldr	r3, [pc, #364]	; (800bbd0 <OpenThread_CallBack_Processing+0xba8>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a5a      	ldr	r2, [pc, #360]	; (800bbd4 <OpenThread_CallBack_Processing+0xbac>)
 800ba6a:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800ba6c:	4b59      	ldr	r3, [pc, #356]	; (800bbd4 <OpenThread_CallBack_Processing+0xbac>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8099 	beq.w	800bba8 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800ba76:	4b57      	ldr	r3, [pc, #348]	; (800bbd4 <OpenThread_CallBack_Processing+0xbac>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	6892      	ldr	r2, [r2, #8]
 800ba7e:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800ba84:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800ba8a:	4798      	blx	r3
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	609a      	str	r2, [r3, #8]
    }
    break;
 800ba94:	e088      	b.n	800bba8 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	4a4c      	ldr	r2, [pc, #304]	; (800bbd0 <OpenThread_CallBack_Processing+0xba8>)
 800ba9e:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 800baa0:	4b4b      	ldr	r3, [pc, #300]	; (800bbd0 <OpenThread_CallBack_Processing+0xba8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	4a4c      	ldr	r2, [pc, #304]	; (800bbd8 <OpenThread_CallBack_Processing+0xbb0>)
 800baa8:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800baaa:	4b4b      	ldr	r3, [pc, #300]	; (800bbd8 <OpenThread_CallBack_Processing+0xbb0>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d07c      	beq.n	800bbac <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800bab2:	4b49      	ldr	r3, [pc, #292]	; (800bbd8 <OpenThread_CallBack_Processing+0xbb0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	6892      	ldr	r2, [r2, #8]
 800baba:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800bac0:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800bac6:	4798      	blx	r3
    }
    break;
 800bac8:	e070      	b.n	800bbac <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	71fb      	strb	r3, [r7, #7]
    break;
 800bace:	e06e      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bad0:	bf00      	nop
 800bad2:	e06c      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bad4:	bf00      	nop
 800bad6:	e06a      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bad8:	bf00      	nop
 800bada:	e068      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800badc:	bf00      	nop
 800bade:	e066      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bae0:	bf00      	nop
 800bae2:	e064      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bae4:	bf00      	nop
 800bae6:	e062      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bae8:	bf00      	nop
 800baea:	e060      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800baec:	bf00      	nop
 800baee:	e05e      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800baf0:	bf00      	nop
 800baf2:	e05c      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800baf4:	bf00      	nop
 800baf6:	e05a      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800baf8:	bf00      	nop
 800bafa:	e058      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bafc:	bf00      	nop
 800bafe:	e056      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb00:	bf00      	nop
 800bb02:	e054      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb04:	bf00      	nop
 800bb06:	e052      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb08:	bf00      	nop
 800bb0a:	e050      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb0c:	bf00      	nop
 800bb0e:	e04e      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb10:	bf00      	nop
 800bb12:	e04c      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb14:	bf00      	nop
 800bb16:	e04a      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb18:	bf00      	nop
 800bb1a:	e048      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb1c:	bf00      	nop
 800bb1e:	e046      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb20:	bf00      	nop
 800bb22:	e044      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb24:	bf00      	nop
 800bb26:	e042      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb28:	bf00      	nop
 800bb2a:	e040      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb2c:	bf00      	nop
 800bb2e:	e03e      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb30:	bf00      	nop
 800bb32:	e03c      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb34:	bf00      	nop
 800bb36:	e03a      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb38:	bf00      	nop
 800bb3a:	e038      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb3c:	bf00      	nop
 800bb3e:	e036      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb40:	bf00      	nop
 800bb42:	e034      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb44:	bf00      	nop
 800bb46:	e032      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb48:	bf00      	nop
 800bb4a:	e030      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb4c:	bf00      	nop
 800bb4e:	e02e      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb50:	bf00      	nop
 800bb52:	e02c      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb54:	bf00      	nop
 800bb56:	e02a      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb58:	bf00      	nop
 800bb5a:	e028      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb5c:	bf00      	nop
 800bb5e:	e026      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb60:	bf00      	nop
 800bb62:	e024      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb64:	bf00      	nop
 800bb66:	e022      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb68:	bf00      	nop
 800bb6a:	e020      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb6c:	bf00      	nop
 800bb6e:	e01e      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb70:	bf00      	nop
 800bb72:	e01c      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb74:	bf00      	nop
 800bb76:	e01a      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb78:	bf00      	nop
 800bb7a:	e018      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb7c:	bf00      	nop
 800bb7e:	e016      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
      break;
 800bb80:	bf00      	nop
 800bb82:	e014      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb84:	bf00      	nop
 800bb86:	e012      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb88:	bf00      	nop
 800bb8a:	e010      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb8c:	bf00      	nop
 800bb8e:	e00e      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb90:	bf00      	nop
 800bb92:	e00c      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb94:	bf00      	nop
 800bb96:	e00a      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb98:	bf00      	nop
 800bb9a:	e008      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bb9c:	bf00      	nop
 800bb9e:	e006      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bba0:	bf00      	nop
 800bba2:	e004      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bba4:	bf00      	nop
 800bba6:	e002      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bba8:	bf00      	nop
 800bbaa:	e000      	b.n	800bbae <OpenThread_CallBack_Processing+0xb86>
    break;
 800bbac:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800bbae:	f000 fd9b 	bl	800c6e8 <TL_THREAD_SendAck>
  return status;
 800bbb2:	79fb      	ldrb	r3, [r7, #7]

}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bdb0      	pop	{r4, r5, r7, pc}
 800bbbc:	200008a0 	.word	0x200008a0
 800bbc0:	200008ac 	.word	0x200008ac
 800bbc4:	200008b0 	.word	0x200008b0
 800bbc8:	200008b4 	.word	0x200008b4
 800bbcc:	200008c0 	.word	0x200008c0
 800bbd0:	200008a4 	.word	0x200008a4
 800bbd4:	200008b8 	.word	0x200008b8
 800bbd8:	200008bc 	.word	0x200008bc

0800bbdc <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800bbe8:	f7f5 fe90 	bl	800190c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bbec:	f7f5 fe14 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800bbf0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800bbfa:	701a      	strb	r2, [r3, #0]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f042 0202 	orr.w	r2, r2, #2
 800bc02:	705a      	strb	r2, [r3, #1]
 800bc04:	2200      	movs	r2, #0
 800bc06:	709a      	strb	r2, [r3, #2]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f042 0201 	orr.w	r2, r2, #1
 800bc14:	711a      	strb	r2, [r3, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	715a      	strb	r2, [r3, #5]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	719a      	strb	r2, [r3, #6]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800bc22:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800bc2a:	f7f5 fe3d 	bl	80018a8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bc2e:	f7f5 fdff 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800bc32:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	b2db      	uxtb	r3, r3
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b086      	sub	sp, #24
 800bc46:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bc48:	1d3b      	adds	r3, r7, #4
 800bc4a:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	2100      	movs	r1, #0
 800bc52:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800bc56:	f000 f957 	bl	800bf08 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	330b      	adds	r3, #11
 800bc5e:	78db      	ldrb	r3, [r3, #3]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b088      	sub	sp, #32
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bc72:	f107 030c 	add.w	r3, r7, #12
 800bc76:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800bc78:	79fb      	ldrb	r3, [r7, #7]
 800bc7a:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800bc7c:	f107 020c 	add.w	r2, r7, #12
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	2101      	movs	r1, #1
 800bc84:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800bc88:	f000 f93e 	bl	800bf08 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	330b      	adds	r3, #11
 800bc90:	78db      	ldrb	r3, [r3, #3]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3720      	adds	r7, #32
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b088      	sub	sp, #32
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	4603      	mov	r3, r0
 800bca2:	460a      	mov	r2, r1
 800bca4:	71fb      	strb	r3, [r7, #7]
 800bca6:	4613      	mov	r3, r2
 800bca8:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bcaa:	f107 030c 	add.w	r3, r7, #12
 800bcae:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
 800bcb2:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800bcb4:	79bb      	ldrb	r3, [r7, #6]
 800bcb6:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 800bcb8:	f107 020c 	add.w	r2, r7, #12
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2102      	movs	r1, #2
 800bcc0:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800bcc4:	f000 f920 	bl	800bf08 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	330b      	adds	r3, #11
 800bccc:	78db      	ldrb	r3, [r3, #3]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3720      	adds	r7, #32
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b08b      	sub	sp, #44	; 0x2c
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bd00:	4b4a      	ldr	r3, [pc, #296]	; (800be2c <SHCI_GetWirelessFwInfo+0x154>)
 800bd02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd08:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bd12:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a44      	ldr	r2, [pc, #272]	; (800be30 <SHCI_GetWirelessFwInfo+0x158>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d10f      	bne.n	800bd44 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	695b      	ldr	r3, [r3, #20]
 800bd28:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	69db      	ldr	r3, [r3, #28]
 800bd34:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	617b      	str	r3, [r7, #20]
 800bd42:	e01a      	b.n	800bd7a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bd4c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bd50:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	0e1b      	lsrs	r3, r3, #24
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	0c1b      	lsrs	r3, r3, #16
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	0a1b      	lsrs	r3, r3, #8
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	091b      	lsrs	r3, r3, #4
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	f003 030f 	and.w	r3, r3, #15
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	0e1b      	lsrs	r3, r3, #24
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	0c1b      	lsrs	r3, r3, #16
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800bdca:	6a3b      	ldr	r3, [r7, #32]
 800bdcc:	0a1b      	lsrs	r3, r3, #8
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	0e1b      	lsrs	r3, r3, #24
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	0c1b      	lsrs	r3, r3, #16
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	0a1b      	lsrs	r3, r3, #8
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	0e1b      	lsrs	r3, r3, #24
 800be06:	b2da      	uxtb	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	0c1b      	lsrs	r3, r3, #16
 800be10:	b2da      	uxtb	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	372c      	adds	r7, #44	; 0x2c
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	58004000 	.word	0x58004000
 800be30:	a94656b9 	.word	0xa94656b9

0800be34 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	4a08      	ldr	r2, [pc, #32]	; (800be64 <shci_init+0x30>)
 800be44:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800be46:	4a08      	ldr	r2, [pc, #32]	; (800be68 <shci_init+0x34>)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800be4c:	4806      	ldr	r0, [pc, #24]	; (800be68 <shci_init+0x34>)
 800be4e:	f000 f911 	bl	800c074 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f000 f894 	bl	800bf84 <TlInit>

  return;
 800be5c:	bf00      	nop
}
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	200008e4 	.word	0x200008e4
 800be68:	200008c4 	.word	0x200008c4

0800be6c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800be72:	4822      	ldr	r0, [pc, #136]	; (800befc <shci_user_evt_proc+0x90>)
 800be74:	f001 f8cc 	bl	800d010 <LST_is_empty>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d12b      	bne.n	800bed6 <shci_user_evt_proc+0x6a>
 800be7e:	4b20      	ldr	r3, [pc, #128]	; (800bf00 <shci_user_evt_proc+0x94>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d027      	beq.n	800bed6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800be86:	f107 030c 	add.w	r3, r7, #12
 800be8a:	4619      	mov	r1, r3
 800be8c:	481b      	ldr	r0, [pc, #108]	; (800befc <shci_user_evt_proc+0x90>)
 800be8e:	f001 f94e 	bl	800d12e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800be92:	4b1c      	ldr	r3, [pc, #112]	; (800bf04 <shci_user_evt_proc+0x98>)
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00c      	beq.n	800beb4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800be9e:	2301      	movs	r3, #1
 800bea0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bea2:	4b18      	ldr	r3, [pc, #96]	; (800bf04 <shci_user_evt_proc+0x98>)
 800bea4:	69db      	ldr	r3, [r3, #28]
 800bea6:	1d3a      	adds	r2, r7, #4
 800bea8:	4610      	mov	r0, r2
 800beaa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800beac:	793a      	ldrb	r2, [r7, #4]
 800beae:	4b14      	ldr	r3, [pc, #80]	; (800bf00 <shci_user_evt_proc+0x94>)
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	e002      	b.n	800beba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800beb4:	4b12      	ldr	r3, [pc, #72]	; (800bf00 <shci_user_evt_proc+0x94>)
 800beb6:	2201      	movs	r2, #1
 800beb8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800beba:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <shci_user_evt_proc+0x94>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d004      	beq.n	800becc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 fc8b 	bl	800c7e0 <TL_MM_EvtDone>
 800beca:	e004      	b.n	800bed6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4619      	mov	r1, r3
 800bed0:	480a      	ldr	r0, [pc, #40]	; (800befc <shci_user_evt_proc+0x90>)
 800bed2:	f001 f8bf 	bl	800d054 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bed6:	4809      	ldr	r0, [pc, #36]	; (800befc <shci_user_evt_proc+0x90>)
 800bed8:	f001 f89a 	bl	800d010 <LST_is_empty>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d107      	bne.n	800bef2 <shci_user_evt_proc+0x86>
 800bee2:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <shci_user_evt_proc+0x94>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800beea:	4804      	ldr	r0, [pc, #16]	; (800befc <shci_user_evt_proc+0x90>)
 800beec:	f7f6 fb5e 	bl	80025ac <shci_notify_asynch_evt>
  }


  return;
 800bef0:	bf00      	nop
 800bef2:	bf00      	nop
}
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	200000a4 	.word	0x200000a4
 800bf00:	200000b4 	.word	0x200000b4
 800bf04:	200008c4 	.word	0x200008c4

0800bf08 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60ba      	str	r2, [r7, #8]
 800bf10:	607b      	str	r3, [r7, #4]
 800bf12:	4603      	mov	r3, r0
 800bf14:	81fb      	strh	r3, [r7, #14]
 800bf16:	460b      	mov	r3, r1
 800bf18:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bf1a:	2000      	movs	r0, #0
 800bf1c:	f000 f864 	bl	800bfe8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bf20:	4b16      	ldr	r3, [pc, #88]	; (800bf7c <shci_send+0x74>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	89fa      	ldrh	r2, [r7, #14]
 800bf26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bf2a:	4b14      	ldr	r3, [pc, #80]	; (800bf7c <shci_send+0x74>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	7b7a      	ldrb	r2, [r7, #13]
 800bf30:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bf32:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <shci_send+0x74>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	330c      	adds	r3, #12
 800bf38:	7b7a      	ldrb	r2, [r7, #13]
 800bf3a:	68b9      	ldr	r1, [r7, #8]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 fd79 	bl	800da34 <memcpy>

  shciContext.io.Send(0,0);
 800bf42:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <shci_send+0x78>)
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	2100      	movs	r1, #0
 800bf48:	2000      	movs	r0, #0
 800bf4a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bf4c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bf50:	f7f6 fb43 	bl	80025da <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f103 0008 	add.w	r0, r3, #8
 800bf5a:	4b08      	ldr	r3, [pc, #32]	; (800bf7c <shci_send+0x74>)
 800bf5c:	6819      	ldr	r1, [r3, #0]
 800bf5e:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <shci_send+0x74>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	789b      	ldrb	r3, [r3, #2]
 800bf64:	3303      	adds	r3, #3
 800bf66:	461a      	mov	r2, r3
 800bf68:	f001 fd64 	bl	800da34 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	f000 f83b 	bl	800bfe8 <Cmd_SetStatus>

  return;
 800bf72:	bf00      	nop
}
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	200000b0 	.word	0x200000b0
 800bf80:	200008c4 	.word	0x200008c4

0800bf84 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bf8c:	4a10      	ldr	r2, [pc, #64]	; (800bfd0 <TlInit+0x4c>)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800bf92:	4810      	ldr	r0, [pc, #64]	; (800bfd4 <TlInit+0x50>)
 800bf94:	f001 f82c 	bl	800cff0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bf98:	2001      	movs	r0, #1
 800bf9a:	f000 f825 	bl	800bfe8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf9e:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <TlInit+0x54>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bfa4:	4b0d      	ldr	r3, [pc, #52]	; (800bfdc <TlInit+0x58>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00c      	beq.n	800bfc6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <TlInit+0x5c>)
 800bfb2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bfb4:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <TlInit+0x60>)
 800bfb6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800bfb8:	4b08      	ldr	r3, [pc, #32]	; (800bfdc <TlInit+0x58>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f107 020c 	add.w	r2, r7, #12
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	4798      	blx	r3
  }

  return;
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
}
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200000b0 	.word	0x200000b0
 800bfd4:	200000a4 	.word	0x200000a4
 800bfd8:	200000b4 	.word	0x200000b4
 800bfdc:	200008c4 	.word	0x200008c4
 800bfe0:	0800c039 	.word	0x0800c039
 800bfe4:	0800c051 	.word	0x0800c051

0800bfe8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	4603      	mov	r3, r0
 800bff0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10b      	bne.n	800c010 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bff8:	4b0d      	ldr	r3, [pc, #52]	; (800c030 <Cmd_SetStatus+0x48>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c000:	4b0b      	ldr	r3, [pc, #44]	; (800c030 <Cmd_SetStatus+0x48>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2000      	movs	r0, #0
 800c006:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c008:	4b0a      	ldr	r3, [pc, #40]	; (800c034 <Cmd_SetStatus+0x4c>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c00e:	e00b      	b.n	800c028 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c010:	4b08      	ldr	r3, [pc, #32]	; (800c034 <Cmd_SetStatus+0x4c>)
 800c012:	2201      	movs	r2, #1
 800c014:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c016:	4b06      	ldr	r3, [pc, #24]	; (800c030 <Cmd_SetStatus+0x48>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d004      	beq.n	800c028 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c01e:	4b04      	ldr	r3, [pc, #16]	; (800c030 <Cmd_SetStatus+0x48>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2001      	movs	r0, #1
 800c024:	4798      	blx	r3
  return;
 800c026:	bf00      	nop
 800c028:	bf00      	nop
}
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	200008e4 	.word	0x200008e4
 800c034:	200000ac 	.word	0x200000ac

0800c038 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c040:	2000      	movs	r0, #0
 800c042:	f7f6 fabf 	bl	80025c4 <shci_cmd_resp_release>

  return;
 800c046:	bf00      	nop
}
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	4805      	ldr	r0, [pc, #20]	; (800c070 <TlUserEvtReceived+0x20>)
 800c05c:	f001 f820 	bl	800d0a0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c060:	4803      	ldr	r0, [pc, #12]	; (800c070 <TlUserEvtReceived+0x20>)
 800c062:	f7f6 faa3 	bl	80025ac <shci_notify_asynch_evt>

  return;
 800c066:	bf00      	nop
}
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	200000a4 	.word	0x200000a4

0800c074 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a05      	ldr	r2, [pc, #20]	; (800c094 <shci_register_io_bus+0x20>)
 800c080:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a04      	ldr	r2, [pc, #16]	; (800c098 <shci_register_io_bus+0x24>)
 800c086:	611a      	str	r2, [r3, #16]

  return;
 800c088:	bf00      	nop
}
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr
 800c094:	0800c575 	.word	0x0800c575
 800c098:	0800c5c9 	.word	0x0800c5c9

0800c09c <otSrpClientEnableAutoStartMode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}


void otSrpClientEnableAutoStartMode(otInstance *aInstance, otSrpClientAutoStartCallback aCallback, void *aContext)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 800c0a8:	f7f5 fc30 	bl	800190c <Pre_OtCmdProcessing>

  otSrpClientAutoStartCb = aCallback;
 800c0ac:	4a14      	ldr	r2, [pc, #80]	; (800c100 <otSrpClientEnableAutoStartMode+0x64>)
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	6013      	str	r3, [r2, #0]

  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c0b2:	f7f5 fbb1 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c0b6:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_START_MODE;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f062 0234 	orn	r2, r2, #52	; 0x34
 800c0c0:	701a      	strb	r2, [r3, #0]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f042 0201 	orr.w	r2, r2, #1
 800c0c8:	705a      	strb	r2, [r3, #1]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	709a      	strb	r2, [r3, #2]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f042 0201 	orr.w	r2, r2, #1
 800c0da:	711a      	strb	r2, [r3, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	715a      	strb	r2, [r3, #5]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	719a      	strb	r2, [r3, #6]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aContext;
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	609a      	str	r2, [r3, #8]

  Ot_Cmd_TransferWithNotif();
 800c0ee:	f7f5 fbe1 	bl	80018b4 <Ot_Cmd_TransferWithNotif>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c0f2:	f7f5 fb9d 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c0f6:	6178      	str	r0, [r7, #20]
}
 800c0f8:	bf00      	nop
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20000894 	.word	0x20000894

0800c104 <otSrpClientSetHostName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otSrpClientHostInfo*)p_ot_req->Data[0];
}

otError otSrpClientSetHostName(otInstance *aInstance, const char *aName)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c10e:	f7f5 fbfd 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c112:	f7f5 fb81 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c116:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_SET_HOST_NAME;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f062 022a 	orn	r2, r2, #42	; 0x2a
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	2200      	movs	r2, #0
 800c124:	f042 0201 	orr.w	r2, r2, #1
 800c128:	705a      	strb	r2, [r3, #1]
 800c12a:	2200      	movs	r2, #0
 800c12c:	709a      	strb	r2, [r3, #2]
 800c12e:	2200      	movs	r2, #0
 800c130:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	f042 0201 	orr.w	r2, r2, #1
 800c13a:	711a      	strb	r2, [r3, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	715a      	strb	r2, [r3, #5]
 800c140:	2200      	movs	r2, #0
 800c142:	719a      	strb	r2, [r3, #6]
 800c144:	2200      	movs	r2, #0
 800c146:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aName;
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c14e:	f7f5 fbab 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c152:	f7f5 fb6d 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c156:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	b2db      	uxtb	r3, r3
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <otSrpClientEnableAutoHostAddress>:

otError otSrpClientEnableAutoHostAddress(otInstance *aInstance)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c16e:	f7f5 fbcd 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c172:	f7f5 fb51 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c176:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_HOST_ADDRESS;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f062 0229 	orn	r2, r2, #41	; 0x29
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	f042 0201 	orr.w	r2, r2, #1
 800c188:	705a      	strb	r2, [r3, #1]
 800c18a:	2200      	movs	r2, #0
 800c18c:	709a      	strb	r2, [r3, #2]
 800c18e:	2200      	movs	r2, #0
 800c190:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	711a      	strb	r2, [r3, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	715a      	strb	r2, [r3, #5]
 800c19c:	2200      	movs	r2, #0
 800c19e:	719a      	strb	r2, [r3, #6]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c1a4:	f7f5 fb80 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c1a8:	f7f5 fb42 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c1ac:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	b2db      	uxtb	r3, r3
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <otSrpClientAddService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otSrpClientAddService(otInstance *aInstance, otSrpClientService *aService)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c1c6:	f7f5 fba1 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c1ca:	f7f5 fb25 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c1ce:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ADD_SERVICE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f062 0227 	orn	r2, r2, #39	; 0x27
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f042 0201 	orr.w	r2, r2, #1
 800c1e0:	705a      	strb	r2, [r3, #1]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	709a      	strb	r2, [r3, #2]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f042 0201 	orr.w	r2, r2, #1
 800c1f2:	711a      	strb	r2, [r3, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	715a      	strb	r2, [r3, #5]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	719a      	strb	r2, [r3, #6]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aService;
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c206:	f7f5 fb4f 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c20a:	f7f5 fb11 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c20e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	b2db      	uxtb	r3, r3
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <otSrpClientBuffersGetHostNameString>:
#ifdef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_ENABLE

#include "srp_client_buffers.h"

char *otSrpClientBuffersGetHostNameString(otInstance *aInstance, uint16_t *aSize)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c228:	f7f5 fb70 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c22c:	f7f5 faf4 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c230:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_HOST_NAME_STRING;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	f062 021c 	orn	r2, r2, #28
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f042 0201 	orr.w	r2, r2, #1
 800c242:	705a      	strb	r2, [r3, #1]
 800c244:	2200      	movs	r2, #0
 800c246:	709a      	strb	r2, [r3, #2]
 800c248:	2200      	movs	r2, #0
 800c24a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f042 0201 	orr.w	r2, r2, #1
 800c254:	711a      	strb	r2, [r3, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	715a      	strb	r2, [r3, #5]
 800c25a:	2200      	movs	r2, #0
 800c25c:	719a      	strb	r2, [r3, #6]
 800c25e:	2200      	movs	r2, #0
 800c260:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSize;
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c268:	f7f5 fb1e 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c26c:	f7f5 fae0 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c270:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	689b      	ldr	r3, [r3, #8]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <otSrpClientBuffersAllocateService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otIp6Address*)p_ot_req->Data[0];
}

otSrpClientBuffersServiceEntry *otSrpClientBuffersAllocateService(otInstance *aInstance)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c286:	f7f5 fb41 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c28a:	f7f5 fac5 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c28e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_ALLOCATE_SERVICE;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f062 021a 	orn	r2, r2, #26
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f042 0201 	orr.w	r2, r2, #1
 800c2a0:	705a      	strb	r2, [r3, #1]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	709a      	strb	r2, [r3, #2]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	711a      	strb	r2, [r3, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	715a      	strb	r2, [r3, #5]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	719a      	strb	r2, [r3, #6]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c2bc:	f7f5 faf4 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c2c0:	f7f5 fab6 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c2c4:	60f8      	str	r0, [r7, #12]
  return (otSrpClientBuffersServiceEntry*)p_ot_req->Data[0];
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	689b      	ldr	r3, [r3, #8]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <otSrpClientBuffersGetServiceEntryServiceNameString>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

char *otSrpClientBuffersGetServiceEntryServiceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c2dc:	f7f5 fb16 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c2e0:	f7f5 fa9a 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c2e4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_SERVICE_NAME_STRING;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f062 0217 	orn	r2, r2, #23
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f042 0201 	orr.w	r2, r2, #1
 800c2f6:	705a      	strb	r2, [r3, #1]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	709a      	strb	r2, [r3, #2]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	f042 0202 	orr.w	r2, r2, #2
 800c308:	711a      	strb	r2, [r3, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	715a      	strb	r2, [r3, #5]
 800c30e:	2200      	movs	r2, #0
 800c310:	719a      	strb	r2, [r3, #6]
 800c312:	2200      	movs	r2, #0
 800c314:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800c322:	f7f5 fac1 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c326:	f7f5 fa83 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c32a:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	689b      	ldr	r3, [r3, #8]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <otSrpClientBuffersGetServiceEntryInstanceNameString>:

char *otSrpClientBuffersGetServiceEntryInstanceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c342:	f7f5 fae3 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c346:	f7f5 fa67 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c34a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_INSTANCE_NAME_STRING;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f062 0216 	orn	r2, r2, #22
 800c354:	701a      	strb	r2, [r3, #0]
 800c356:	2200      	movs	r2, #0
 800c358:	f042 0201 	orr.w	r2, r2, #1
 800c35c:	705a      	strb	r2, [r3, #1]
 800c35e:	2200      	movs	r2, #0
 800c360:	709a      	strb	r2, [r3, #2]
 800c362:	2200      	movs	r2, #0
 800c364:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	f042 0202 	orr.w	r2, r2, #2
 800c36e:	711a      	strb	r2, [r3, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	715a      	strb	r2, [r3, #5]
 800c374:	2200      	movs	r2, #0
 800c376:	719a      	strb	r2, [r3, #6]
 800c378:	2200      	movs	r2, #0
 800c37a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800c388:	f7f5 fa8e 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c38c:	f7f5 fa50 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c390:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	689b      	ldr	r3, [r3, #8]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800c3aa:	f7f5 faaf 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c3ae:	f7f5 fa33 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c3b2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	705a      	strb	r2, [r3, #1]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	709a      	strb	r2, [r3, #2]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f042 0201 	orr.w	r2, r2, #1
 800c3d2:	711a      	strb	r2, [r3, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	715a      	strb	r2, [r3, #5]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	719a      	strb	r2, [r3, #6]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800c3e0:	78fa      	ldrb	r2, [r7, #3]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c3e6:	f7f5 fa5f 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c3ea:	f7f5 fa21 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c3ee:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	b2db      	uxtb	r3, r3
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b084      	sub	sp, #16
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c408:	f7f5 fa80 	bl	800190c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c40c:	f7f5 fa04 	bl	8001818 <THREAD_Get_OTCmdPayloadBuffer>
 800c410:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 800c41a:	701a      	strb	r2, [r3, #0]
 800c41c:	2200      	movs	r2, #0
 800c41e:	705a      	strb	r2, [r3, #1]
 800c420:	2200      	movs	r2, #0
 800c422:	709a      	strb	r2, [r3, #2]
 800c424:	2200      	movs	r2, #0
 800c426:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f042 0203 	orr.w	r2, r2, #3
 800c430:	711a      	strb	r2, [r3, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	715a      	strb	r2, [r3, #5]
 800c436:	2200      	movs	r2, #0
 800c438:	719a      	strb	r2, [r3, #6]
 800c43a:	2200      	movs	r2, #0
 800c43c:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800c43e:	783b      	ldrb	r3, [r7, #0]
 800c440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c444:	b2db      	uxtb	r3, r3
 800c446:	461a      	mov	r2, r3
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 800c44c:	783b      	ldrb	r3, [r7, #0]
 800c44e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c452:	b2db      	uxtb	r3, r3
 800c454:	461a      	mov	r2, r3
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800c45a:	783b      	ldrb	r3, [r7, #0]
 800c45c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c460:	b2db      	uxtb	r3, r3
 800c462:	461a      	mov	r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800c468:	f7f5 fa1e 	bl	80018a8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c46c:	f7f5 f9e0 	bl	8001830 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c470:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	b2db      	uxtb	r3, r3
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c484:	f7f5 fd0a 	bl	8001e9c <HW_IPCC_Enable>

  return;
 800c488:	bf00      	nop
}
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <TL_Init>:


void TL_Init( void )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <TL_Init+0x48>)
 800c492:	4a11      	ldr	r2, [pc, #68]	; (800c4d8 <TL_Init+0x4c>)
 800c494:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c496:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <TL_Init+0x48>)
 800c498:	4a10      	ldr	r2, [pc, #64]	; (800c4dc <TL_Init+0x50>)
 800c49a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <TL_Init+0x48>)
 800c49e:	4a10      	ldr	r2, [pc, #64]	; (800c4e0 <TL_Init+0x54>)
 800c4a0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c4a2:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <TL_Init+0x48>)
 800c4a4:	4a0f      	ldr	r2, [pc, #60]	; (800c4e4 <TL_Init+0x58>)
 800c4a6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <TL_Init+0x48>)
 800c4aa:	4a0f      	ldr	r2, [pc, #60]	; (800c4e8 <TL_Init+0x5c>)
 800c4ac:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c4ae:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <TL_Init+0x48>)
 800c4b0:	4a0e      	ldr	r2, [pc, #56]	; (800c4ec <TL_Init+0x60>)
 800c4b2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c4b4:	4b07      	ldr	r3, [pc, #28]	; (800c4d4 <TL_Init+0x48>)
 800c4b6:	4a0e      	ldr	r2, [pc, #56]	; (800c4f0 <TL_Init+0x64>)
 800c4b8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c4ba:	4b06      	ldr	r3, [pc, #24]	; (800c4d4 <TL_Init+0x48>)
 800c4bc:	4a0d      	ldr	r2, [pc, #52]	; (800c4f4 <TL_Init+0x68>)
 800c4be:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c4c0:	4b04      	ldr	r3, [pc, #16]	; (800c4d4 <TL_Init+0x48>)
 800c4c2:	4a0d      	ldr	r2, [pc, #52]	; (800c4f8 <TL_Init+0x6c>)
 800c4c4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c4c6:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <TL_Init+0x48>)
 800c4c8:	4a0c      	ldr	r2, [pc, #48]	; (800c4fc <TL_Init+0x70>)
 800c4ca:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c4cc:	f7f5 fcfa 	bl	8001ec4 <HW_IPCC_Init>

  return;
 800c4d0:	bf00      	nop
}
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	20030000 	.word	0x20030000
 800c4d8:	20030038 	.word	0x20030038
 800c4dc:	20030058 	.word	0x20030058
 800c4e0:	20030068 	.word	0x20030068
 800c4e4:	20030078 	.word	0x20030078
 800c4e8:	20030080 	.word	0x20030080
 800c4ec:	20030088 	.word	0x20030088
 800c4f0:	20030090 	.word	0x20030090
 800c4f4:	200300ac 	.word	0x200300ac
 800c4f8:	200300b0 	.word	0x200300b0
 800c4fc:	200300bc 	.word	0x200300bc

0800c500 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c506:	e01c      	b.n	800c542 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c508:	1d3b      	adds	r3, r7, #4
 800c50a:	4619      	mov	r1, r3
 800c50c:	4812      	ldr	r0, [pc, #72]	; (800c558 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c50e:	f000 fe0e 	bl	800d12e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	7a5b      	ldrb	r3, [r3, #9]
 800c516:	2b0f      	cmp	r3, #15
 800c518:	d003      	beq.n	800c522 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	7a5b      	ldrb	r3, [r3, #9]
 800c51e:	2b0e      	cmp	r3, #14
 800c520:	d105      	bne.n	800c52e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4619      	mov	r1, r3
 800c526:	2002      	movs	r0, #2
 800c528:	f000 f9be 	bl	800c8a8 <OutputDbgTrace>
 800c52c:	e004      	b.n	800c538 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4619      	mov	r1, r3
 800c532:	2003      	movs	r0, #3
 800c534:	f000 f9b8 	bl	800c8a8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c538:	4b08      	ldr	r3, [pc, #32]	; (800c55c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	4610      	mov	r0, r2
 800c540:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c544:	f000 fd64 	bl	800d010 <LST_is_empty>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d0dc      	beq.n	800c508 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c54e:	bf00      	nop
}
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	200300d8 	.word	0x200300d8
 800c55c:	200008f0 	.word	0x200008f0

0800c560 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c564:	4b02      	ldr	r3, [pc, #8]	; (800c570 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4798      	blx	r3

  return;
 800c56a:	bf00      	nop
}
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	200008f4 	.word	0x200008f4

0800c574 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c580:	480d      	ldr	r0, [pc, #52]	; (800c5b8 <TL_SYS_Init+0x44>)
 800c582:	f000 fd35 	bl	800cff0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c586:	4b0d      	ldr	r3, [pc, #52]	; (800c5bc <TL_SYS_Init+0x48>)
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689a      	ldr	r2, [r3, #8]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	4a08      	ldr	r2, [pc, #32]	; (800c5b8 <TL_SYS_Init+0x44>)
 800c598:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c59a:	f7f5 fcc1 	bl	8001f20 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a07      	ldr	r2, [pc, #28]	; (800c5c0 <TL_SYS_Init+0x4c>)
 800c5a4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	4a06      	ldr	r2, [pc, #24]	; (800c5c4 <TL_SYS_Init+0x50>)
 800c5ac:	6013      	str	r3, [r2, #0]

  return 0;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	200300e0 	.word	0x200300e0
 800c5bc:	20030000 	.word	0x20030000
 800c5c0:	200008f8 	.word	0x200008f8
 800c5c4:	200008fc 	.word	0x200008fc

0800c5c8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c5d4:	4b09      	ldr	r3, [pc, #36]	; (800c5fc <TL_SYS_SendCmd+0x34>)
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2210      	movs	r2, #16
 800c5dc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c5de:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <TL_SYS_SendCmd+0x34>)
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	2004      	movs	r0, #4
 800c5e8:	f000 f95e 	bl	800c8a8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c5ec:	f7f5 fca2 	bl	8001f34 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20030000 	.word	0x20030000

0800c600 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c604:	4b07      	ldr	r3, [pc, #28]	; (800c624 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4619      	mov	r1, r3
 800c60c:	2005      	movs	r0, #5
 800c60e:	f000 f94b 	bl	800c8a8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c612:	4b05      	ldr	r3, [pc, #20]	; (800c628 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a03      	ldr	r2, [pc, #12]	; (800c624 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c618:	68d2      	ldr	r2, [r2, #12]
 800c61a:	6812      	ldr	r2, [r2, #0]
 800c61c:	4610      	mov	r0, r2
 800c61e:	4798      	blx	r3

  return;
 800c620:	bf00      	nop
}
 800c622:	bd80      	pop	{r7, pc}
 800c624:	20030000 	.word	0x20030000
 800c628:	200008f8 	.word	0x200008f8

0800c62c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c632:	e00e      	b.n	800c652 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c634:	1d3b      	adds	r3, r7, #4
 800c636:	4619      	mov	r1, r3
 800c638:	480b      	ldr	r0, [pc, #44]	; (800c668 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c63a:	f000 fd78 	bl	800d12e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4619      	mov	r1, r3
 800c642:	2006      	movs	r0, #6
 800c644:	f000 f930 	bl	800c8a8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c648:	4b08      	ldr	r3, [pc, #32]	; (800c66c <HW_IPCC_SYS_EvtNot+0x40>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	4610      	mov	r0, r2
 800c650:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c652:	4805      	ldr	r0, [pc, #20]	; (800c668 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c654:	f000 fcdc 	bl	800d010 <LST_is_empty>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0ea      	beq.n	800c634 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c65e:	bf00      	nop
}
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	200300e0 	.word	0x200300e0
 800c66c:	200008fc 	.word	0x200008fc

0800c670 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c678:	4b0c      	ldr	r3, [pc, #48]	; (800c6ac <TL_THREAD_Init+0x3c>)
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	68da      	ldr	r2, [r3, #12]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800c69e:	f7f5 fc6f 	bl	8001f80 <HW_IPCC_THREAD_Init>

  return;
 800c6a2:	bf00      	nop
}
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20030000 	.word	0x20030000

0800c6b0 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c6b4:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <TL_OT_SendCmd+0x18>)
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	2208      	movs	r2, #8
 800c6bc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c6be:	f7f5 fc6d 	bl	8001f9c <HW_IPCC_OT_SendCmd>

  return;
 800c6c2:	bf00      	nop
}
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20030000 	.word	0x20030000

0800c6cc <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c6d0:	4b04      	ldr	r3, [pc, #16]	; (800c6e4 <TL_CLI_SendCmd+0x18>)
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	220a      	movs	r2, #10
 800c6d8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c6da:	f7f5 fc6d 	bl	8001fb8 <HW_IPCC_CLI_SendCmd>

  return;
 800c6de:	bf00      	nop
}
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20030000 	.word	0x20030000

0800c6e8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c6ec:	4b04      	ldr	r3, [pc, #16]	; (800c700 <TL_THREAD_SendAck+0x18>)
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	220d      	movs	r2, #13
 800c6f4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c6f6:	f7f5 fc69 	bl	8001fcc <HW_IPCC_THREAD_SendAck>

  return;
 800c6fa:	bf00      	nop
}
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20030000 	.word	0x20030000

0800c704 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c708:	4b04      	ldr	r3, [pc, #16]	; (800c71c <TL_THREAD_CliSendAck+0x18>)
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	220d      	movs	r2, #13
 800c710:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c712:	f7f5 fc69 	bl	8001fe8 <HW_IPCC_THREAD_CliSendAck>

  return;
 800c716:	bf00      	nop
}
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20030000 	.word	0x20030000

0800c720 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c724:	4b03      	ldr	r3, [pc, #12]	; (800c734 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f5 f8ce 	bl	80018cc <TL_OT_CmdEvtReceived>

  return;
 800c730:	bf00      	nop
}
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20030000 	.word	0x20030000

0800c738 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c73c:	4b03      	ldr	r3, [pc, #12]	; (800c74c <HW_IPCC_THREAD_EvtNot+0x14>)
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4618      	mov	r0, r3
 800c744:	f7f5 f8d2 	bl	80018ec <TL_THREAD_NotReceived>

  return;
 800c748:	bf00      	nop
}
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	20030000 	.word	0x20030000

0800c750 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800c754:	4b03      	ldr	r3, [pc, #12]	; (800c764 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7f5 f99c 	bl	8001a98 <TL_THREAD_CliNotReceived>

  return;
 800c760:	bf00      	nop
}
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20030000 	.word	0x20030000

0800c768 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c770:	4817      	ldr	r0, [pc, #92]	; (800c7d0 <TL_MM_Init+0x68>)
 800c772:	f000 fc3d 	bl	800cff0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c776:	4817      	ldr	r0, [pc, #92]	; (800c7d4 <TL_MM_Init+0x6c>)
 800c778:	f000 fc3a 	bl	800cff0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c77c:	4b16      	ldr	r3, [pc, #88]	; (800c7d8 <TL_MM_Init+0x70>)
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	4a16      	ldr	r2, [pc, #88]	; (800c7dc <TL_MM_Init+0x74>)
 800c782:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c784:	4b15      	ldr	r3, [pc, #84]	; (800c7dc <TL_MM_Init+0x74>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	6892      	ldr	r2, [r2, #8]
 800c78c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c78e:	4b13      	ldr	r3, [pc, #76]	; (800c7dc <TL_MM_Init+0x74>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	68d2      	ldr	r2, [r2, #12]
 800c796:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c798:	4b10      	ldr	r3, [pc, #64]	; (800c7dc <TL_MM_Init+0x74>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a0c      	ldr	r2, [pc, #48]	; (800c7d0 <TL_MM_Init+0x68>)
 800c79e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c7a0:	4b0e      	ldr	r3, [pc, #56]	; (800c7dc <TL_MM_Init+0x74>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	6812      	ldr	r2, [r2, #0]
 800c7a8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c7aa:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <TL_MM_Init+0x74>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	6852      	ldr	r2, [r2, #4]
 800c7b2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c7b4:	4b09      	ldr	r3, [pc, #36]	; (800c7dc <TL_MM_Init+0x74>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	6912      	ldr	r2, [r2, #16]
 800c7bc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <TL_MM_Init+0x74>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6952      	ldr	r2, [r2, #20]
 800c7c6:	619a      	str	r2, [r3, #24]

  return;
 800c7c8:	bf00      	nop
}
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	200300c8 	.word	0x200300c8
 800c7d4:	200008e8 	.word	0x200008e8
 800c7d8:	20030000 	.word	0x20030000
 800c7dc:	20000900 	.word	0x20000900

0800c7e0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c7e8:	6879      	ldr	r1, [r7, #4]
 800c7ea:	4807      	ldr	r0, [pc, #28]	; (800c808 <TL_MM_EvtDone+0x28>)
 800c7ec:	f000 fc58 	bl	800d0a0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c7f0:	6879      	ldr	r1, [r7, #4]
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	f000 f858 	bl	800c8a8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c7f8:	4804      	ldr	r0, [pc, #16]	; (800c80c <TL_MM_EvtDone+0x2c>)
 800c7fa:	f7f5 fc27 	bl	800204c <HW_IPCC_MM_SendFreeBuf>

  return;
 800c7fe:	bf00      	nop
}
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	200008e8 	.word	0x200008e8
 800c80c:	0800c811 	.word	0x0800c811

0800c810 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c816:	e00c      	b.n	800c832 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c818:	1d3b      	adds	r3, r7, #4
 800c81a:	4619      	mov	r1, r3
 800c81c:	480a      	ldr	r0, [pc, #40]	; (800c848 <SendFreeBuf+0x38>)
 800c81e:	f000 fc86 	bl	800d12e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c822:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <SendFreeBuf+0x3c>)
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fc37 	bl	800d0a0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c832:	4805      	ldr	r0, [pc, #20]	; (800c848 <SendFreeBuf+0x38>)
 800c834:	f000 fbec 	bl	800d010 <LST_is_empty>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0ec      	beq.n	800c818 <SendFreeBuf+0x8>
  }

  return;
 800c83e:	bf00      	nop
}
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	200008e8 	.word	0x200008e8
 800c84c:	20030000 	.word	0x20030000

0800c850 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c854:	4805      	ldr	r0, [pc, #20]	; (800c86c <TL_TRACES_Init+0x1c>)
 800c856:	f000 fbcb 	bl	800cff0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c85a:	4b05      	ldr	r3, [pc, #20]	; (800c870 <TL_TRACES_Init+0x20>)
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	4a03      	ldr	r2, [pc, #12]	; (800c86c <TL_TRACES_Init+0x1c>)
 800c860:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c862:	f7f5 fc29 	bl	80020b8 <HW_IPCC_TRACES_Init>

  return;
 800c866:	bf00      	nop
}
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	200300d0 	.word	0x200300d0
 800c870:	20030000 	.word	0x20030000

0800c874 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c87a:	e008      	b.n	800c88e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c87c:	1d3b      	adds	r3, r7, #4
 800c87e:	4619      	mov	r1, r3
 800c880:	4808      	ldr	r0, [pc, #32]	; (800c8a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c882:	f000 fc54 	bl	800d12e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4618      	mov	r0, r3
 800c88a:	f7f5 feb1 	bl	80025f0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c88e:	4805      	ldr	r0, [pc, #20]	; (800c8a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c890:	f000 fbbe 	bl	800d010 <LST_is_empty>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0f0      	beq.n	800c87c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c89a:	bf00      	nop
}
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200300d0 	.word	0x200300d0

0800c8a8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	6039      	str	r1, [r7, #0]
 800c8b2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c8b4:	79fb      	ldrb	r3, [r7, #7]
 800c8b6:	2b06      	cmp	r3, #6
 800c8b8:	d845      	bhi.n	800c946 <OutputDbgTrace+0x9e>
 800c8ba:	a201      	add	r2, pc, #4	; (adr r2, 800c8c0 <OutputDbgTrace+0x18>)
 800c8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c0:	0800c8dd 	.word	0x0800c8dd
 800c8c4:	0800c901 	.word	0x0800c901
 800c8c8:	0800c907 	.word	0x0800c907
 800c8cc:	0800c91b 	.word	0x0800c91b
 800c8d0:	0800c927 	.word	0x0800c927
 800c8d4:	0800c92d 	.word	0x0800c92d
 800c8d8:	0800c93b 	.word	0x0800c93b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	7a5b      	ldrb	r3, [r3, #9]
 800c8e4:	2bff      	cmp	r3, #255	; 0xff
 800c8e6:	d005      	beq.n	800c8f4 <OutputDbgTrace+0x4c>
 800c8e8:	2bff      	cmp	r3, #255	; 0xff
 800c8ea:	dc05      	bgt.n	800c8f8 <OutputDbgTrace+0x50>
 800c8ec:	2b0e      	cmp	r3, #14
 800c8ee:	d005      	beq.n	800c8fc <OutputDbgTrace+0x54>
 800c8f0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c8f2:	e001      	b.n	800c8f8 <OutputDbgTrace+0x50>
          break;
 800c8f4:	bf00      	nop
 800c8f6:	e027      	b.n	800c948 <OutputDbgTrace+0xa0>
          break;
 800c8f8:	bf00      	nop
 800c8fa:	e025      	b.n	800c948 <OutputDbgTrace+0xa0>
          break;
 800c8fc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c8fe:	e023      	b.n	800c948 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c904:	e020      	b.n	800c948 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	7a5b      	ldrb	r3, [r3, #9]
 800c90e:	2b0e      	cmp	r3, #14
 800c910:	d001      	beq.n	800c916 <OutputDbgTrace+0x6e>
 800c912:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c914:	e000      	b.n	800c918 <OutputDbgTrace+0x70>
          break;
 800c916:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c918:	e016      	b.n	800c948 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	7a5b      	ldrb	r3, [r3, #9]
 800c922:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c924:	e010      	b.n	800c948 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c92a:	e00d      	b.n	800c948 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	7a5b      	ldrb	r3, [r3, #9]
 800c934:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c936:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c938:	e006      	b.n	800c948 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	7a5b      	ldrb	r3, [r3, #9]
 800c942:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c944:	e000      	b.n	800c948 <OutputDbgTrace+0xa0>

    default:
      break;
 800c946:	bf00      	nop
  }

  return;
 800c948:	bf00      	nop
}
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c95a:	f3ef 8310 	mrs	r3, PRIMASK
 800c95e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c960:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800c962:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c964:	b672      	cpsid	i
}
 800c966:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800c968:	1cbb      	adds	r3, r7, #2
 800c96a:	4619      	mov	r1, r3
 800c96c:	4812      	ldr	r0, [pc, #72]	; (800c9b8 <DbgTrace_TxCpltCallback+0x64>)
 800c96e:	f000 fe56 	bl	800d61e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800c972:	1cbb      	adds	r3, r7, #2
 800c974:	4619      	mov	r1, r3
 800c976:	4810      	ldr	r0, [pc, #64]	; (800c9b8 <DbgTrace_TxCpltCallback+0x64>)
 800c978:	f000 ff42 	bl	800d800 <CircularQueue_Sense>
 800c97c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00c      	beq.n	800c99e <DbgTrace_TxCpltCallback+0x4a>
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	f383 8810 	msr	PRIMASK, r3
}
 800c98e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800c990:	887b      	ldrh	r3, [r7, #2]
 800c992:	4a0a      	ldr	r2, [pc, #40]	; (800c9bc <DbgTrace_TxCpltCallback+0x68>)
 800c994:	4619      	mov	r1, r3
 800c996:	6938      	ldr	r0, [r7, #16]
 800c998:	f7f5 fe45 	bl	8002626 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800c99c:	e008      	b.n	800c9b0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800c99e:	4b08      	ldr	r3, [pc, #32]	; (800c9c0 <DbgTrace_TxCpltCallback+0x6c>)
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	701a      	strb	r2, [r3, #0]
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f383 8810 	msr	PRIMASK, r3
}
 800c9ae:	bf00      	nop
}
 800c9b0:	bf00      	nop
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20000904 	.word	0x20000904
 800c9bc:	0800c955 	.word	0x0800c955
 800c9c0:	20000035 	.word	0x20000035

0800c9c4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800c9ca:	f7f5 fe26 	bl	800261a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c9d8:	4903      	ldr	r1, [pc, #12]	; (800c9e8 <DbgTraceInit+0x24>)
 800c9da:	4804      	ldr	r0, [pc, #16]	; (800c9ec <DbgTraceInit+0x28>)
 800c9dc:	f000 fbc6 	bl	800d16c <CircularQueue_Init>
#endif 
#endif
  return;
 800c9e0:	bf00      	nop
}
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20000924 	.word	0x20000924
 800c9ec:	20000904 	.word	0x20000904

0800c9f0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	68b9      	ldr	r1, [r7, #8]
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f000 f805 	bl	800ca10 <DbgTraceWrite>
 800ca06:	4603      	mov	r3, r0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	; 0x28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca20:	f3ef 8310 	mrs	r3, PRIMASK
 800ca24:	61bb      	str	r3, [r7, #24]
  return(result);
 800ca26:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ca28:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca30:	d102      	bne.n	800ca38 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24
 800ca36:	e037      	b.n	800caa8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d006      	beq.n	800ca4c <DbgTraceWrite+0x3c>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b02      	cmp	r3, #2
 800ca42:	d003      	beq.n	800ca4c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ca44:	f04f 33ff 	mov.w	r3, #4294967295
 800ca48:	627b      	str	r3, [r7, #36]	; 0x24
 800ca4a:	e02d      	b.n	800caa8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d02a      	beq.n	800caa8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ca56:	b672      	cpsid	i
}
 800ca58:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	2301      	movs	r3, #1
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	4814      	ldr	r0, [pc, #80]	; (800cab4 <DbgTraceWrite+0xa4>)
 800ca64:	f000 fbb4 	bl	800d1d0 <CircularQueue_Add>
 800ca68:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d015      	beq.n	800ca9c <DbgTraceWrite+0x8c>
 800ca70:	4b11      	ldr	r3, [pc, #68]	; (800cab8 <DbgTraceWrite+0xa8>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d010      	beq.n	800ca9c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ca7a:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <DbgTraceWrite+0xa8>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	6a3b      	ldr	r3, [r7, #32]
 800ca82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	f383 8810 	msr	PRIMASK, r3
}
 800ca8a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	4a0a      	ldr	r2, [pc, #40]	; (800cabc <DbgTraceWrite+0xac>)
 800ca92:	4619      	mov	r1, r3
 800ca94:	69f8      	ldr	r0, [r7, #28]
 800ca96:	f7f5 fdc6 	bl	8002626 <DbgOutputTraces>
 800ca9a:	e005      	b.n	800caa8 <DbgTraceWrite+0x98>
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	f383 8810 	msr	PRIMASK, r3
}
 800caa6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3728      	adds	r7, #40	; 0x28
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20000904 	.word	0x20000904
 800cab8:	20000035 	.word	0x20000035
 800cabc:	0800c955 	.word	0x0800c955

0800cac0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800caca:	4b0f      	ldr	r3, [pc, #60]	; (800cb08 <OTP_Read+0x48>)
 800cacc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cace:	e002      	b.n	800cad6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3b08      	subs	r3, #8
 800cad4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3307      	adds	r3, #7
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	79fa      	ldrb	r2, [r7, #7]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d003      	beq.n	800caea <OTP_Read+0x2a>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4a09      	ldr	r2, [pc, #36]	; (800cb0c <OTP_Read+0x4c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d1f2      	bne.n	800cad0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3307      	adds	r3, #7
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	79fa      	ldrb	r2, [r7, #7]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d001      	beq.n	800cafa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cafa:	68fb      	ldr	r3, [r7, #12]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	1fff73f8 	.word	0x1fff73f8
 800cb0c:	1fff7000 	.word	0x1fff7000

0800cb10 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800cb14:	4b05      	ldr	r3, [pc, #20]	; (800cb2c <UTIL_LPM_Init+0x1c>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800cb1a:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <UTIL_LPM_Init+0x20>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800cb20:	bf00      	nop
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	20001924 	.word	0x20001924
 800cb30:	20001928 	.word	0x20001928

0800cb34 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb40:	f3ef 8310 	mrs	r3, PRIMASK
 800cb44:	613b      	str	r3, [r7, #16]
  return(result);
 800cb46:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cb48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb4a:	b672      	cpsid	i
}
 800cb4c:	bf00      	nop

  switch( state )
 800cb4e:	78fb      	ldrb	r3, [r7, #3]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d008      	beq.n	800cb66 <UTIL_LPM_SetStopMode+0x32>
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d10e      	bne.n	800cb76 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800cb58:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <UTIL_LPM_SetStopMode+0x5c>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	4a0b      	ldr	r2, [pc, #44]	; (800cb90 <UTIL_LPM_SetStopMode+0x5c>)
 800cb62:	6013      	str	r3, [r2, #0]
      break;
 800cb64:	e008      	b.n	800cb78 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	43da      	mvns	r2, r3
 800cb6a:	4b09      	ldr	r3, [pc, #36]	; (800cb90 <UTIL_LPM_SetStopMode+0x5c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	4a07      	ldr	r2, [pc, #28]	; (800cb90 <UTIL_LPM_SetStopMode+0x5c>)
 800cb72:	6013      	str	r3, [r2, #0]
      break;
 800cb74:	e000      	b.n	800cb78 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800cb76:	bf00      	nop
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f383 8810 	msr	PRIMASK, r3
}
 800cb82:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cb84:	bf00      	nop
 800cb86:	371c      	adds	r7, #28
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	20001924 	.word	0x20001924

0800cb94 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cb94:	b480      	push	{r7}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cba0:	f3ef 8310 	mrs	r3, PRIMASK
 800cba4:	613b      	str	r3, [r7, #16]
  return(result);
 800cba6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cba8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbaa:	b672      	cpsid	i
}
 800cbac:	bf00      	nop
  
  switch(state)
 800cbae:	78fb      	ldrb	r3, [r7, #3]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d008      	beq.n	800cbc6 <UTIL_LPM_SetOffMode+0x32>
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d10e      	bne.n	800cbd6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cbb8:	4b0d      	ldr	r3, [pc, #52]	; (800cbf0 <UTIL_LPM_SetOffMode+0x5c>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	4a0b      	ldr	r2, [pc, #44]	; (800cbf0 <UTIL_LPM_SetOffMode+0x5c>)
 800cbc2:	6013      	str	r3, [r2, #0]
      break;
 800cbc4:	e008      	b.n	800cbd8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	43da      	mvns	r2, r3
 800cbca:	4b09      	ldr	r3, [pc, #36]	; (800cbf0 <UTIL_LPM_SetOffMode+0x5c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4013      	ands	r3, r2
 800cbd0:	4a07      	ldr	r2, [pc, #28]	; (800cbf0 <UTIL_LPM_SetOffMode+0x5c>)
 800cbd2:	6013      	str	r3, [r2, #0]
      break;
 800cbd4:	e000      	b.n	800cbd8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800cbd6:	bf00      	nop
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f383 8810 	msr	PRIMASK, r3
}
 800cbe2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cbe4:	bf00      	nop
 800cbe6:	371c      	adds	r7, #28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	20001928 	.word	0x20001928

0800cbf4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b090      	sub	sp, #64	; 0x40
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cbfc:	4b73      	ldr	r3, [pc, #460]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800cc02:	4b72      	ldr	r3, [pc, #456]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4013      	ands	r3, r2
 800cc0a:	4a70      	ldr	r2, [pc, #448]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cc0c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cc0e:	4b70      	ldr	r3, [pc, #448]	; (800cdd0 <UTIL_SEQ_Run+0x1dc>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cc14:	4b6f      	ldr	r3, [pc, #444]	; (800cdd4 <UTIL_SEQ_Run+0x1e0>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cc1a:	4b6f      	ldr	r3, [pc, #444]	; (800cdd8 <UTIL_SEQ_Run+0x1e4>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800cc20:	4b6e      	ldr	r3, [pc, #440]	; (800cddc <UTIL_SEQ_Run+0x1e8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cc26:	e08d      	b.n	800cd44 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cc2c:	e002      	b.n	800cc34 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc30:	3301      	adds	r3, #1
 800cc32:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cc34:	4a6a      	ldr	r2, [pc, #424]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800cc36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	401a      	ands	r2, r3
 800cc40:	4b62      	ldr	r3, [pc, #392]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4013      	ands	r3, r2
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0f1      	beq.n	800cc2e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cc4a:	4a65      	ldr	r2, [pc, #404]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800cc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc4e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	401a      	ands	r2, r3
 800cc56:	4b5d      	ldr	r3, [pc, #372]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cc5e:	4a60      	ldr	r2, [pc, #384]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800cc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	4413      	add	r3, r2
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cc70:	4a5b      	ldr	r2, [pc, #364]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800cc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc74:	00db      	lsls	r3, r3, #3
 800cc76:	4413      	add	r3, r2
 800cc78:	f04f 32ff 	mov.w	r2, #4294967295
 800cc7c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cc7e:	4a58      	ldr	r2, [pc, #352]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800cc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc82:	00db      	lsls	r3, r3, #3
 800cc84:	4413      	add	r3, r2
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 f973 	bl	800cf78 <SEQ_BitPosition>
 800cc92:	4603      	mov	r3, r0
 800cc94:	461a      	mov	r2, r3
 800cc96:	4b53      	ldr	r3, [pc, #332]	; (800cde4 <UTIL_SEQ_Run+0x1f0>)
 800cc98:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cc9a:	4a51      	ldr	r2, [pc, #324]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800cc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	4413      	add	r3, r2
 800cca2:	685a      	ldr	r2, [r3, #4]
 800cca4:	4b4f      	ldr	r3, [pc, #316]	; (800cde4 <UTIL_SEQ_Run+0x1f0>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2101      	movs	r1, #1
 800ccaa:	fa01 f303 	lsl.w	r3, r1, r3
 800ccae:	43db      	mvns	r3, r3
 800ccb0:	401a      	ands	r2, r3
 800ccb2:	494b      	ldr	r1, [pc, #300]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800ccb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	440b      	add	r3, r1
 800ccba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccbc:	f3ef 8310 	mrs	r3, PRIMASK
 800ccc0:	61bb      	str	r3, [r7, #24]
  return(result);
 800ccc2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ccc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccc6:	b672      	cpsid	i
}
 800ccc8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ccca:	4b46      	ldr	r3, [pc, #280]	; (800cde4 <UTIL_SEQ_Run+0x1f0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd4:	43da      	mvns	r2, r3
 800ccd6:	4b3e      	ldr	r3, [pc, #248]	; (800cdd0 <UTIL_SEQ_Run+0x1dc>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4013      	ands	r3, r2
 800ccdc:	4a3c      	ldr	r2, [pc, #240]	; (800cdd0 <UTIL_SEQ_Run+0x1dc>)
 800ccde:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cce0:	2302      	movs	r3, #2
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cce4:	e013      	b.n	800cd0e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce8:	3b01      	subs	r3, #1
 800ccea:	4a3d      	ldr	r2, [pc, #244]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800ccec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ccf0:	4b3c      	ldr	r3, [pc, #240]	; (800cde4 <UTIL_SEQ_Run+0x1f0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccfa:	43da      	mvns	r2, r3
 800ccfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	400a      	ands	r2, r1
 800cd02:	4937      	ldr	r1, [pc, #220]	; (800cde0 <UTIL_SEQ_Run+0x1ec>)
 800cd04:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e8      	bne.n	800cce6 <UTIL_SEQ_Run+0xf2>
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	f383 8810 	msr	PRIMASK, r3
}
 800cd1e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cd20:	4b30      	ldr	r3, [pc, #192]	; (800cde4 <UTIL_SEQ_Run+0x1f0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a30      	ldr	r2, [pc, #192]	; (800cde8 <UTIL_SEQ_Run+0x1f4>)
 800cd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2a:	4798      	blx	r3

    local_taskset = TaskSet;
 800cd2c:	4b28      	ldr	r3, [pc, #160]	; (800cdd0 <UTIL_SEQ_Run+0x1dc>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800cd32:	4b28      	ldr	r3, [pc, #160]	; (800cdd4 <UTIL_SEQ_Run+0x1e0>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800cd38:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <UTIL_SEQ_Run+0x1e4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800cd3e:	4b27      	ldr	r3, [pc, #156]	; (800cddc <UTIL_SEQ_Run+0x1e8>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cd44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	401a      	ands	r2, r3
 800cd4a:	4b20      	ldr	r3, [pc, #128]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d005      	beq.n	800cd60 <UTIL_SEQ_Run+0x16c>
 800cd54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	4013      	ands	r3, r2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f43f af64 	beq.w	800cc28 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cd60:	4b20      	ldr	r3, [pc, #128]	; (800cde4 <UTIL_SEQ_Run+0x1f0>)
 800cd62:	f04f 32ff 	mov.w	r2, #4294967295
 800cd66:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cd68:	f000 f8f8 	bl	800cf5c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd6c:	f3ef 8310 	mrs	r3, PRIMASK
 800cd70:	613b      	str	r3, [r7, #16]
  return(result);
 800cd72:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800cd74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd76:	b672      	cpsid	i
}
 800cd78:	bf00      	nop
  local_taskset = TaskSet;
 800cd7a:	4b15      	ldr	r3, [pc, #84]	; (800cdd0 <UTIL_SEQ_Run+0x1dc>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cd80:	4b14      	ldr	r3, [pc, #80]	; (800cdd4 <UTIL_SEQ_Run+0x1e0>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cd86:	4b14      	ldr	r3, [pc, #80]	; (800cdd8 <UTIL_SEQ_Run+0x1e4>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800cd8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	401a      	ands	r2, r3
 800cd92:	4b0e      	ldr	r3, [pc, #56]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4013      	ands	r3, r2
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d107      	bne.n	800cdac <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <UTIL_SEQ_Run+0x1e8>)
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda2:	4013      	ands	r3, r2
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800cda8:	f7f5 fbcf 	bl	800254a <UTIL_SEQ_Idle>
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f383 8810 	msr	PRIMASK, r3
}
 800cdb6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800cdb8:	f000 f8d7 	bl	800cf6a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800cdbc:	4a03      	ldr	r2, [pc, #12]	; (800cdcc <UTIL_SEQ_Run+0x1d8>)
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	6013      	str	r3, [r2, #0]

  return;
 800cdc2:	bf00      	nop
}
 800cdc4:	3740      	adds	r7, #64	; 0x40
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	2000003c 	.word	0x2000003c
 800cdd0:	2000192c 	.word	0x2000192c
 800cdd4:	20001930 	.word	0x20001930
 800cdd8:	20000038 	.word	0x20000038
 800cddc:	20001934 	.word	0x20001934
 800cde0:	200019bc 	.word	0x200019bc
 800cde4:	20001938 	.word	0x20001938
 800cde8:	2000193c 	.word	0x2000193c

0800cdec <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b088      	sub	sp, #32
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdf8:	f3ef 8310 	mrs	r3, PRIMASK
 800cdfc:	617b      	str	r3, [r7, #20]
  return(result);
 800cdfe:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ce00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce02:	b672      	cpsid	i
}
 800ce04:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f000 f8b6 	bl	800cf78 <SEQ_BitPosition>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4619      	mov	r1, r3
 800ce10:	4a06      	ldr	r2, [pc, #24]	; (800ce2c <UTIL_SEQ_RegTask+0x40>)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	f383 8810 	msr	PRIMASK, r3
}
 800ce22:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ce24:	bf00      	nop
}
 800ce26:	3720      	adds	r7, #32
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	2000193c 	.word	0x2000193c

0800ce30 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ce30:	b480      	push	{r7}
 800ce32:	b087      	sub	sp, #28
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce40:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ce42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce44:	b672      	cpsid	i
}
 800ce46:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ce48:	4b0d      	ldr	r3, [pc, #52]	; (800ce80 <UTIL_SEQ_SetTask+0x50>)
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	4a0b      	ldr	r2, [pc, #44]	; (800ce80 <UTIL_SEQ_SetTask+0x50>)
 800ce52:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ce54:	4a0b      	ldr	r2, [pc, #44]	; (800ce84 <UTIL_SEQ_SetTask+0x54>)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	4908      	ldr	r1, [pc, #32]	; (800ce84 <UTIL_SEQ_SetTask+0x54>)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f383 8810 	msr	PRIMASK, r3
}
 800ce72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ce74:	bf00      	nop
}
 800ce76:	371c      	adds	r7, #28
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	2000192c 	.word	0x2000192c
 800ce84:	200019bc 	.word	0x200019bc

0800ce88 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce90:	f3ef 8310 	mrs	r3, PRIMASK
 800ce94:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce96:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ce98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce9a:	b672      	cpsid	i
}
 800ce9c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ce9e:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <UTIL_SEQ_SetEvt+0x3c>)
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4313      	orrs	r3, r2
 800cea6:	4a07      	ldr	r2, [pc, #28]	; (800cec4 <UTIL_SEQ_SetEvt+0x3c>)
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	f383 8810 	msr	PRIMASK, r3
}
 800ceb4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ceb6:	bf00      	nop
}
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	20001930 	.word	0x20001930

0800cec8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ced0:	4b1f      	ldr	r3, [pc, #124]	; (800cf50 <UTIL_SEQ_WaitEvt+0x88>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ced6:	4b1e      	ldr	r3, [pc, #120]	; (800cf50 <UTIL_SEQ_WaitEvt+0x88>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cede:	d102      	bne.n	800cee6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cee0:	2300      	movs	r3, #0
 800cee2:	61fb      	str	r3, [r7, #28]
 800cee4:	e005      	b.n	800cef2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cee6:	4b1a      	ldr	r3, [pc, #104]	; (800cf50 <UTIL_SEQ_WaitEvt+0x88>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2201      	movs	r2, #1
 800ceec:	fa02 f303 	lsl.w	r3, r2, r3
 800cef0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cef2:	4b18      	ldr	r3, [pc, #96]	; (800cf54 <UTIL_SEQ_WaitEvt+0x8c>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800cef8:	4a16      	ldr	r2, [pc, #88]	; (800cf54 <UTIL_SEQ_WaitEvt+0x8c>)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800cefe:	e003      	b.n	800cf08 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	69f8      	ldr	r0, [r7, #28]
 800cf04:	f7f5 fb28 	bl	8002558 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800cf08:	4b13      	ldr	r3, [pc, #76]	; (800cf58 <UTIL_SEQ_WaitEvt+0x90>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4013      	ands	r3, r2
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d0f5      	beq.n	800cf00 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cf14:	4a0e      	ldr	r2, [pc, #56]	; (800cf50 <UTIL_SEQ_WaitEvt+0x88>)
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf1a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf20:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cf22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf24:	b672      	cpsid	i
}
 800cf26:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	43da      	mvns	r2, r3
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <UTIL_SEQ_WaitEvt+0x90>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4013      	ands	r3, r2
 800cf32:	4a09      	ldr	r2, [pc, #36]	; (800cf58 <UTIL_SEQ_WaitEvt+0x90>)
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f383 8810 	msr	PRIMASK, r3
}
 800cf40:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cf42:	4a04      	ldr	r2, [pc, #16]	; (800cf54 <UTIL_SEQ_WaitEvt+0x8c>)
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	6013      	str	r3, [r2, #0]
  return;
 800cf48:	bf00      	nop
}
 800cf4a:	3720      	adds	r7, #32
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20001938 	.word	0x20001938
 800cf54:	20001934 	.word	0x20001934
 800cf58:	20001930 	.word	0x20001930

0800cf5c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cf60:	bf00      	nop
}
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr

0800cf6a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cf6e:	bf00      	nop
}
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	0c1b      	lsrs	r3, r3, #16
 800cf8c:	041b      	lsls	r3, r3, #16
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d104      	bne.n	800cf9c <SEQ_BitPosition+0x24>
 800cf92:	2310      	movs	r3, #16
 800cf94:	73fb      	strb	r3, [r7, #15]
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	041b      	lsls	r3, r3, #16
 800cf9a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d105      	bne.n	800cfb2 <SEQ_BitPosition+0x3a>
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
 800cfa8:	3308      	adds	r3, #8
 800cfaa:	73fb      	strb	r3, [r7, #15]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	021b      	lsls	r3, r3, #8
 800cfb0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d105      	bne.n	800cfc8 <SEQ_BitPosition+0x50>
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	73fb      	strb	r3, [r7, #15]
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	011b      	lsls	r3, r3, #4
 800cfc6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	0f1b      	lsrs	r3, r3, #28
 800cfcc:	4a07      	ldr	r2, [pc, #28]	; (800cfec <SEQ_BitPosition+0x74>)
 800cfce:	5cd2      	ldrb	r2, [r2, r3]
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	f1c3 031f 	rsb	r3, r3, #31
 800cfdc:	b2db      	uxtb	r3, r3
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	0800f81c 	.word	0x0800f81c

0800cff0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	605a      	str	r2, [r3, #4]
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d010:	b480      	push	{r7}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d018:	f3ef 8310 	mrs	r3, PRIMASK
 800d01c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d01e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d022:	b672      	cpsid	i
}
 800d024:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d102      	bne.n	800d036 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800d030:	2301      	movs	r3, #1
 800d032:	75fb      	strb	r3, [r7, #23]
 800d034:	e001      	b.n	800d03a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800d036:	2300      	movs	r3, #0
 800d038:	75fb      	strb	r3, [r7, #23]
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f383 8810 	msr	PRIMASK, r3
}
 800d044:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d046:	7dfb      	ldrb	r3, [r7, #23]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	371c      	adds	r7, #28
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d054:	b480      	push	{r7}
 800d056:	b087      	sub	sp, #28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d05e:	f3ef 8310 	mrs	r3, PRIMASK
 800d062:	60fb      	str	r3, [r7, #12]
  return(result);
 800d064:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d068:	b672      	cpsid	i
}
 800d06a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	605a      	str	r2, [r3, #4]
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f383 8810 	msr	PRIMASK, r3
}
 800d092:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d094:	bf00      	nop
 800d096:	371c      	adds	r7, #28
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b087      	sub	sp, #28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d0b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0b4:	b672      	cpsid	i
}
 800d0b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	f383 8810 	msr	PRIMASK, r3
}
 800d0de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d0e0:	bf00      	nop
 800d0e2:	371c      	adds	r7, #28
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d0fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0fe:	b672      	cpsid	i
}
 800d100:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	6812      	ldr	r2, [r2, #0]
 800d10a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	6852      	ldr	r2, [r2, #4]
 800d114:	605a      	str	r2, [r3, #4]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	f383 8810 	msr	PRIMASK, r3
}
 800d120:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d122:	bf00      	nop
 800d124:	371c      	adds	r7, #28
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b086      	sub	sp, #24
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d138:	f3ef 8310 	mrs	r3, PRIMASK
 800d13c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d13e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d142:	b672      	cpsid	i
}
 800d144:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff ffca 	bl	800d0ec <LST_remove_node>
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	f383 8810 	msr	PRIMASK, r3
}
 800d162:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d164:	bf00      	nop
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	887a      	ldrh	r2, [r7, #2]
 800d1a2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	7e3a      	ldrb	r2, [r7, #24]
 800d1a8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800d1aa:	7e3b      	ldrb	r3, [r7, #24]
 800d1ac:	f003 0302 	and.w	r3, r3, #2
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <CircularQueue_Init+0x56>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	891b      	ldrh	r3, [r3, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800d1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c0:	e000      	b.n	800d1c4 <CircularQueue_Init+0x58>
  }
  return 0;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08e      	sub	sp, #56	; 0x38
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	603b      	str	r3, [r7, #0]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	891b      	ldrh	r3, [r3, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d101      	bne.n	800d208 <CircularQueue_Add+0x38>
 800d204:	2302      	movs	r3, #2
 800d206:	e000      	b.n	800d20a <CircularQueue_Add+0x3a>
 800d208:	2300      	movs	r3, #0
 800d20a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	695b      	ldr	r3, [r3, #20]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d02a      	beq.n	800d26a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	891b      	ldrh	r3, [r3, #8]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d123      	bne.n	800d264 <CircularQueue_Add+0x94>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	4413      	add	r3, r2
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	b29a      	uxth	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6819      	ldr	r1, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	1c58      	adds	r0, r3, #1
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4298      	cmp	r0, r3
 800d23a:	d306      	bcc.n	800d24a <CircularQueue_Add+0x7a>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6918      	ldr	r0, [r3, #16]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	1ac3      	subs	r3, r0, r3
 800d246:	3301      	adds	r3, #1
 800d248:	e002      	b.n	800d250 <CircularQueue_Add+0x80>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	3301      	adds	r3, #1
 800d250:	440b      	add	r3, r1
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	b29b      	uxth	r3, r3
 800d256:	021b      	lsls	r3, r3, #8
 800d258:	b29b      	uxth	r3, r3
 800d25a:	4413      	add	r3, r2
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	3302      	adds	r3, #2
 800d260:	b29b      	uxth	r3, r3
 800d262:	e001      	b.n	800d268 <CircularQueue_Add+0x98>
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	891b      	ldrh	r3, [r3, #8]
 800d268:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	891b      	ldrh	r3, [r3, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d002      	beq.n	800d278 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	891b      	ldrh	r3, [r3, #8]
 800d276:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	691a      	ldr	r2, [r3, #16]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	429a      	cmp	r2, r3
 800d282:	d307      	bcc.n	800d294 <CircularQueue_Add+0xc4>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6919      	ldr	r1, [r3, #16]
 800d28c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d28e:	440b      	add	r3, r1
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	e000      	b.n	800d296 <CircularQueue_Add+0xc6>
 800d294:	2300      	movs	r3, #0
 800d296:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800d298:	88fa      	ldrh	r2, [r7, #6]
 800d29a:	7ffb      	ldrb	r3, [r7, #31]
 800d29c:	4413      	add	r3, r2
 800d29e:	461a      	mov	r2, r3
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	fb02 f303 	mul.w	r3, r2, r3
 800d2a6:	69ba      	ldr	r2, [r7, #24]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d80b      	bhi.n	800d2c4 <CircularQueue_Add+0xf4>
 800d2ac:	88fa      	ldrh	r2, [r7, #6]
 800d2ae:	7ffb      	ldrb	r3, [r7, #31]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2ba:	fb01 f202 	mul.w	r2, r1, r2
 800d2be:	1a9b      	subs	r3, r3, r2
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	e000      	b.n	800d2c6 <CircularQueue_Add+0xf6>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800d2c8:	7dfa      	ldrb	r2, [r7, #23]
 800d2ca:	7ffb      	ldrb	r3, [r7, #31]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	bf8c      	ite	hi
 800d2d0:	2301      	movhi	r3, #1
 800d2d2:	2300      	movls	r3, #0
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800d2d8:	7fbb      	ldrb	r3, [r7, #30]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d008      	beq.n	800d2f0 <CircularQueue_Add+0x120>
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	7f1b      	ldrb	r3, [r3, #28]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <CircularQueue_Add+0x120>
 800d2ea:	7dfb      	ldrb	r3, [r7, #23]
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	e000      	b.n	800d2f2 <CircularQueue_Add+0x122>
 800d2f0:	8bbb      	ldrh	r3, [r7, #28]
 800d2f2:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800d2f4:	7fbb      	ldrb	r3, [r7, #30]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d008      	beq.n	800d30c <CircularQueue_Add+0x13c>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	7f1b      	ldrb	r3, [r3, #28]
 800d2fe:	f003 0302 	and.w	r3, r3, #2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d002      	beq.n	800d30c <CircularQueue_Add+0x13c>
 800d306:	7ffb      	ldrb	r3, [r7, #31]
 800d308:	b29b      	uxth	r3, r3
 800d30a:	e000      	b.n	800d30e <CircularQueue_Add+0x13e>
 800d30c:	8bbb      	ldrh	r3, [r7, #28]
 800d30e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800d310:	88fb      	ldrh	r3, [r7, #6]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 817e 	beq.w	800d614 <CircularQueue_Add+0x444>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	695a      	ldr	r2, [r3, #20]
 800d31c:	88f9      	ldrh	r1, [r7, #6]
 800d31e:	7ffb      	ldrb	r3, [r7, #31]
 800d320:	440b      	add	r3, r1
 800d322:	4619      	mov	r1, r3
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	fb01 f303 	mul.w	r3, r1, r3
 800d32a:	441a      	add	r2, r3
 800d32c:	8bbb      	ldrh	r3, [r7, #28]
 800d32e:	441a      	add	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	429a      	cmp	r2, r3
 800d336:	f200 816d 	bhi.w	800d614 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800d33a:	2300      	movs	r3, #0
 800d33c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d33e:	e14a      	b.n	800d5d6 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	691a      	ldr	r2, [r3, #16]
 800d344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d346:	441a      	add	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d307      	bcc.n	800d360 <CircularQueue_Add+0x190>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	691a      	ldr	r2, [r3, #16]
 800d354:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d356:	441a      	add	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	e003      	b.n	800d368 <CircularQueue_Add+0x198>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	691a      	ldr	r2, [r3, #16]
 800d364:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d366:	4413      	add	r3, r2
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	891b      	ldrh	r3, [r3, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d130      	bne.n	800d3dc <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	1c59      	adds	r1, r3, #1
 800d382:	6339      	str	r1, [r7, #48]	; 0x30
 800d384:	4413      	add	r3, r2
 800d386:	88fa      	ldrh	r2, [r7, #6]
 800d388:	b2d2      	uxtb	r2, r2
 800d38a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d392:	429a      	cmp	r2, r3
 800d394:	d304      	bcc.n	800d3a0 <CircularQueue_Add+0x1d0>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	e000      	b.n	800d3a2 <CircularQueue_Add+0x1d2>
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800d3a4:	88fb      	ldrh	r3, [r7, #6]
 800d3a6:	0a1b      	lsrs	r3, r3, #8
 800d3a8:	b298      	uxth	r0, r3
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	1c59      	adds	r1, r3, #1
 800d3b2:	6339      	str	r1, [r7, #48]	; 0x30
 800d3b4:	4413      	add	r3, r2
 800d3b6:	b2c2      	uxtb	r2, r0
 800d3b8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d304      	bcc.n	800d3ce <CircularQueue_Add+0x1fe>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	e000      	b.n	800d3d0 <CircularQueue_Add+0x200>
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	1c9a      	adds	r2, r3, #2
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800d3dc:	88fa      	ldrh	r2, [r7, #6]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6859      	ldr	r1, [r3, #4]
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	1acb      	subs	r3, r1, r3
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	bf28      	it	cs
 800d3ea:	4613      	movcs	r3, r2
 800d3ec:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d007      	beq.n	800d406 <CircularQueue_Add+0x236>
 800d3f6:	88fb      	ldrh	r3, [r7, #6]
 800d3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d225      	bcs.n	800d44a <CircularQueue_Add+0x27a>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	7f1b      	ldrb	r3, [r3, #28]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d121      	bne.n	800d44a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	18d0      	adds	r0, r2, r3
 800d40e:	88fb      	ldrh	r3, [r7, #6]
 800d410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d412:	fb02 f303 	mul.w	r3, r2, r3
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	4413      	add	r3, r2
 800d41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d41c:	4619      	mov	r1, r3
 800d41e:	f000 fb09 	bl	800da34 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	695a      	ldr	r2, [r3, #20]
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	441a      	add	r2, r3
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800d42e:	2300      	movs	r3, #0
 800d430:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800d432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800d436:	88fa      	ldrh	r2, [r7, #6]
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800d43e:	7ffb      	ldrb	r3, [r7, #31]
 800d440:	b29a      	uxth	r2, r3
 800d442:	88fb      	ldrh	r3, [r7, #6]
 800d444:	4413      	add	r3, r2
 800d446:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d448:	e0a4      	b.n	800d594 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 80a1 	beq.w	800d594 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	7f1b      	ldrb	r3, [r3, #28]
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d03a      	beq.n	800d4d4 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	891b      	ldrh	r3, [r3, #8]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10d      	bne.n	800d482 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	3b02      	subs	r3, #2
 800d46e:	4413      	add	r3, r2
 800d470:	22ff      	movs	r2, #255	; 0xff
 800d472:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47a:	3b01      	subs	r3, #1
 800d47c:	4413      	add	r3, r2
 800d47e:	22ff      	movs	r2, #255	; 0xff
 800d480:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	695a      	ldr	r2, [r3, #20]
 800d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d488:	441a      	add	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800d492:	88fb      	ldrh	r3, [r7, #6]
 800d494:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800d496:	2300      	movs	r3, #0
 800d498:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	891b      	ldrh	r3, [r3, #8]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d16f      	bne.n	800d582 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	1c59      	adds	r1, r3, #1
 800d4aa:	6339      	str	r1, [r7, #48]	; 0x30
 800d4ac:	4413      	add	r3, r2
 800d4ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4b0:	b2d2      	uxtb	r2, r2
 800d4b2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	0a18      	lsrs	r0, r3, #8
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	1c59      	adds	r1, r3, #1
 800d4c0:	6339      	str	r1, [r7, #48]	; 0x30
 800d4c2:	4413      	add	r3, r2
 800d4c4:	b2c2      	uxtb	r2, r0
 800d4c6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	1c9a      	adds	r2, r3, #2
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	615a      	str	r2, [r3, #20]
 800d4d2:	e056      	b.n	800d582 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	7f1b      	ldrb	r3, [r3, #28]
 800d4d8:	f003 0302 	and.w	r3, r3, #2
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d050      	beq.n	800d582 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	891b      	ldrh	r3, [r3, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d14a      	bne.n	800d57e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ee:	3b02      	subs	r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4f4:	b2d2      	uxtb	r2, r2
 800d4f6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	0a19      	lsrs	r1, r3, #8
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	3b01      	subs	r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	b2ca      	uxtb	r2, r1
 800d508:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	18d0      	adds	r0, r2, r3
 800d512:	88fb      	ldrh	r3, [r7, #6]
 800d514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d516:	fb02 f303 	mul.w	r3, r2, r3
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	4413      	add	r3, r2
 800d51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d520:	4619      	mov	r1, r3
 800d522:	f000 fa87 	bl	800da34 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	695a      	ldr	r2, [r3, #20]
 800d52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52c:	441a      	add	r2, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d534:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800d536:	88fa      	ldrh	r2, [r7, #6]
 800d538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800d548:	2300      	movs	r3, #0
 800d54a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d552:	1c59      	adds	r1, r3, #1
 800d554:	6339      	str	r1, [r7, #48]	; 0x30
 800d556:	4413      	add	r3, r2
 800d558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d55a:	b2d2      	uxtb	r2, r2
 800d55c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	0a18      	lsrs	r0, r3, #8
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	1c59      	adds	r1, r3, #1
 800d56a:	6339      	str	r1, [r7, #48]	; 0x30
 800d56c:	4413      	add	r3, r2
 800d56e:	b2c2      	uxtb	r2, r0
 800d570:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	1c9a      	adds	r2, r3, #2
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	615a      	str	r2, [r3, #20]
 800d57c:	e001      	b.n	800d582 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800d57e:	2300      	movs	r3, #0
 800d580:	e049      	b.n	800d616 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800d582:	7ffb      	ldrb	r3, [r7, #31]
 800d584:	b29a      	uxth	r2, r3
 800d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d588:	b29b      	uxth	r3, r3
 800d58a:	4413      	add	r3, r2
 800d58c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	d015      	beq.n	800d5c6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a0:	18d0      	adds	r0, r2, r3
 800d5a2:	88fb      	ldrh	r3, [r7, #6]
 800d5a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5a6:	fb03 f202 	mul.w	r2, r3, r2
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ac:	4413      	add	r3, r2
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	f000 fa3d 	bl	800da34 <memcpy>
        q->byteCount += NbBytesToCopy;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	695a      	ldr	r2, [r3, #20]
 800d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c0:	441a      	add	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800d5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	f4ff aeb0 	bcc.w	800d340 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6919      	ldr	r1, [r3, #16]
 800d5e8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ea:	4419      	add	r1, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	4299      	cmp	r1, r3
 800d5f2:	d307      	bcc.n	800d604 <CircularQueue_Add+0x434>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6919      	ldr	r1, [r3, #16]
 800d5f8:	7ffb      	ldrb	r3, [r7, #31]
 800d5fa:	4419      	add	r1, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	1acb      	subs	r3, r1, r3
 800d602:	e003      	b.n	800d60c <CircularQueue_Add+0x43c>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6919      	ldr	r1, [r3, #16]
 800d608:	7ffb      	ldrb	r3, [r7, #31]
 800d60a:	440b      	add	r3, r1
 800d60c:	4413      	add	r3, r2
 800d60e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	e000      	b.n	800d616 <CircularQueue_Add+0x446>
    return NULL;
 800d614:	2300      	movs	r3, #0
}
 800d616:	4618      	mov	r0, r3
 800d618:	3738      	adds	r7, #56	; 0x38
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800d61e:	b480      	push	{r7}
 800d620:	b085      	sub	sp, #20
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800d62c:	2300      	movs	r3, #0
 800d62e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	891b      	ldrh	r3, [r3, #8]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d101      	bne.n	800d63c <CircularQueue_Remove+0x1e>
 800d638:	2302      	movs	r3, #2
 800d63a:	e000      	b.n	800d63e <CircularQueue_Remove+0x20>
 800d63c:	2300      	movs	r3, #0
 800d63e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 80cc 	beq.w	800d7e6 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	891b      	ldrh	r3, [r3, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d121      	bne.n	800d69a <CircularQueue_Remove+0x7c>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	4413      	add	r3, r2
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	b29a      	uxth	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6819      	ldr	r1, [r3, #0]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	1c58      	adds	r0, r3, #1
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	4298      	cmp	r0, r3
 800d674:	d306      	bcc.n	800d684 <CircularQueue_Remove+0x66>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	68d8      	ldr	r0, [r3, #12]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	1ac3      	subs	r3, r0, r3
 800d680:	3301      	adds	r3, #1
 800d682:	e002      	b.n	800d68a <CircularQueue_Remove+0x6c>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	3301      	adds	r3, #1
 800d68a:	440b      	add	r3, r1
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	021b      	lsls	r3, r3, #8
 800d692:	b29b      	uxth	r3, r3
 800d694:	4413      	add	r3, r2
 800d696:	b29b      	uxth	r3, r3
 800d698:	e001      	b.n	800d69e <CircularQueue_Remove+0x80>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	891b      	ldrh	r3, [r3, #8]
 800d69e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7f1b      	ldrb	r3, [r3, #28]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d057      	beq.n	800d75c <CircularQueue_Remove+0x13e>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7f1b      	ldrb	r3, [r3, #28]
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d151      	bne.n	800d75c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d6b8:	897b      	ldrh	r3, [r7, #10]
 800d6ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d103      	bne.n	800d6ca <CircularQueue_Remove+0xac>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	891b      	ldrh	r3, [r3, #8]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d012      	beq.n	800d6f0 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68da      	ldr	r2, [r3, #12]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d942      	bls.n	800d75c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	891b      	ldrh	r3, [r3, #8]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d03e      	beq.n	800d75c <CircularQueue_Remove+0x13e>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	8912      	ldrh	r2, [r2, #8]
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d235      	bcs.n	800d75c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	695a      	ldr	r2, [r3, #20]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68d9      	ldr	r1, [r3, #12]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	1acb      	subs	r3, r1, r3
 800d6fe:	441a      	add	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	891b      	ldrh	r3, [r3, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d121      	bne.n	800d756 <CircularQueue_Remove+0x138>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	4413      	add	r3, r2
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	b29a      	uxth	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6819      	ldr	r1, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	1c58      	adds	r0, r3, #1
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	4298      	cmp	r0, r3
 800d730:	d306      	bcc.n	800d740 <CircularQueue_Remove+0x122>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68d8      	ldr	r0, [r3, #12]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	1ac3      	subs	r3, r0, r3
 800d73c:	3301      	adds	r3, #1
 800d73e:	e002      	b.n	800d746 <CircularQueue_Remove+0x128>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	3301      	adds	r3, #1
 800d746:	440b      	add	r3, r1
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	b29b      	uxth	r3, r3
 800d750:	4413      	add	r3, r2
 800d752:	b29b      	uxth	r3, r3
 800d754:	e001      	b.n	800d75a <CircularQueue_Remove+0x13c>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	891b      	ldrh	r3, [r3, #8]
 800d75a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	68d9      	ldr	r1, [r3, #12]
 800d764:	7a7b      	ldrb	r3, [r7, #9]
 800d766:	4419      	add	r1, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	4299      	cmp	r1, r3
 800d76e:	d307      	bcc.n	800d780 <CircularQueue_Remove+0x162>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68d9      	ldr	r1, [r3, #12]
 800d774:	7a7b      	ldrb	r3, [r7, #9]
 800d776:	4419      	add	r1, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	1acb      	subs	r3, r1, r3
 800d77e:	e003      	b.n	800d788 <CircularQueue_Remove+0x16a>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	68d9      	ldr	r1, [r3, #12]
 800d784:	7a7b      	ldrb	r3, [r7, #9]
 800d786:	440b      	add	r3, r1
 800d788:	4413      	add	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	695b      	ldr	r3, [r3, #20]
 800d790:	8979      	ldrh	r1, [r7, #10]
 800d792:	7a7a      	ldrb	r2, [r7, #9]
 800d794:	440a      	add	r2, r1
 800d796:	1a9a      	subs	r2, r3, r2
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d01b      	beq.n	800d7dc <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68da      	ldr	r2, [r3, #12]
 800d7a8:	897b      	ldrh	r3, [r7, #10]
 800d7aa:	441a      	add	r2, r3
 800d7ac:	7a7b      	ldrb	r3, [r7, #9]
 800d7ae:	441a      	add	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d309      	bcc.n	800d7cc <CircularQueue_Remove+0x1ae>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	68da      	ldr	r2, [r3, #12]
 800d7bc:	897b      	ldrh	r3, [r7, #10]
 800d7be:	441a      	add	r2, r3
 800d7c0:	7a7b      	ldrb	r3, [r7, #9]
 800d7c2:	441a      	add	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	e005      	b.n	800d7d8 <CircularQueue_Remove+0x1ba>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68da      	ldr	r2, [r3, #12]
 800d7d0:	897b      	ldrh	r3, [r7, #10]
 800d7d2:	441a      	add	r2, r3
 800d7d4:	7a7b      	ldrb	r3, [r7, #9]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	1e5a      	subs	r2, r3, #1
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	897a      	ldrh	r2, [r7, #10]
 800d7f0:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800d800:	b480      	push	{r7}
 800d802:	b087      	sub	sp, #28
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	891b      	ldrh	r3, [r3, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <CircularQueue_Sense+0x1e>
 800d81a:	2302      	movs	r3, #2
 800d81c:	e000      	b.n	800d820 <CircularQueue_Sense+0x20>
 800d81e:	2300      	movs	r3, #0
 800d820:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 8090 	beq.w	800d954 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	891b      	ldrh	r3, [r3, #8]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d121      	bne.n	800d886 <CircularQueue_Sense+0x86>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	4413      	add	r3, r2
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	b29a      	uxth	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	1c58      	adds	r0, r3, #1
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	4298      	cmp	r0, r3
 800d860:	d306      	bcc.n	800d870 <CircularQueue_Sense+0x70>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68d8      	ldr	r0, [r3, #12]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	1ac3      	subs	r3, r0, r3
 800d86c:	3301      	adds	r3, #1
 800d86e:	e002      	b.n	800d876 <CircularQueue_Sense+0x76>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	3301      	adds	r3, #1
 800d876:	440b      	add	r3, r1
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	021b      	lsls	r3, r3, #8
 800d87e:	b29b      	uxth	r3, r3
 800d880:	4413      	add	r3, r2
 800d882:	b29b      	uxth	r3, r3
 800d884:	e001      	b.n	800d88a <CircularQueue_Sense+0x8a>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	891b      	ldrh	r3, [r3, #8]
 800d88a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	7f1b      	ldrb	r3, [r3, #28]
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d048      	beq.n	800d92a <CircularQueue_Sense+0x12a>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7f1b      	ldrb	r3, [r3, #28]
 800d89c:	f003 0302 	and.w	r3, r3, #2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d142      	bne.n	800d92a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d8a4:	8a7b      	ldrh	r3, [r7, #18]
 800d8a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d103      	bne.n	800d8b6 <CircularQueue_Sense+0xb6>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	891b      	ldrh	r3, [r3, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d012      	beq.n	800d8dc <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68da      	ldr	r2, [r3, #12]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d933      	bls.n	800d92a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	891b      	ldrh	r3, [r3, #8]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d02f      	beq.n	800d92a <CircularQueue_Sense+0x12a>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	8912      	ldrh	r2, [r2, #8]
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d226      	bcs.n	800d92a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800d8dc:	2300      	movs	r3, #0
 800d8de:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	891b      	ldrh	r3, [r3, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d11d      	bne.n	800d924 <CircularQueue_Sense+0x124>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6819      	ldr	r1, [r3, #0]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	1c58      	adds	r0, r3, #1
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4298      	cmp	r0, r3
 800d902:	d305      	bcc.n	800d910 <CircularQueue_Sense+0x110>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	1ac3      	subs	r3, r0, r3
 800d90c:	3301      	adds	r3, #1
 800d90e:	e001      	b.n	800d914 <CircularQueue_Sense+0x114>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	3301      	adds	r3, #1
 800d914:	440b      	add	r3, r1
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	b29b      	uxth	r3, r3
 800d91a:	021b      	lsls	r3, r3, #8
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	4413      	add	r3, r2
 800d920:	b29b      	uxth	r3, r3
 800d922:	e001      	b.n	800d928 <CircularQueue_Sense+0x128>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	891b      	ldrh	r3, [r3, #8]
 800d928:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	7af9      	ldrb	r1, [r7, #11]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	4419      	add	r1, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	4299      	cmp	r1, r3
 800d93a:	d306      	bcc.n	800d94a <CircularQueue_Sense+0x14a>
 800d93c:	7af9      	ldrb	r1, [r7, #11]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	4419      	add	r1, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	1acb      	subs	r3, r1, r3
 800d948:	e002      	b.n	800d950 <CircularQueue_Sense+0x150>
 800d94a:	7af9      	ldrb	r1, [r7, #11]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	440b      	add	r3, r1
 800d950:	4413      	add	r3, r2
 800d952:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d002      	beq.n	800d960 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	8a7a      	ldrh	r2, [r7, #18]
 800d95e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800d960:	697b      	ldr	r3, [r7, #20]
}
 800d962:	4618      	mov	r0, r3
 800d964:	371c      	adds	r7, #28
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
	...

0800d970 <__assert_func>:
 800d970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d972:	4614      	mov	r4, r2
 800d974:	461a      	mov	r2, r3
 800d976:	4b09      	ldr	r3, [pc, #36]	; (800d99c <__assert_func+0x2c>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4605      	mov	r5, r0
 800d97c:	68d8      	ldr	r0, [r3, #12]
 800d97e:	b14c      	cbz	r4, 800d994 <__assert_func+0x24>
 800d980:	4b07      	ldr	r3, [pc, #28]	; (800d9a0 <__assert_func+0x30>)
 800d982:	9100      	str	r1, [sp, #0]
 800d984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d988:	4906      	ldr	r1, [pc, #24]	; (800d9a4 <__assert_func+0x34>)
 800d98a:	462b      	mov	r3, r5
 800d98c:	f000 f814 	bl	800d9b8 <fiprintf>
 800d990:	f000 fd8a 	bl	800e4a8 <abort>
 800d994:	4b04      	ldr	r3, [pc, #16]	; (800d9a8 <__assert_func+0x38>)
 800d996:	461c      	mov	r4, r3
 800d998:	e7f3      	b.n	800d982 <__assert_func+0x12>
 800d99a:	bf00      	nop
 800d99c:	20000040 	.word	0x20000040
 800d9a0:	0800f82c 	.word	0x0800f82c
 800d9a4:	0800f839 	.word	0x0800f839
 800d9a8:	0800f867 	.word	0x0800f867

0800d9ac <__errno>:
 800d9ac:	4b01      	ldr	r3, [pc, #4]	; (800d9b4 <__errno+0x8>)
 800d9ae:	6818      	ldr	r0, [r3, #0]
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	20000040 	.word	0x20000040

0800d9b8 <fiprintf>:
 800d9b8:	b40e      	push	{r1, r2, r3}
 800d9ba:	b503      	push	{r0, r1, lr}
 800d9bc:	4601      	mov	r1, r0
 800d9be:	ab03      	add	r3, sp, #12
 800d9c0:	4805      	ldr	r0, [pc, #20]	; (800d9d8 <fiprintf+0x20>)
 800d9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c6:	6800      	ldr	r0, [r0, #0]
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	f000 f953 	bl	800dc74 <_vfiprintf_r>
 800d9ce:	b002      	add	sp, #8
 800d9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9d4:	b003      	add	sp, #12
 800d9d6:	4770      	bx	lr
 800d9d8:	20000040 	.word	0x20000040

0800d9dc <__libc_init_array>:
 800d9dc:	b570      	push	{r4, r5, r6, lr}
 800d9de:	4d0d      	ldr	r5, [pc, #52]	; (800da14 <__libc_init_array+0x38>)
 800d9e0:	4c0d      	ldr	r4, [pc, #52]	; (800da18 <__libc_init_array+0x3c>)
 800d9e2:	1b64      	subs	r4, r4, r5
 800d9e4:	10a4      	asrs	r4, r4, #2
 800d9e6:	2600      	movs	r6, #0
 800d9e8:	42a6      	cmp	r6, r4
 800d9ea:	d109      	bne.n	800da00 <__libc_init_array+0x24>
 800d9ec:	4d0b      	ldr	r5, [pc, #44]	; (800da1c <__libc_init_array+0x40>)
 800d9ee:	4c0c      	ldr	r4, [pc, #48]	; (800da20 <__libc_init_array+0x44>)
 800d9f0:	f001 fa2a 	bl	800ee48 <_init>
 800d9f4:	1b64      	subs	r4, r4, r5
 800d9f6:	10a4      	asrs	r4, r4, #2
 800d9f8:	2600      	movs	r6, #0
 800d9fa:	42a6      	cmp	r6, r4
 800d9fc:	d105      	bne.n	800da0a <__libc_init_array+0x2e>
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	f855 3b04 	ldr.w	r3, [r5], #4
 800da04:	4798      	blx	r3
 800da06:	3601      	adds	r6, #1
 800da08:	e7ee      	b.n	800d9e8 <__libc_init_array+0xc>
 800da0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da0e:	4798      	blx	r3
 800da10:	3601      	adds	r6, #1
 800da12:	e7f2      	b.n	800d9fa <__libc_init_array+0x1e>
 800da14:	0800f908 	.word	0x0800f908
 800da18:	0800f908 	.word	0x0800f908
 800da1c:	0800f908 	.word	0x0800f908
 800da20:	0800f90c 	.word	0x0800f90c

0800da24 <malloc>:
 800da24:	4b02      	ldr	r3, [pc, #8]	; (800da30 <malloc+0xc>)
 800da26:	4601      	mov	r1, r0
 800da28:	6818      	ldr	r0, [r3, #0]
 800da2a:	f000 b885 	b.w	800db38 <_malloc_r>
 800da2e:	bf00      	nop
 800da30:	20000040 	.word	0x20000040

0800da34 <memcpy>:
 800da34:	440a      	add	r2, r1
 800da36:	4291      	cmp	r1, r2
 800da38:	f100 33ff 	add.w	r3, r0, #4294967295
 800da3c:	d100      	bne.n	800da40 <memcpy+0xc>
 800da3e:	4770      	bx	lr
 800da40:	b510      	push	{r4, lr}
 800da42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da4a:	4291      	cmp	r1, r2
 800da4c:	d1f9      	bne.n	800da42 <memcpy+0xe>
 800da4e:	bd10      	pop	{r4, pc}

0800da50 <memset>:
 800da50:	4402      	add	r2, r0
 800da52:	4603      	mov	r3, r0
 800da54:	4293      	cmp	r3, r2
 800da56:	d100      	bne.n	800da5a <memset+0xa>
 800da58:	4770      	bx	lr
 800da5a:	f803 1b01 	strb.w	r1, [r3], #1
 800da5e:	e7f9      	b.n	800da54 <memset+0x4>

0800da60 <_free_r>:
 800da60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da62:	2900      	cmp	r1, #0
 800da64:	d044      	beq.n	800daf0 <_free_r+0x90>
 800da66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6a:	9001      	str	r0, [sp, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f1a1 0404 	sub.w	r4, r1, #4
 800da72:	bfb8      	it	lt
 800da74:	18e4      	addlt	r4, r4, r3
 800da76:	f000 ff59 	bl	800e92c <__malloc_lock>
 800da7a:	4a1e      	ldr	r2, [pc, #120]	; (800daf4 <_free_r+0x94>)
 800da7c:	9801      	ldr	r0, [sp, #4]
 800da7e:	6813      	ldr	r3, [r2, #0]
 800da80:	b933      	cbnz	r3, 800da90 <_free_r+0x30>
 800da82:	6063      	str	r3, [r4, #4]
 800da84:	6014      	str	r4, [r2, #0]
 800da86:	b003      	add	sp, #12
 800da88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da8c:	f000 bf54 	b.w	800e938 <__malloc_unlock>
 800da90:	42a3      	cmp	r3, r4
 800da92:	d908      	bls.n	800daa6 <_free_r+0x46>
 800da94:	6825      	ldr	r5, [r4, #0]
 800da96:	1961      	adds	r1, r4, r5
 800da98:	428b      	cmp	r3, r1
 800da9a:	bf01      	itttt	eq
 800da9c:	6819      	ldreq	r1, [r3, #0]
 800da9e:	685b      	ldreq	r3, [r3, #4]
 800daa0:	1949      	addeq	r1, r1, r5
 800daa2:	6021      	streq	r1, [r4, #0]
 800daa4:	e7ed      	b.n	800da82 <_free_r+0x22>
 800daa6:	461a      	mov	r2, r3
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	b10b      	cbz	r3, 800dab0 <_free_r+0x50>
 800daac:	42a3      	cmp	r3, r4
 800daae:	d9fa      	bls.n	800daa6 <_free_r+0x46>
 800dab0:	6811      	ldr	r1, [r2, #0]
 800dab2:	1855      	adds	r5, r2, r1
 800dab4:	42a5      	cmp	r5, r4
 800dab6:	d10b      	bne.n	800dad0 <_free_r+0x70>
 800dab8:	6824      	ldr	r4, [r4, #0]
 800daba:	4421      	add	r1, r4
 800dabc:	1854      	adds	r4, r2, r1
 800dabe:	42a3      	cmp	r3, r4
 800dac0:	6011      	str	r1, [r2, #0]
 800dac2:	d1e0      	bne.n	800da86 <_free_r+0x26>
 800dac4:	681c      	ldr	r4, [r3, #0]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	6053      	str	r3, [r2, #4]
 800daca:	4421      	add	r1, r4
 800dacc:	6011      	str	r1, [r2, #0]
 800dace:	e7da      	b.n	800da86 <_free_r+0x26>
 800dad0:	d902      	bls.n	800dad8 <_free_r+0x78>
 800dad2:	230c      	movs	r3, #12
 800dad4:	6003      	str	r3, [r0, #0]
 800dad6:	e7d6      	b.n	800da86 <_free_r+0x26>
 800dad8:	6825      	ldr	r5, [r4, #0]
 800dada:	1961      	adds	r1, r4, r5
 800dadc:	428b      	cmp	r3, r1
 800dade:	bf04      	itt	eq
 800dae0:	6819      	ldreq	r1, [r3, #0]
 800dae2:	685b      	ldreq	r3, [r3, #4]
 800dae4:	6063      	str	r3, [r4, #4]
 800dae6:	bf04      	itt	eq
 800dae8:	1949      	addeq	r1, r1, r5
 800daea:	6021      	streq	r1, [r4, #0]
 800daec:	6054      	str	r4, [r2, #4]
 800daee:	e7ca      	b.n	800da86 <_free_r+0x26>
 800daf0:	b003      	add	sp, #12
 800daf2:	bd30      	pop	{r4, r5, pc}
 800daf4:	200019cc 	.word	0x200019cc

0800daf8 <sbrk_aligned>:
 800daf8:	b570      	push	{r4, r5, r6, lr}
 800dafa:	4e0e      	ldr	r6, [pc, #56]	; (800db34 <sbrk_aligned+0x3c>)
 800dafc:	460c      	mov	r4, r1
 800dafe:	6831      	ldr	r1, [r6, #0]
 800db00:	4605      	mov	r5, r0
 800db02:	b911      	cbnz	r1, 800db0a <sbrk_aligned+0x12>
 800db04:	f000 fb92 	bl	800e22c <_sbrk_r>
 800db08:	6030      	str	r0, [r6, #0]
 800db0a:	4621      	mov	r1, r4
 800db0c:	4628      	mov	r0, r5
 800db0e:	f000 fb8d 	bl	800e22c <_sbrk_r>
 800db12:	1c43      	adds	r3, r0, #1
 800db14:	d00a      	beq.n	800db2c <sbrk_aligned+0x34>
 800db16:	1cc4      	adds	r4, r0, #3
 800db18:	f024 0403 	bic.w	r4, r4, #3
 800db1c:	42a0      	cmp	r0, r4
 800db1e:	d007      	beq.n	800db30 <sbrk_aligned+0x38>
 800db20:	1a21      	subs	r1, r4, r0
 800db22:	4628      	mov	r0, r5
 800db24:	f000 fb82 	bl	800e22c <_sbrk_r>
 800db28:	3001      	adds	r0, #1
 800db2a:	d101      	bne.n	800db30 <sbrk_aligned+0x38>
 800db2c:	f04f 34ff 	mov.w	r4, #4294967295
 800db30:	4620      	mov	r0, r4
 800db32:	bd70      	pop	{r4, r5, r6, pc}
 800db34:	200019d0 	.word	0x200019d0

0800db38 <_malloc_r>:
 800db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	1ccd      	adds	r5, r1, #3
 800db3e:	f025 0503 	bic.w	r5, r5, #3
 800db42:	3508      	adds	r5, #8
 800db44:	2d0c      	cmp	r5, #12
 800db46:	bf38      	it	cc
 800db48:	250c      	movcc	r5, #12
 800db4a:	2d00      	cmp	r5, #0
 800db4c:	4607      	mov	r7, r0
 800db4e:	db01      	blt.n	800db54 <_malloc_r+0x1c>
 800db50:	42a9      	cmp	r1, r5
 800db52:	d905      	bls.n	800db60 <_malloc_r+0x28>
 800db54:	230c      	movs	r3, #12
 800db56:	603b      	str	r3, [r7, #0]
 800db58:	2600      	movs	r6, #0
 800db5a:	4630      	mov	r0, r6
 800db5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db60:	4e2e      	ldr	r6, [pc, #184]	; (800dc1c <_malloc_r+0xe4>)
 800db62:	f000 fee3 	bl	800e92c <__malloc_lock>
 800db66:	6833      	ldr	r3, [r6, #0]
 800db68:	461c      	mov	r4, r3
 800db6a:	bb34      	cbnz	r4, 800dbba <_malloc_r+0x82>
 800db6c:	4629      	mov	r1, r5
 800db6e:	4638      	mov	r0, r7
 800db70:	f7ff ffc2 	bl	800daf8 <sbrk_aligned>
 800db74:	1c43      	adds	r3, r0, #1
 800db76:	4604      	mov	r4, r0
 800db78:	d14d      	bne.n	800dc16 <_malloc_r+0xde>
 800db7a:	6834      	ldr	r4, [r6, #0]
 800db7c:	4626      	mov	r6, r4
 800db7e:	2e00      	cmp	r6, #0
 800db80:	d140      	bne.n	800dc04 <_malloc_r+0xcc>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	4631      	mov	r1, r6
 800db86:	4638      	mov	r0, r7
 800db88:	eb04 0803 	add.w	r8, r4, r3
 800db8c:	f000 fb4e 	bl	800e22c <_sbrk_r>
 800db90:	4580      	cmp	r8, r0
 800db92:	d13a      	bne.n	800dc0a <_malloc_r+0xd2>
 800db94:	6821      	ldr	r1, [r4, #0]
 800db96:	3503      	adds	r5, #3
 800db98:	1a6d      	subs	r5, r5, r1
 800db9a:	f025 0503 	bic.w	r5, r5, #3
 800db9e:	3508      	adds	r5, #8
 800dba0:	2d0c      	cmp	r5, #12
 800dba2:	bf38      	it	cc
 800dba4:	250c      	movcc	r5, #12
 800dba6:	4629      	mov	r1, r5
 800dba8:	4638      	mov	r0, r7
 800dbaa:	f7ff ffa5 	bl	800daf8 <sbrk_aligned>
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d02b      	beq.n	800dc0a <_malloc_r+0xd2>
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	442b      	add	r3, r5
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	e00e      	b.n	800dbd8 <_malloc_r+0xa0>
 800dbba:	6822      	ldr	r2, [r4, #0]
 800dbbc:	1b52      	subs	r2, r2, r5
 800dbbe:	d41e      	bmi.n	800dbfe <_malloc_r+0xc6>
 800dbc0:	2a0b      	cmp	r2, #11
 800dbc2:	d916      	bls.n	800dbf2 <_malloc_r+0xba>
 800dbc4:	1961      	adds	r1, r4, r5
 800dbc6:	42a3      	cmp	r3, r4
 800dbc8:	6025      	str	r5, [r4, #0]
 800dbca:	bf18      	it	ne
 800dbcc:	6059      	strne	r1, [r3, #4]
 800dbce:	6863      	ldr	r3, [r4, #4]
 800dbd0:	bf08      	it	eq
 800dbd2:	6031      	streq	r1, [r6, #0]
 800dbd4:	5162      	str	r2, [r4, r5]
 800dbd6:	604b      	str	r3, [r1, #4]
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f104 060b 	add.w	r6, r4, #11
 800dbde:	f000 feab 	bl	800e938 <__malloc_unlock>
 800dbe2:	f026 0607 	bic.w	r6, r6, #7
 800dbe6:	1d23      	adds	r3, r4, #4
 800dbe8:	1af2      	subs	r2, r6, r3
 800dbea:	d0b6      	beq.n	800db5a <_malloc_r+0x22>
 800dbec:	1b9b      	subs	r3, r3, r6
 800dbee:	50a3      	str	r3, [r4, r2]
 800dbf0:	e7b3      	b.n	800db5a <_malloc_r+0x22>
 800dbf2:	6862      	ldr	r2, [r4, #4]
 800dbf4:	42a3      	cmp	r3, r4
 800dbf6:	bf0c      	ite	eq
 800dbf8:	6032      	streq	r2, [r6, #0]
 800dbfa:	605a      	strne	r2, [r3, #4]
 800dbfc:	e7ec      	b.n	800dbd8 <_malloc_r+0xa0>
 800dbfe:	4623      	mov	r3, r4
 800dc00:	6864      	ldr	r4, [r4, #4]
 800dc02:	e7b2      	b.n	800db6a <_malloc_r+0x32>
 800dc04:	4634      	mov	r4, r6
 800dc06:	6876      	ldr	r6, [r6, #4]
 800dc08:	e7b9      	b.n	800db7e <_malloc_r+0x46>
 800dc0a:	230c      	movs	r3, #12
 800dc0c:	603b      	str	r3, [r7, #0]
 800dc0e:	4638      	mov	r0, r7
 800dc10:	f000 fe92 	bl	800e938 <__malloc_unlock>
 800dc14:	e7a1      	b.n	800db5a <_malloc_r+0x22>
 800dc16:	6025      	str	r5, [r4, #0]
 800dc18:	e7de      	b.n	800dbd8 <_malloc_r+0xa0>
 800dc1a:	bf00      	nop
 800dc1c:	200019cc 	.word	0x200019cc

0800dc20 <__sfputc_r>:
 800dc20:	6893      	ldr	r3, [r2, #8]
 800dc22:	3b01      	subs	r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	b410      	push	{r4}
 800dc28:	6093      	str	r3, [r2, #8]
 800dc2a:	da08      	bge.n	800dc3e <__sfputc_r+0x1e>
 800dc2c:	6994      	ldr	r4, [r2, #24]
 800dc2e:	42a3      	cmp	r3, r4
 800dc30:	db01      	blt.n	800dc36 <__sfputc_r+0x16>
 800dc32:	290a      	cmp	r1, #10
 800dc34:	d103      	bne.n	800dc3e <__sfputc_r+0x1e>
 800dc36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc3a:	f000 bb75 	b.w	800e328 <__swbuf_r>
 800dc3e:	6813      	ldr	r3, [r2, #0]
 800dc40:	1c58      	adds	r0, r3, #1
 800dc42:	6010      	str	r0, [r2, #0]
 800dc44:	7019      	strb	r1, [r3, #0]
 800dc46:	4608      	mov	r0, r1
 800dc48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc4c:	4770      	bx	lr

0800dc4e <__sfputs_r>:
 800dc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc50:	4606      	mov	r6, r0
 800dc52:	460f      	mov	r7, r1
 800dc54:	4614      	mov	r4, r2
 800dc56:	18d5      	adds	r5, r2, r3
 800dc58:	42ac      	cmp	r4, r5
 800dc5a:	d101      	bne.n	800dc60 <__sfputs_r+0x12>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	e007      	b.n	800dc70 <__sfputs_r+0x22>
 800dc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc64:	463a      	mov	r2, r7
 800dc66:	4630      	mov	r0, r6
 800dc68:	f7ff ffda 	bl	800dc20 <__sfputc_r>
 800dc6c:	1c43      	adds	r3, r0, #1
 800dc6e:	d1f3      	bne.n	800dc58 <__sfputs_r+0xa>
 800dc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc74 <_vfiprintf_r>:
 800dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc78:	460d      	mov	r5, r1
 800dc7a:	b09d      	sub	sp, #116	; 0x74
 800dc7c:	4614      	mov	r4, r2
 800dc7e:	4698      	mov	r8, r3
 800dc80:	4606      	mov	r6, r0
 800dc82:	b118      	cbz	r0, 800dc8c <_vfiprintf_r+0x18>
 800dc84:	6983      	ldr	r3, [r0, #24]
 800dc86:	b90b      	cbnz	r3, 800dc8c <_vfiprintf_r+0x18>
 800dc88:	f000 fd30 	bl	800e6ec <__sinit>
 800dc8c:	4b89      	ldr	r3, [pc, #548]	; (800deb4 <_vfiprintf_r+0x240>)
 800dc8e:	429d      	cmp	r5, r3
 800dc90:	d11b      	bne.n	800dcca <_vfiprintf_r+0x56>
 800dc92:	6875      	ldr	r5, [r6, #4]
 800dc94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc96:	07d9      	lsls	r1, r3, #31
 800dc98:	d405      	bmi.n	800dca6 <_vfiprintf_r+0x32>
 800dc9a:	89ab      	ldrh	r3, [r5, #12]
 800dc9c:	059a      	lsls	r2, r3, #22
 800dc9e:	d402      	bmi.n	800dca6 <_vfiprintf_r+0x32>
 800dca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dca2:	f000 fdc1 	bl	800e828 <__retarget_lock_acquire_recursive>
 800dca6:	89ab      	ldrh	r3, [r5, #12]
 800dca8:	071b      	lsls	r3, r3, #28
 800dcaa:	d501      	bpl.n	800dcb0 <_vfiprintf_r+0x3c>
 800dcac:	692b      	ldr	r3, [r5, #16]
 800dcae:	b9eb      	cbnz	r3, 800dcec <_vfiprintf_r+0x78>
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f000 fb8a 	bl	800e3cc <__swsetup_r>
 800dcb8:	b1c0      	cbz	r0, 800dcec <_vfiprintf_r+0x78>
 800dcba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcbc:	07dc      	lsls	r4, r3, #31
 800dcbe:	d50e      	bpl.n	800dcde <_vfiprintf_r+0x6a>
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc4:	b01d      	add	sp, #116	; 0x74
 800dcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcca:	4b7b      	ldr	r3, [pc, #492]	; (800deb8 <_vfiprintf_r+0x244>)
 800dccc:	429d      	cmp	r5, r3
 800dcce:	d101      	bne.n	800dcd4 <_vfiprintf_r+0x60>
 800dcd0:	68b5      	ldr	r5, [r6, #8]
 800dcd2:	e7df      	b.n	800dc94 <_vfiprintf_r+0x20>
 800dcd4:	4b79      	ldr	r3, [pc, #484]	; (800debc <_vfiprintf_r+0x248>)
 800dcd6:	429d      	cmp	r5, r3
 800dcd8:	bf08      	it	eq
 800dcda:	68f5      	ldreq	r5, [r6, #12]
 800dcdc:	e7da      	b.n	800dc94 <_vfiprintf_r+0x20>
 800dcde:	89ab      	ldrh	r3, [r5, #12]
 800dce0:	0598      	lsls	r0, r3, #22
 800dce2:	d4ed      	bmi.n	800dcc0 <_vfiprintf_r+0x4c>
 800dce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dce6:	f000 fda0 	bl	800e82a <__retarget_lock_release_recursive>
 800dcea:	e7e9      	b.n	800dcc0 <_vfiprintf_r+0x4c>
 800dcec:	2300      	movs	r3, #0
 800dcee:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf0:	2320      	movs	r3, #32
 800dcf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcfa:	2330      	movs	r3, #48	; 0x30
 800dcfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dec0 <_vfiprintf_r+0x24c>
 800dd00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd04:	f04f 0901 	mov.w	r9, #1
 800dd08:	4623      	mov	r3, r4
 800dd0a:	469a      	mov	sl, r3
 800dd0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd10:	b10a      	cbz	r2, 800dd16 <_vfiprintf_r+0xa2>
 800dd12:	2a25      	cmp	r2, #37	; 0x25
 800dd14:	d1f9      	bne.n	800dd0a <_vfiprintf_r+0x96>
 800dd16:	ebba 0b04 	subs.w	fp, sl, r4
 800dd1a:	d00b      	beq.n	800dd34 <_vfiprintf_r+0xc0>
 800dd1c:	465b      	mov	r3, fp
 800dd1e:	4622      	mov	r2, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	4630      	mov	r0, r6
 800dd24:	f7ff ff93 	bl	800dc4e <__sfputs_r>
 800dd28:	3001      	adds	r0, #1
 800dd2a:	f000 80aa 	beq.w	800de82 <_vfiprintf_r+0x20e>
 800dd2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd30:	445a      	add	r2, fp
 800dd32:	9209      	str	r2, [sp, #36]	; 0x24
 800dd34:	f89a 3000 	ldrb.w	r3, [sl]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 80a2 	beq.w	800de82 <_vfiprintf_r+0x20e>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f04f 32ff 	mov.w	r2, #4294967295
 800dd44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd48:	f10a 0a01 	add.w	sl, sl, #1
 800dd4c:	9304      	str	r3, [sp, #16]
 800dd4e:	9307      	str	r3, [sp, #28]
 800dd50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd54:	931a      	str	r3, [sp, #104]	; 0x68
 800dd56:	4654      	mov	r4, sl
 800dd58:	2205      	movs	r2, #5
 800dd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5e:	4858      	ldr	r0, [pc, #352]	; (800dec0 <_vfiprintf_r+0x24c>)
 800dd60:	f7f2 fa26 	bl	80001b0 <memchr>
 800dd64:	9a04      	ldr	r2, [sp, #16]
 800dd66:	b9d8      	cbnz	r0, 800dda0 <_vfiprintf_r+0x12c>
 800dd68:	06d1      	lsls	r1, r2, #27
 800dd6a:	bf44      	itt	mi
 800dd6c:	2320      	movmi	r3, #32
 800dd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd72:	0713      	lsls	r3, r2, #28
 800dd74:	bf44      	itt	mi
 800dd76:	232b      	movmi	r3, #43	; 0x2b
 800dd78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd7c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd80:	2b2a      	cmp	r3, #42	; 0x2a
 800dd82:	d015      	beq.n	800ddb0 <_vfiprintf_r+0x13c>
 800dd84:	9a07      	ldr	r2, [sp, #28]
 800dd86:	4654      	mov	r4, sl
 800dd88:	2000      	movs	r0, #0
 800dd8a:	f04f 0c0a 	mov.w	ip, #10
 800dd8e:	4621      	mov	r1, r4
 800dd90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd94:	3b30      	subs	r3, #48	; 0x30
 800dd96:	2b09      	cmp	r3, #9
 800dd98:	d94e      	bls.n	800de38 <_vfiprintf_r+0x1c4>
 800dd9a:	b1b0      	cbz	r0, 800ddca <_vfiprintf_r+0x156>
 800dd9c:	9207      	str	r2, [sp, #28]
 800dd9e:	e014      	b.n	800ddca <_vfiprintf_r+0x156>
 800dda0:	eba0 0308 	sub.w	r3, r0, r8
 800dda4:	fa09 f303 	lsl.w	r3, r9, r3
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	9304      	str	r3, [sp, #16]
 800ddac:	46a2      	mov	sl, r4
 800ddae:	e7d2      	b.n	800dd56 <_vfiprintf_r+0xe2>
 800ddb0:	9b03      	ldr	r3, [sp, #12]
 800ddb2:	1d19      	adds	r1, r3, #4
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	9103      	str	r1, [sp, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	bfbb      	ittet	lt
 800ddbc:	425b      	neglt	r3, r3
 800ddbe:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc2:	9307      	strge	r3, [sp, #28]
 800ddc4:	9307      	strlt	r3, [sp, #28]
 800ddc6:	bfb8      	it	lt
 800ddc8:	9204      	strlt	r2, [sp, #16]
 800ddca:	7823      	ldrb	r3, [r4, #0]
 800ddcc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddce:	d10c      	bne.n	800ddea <_vfiprintf_r+0x176>
 800ddd0:	7863      	ldrb	r3, [r4, #1]
 800ddd2:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd4:	d135      	bne.n	800de42 <_vfiprintf_r+0x1ce>
 800ddd6:	9b03      	ldr	r3, [sp, #12]
 800ddd8:	1d1a      	adds	r2, r3, #4
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	9203      	str	r2, [sp, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bfb8      	it	lt
 800dde2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dde6:	3402      	adds	r4, #2
 800dde8:	9305      	str	r3, [sp, #20]
 800ddea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ded0 <_vfiprintf_r+0x25c>
 800ddee:	7821      	ldrb	r1, [r4, #0]
 800ddf0:	2203      	movs	r2, #3
 800ddf2:	4650      	mov	r0, sl
 800ddf4:	f7f2 f9dc 	bl	80001b0 <memchr>
 800ddf8:	b140      	cbz	r0, 800de0c <_vfiprintf_r+0x198>
 800ddfa:	2340      	movs	r3, #64	; 0x40
 800ddfc:	eba0 000a 	sub.w	r0, r0, sl
 800de00:	fa03 f000 	lsl.w	r0, r3, r0
 800de04:	9b04      	ldr	r3, [sp, #16]
 800de06:	4303      	orrs	r3, r0
 800de08:	3401      	adds	r4, #1
 800de0a:	9304      	str	r3, [sp, #16]
 800de0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de10:	482c      	ldr	r0, [pc, #176]	; (800dec4 <_vfiprintf_r+0x250>)
 800de12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de16:	2206      	movs	r2, #6
 800de18:	f7f2 f9ca 	bl	80001b0 <memchr>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d03f      	beq.n	800dea0 <_vfiprintf_r+0x22c>
 800de20:	4b29      	ldr	r3, [pc, #164]	; (800dec8 <_vfiprintf_r+0x254>)
 800de22:	bb1b      	cbnz	r3, 800de6c <_vfiprintf_r+0x1f8>
 800de24:	9b03      	ldr	r3, [sp, #12]
 800de26:	3307      	adds	r3, #7
 800de28:	f023 0307 	bic.w	r3, r3, #7
 800de2c:	3308      	adds	r3, #8
 800de2e:	9303      	str	r3, [sp, #12]
 800de30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de32:	443b      	add	r3, r7
 800de34:	9309      	str	r3, [sp, #36]	; 0x24
 800de36:	e767      	b.n	800dd08 <_vfiprintf_r+0x94>
 800de38:	fb0c 3202 	mla	r2, ip, r2, r3
 800de3c:	460c      	mov	r4, r1
 800de3e:	2001      	movs	r0, #1
 800de40:	e7a5      	b.n	800dd8e <_vfiprintf_r+0x11a>
 800de42:	2300      	movs	r3, #0
 800de44:	3401      	adds	r4, #1
 800de46:	9305      	str	r3, [sp, #20]
 800de48:	4619      	mov	r1, r3
 800de4a:	f04f 0c0a 	mov.w	ip, #10
 800de4e:	4620      	mov	r0, r4
 800de50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de54:	3a30      	subs	r2, #48	; 0x30
 800de56:	2a09      	cmp	r2, #9
 800de58:	d903      	bls.n	800de62 <_vfiprintf_r+0x1ee>
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d0c5      	beq.n	800ddea <_vfiprintf_r+0x176>
 800de5e:	9105      	str	r1, [sp, #20]
 800de60:	e7c3      	b.n	800ddea <_vfiprintf_r+0x176>
 800de62:	fb0c 2101 	mla	r1, ip, r1, r2
 800de66:	4604      	mov	r4, r0
 800de68:	2301      	movs	r3, #1
 800de6a:	e7f0      	b.n	800de4e <_vfiprintf_r+0x1da>
 800de6c:	ab03      	add	r3, sp, #12
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	462a      	mov	r2, r5
 800de72:	4b16      	ldr	r3, [pc, #88]	; (800decc <_vfiprintf_r+0x258>)
 800de74:	a904      	add	r1, sp, #16
 800de76:	4630      	mov	r0, r6
 800de78:	f3af 8000 	nop.w
 800de7c:	4607      	mov	r7, r0
 800de7e:	1c78      	adds	r0, r7, #1
 800de80:	d1d6      	bne.n	800de30 <_vfiprintf_r+0x1bc>
 800de82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de84:	07d9      	lsls	r1, r3, #31
 800de86:	d405      	bmi.n	800de94 <_vfiprintf_r+0x220>
 800de88:	89ab      	ldrh	r3, [r5, #12]
 800de8a:	059a      	lsls	r2, r3, #22
 800de8c:	d402      	bmi.n	800de94 <_vfiprintf_r+0x220>
 800de8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de90:	f000 fccb 	bl	800e82a <__retarget_lock_release_recursive>
 800de94:	89ab      	ldrh	r3, [r5, #12]
 800de96:	065b      	lsls	r3, r3, #25
 800de98:	f53f af12 	bmi.w	800dcc0 <_vfiprintf_r+0x4c>
 800de9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de9e:	e711      	b.n	800dcc4 <_vfiprintf_r+0x50>
 800dea0:	ab03      	add	r3, sp, #12
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	462a      	mov	r2, r5
 800dea6:	4b09      	ldr	r3, [pc, #36]	; (800decc <_vfiprintf_r+0x258>)
 800dea8:	a904      	add	r1, sp, #16
 800deaa:	4630      	mov	r0, r6
 800deac:	f000 f880 	bl	800dfb0 <_printf_i>
 800deb0:	e7e4      	b.n	800de7c <_vfiprintf_r+0x208>
 800deb2:	bf00      	nop
 800deb4:	0800f8c0 	.word	0x0800f8c0
 800deb8:	0800f8e0 	.word	0x0800f8e0
 800debc:	0800f8a0 	.word	0x0800f8a0
 800dec0:	0800f86c 	.word	0x0800f86c
 800dec4:	0800f876 	.word	0x0800f876
 800dec8:	00000000 	.word	0x00000000
 800decc:	0800dc4f 	.word	0x0800dc4f
 800ded0:	0800f872 	.word	0x0800f872

0800ded4 <_printf_common>:
 800ded4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ded8:	4616      	mov	r6, r2
 800deda:	4699      	mov	r9, r3
 800dedc:	688a      	ldr	r2, [r1, #8]
 800dede:	690b      	ldr	r3, [r1, #16]
 800dee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dee4:	4293      	cmp	r3, r2
 800dee6:	bfb8      	it	lt
 800dee8:	4613      	movlt	r3, r2
 800deea:	6033      	str	r3, [r6, #0]
 800deec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800def0:	4607      	mov	r7, r0
 800def2:	460c      	mov	r4, r1
 800def4:	b10a      	cbz	r2, 800defa <_printf_common+0x26>
 800def6:	3301      	adds	r3, #1
 800def8:	6033      	str	r3, [r6, #0]
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	0699      	lsls	r1, r3, #26
 800defe:	bf42      	ittt	mi
 800df00:	6833      	ldrmi	r3, [r6, #0]
 800df02:	3302      	addmi	r3, #2
 800df04:	6033      	strmi	r3, [r6, #0]
 800df06:	6825      	ldr	r5, [r4, #0]
 800df08:	f015 0506 	ands.w	r5, r5, #6
 800df0c:	d106      	bne.n	800df1c <_printf_common+0x48>
 800df0e:	f104 0a19 	add.w	sl, r4, #25
 800df12:	68e3      	ldr	r3, [r4, #12]
 800df14:	6832      	ldr	r2, [r6, #0]
 800df16:	1a9b      	subs	r3, r3, r2
 800df18:	42ab      	cmp	r3, r5
 800df1a:	dc26      	bgt.n	800df6a <_printf_common+0x96>
 800df1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df20:	1e13      	subs	r3, r2, #0
 800df22:	6822      	ldr	r2, [r4, #0]
 800df24:	bf18      	it	ne
 800df26:	2301      	movne	r3, #1
 800df28:	0692      	lsls	r2, r2, #26
 800df2a:	d42b      	bmi.n	800df84 <_printf_common+0xb0>
 800df2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df30:	4649      	mov	r1, r9
 800df32:	4638      	mov	r0, r7
 800df34:	47c0      	blx	r8
 800df36:	3001      	adds	r0, #1
 800df38:	d01e      	beq.n	800df78 <_printf_common+0xa4>
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	68e5      	ldr	r5, [r4, #12]
 800df3e:	6832      	ldr	r2, [r6, #0]
 800df40:	f003 0306 	and.w	r3, r3, #6
 800df44:	2b04      	cmp	r3, #4
 800df46:	bf08      	it	eq
 800df48:	1aad      	subeq	r5, r5, r2
 800df4a:	68a3      	ldr	r3, [r4, #8]
 800df4c:	6922      	ldr	r2, [r4, #16]
 800df4e:	bf0c      	ite	eq
 800df50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df54:	2500      	movne	r5, #0
 800df56:	4293      	cmp	r3, r2
 800df58:	bfc4      	itt	gt
 800df5a:	1a9b      	subgt	r3, r3, r2
 800df5c:	18ed      	addgt	r5, r5, r3
 800df5e:	2600      	movs	r6, #0
 800df60:	341a      	adds	r4, #26
 800df62:	42b5      	cmp	r5, r6
 800df64:	d11a      	bne.n	800df9c <_printf_common+0xc8>
 800df66:	2000      	movs	r0, #0
 800df68:	e008      	b.n	800df7c <_printf_common+0xa8>
 800df6a:	2301      	movs	r3, #1
 800df6c:	4652      	mov	r2, sl
 800df6e:	4649      	mov	r1, r9
 800df70:	4638      	mov	r0, r7
 800df72:	47c0      	blx	r8
 800df74:	3001      	adds	r0, #1
 800df76:	d103      	bne.n	800df80 <_printf_common+0xac>
 800df78:	f04f 30ff 	mov.w	r0, #4294967295
 800df7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df80:	3501      	adds	r5, #1
 800df82:	e7c6      	b.n	800df12 <_printf_common+0x3e>
 800df84:	18e1      	adds	r1, r4, r3
 800df86:	1c5a      	adds	r2, r3, #1
 800df88:	2030      	movs	r0, #48	; 0x30
 800df8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df8e:	4422      	add	r2, r4
 800df90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df98:	3302      	adds	r3, #2
 800df9a:	e7c7      	b.n	800df2c <_printf_common+0x58>
 800df9c:	2301      	movs	r3, #1
 800df9e:	4622      	mov	r2, r4
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	4638      	mov	r0, r7
 800dfa4:	47c0      	blx	r8
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	d0e6      	beq.n	800df78 <_printf_common+0xa4>
 800dfaa:	3601      	adds	r6, #1
 800dfac:	e7d9      	b.n	800df62 <_printf_common+0x8e>
	...

0800dfb0 <_printf_i>:
 800dfb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb4:	7e0f      	ldrb	r7, [r1, #24]
 800dfb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dfb8:	2f78      	cmp	r7, #120	; 0x78
 800dfba:	4691      	mov	r9, r2
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	469a      	mov	sl, r3
 800dfc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dfc6:	d807      	bhi.n	800dfd8 <_printf_i+0x28>
 800dfc8:	2f62      	cmp	r7, #98	; 0x62
 800dfca:	d80a      	bhi.n	800dfe2 <_printf_i+0x32>
 800dfcc:	2f00      	cmp	r7, #0
 800dfce:	f000 80d8 	beq.w	800e182 <_printf_i+0x1d2>
 800dfd2:	2f58      	cmp	r7, #88	; 0x58
 800dfd4:	f000 80a3 	beq.w	800e11e <_printf_i+0x16e>
 800dfd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfe0:	e03a      	b.n	800e058 <_printf_i+0xa8>
 800dfe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfe6:	2b15      	cmp	r3, #21
 800dfe8:	d8f6      	bhi.n	800dfd8 <_printf_i+0x28>
 800dfea:	a101      	add	r1, pc, #4	; (adr r1, 800dff0 <_printf_i+0x40>)
 800dfec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dff0:	0800e049 	.word	0x0800e049
 800dff4:	0800e05d 	.word	0x0800e05d
 800dff8:	0800dfd9 	.word	0x0800dfd9
 800dffc:	0800dfd9 	.word	0x0800dfd9
 800e000:	0800dfd9 	.word	0x0800dfd9
 800e004:	0800dfd9 	.word	0x0800dfd9
 800e008:	0800e05d 	.word	0x0800e05d
 800e00c:	0800dfd9 	.word	0x0800dfd9
 800e010:	0800dfd9 	.word	0x0800dfd9
 800e014:	0800dfd9 	.word	0x0800dfd9
 800e018:	0800dfd9 	.word	0x0800dfd9
 800e01c:	0800e169 	.word	0x0800e169
 800e020:	0800e08d 	.word	0x0800e08d
 800e024:	0800e14b 	.word	0x0800e14b
 800e028:	0800dfd9 	.word	0x0800dfd9
 800e02c:	0800dfd9 	.word	0x0800dfd9
 800e030:	0800e18b 	.word	0x0800e18b
 800e034:	0800dfd9 	.word	0x0800dfd9
 800e038:	0800e08d 	.word	0x0800e08d
 800e03c:	0800dfd9 	.word	0x0800dfd9
 800e040:	0800dfd9 	.word	0x0800dfd9
 800e044:	0800e153 	.word	0x0800e153
 800e048:	682b      	ldr	r3, [r5, #0]
 800e04a:	1d1a      	adds	r2, r3, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	602a      	str	r2, [r5, #0]
 800e050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e058:	2301      	movs	r3, #1
 800e05a:	e0a3      	b.n	800e1a4 <_printf_i+0x1f4>
 800e05c:	6820      	ldr	r0, [r4, #0]
 800e05e:	6829      	ldr	r1, [r5, #0]
 800e060:	0606      	lsls	r6, r0, #24
 800e062:	f101 0304 	add.w	r3, r1, #4
 800e066:	d50a      	bpl.n	800e07e <_printf_i+0xce>
 800e068:	680e      	ldr	r6, [r1, #0]
 800e06a:	602b      	str	r3, [r5, #0]
 800e06c:	2e00      	cmp	r6, #0
 800e06e:	da03      	bge.n	800e078 <_printf_i+0xc8>
 800e070:	232d      	movs	r3, #45	; 0x2d
 800e072:	4276      	negs	r6, r6
 800e074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e078:	485e      	ldr	r0, [pc, #376]	; (800e1f4 <_printf_i+0x244>)
 800e07a:	230a      	movs	r3, #10
 800e07c:	e019      	b.n	800e0b2 <_printf_i+0x102>
 800e07e:	680e      	ldr	r6, [r1, #0]
 800e080:	602b      	str	r3, [r5, #0]
 800e082:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e086:	bf18      	it	ne
 800e088:	b236      	sxthne	r6, r6
 800e08a:	e7ef      	b.n	800e06c <_printf_i+0xbc>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	6820      	ldr	r0, [r4, #0]
 800e090:	1d19      	adds	r1, r3, #4
 800e092:	6029      	str	r1, [r5, #0]
 800e094:	0601      	lsls	r1, r0, #24
 800e096:	d501      	bpl.n	800e09c <_printf_i+0xec>
 800e098:	681e      	ldr	r6, [r3, #0]
 800e09a:	e002      	b.n	800e0a2 <_printf_i+0xf2>
 800e09c:	0646      	lsls	r6, r0, #25
 800e09e:	d5fb      	bpl.n	800e098 <_printf_i+0xe8>
 800e0a0:	881e      	ldrh	r6, [r3, #0]
 800e0a2:	4854      	ldr	r0, [pc, #336]	; (800e1f4 <_printf_i+0x244>)
 800e0a4:	2f6f      	cmp	r7, #111	; 0x6f
 800e0a6:	bf0c      	ite	eq
 800e0a8:	2308      	moveq	r3, #8
 800e0aa:	230a      	movne	r3, #10
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e0b2:	6865      	ldr	r5, [r4, #4]
 800e0b4:	60a5      	str	r5, [r4, #8]
 800e0b6:	2d00      	cmp	r5, #0
 800e0b8:	bfa2      	ittt	ge
 800e0ba:	6821      	ldrge	r1, [r4, #0]
 800e0bc:	f021 0104 	bicge.w	r1, r1, #4
 800e0c0:	6021      	strge	r1, [r4, #0]
 800e0c2:	b90e      	cbnz	r6, 800e0c8 <_printf_i+0x118>
 800e0c4:	2d00      	cmp	r5, #0
 800e0c6:	d04d      	beq.n	800e164 <_printf_i+0x1b4>
 800e0c8:	4615      	mov	r5, r2
 800e0ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800e0ce:	fb03 6711 	mls	r7, r3, r1, r6
 800e0d2:	5dc7      	ldrb	r7, [r0, r7]
 800e0d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e0d8:	4637      	mov	r7, r6
 800e0da:	42bb      	cmp	r3, r7
 800e0dc:	460e      	mov	r6, r1
 800e0de:	d9f4      	bls.n	800e0ca <_printf_i+0x11a>
 800e0e0:	2b08      	cmp	r3, #8
 800e0e2:	d10b      	bne.n	800e0fc <_printf_i+0x14c>
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	07de      	lsls	r6, r3, #31
 800e0e8:	d508      	bpl.n	800e0fc <_printf_i+0x14c>
 800e0ea:	6923      	ldr	r3, [r4, #16]
 800e0ec:	6861      	ldr	r1, [r4, #4]
 800e0ee:	4299      	cmp	r1, r3
 800e0f0:	bfde      	ittt	le
 800e0f2:	2330      	movle	r3, #48	; 0x30
 800e0f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e0fc:	1b52      	subs	r2, r2, r5
 800e0fe:	6122      	str	r2, [r4, #16]
 800e100:	f8cd a000 	str.w	sl, [sp]
 800e104:	464b      	mov	r3, r9
 800e106:	aa03      	add	r2, sp, #12
 800e108:	4621      	mov	r1, r4
 800e10a:	4640      	mov	r0, r8
 800e10c:	f7ff fee2 	bl	800ded4 <_printf_common>
 800e110:	3001      	adds	r0, #1
 800e112:	d14c      	bne.n	800e1ae <_printf_i+0x1fe>
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	b004      	add	sp, #16
 800e11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e11e:	4835      	ldr	r0, [pc, #212]	; (800e1f4 <_printf_i+0x244>)
 800e120:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e124:	6829      	ldr	r1, [r5, #0]
 800e126:	6823      	ldr	r3, [r4, #0]
 800e128:	f851 6b04 	ldr.w	r6, [r1], #4
 800e12c:	6029      	str	r1, [r5, #0]
 800e12e:	061d      	lsls	r5, r3, #24
 800e130:	d514      	bpl.n	800e15c <_printf_i+0x1ac>
 800e132:	07df      	lsls	r7, r3, #31
 800e134:	bf44      	itt	mi
 800e136:	f043 0320 	orrmi.w	r3, r3, #32
 800e13a:	6023      	strmi	r3, [r4, #0]
 800e13c:	b91e      	cbnz	r6, 800e146 <_printf_i+0x196>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	f023 0320 	bic.w	r3, r3, #32
 800e144:	6023      	str	r3, [r4, #0]
 800e146:	2310      	movs	r3, #16
 800e148:	e7b0      	b.n	800e0ac <_printf_i+0xfc>
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	f043 0320 	orr.w	r3, r3, #32
 800e150:	6023      	str	r3, [r4, #0]
 800e152:	2378      	movs	r3, #120	; 0x78
 800e154:	4828      	ldr	r0, [pc, #160]	; (800e1f8 <_printf_i+0x248>)
 800e156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e15a:	e7e3      	b.n	800e124 <_printf_i+0x174>
 800e15c:	0659      	lsls	r1, r3, #25
 800e15e:	bf48      	it	mi
 800e160:	b2b6      	uxthmi	r6, r6
 800e162:	e7e6      	b.n	800e132 <_printf_i+0x182>
 800e164:	4615      	mov	r5, r2
 800e166:	e7bb      	b.n	800e0e0 <_printf_i+0x130>
 800e168:	682b      	ldr	r3, [r5, #0]
 800e16a:	6826      	ldr	r6, [r4, #0]
 800e16c:	6961      	ldr	r1, [r4, #20]
 800e16e:	1d18      	adds	r0, r3, #4
 800e170:	6028      	str	r0, [r5, #0]
 800e172:	0635      	lsls	r5, r6, #24
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	d501      	bpl.n	800e17c <_printf_i+0x1cc>
 800e178:	6019      	str	r1, [r3, #0]
 800e17a:	e002      	b.n	800e182 <_printf_i+0x1d2>
 800e17c:	0670      	lsls	r0, r6, #25
 800e17e:	d5fb      	bpl.n	800e178 <_printf_i+0x1c8>
 800e180:	8019      	strh	r1, [r3, #0]
 800e182:	2300      	movs	r3, #0
 800e184:	6123      	str	r3, [r4, #16]
 800e186:	4615      	mov	r5, r2
 800e188:	e7ba      	b.n	800e100 <_printf_i+0x150>
 800e18a:	682b      	ldr	r3, [r5, #0]
 800e18c:	1d1a      	adds	r2, r3, #4
 800e18e:	602a      	str	r2, [r5, #0]
 800e190:	681d      	ldr	r5, [r3, #0]
 800e192:	6862      	ldr	r2, [r4, #4]
 800e194:	2100      	movs	r1, #0
 800e196:	4628      	mov	r0, r5
 800e198:	f7f2 f80a 	bl	80001b0 <memchr>
 800e19c:	b108      	cbz	r0, 800e1a2 <_printf_i+0x1f2>
 800e19e:	1b40      	subs	r0, r0, r5
 800e1a0:	6060      	str	r0, [r4, #4]
 800e1a2:	6863      	ldr	r3, [r4, #4]
 800e1a4:	6123      	str	r3, [r4, #16]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1ac:	e7a8      	b.n	800e100 <_printf_i+0x150>
 800e1ae:	6923      	ldr	r3, [r4, #16]
 800e1b0:	462a      	mov	r2, r5
 800e1b2:	4649      	mov	r1, r9
 800e1b4:	4640      	mov	r0, r8
 800e1b6:	47d0      	blx	sl
 800e1b8:	3001      	adds	r0, #1
 800e1ba:	d0ab      	beq.n	800e114 <_printf_i+0x164>
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	079b      	lsls	r3, r3, #30
 800e1c0:	d413      	bmi.n	800e1ea <_printf_i+0x23a>
 800e1c2:	68e0      	ldr	r0, [r4, #12]
 800e1c4:	9b03      	ldr	r3, [sp, #12]
 800e1c6:	4298      	cmp	r0, r3
 800e1c8:	bfb8      	it	lt
 800e1ca:	4618      	movlt	r0, r3
 800e1cc:	e7a4      	b.n	800e118 <_printf_i+0x168>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	4632      	mov	r2, r6
 800e1d2:	4649      	mov	r1, r9
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	47d0      	blx	sl
 800e1d8:	3001      	adds	r0, #1
 800e1da:	d09b      	beq.n	800e114 <_printf_i+0x164>
 800e1dc:	3501      	adds	r5, #1
 800e1de:	68e3      	ldr	r3, [r4, #12]
 800e1e0:	9903      	ldr	r1, [sp, #12]
 800e1e2:	1a5b      	subs	r3, r3, r1
 800e1e4:	42ab      	cmp	r3, r5
 800e1e6:	dcf2      	bgt.n	800e1ce <_printf_i+0x21e>
 800e1e8:	e7eb      	b.n	800e1c2 <_printf_i+0x212>
 800e1ea:	2500      	movs	r5, #0
 800e1ec:	f104 0619 	add.w	r6, r4, #25
 800e1f0:	e7f5      	b.n	800e1de <_printf_i+0x22e>
 800e1f2:	bf00      	nop
 800e1f4:	0800f87d 	.word	0x0800f87d
 800e1f8:	0800f88e 	.word	0x0800f88e

0800e1fc <iprintf>:
 800e1fc:	b40f      	push	{r0, r1, r2, r3}
 800e1fe:	4b0a      	ldr	r3, [pc, #40]	; (800e228 <iprintf+0x2c>)
 800e200:	b513      	push	{r0, r1, r4, lr}
 800e202:	681c      	ldr	r4, [r3, #0]
 800e204:	b124      	cbz	r4, 800e210 <iprintf+0x14>
 800e206:	69a3      	ldr	r3, [r4, #24]
 800e208:	b913      	cbnz	r3, 800e210 <iprintf+0x14>
 800e20a:	4620      	mov	r0, r4
 800e20c:	f000 fa6e 	bl	800e6ec <__sinit>
 800e210:	ab05      	add	r3, sp, #20
 800e212:	9a04      	ldr	r2, [sp, #16]
 800e214:	68a1      	ldr	r1, [r4, #8]
 800e216:	9301      	str	r3, [sp, #4]
 800e218:	4620      	mov	r0, r4
 800e21a:	f7ff fd2b 	bl	800dc74 <_vfiprintf_r>
 800e21e:	b002      	add	sp, #8
 800e220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e224:	b004      	add	sp, #16
 800e226:	4770      	bx	lr
 800e228:	20000040 	.word	0x20000040

0800e22c <_sbrk_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4d06      	ldr	r5, [pc, #24]	; (800e248 <_sbrk_r+0x1c>)
 800e230:	2300      	movs	r3, #0
 800e232:	4604      	mov	r4, r0
 800e234:	4608      	mov	r0, r1
 800e236:	602b      	str	r3, [r5, #0]
 800e238:	f7f2 fd84 	bl	8000d44 <_sbrk>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_sbrk_r+0x1a>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_sbrk_r+0x1a>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	200019d8 	.word	0x200019d8

0800e24c <sniprintf>:
 800e24c:	b40c      	push	{r2, r3}
 800e24e:	b530      	push	{r4, r5, lr}
 800e250:	4b17      	ldr	r3, [pc, #92]	; (800e2b0 <sniprintf+0x64>)
 800e252:	1e0c      	subs	r4, r1, #0
 800e254:	681d      	ldr	r5, [r3, #0]
 800e256:	b09d      	sub	sp, #116	; 0x74
 800e258:	da08      	bge.n	800e26c <sniprintf+0x20>
 800e25a:	238b      	movs	r3, #139	; 0x8b
 800e25c:	602b      	str	r3, [r5, #0]
 800e25e:	f04f 30ff 	mov.w	r0, #4294967295
 800e262:	b01d      	add	sp, #116	; 0x74
 800e264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e268:	b002      	add	sp, #8
 800e26a:	4770      	bx	lr
 800e26c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e270:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e274:	bf14      	ite	ne
 800e276:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e27a:	4623      	moveq	r3, r4
 800e27c:	9304      	str	r3, [sp, #16]
 800e27e:	9307      	str	r3, [sp, #28]
 800e280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e284:	9002      	str	r0, [sp, #8]
 800e286:	9006      	str	r0, [sp, #24]
 800e288:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e28c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e28e:	ab21      	add	r3, sp, #132	; 0x84
 800e290:	a902      	add	r1, sp, #8
 800e292:	4628      	mov	r0, r5
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	f000 fbdf 	bl	800ea58 <_svfiprintf_r>
 800e29a:	1c43      	adds	r3, r0, #1
 800e29c:	bfbc      	itt	lt
 800e29e:	238b      	movlt	r3, #139	; 0x8b
 800e2a0:	602b      	strlt	r3, [r5, #0]
 800e2a2:	2c00      	cmp	r4, #0
 800e2a4:	d0dd      	beq.n	800e262 <sniprintf+0x16>
 800e2a6:	9b02      	ldr	r3, [sp, #8]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	701a      	strb	r2, [r3, #0]
 800e2ac:	e7d9      	b.n	800e262 <sniprintf+0x16>
 800e2ae:	bf00      	nop
 800e2b0:	20000040 	.word	0x20000040

0800e2b4 <_vsniprintf_r>:
 800e2b4:	b530      	push	{r4, r5, lr}
 800e2b6:	4614      	mov	r4, r2
 800e2b8:	2c00      	cmp	r4, #0
 800e2ba:	b09b      	sub	sp, #108	; 0x6c
 800e2bc:	4605      	mov	r5, r0
 800e2be:	461a      	mov	r2, r3
 800e2c0:	da05      	bge.n	800e2ce <_vsniprintf_r+0x1a>
 800e2c2:	238b      	movs	r3, #139	; 0x8b
 800e2c4:	6003      	str	r3, [r0, #0]
 800e2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ca:	b01b      	add	sp, #108	; 0x6c
 800e2cc:	bd30      	pop	{r4, r5, pc}
 800e2ce:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e2d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e2d6:	bf14      	ite	ne
 800e2d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e2dc:	4623      	moveq	r3, r4
 800e2de:	9302      	str	r3, [sp, #8]
 800e2e0:	9305      	str	r3, [sp, #20]
 800e2e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2e6:	9100      	str	r1, [sp, #0]
 800e2e8:	9104      	str	r1, [sp, #16]
 800e2ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e2ee:	4669      	mov	r1, sp
 800e2f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e2f2:	f000 fbb1 	bl	800ea58 <_svfiprintf_r>
 800e2f6:	1c43      	adds	r3, r0, #1
 800e2f8:	bfbc      	itt	lt
 800e2fa:	238b      	movlt	r3, #139	; 0x8b
 800e2fc:	602b      	strlt	r3, [r5, #0]
 800e2fe:	2c00      	cmp	r4, #0
 800e300:	d0e3      	beq.n	800e2ca <_vsniprintf_r+0x16>
 800e302:	9b00      	ldr	r3, [sp, #0]
 800e304:	2200      	movs	r2, #0
 800e306:	701a      	strb	r2, [r3, #0]
 800e308:	e7df      	b.n	800e2ca <_vsniprintf_r+0x16>
	...

0800e30c <vsniprintf>:
 800e30c:	b507      	push	{r0, r1, r2, lr}
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	4613      	mov	r3, r2
 800e312:	460a      	mov	r2, r1
 800e314:	4601      	mov	r1, r0
 800e316:	4803      	ldr	r0, [pc, #12]	; (800e324 <vsniprintf+0x18>)
 800e318:	6800      	ldr	r0, [r0, #0]
 800e31a:	f7ff ffcb 	bl	800e2b4 <_vsniprintf_r>
 800e31e:	b003      	add	sp, #12
 800e320:	f85d fb04 	ldr.w	pc, [sp], #4
 800e324:	20000040 	.word	0x20000040

0800e328 <__swbuf_r>:
 800e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32a:	460e      	mov	r6, r1
 800e32c:	4614      	mov	r4, r2
 800e32e:	4605      	mov	r5, r0
 800e330:	b118      	cbz	r0, 800e33a <__swbuf_r+0x12>
 800e332:	6983      	ldr	r3, [r0, #24]
 800e334:	b90b      	cbnz	r3, 800e33a <__swbuf_r+0x12>
 800e336:	f000 f9d9 	bl	800e6ec <__sinit>
 800e33a:	4b21      	ldr	r3, [pc, #132]	; (800e3c0 <__swbuf_r+0x98>)
 800e33c:	429c      	cmp	r4, r3
 800e33e:	d12b      	bne.n	800e398 <__swbuf_r+0x70>
 800e340:	686c      	ldr	r4, [r5, #4]
 800e342:	69a3      	ldr	r3, [r4, #24]
 800e344:	60a3      	str	r3, [r4, #8]
 800e346:	89a3      	ldrh	r3, [r4, #12]
 800e348:	071a      	lsls	r2, r3, #28
 800e34a:	d52f      	bpl.n	800e3ac <__swbuf_r+0x84>
 800e34c:	6923      	ldr	r3, [r4, #16]
 800e34e:	b36b      	cbz	r3, 800e3ac <__swbuf_r+0x84>
 800e350:	6923      	ldr	r3, [r4, #16]
 800e352:	6820      	ldr	r0, [r4, #0]
 800e354:	1ac0      	subs	r0, r0, r3
 800e356:	6963      	ldr	r3, [r4, #20]
 800e358:	b2f6      	uxtb	r6, r6
 800e35a:	4283      	cmp	r3, r0
 800e35c:	4637      	mov	r7, r6
 800e35e:	dc04      	bgt.n	800e36a <__swbuf_r+0x42>
 800e360:	4621      	mov	r1, r4
 800e362:	4628      	mov	r0, r5
 800e364:	f000 f92e 	bl	800e5c4 <_fflush_r>
 800e368:	bb30      	cbnz	r0, 800e3b8 <__swbuf_r+0x90>
 800e36a:	68a3      	ldr	r3, [r4, #8]
 800e36c:	3b01      	subs	r3, #1
 800e36e:	60a3      	str	r3, [r4, #8]
 800e370:	6823      	ldr	r3, [r4, #0]
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	6022      	str	r2, [r4, #0]
 800e376:	701e      	strb	r6, [r3, #0]
 800e378:	6963      	ldr	r3, [r4, #20]
 800e37a:	3001      	adds	r0, #1
 800e37c:	4283      	cmp	r3, r0
 800e37e:	d004      	beq.n	800e38a <__swbuf_r+0x62>
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	07db      	lsls	r3, r3, #31
 800e384:	d506      	bpl.n	800e394 <__swbuf_r+0x6c>
 800e386:	2e0a      	cmp	r6, #10
 800e388:	d104      	bne.n	800e394 <__swbuf_r+0x6c>
 800e38a:	4621      	mov	r1, r4
 800e38c:	4628      	mov	r0, r5
 800e38e:	f000 f919 	bl	800e5c4 <_fflush_r>
 800e392:	b988      	cbnz	r0, 800e3b8 <__swbuf_r+0x90>
 800e394:	4638      	mov	r0, r7
 800e396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e398:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <__swbuf_r+0x9c>)
 800e39a:	429c      	cmp	r4, r3
 800e39c:	d101      	bne.n	800e3a2 <__swbuf_r+0x7a>
 800e39e:	68ac      	ldr	r4, [r5, #8]
 800e3a0:	e7cf      	b.n	800e342 <__swbuf_r+0x1a>
 800e3a2:	4b09      	ldr	r3, [pc, #36]	; (800e3c8 <__swbuf_r+0xa0>)
 800e3a4:	429c      	cmp	r4, r3
 800e3a6:	bf08      	it	eq
 800e3a8:	68ec      	ldreq	r4, [r5, #12]
 800e3aa:	e7ca      	b.n	800e342 <__swbuf_r+0x1a>
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	f000 f80c 	bl	800e3cc <__swsetup_r>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d0cb      	beq.n	800e350 <__swbuf_r+0x28>
 800e3b8:	f04f 37ff 	mov.w	r7, #4294967295
 800e3bc:	e7ea      	b.n	800e394 <__swbuf_r+0x6c>
 800e3be:	bf00      	nop
 800e3c0:	0800f8c0 	.word	0x0800f8c0
 800e3c4:	0800f8e0 	.word	0x0800f8e0
 800e3c8:	0800f8a0 	.word	0x0800f8a0

0800e3cc <__swsetup_r>:
 800e3cc:	4b32      	ldr	r3, [pc, #200]	; (800e498 <__swsetup_r+0xcc>)
 800e3ce:	b570      	push	{r4, r5, r6, lr}
 800e3d0:	681d      	ldr	r5, [r3, #0]
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	460c      	mov	r4, r1
 800e3d6:	b125      	cbz	r5, 800e3e2 <__swsetup_r+0x16>
 800e3d8:	69ab      	ldr	r3, [r5, #24]
 800e3da:	b913      	cbnz	r3, 800e3e2 <__swsetup_r+0x16>
 800e3dc:	4628      	mov	r0, r5
 800e3de:	f000 f985 	bl	800e6ec <__sinit>
 800e3e2:	4b2e      	ldr	r3, [pc, #184]	; (800e49c <__swsetup_r+0xd0>)
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	d10f      	bne.n	800e408 <__swsetup_r+0x3c>
 800e3e8:	686c      	ldr	r4, [r5, #4]
 800e3ea:	89a3      	ldrh	r3, [r4, #12]
 800e3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3f0:	0719      	lsls	r1, r3, #28
 800e3f2:	d42c      	bmi.n	800e44e <__swsetup_r+0x82>
 800e3f4:	06dd      	lsls	r5, r3, #27
 800e3f6:	d411      	bmi.n	800e41c <__swsetup_r+0x50>
 800e3f8:	2309      	movs	r3, #9
 800e3fa:	6033      	str	r3, [r6, #0]
 800e3fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e400:	81a3      	strh	r3, [r4, #12]
 800e402:	f04f 30ff 	mov.w	r0, #4294967295
 800e406:	e03e      	b.n	800e486 <__swsetup_r+0xba>
 800e408:	4b25      	ldr	r3, [pc, #148]	; (800e4a0 <__swsetup_r+0xd4>)
 800e40a:	429c      	cmp	r4, r3
 800e40c:	d101      	bne.n	800e412 <__swsetup_r+0x46>
 800e40e:	68ac      	ldr	r4, [r5, #8]
 800e410:	e7eb      	b.n	800e3ea <__swsetup_r+0x1e>
 800e412:	4b24      	ldr	r3, [pc, #144]	; (800e4a4 <__swsetup_r+0xd8>)
 800e414:	429c      	cmp	r4, r3
 800e416:	bf08      	it	eq
 800e418:	68ec      	ldreq	r4, [r5, #12]
 800e41a:	e7e6      	b.n	800e3ea <__swsetup_r+0x1e>
 800e41c:	0758      	lsls	r0, r3, #29
 800e41e:	d512      	bpl.n	800e446 <__swsetup_r+0x7a>
 800e420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e422:	b141      	cbz	r1, 800e436 <__swsetup_r+0x6a>
 800e424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e428:	4299      	cmp	r1, r3
 800e42a:	d002      	beq.n	800e432 <__swsetup_r+0x66>
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff fb17 	bl	800da60 <_free_r>
 800e432:	2300      	movs	r3, #0
 800e434:	6363      	str	r3, [r4, #52]	; 0x34
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e43c:	81a3      	strh	r3, [r4, #12]
 800e43e:	2300      	movs	r3, #0
 800e440:	6063      	str	r3, [r4, #4]
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	6023      	str	r3, [r4, #0]
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f043 0308 	orr.w	r3, r3, #8
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	b94b      	cbnz	r3, 800e466 <__swsetup_r+0x9a>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e45c:	d003      	beq.n	800e466 <__swsetup_r+0x9a>
 800e45e:	4621      	mov	r1, r4
 800e460:	4630      	mov	r0, r6
 800e462:	f000 fa09 	bl	800e878 <__smakebuf_r>
 800e466:	89a0      	ldrh	r0, [r4, #12]
 800e468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e46c:	f010 0301 	ands.w	r3, r0, #1
 800e470:	d00a      	beq.n	800e488 <__swsetup_r+0xbc>
 800e472:	2300      	movs	r3, #0
 800e474:	60a3      	str	r3, [r4, #8]
 800e476:	6963      	ldr	r3, [r4, #20]
 800e478:	425b      	negs	r3, r3
 800e47a:	61a3      	str	r3, [r4, #24]
 800e47c:	6923      	ldr	r3, [r4, #16]
 800e47e:	b943      	cbnz	r3, 800e492 <__swsetup_r+0xc6>
 800e480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e484:	d1ba      	bne.n	800e3fc <__swsetup_r+0x30>
 800e486:	bd70      	pop	{r4, r5, r6, pc}
 800e488:	0781      	lsls	r1, r0, #30
 800e48a:	bf58      	it	pl
 800e48c:	6963      	ldrpl	r3, [r4, #20]
 800e48e:	60a3      	str	r3, [r4, #8]
 800e490:	e7f4      	b.n	800e47c <__swsetup_r+0xb0>
 800e492:	2000      	movs	r0, #0
 800e494:	e7f7      	b.n	800e486 <__swsetup_r+0xba>
 800e496:	bf00      	nop
 800e498:	20000040 	.word	0x20000040
 800e49c:	0800f8c0 	.word	0x0800f8c0
 800e4a0:	0800f8e0 	.word	0x0800f8e0
 800e4a4:	0800f8a0 	.word	0x0800f8a0

0800e4a8 <abort>:
 800e4a8:	b508      	push	{r3, lr}
 800e4aa:	2006      	movs	r0, #6
 800e4ac:	f000 fbfc 	bl	800eca8 <raise>
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	f7f2 fbec 	bl	8000c8e <_exit>
	...

0800e4b8 <__sflush_r>:
 800e4b8:	898a      	ldrh	r2, [r1, #12]
 800e4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4be:	4605      	mov	r5, r0
 800e4c0:	0710      	lsls	r0, r2, #28
 800e4c2:	460c      	mov	r4, r1
 800e4c4:	d458      	bmi.n	800e578 <__sflush_r+0xc0>
 800e4c6:	684b      	ldr	r3, [r1, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dc05      	bgt.n	800e4d8 <__sflush_r+0x20>
 800e4cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	dc02      	bgt.n	800e4d8 <__sflush_r+0x20>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4da:	2e00      	cmp	r6, #0
 800e4dc:	d0f9      	beq.n	800e4d2 <__sflush_r+0x1a>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4e4:	682f      	ldr	r7, [r5, #0]
 800e4e6:	602b      	str	r3, [r5, #0]
 800e4e8:	d032      	beq.n	800e550 <__sflush_r+0x98>
 800e4ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	075a      	lsls	r2, r3, #29
 800e4f0:	d505      	bpl.n	800e4fe <__sflush_r+0x46>
 800e4f2:	6863      	ldr	r3, [r4, #4]
 800e4f4:	1ac0      	subs	r0, r0, r3
 800e4f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4f8:	b10b      	cbz	r3, 800e4fe <__sflush_r+0x46>
 800e4fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4fc:	1ac0      	subs	r0, r0, r3
 800e4fe:	2300      	movs	r3, #0
 800e500:	4602      	mov	r2, r0
 800e502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e504:	6a21      	ldr	r1, [r4, #32]
 800e506:	4628      	mov	r0, r5
 800e508:	47b0      	blx	r6
 800e50a:	1c43      	adds	r3, r0, #1
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	d106      	bne.n	800e51e <__sflush_r+0x66>
 800e510:	6829      	ldr	r1, [r5, #0]
 800e512:	291d      	cmp	r1, #29
 800e514:	d82c      	bhi.n	800e570 <__sflush_r+0xb8>
 800e516:	4a2a      	ldr	r2, [pc, #168]	; (800e5c0 <__sflush_r+0x108>)
 800e518:	40ca      	lsrs	r2, r1
 800e51a:	07d6      	lsls	r6, r2, #31
 800e51c:	d528      	bpl.n	800e570 <__sflush_r+0xb8>
 800e51e:	2200      	movs	r2, #0
 800e520:	6062      	str	r2, [r4, #4]
 800e522:	04d9      	lsls	r1, r3, #19
 800e524:	6922      	ldr	r2, [r4, #16]
 800e526:	6022      	str	r2, [r4, #0]
 800e528:	d504      	bpl.n	800e534 <__sflush_r+0x7c>
 800e52a:	1c42      	adds	r2, r0, #1
 800e52c:	d101      	bne.n	800e532 <__sflush_r+0x7a>
 800e52e:	682b      	ldr	r3, [r5, #0]
 800e530:	b903      	cbnz	r3, 800e534 <__sflush_r+0x7c>
 800e532:	6560      	str	r0, [r4, #84]	; 0x54
 800e534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e536:	602f      	str	r7, [r5, #0]
 800e538:	2900      	cmp	r1, #0
 800e53a:	d0ca      	beq.n	800e4d2 <__sflush_r+0x1a>
 800e53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e540:	4299      	cmp	r1, r3
 800e542:	d002      	beq.n	800e54a <__sflush_r+0x92>
 800e544:	4628      	mov	r0, r5
 800e546:	f7ff fa8b 	bl	800da60 <_free_r>
 800e54a:	2000      	movs	r0, #0
 800e54c:	6360      	str	r0, [r4, #52]	; 0x34
 800e54e:	e7c1      	b.n	800e4d4 <__sflush_r+0x1c>
 800e550:	6a21      	ldr	r1, [r4, #32]
 800e552:	2301      	movs	r3, #1
 800e554:	4628      	mov	r0, r5
 800e556:	47b0      	blx	r6
 800e558:	1c41      	adds	r1, r0, #1
 800e55a:	d1c7      	bne.n	800e4ec <__sflush_r+0x34>
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0c4      	beq.n	800e4ec <__sflush_r+0x34>
 800e562:	2b1d      	cmp	r3, #29
 800e564:	d001      	beq.n	800e56a <__sflush_r+0xb2>
 800e566:	2b16      	cmp	r3, #22
 800e568:	d101      	bne.n	800e56e <__sflush_r+0xb6>
 800e56a:	602f      	str	r7, [r5, #0]
 800e56c:	e7b1      	b.n	800e4d2 <__sflush_r+0x1a>
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e574:	81a3      	strh	r3, [r4, #12]
 800e576:	e7ad      	b.n	800e4d4 <__sflush_r+0x1c>
 800e578:	690f      	ldr	r7, [r1, #16]
 800e57a:	2f00      	cmp	r7, #0
 800e57c:	d0a9      	beq.n	800e4d2 <__sflush_r+0x1a>
 800e57e:	0793      	lsls	r3, r2, #30
 800e580:	680e      	ldr	r6, [r1, #0]
 800e582:	bf08      	it	eq
 800e584:	694b      	ldreq	r3, [r1, #20]
 800e586:	600f      	str	r7, [r1, #0]
 800e588:	bf18      	it	ne
 800e58a:	2300      	movne	r3, #0
 800e58c:	eba6 0807 	sub.w	r8, r6, r7
 800e590:	608b      	str	r3, [r1, #8]
 800e592:	f1b8 0f00 	cmp.w	r8, #0
 800e596:	dd9c      	ble.n	800e4d2 <__sflush_r+0x1a>
 800e598:	6a21      	ldr	r1, [r4, #32]
 800e59a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e59c:	4643      	mov	r3, r8
 800e59e:	463a      	mov	r2, r7
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	47b0      	blx	r6
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	dc06      	bgt.n	800e5b6 <__sflush_r+0xfe>
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b4:	e78e      	b.n	800e4d4 <__sflush_r+0x1c>
 800e5b6:	4407      	add	r7, r0
 800e5b8:	eba8 0800 	sub.w	r8, r8, r0
 800e5bc:	e7e9      	b.n	800e592 <__sflush_r+0xda>
 800e5be:	bf00      	nop
 800e5c0:	20400001 	.word	0x20400001

0800e5c4 <_fflush_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	690b      	ldr	r3, [r1, #16]
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	b913      	cbnz	r3, 800e5d4 <_fflush_r+0x10>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}
 800e5d4:	b118      	cbz	r0, 800e5de <_fflush_r+0x1a>
 800e5d6:	6983      	ldr	r3, [r0, #24]
 800e5d8:	b90b      	cbnz	r3, 800e5de <_fflush_r+0x1a>
 800e5da:	f000 f887 	bl	800e6ec <__sinit>
 800e5de:	4b14      	ldr	r3, [pc, #80]	; (800e630 <_fflush_r+0x6c>)
 800e5e0:	429c      	cmp	r4, r3
 800e5e2:	d11b      	bne.n	800e61c <_fflush_r+0x58>
 800e5e4:	686c      	ldr	r4, [r5, #4]
 800e5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d0ef      	beq.n	800e5ce <_fflush_r+0xa>
 800e5ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5f0:	07d0      	lsls	r0, r2, #31
 800e5f2:	d404      	bmi.n	800e5fe <_fflush_r+0x3a>
 800e5f4:	0599      	lsls	r1, r3, #22
 800e5f6:	d402      	bmi.n	800e5fe <_fflush_r+0x3a>
 800e5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5fa:	f000 f915 	bl	800e828 <__retarget_lock_acquire_recursive>
 800e5fe:	4628      	mov	r0, r5
 800e600:	4621      	mov	r1, r4
 800e602:	f7ff ff59 	bl	800e4b8 <__sflush_r>
 800e606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e608:	07da      	lsls	r2, r3, #31
 800e60a:	4605      	mov	r5, r0
 800e60c:	d4e0      	bmi.n	800e5d0 <_fflush_r+0xc>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	059b      	lsls	r3, r3, #22
 800e612:	d4dd      	bmi.n	800e5d0 <_fflush_r+0xc>
 800e614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e616:	f000 f908 	bl	800e82a <__retarget_lock_release_recursive>
 800e61a:	e7d9      	b.n	800e5d0 <_fflush_r+0xc>
 800e61c:	4b05      	ldr	r3, [pc, #20]	; (800e634 <_fflush_r+0x70>)
 800e61e:	429c      	cmp	r4, r3
 800e620:	d101      	bne.n	800e626 <_fflush_r+0x62>
 800e622:	68ac      	ldr	r4, [r5, #8]
 800e624:	e7df      	b.n	800e5e6 <_fflush_r+0x22>
 800e626:	4b04      	ldr	r3, [pc, #16]	; (800e638 <_fflush_r+0x74>)
 800e628:	429c      	cmp	r4, r3
 800e62a:	bf08      	it	eq
 800e62c:	68ec      	ldreq	r4, [r5, #12]
 800e62e:	e7da      	b.n	800e5e6 <_fflush_r+0x22>
 800e630:	0800f8c0 	.word	0x0800f8c0
 800e634:	0800f8e0 	.word	0x0800f8e0
 800e638:	0800f8a0 	.word	0x0800f8a0

0800e63c <std>:
 800e63c:	2300      	movs	r3, #0
 800e63e:	b510      	push	{r4, lr}
 800e640:	4604      	mov	r4, r0
 800e642:	e9c0 3300 	strd	r3, r3, [r0]
 800e646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e64a:	6083      	str	r3, [r0, #8]
 800e64c:	8181      	strh	r1, [r0, #12]
 800e64e:	6643      	str	r3, [r0, #100]	; 0x64
 800e650:	81c2      	strh	r2, [r0, #14]
 800e652:	6183      	str	r3, [r0, #24]
 800e654:	4619      	mov	r1, r3
 800e656:	2208      	movs	r2, #8
 800e658:	305c      	adds	r0, #92	; 0x5c
 800e65a:	f7ff f9f9 	bl	800da50 <memset>
 800e65e:	4b05      	ldr	r3, [pc, #20]	; (800e674 <std+0x38>)
 800e660:	6263      	str	r3, [r4, #36]	; 0x24
 800e662:	4b05      	ldr	r3, [pc, #20]	; (800e678 <std+0x3c>)
 800e664:	62a3      	str	r3, [r4, #40]	; 0x28
 800e666:	4b05      	ldr	r3, [pc, #20]	; (800e67c <std+0x40>)
 800e668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e66a:	4b05      	ldr	r3, [pc, #20]	; (800e680 <std+0x44>)
 800e66c:	6224      	str	r4, [r4, #32]
 800e66e:	6323      	str	r3, [r4, #48]	; 0x30
 800e670:	bd10      	pop	{r4, pc}
 800e672:	bf00      	nop
 800e674:	0800ece1 	.word	0x0800ece1
 800e678:	0800ed03 	.word	0x0800ed03
 800e67c:	0800ed3b 	.word	0x0800ed3b
 800e680:	0800ed5f 	.word	0x0800ed5f

0800e684 <_cleanup_r>:
 800e684:	4901      	ldr	r1, [pc, #4]	; (800e68c <_cleanup_r+0x8>)
 800e686:	f000 b8af 	b.w	800e7e8 <_fwalk_reent>
 800e68a:	bf00      	nop
 800e68c:	0800e5c5 	.word	0x0800e5c5

0800e690 <__sfmoreglue>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	2268      	movs	r2, #104	; 0x68
 800e694:	1e4d      	subs	r5, r1, #1
 800e696:	4355      	muls	r5, r2
 800e698:	460e      	mov	r6, r1
 800e69a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e69e:	f7ff fa4b 	bl	800db38 <_malloc_r>
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	b140      	cbz	r0, 800e6b8 <__sfmoreglue+0x28>
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e6ac:	300c      	adds	r0, #12
 800e6ae:	60a0      	str	r0, [r4, #8]
 800e6b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6b4:	f7ff f9cc 	bl	800da50 <memset>
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}

0800e6bc <__sfp_lock_acquire>:
 800e6bc:	4801      	ldr	r0, [pc, #4]	; (800e6c4 <__sfp_lock_acquire+0x8>)
 800e6be:	f000 b8b3 	b.w	800e828 <__retarget_lock_acquire_recursive>
 800e6c2:	bf00      	nop
 800e6c4:	200019d5 	.word	0x200019d5

0800e6c8 <__sfp_lock_release>:
 800e6c8:	4801      	ldr	r0, [pc, #4]	; (800e6d0 <__sfp_lock_release+0x8>)
 800e6ca:	f000 b8ae 	b.w	800e82a <__retarget_lock_release_recursive>
 800e6ce:	bf00      	nop
 800e6d0:	200019d5 	.word	0x200019d5

0800e6d4 <__sinit_lock_acquire>:
 800e6d4:	4801      	ldr	r0, [pc, #4]	; (800e6dc <__sinit_lock_acquire+0x8>)
 800e6d6:	f000 b8a7 	b.w	800e828 <__retarget_lock_acquire_recursive>
 800e6da:	bf00      	nop
 800e6dc:	200019d6 	.word	0x200019d6

0800e6e0 <__sinit_lock_release>:
 800e6e0:	4801      	ldr	r0, [pc, #4]	; (800e6e8 <__sinit_lock_release+0x8>)
 800e6e2:	f000 b8a2 	b.w	800e82a <__retarget_lock_release_recursive>
 800e6e6:	bf00      	nop
 800e6e8:	200019d6 	.word	0x200019d6

0800e6ec <__sinit>:
 800e6ec:	b510      	push	{r4, lr}
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	f7ff fff0 	bl	800e6d4 <__sinit_lock_acquire>
 800e6f4:	69a3      	ldr	r3, [r4, #24]
 800e6f6:	b11b      	cbz	r3, 800e700 <__sinit+0x14>
 800e6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6fc:	f7ff bff0 	b.w	800e6e0 <__sinit_lock_release>
 800e700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e704:	6523      	str	r3, [r4, #80]	; 0x50
 800e706:	4b13      	ldr	r3, [pc, #76]	; (800e754 <__sinit+0x68>)
 800e708:	4a13      	ldr	r2, [pc, #76]	; (800e758 <__sinit+0x6c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e70e:	42a3      	cmp	r3, r4
 800e710:	bf04      	itt	eq
 800e712:	2301      	moveq	r3, #1
 800e714:	61a3      	streq	r3, [r4, #24]
 800e716:	4620      	mov	r0, r4
 800e718:	f000 f820 	bl	800e75c <__sfp>
 800e71c:	6060      	str	r0, [r4, #4]
 800e71e:	4620      	mov	r0, r4
 800e720:	f000 f81c 	bl	800e75c <__sfp>
 800e724:	60a0      	str	r0, [r4, #8]
 800e726:	4620      	mov	r0, r4
 800e728:	f000 f818 	bl	800e75c <__sfp>
 800e72c:	2200      	movs	r2, #0
 800e72e:	60e0      	str	r0, [r4, #12]
 800e730:	2104      	movs	r1, #4
 800e732:	6860      	ldr	r0, [r4, #4]
 800e734:	f7ff ff82 	bl	800e63c <std>
 800e738:	68a0      	ldr	r0, [r4, #8]
 800e73a:	2201      	movs	r2, #1
 800e73c:	2109      	movs	r1, #9
 800e73e:	f7ff ff7d 	bl	800e63c <std>
 800e742:	68e0      	ldr	r0, [r4, #12]
 800e744:	2202      	movs	r2, #2
 800e746:	2112      	movs	r1, #18
 800e748:	f7ff ff78 	bl	800e63c <std>
 800e74c:	2301      	movs	r3, #1
 800e74e:	61a3      	str	r3, [r4, #24]
 800e750:	e7d2      	b.n	800e6f8 <__sinit+0xc>
 800e752:	bf00      	nop
 800e754:	0800f868 	.word	0x0800f868
 800e758:	0800e685 	.word	0x0800e685

0800e75c <__sfp>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	4607      	mov	r7, r0
 800e760:	f7ff ffac 	bl	800e6bc <__sfp_lock_acquire>
 800e764:	4b1e      	ldr	r3, [pc, #120]	; (800e7e0 <__sfp+0x84>)
 800e766:	681e      	ldr	r6, [r3, #0]
 800e768:	69b3      	ldr	r3, [r6, #24]
 800e76a:	b913      	cbnz	r3, 800e772 <__sfp+0x16>
 800e76c:	4630      	mov	r0, r6
 800e76e:	f7ff ffbd 	bl	800e6ec <__sinit>
 800e772:	3648      	adds	r6, #72	; 0x48
 800e774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e778:	3b01      	subs	r3, #1
 800e77a:	d503      	bpl.n	800e784 <__sfp+0x28>
 800e77c:	6833      	ldr	r3, [r6, #0]
 800e77e:	b30b      	cbz	r3, 800e7c4 <__sfp+0x68>
 800e780:	6836      	ldr	r6, [r6, #0]
 800e782:	e7f7      	b.n	800e774 <__sfp+0x18>
 800e784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e788:	b9d5      	cbnz	r5, 800e7c0 <__sfp+0x64>
 800e78a:	4b16      	ldr	r3, [pc, #88]	; (800e7e4 <__sfp+0x88>)
 800e78c:	60e3      	str	r3, [r4, #12]
 800e78e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e792:	6665      	str	r5, [r4, #100]	; 0x64
 800e794:	f000 f847 	bl	800e826 <__retarget_lock_init_recursive>
 800e798:	f7ff ff96 	bl	800e6c8 <__sfp_lock_release>
 800e79c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7a4:	6025      	str	r5, [r4, #0]
 800e7a6:	61a5      	str	r5, [r4, #24]
 800e7a8:	2208      	movs	r2, #8
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7b0:	f7ff f94e 	bl	800da50 <memset>
 800e7b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7bc:	4620      	mov	r0, r4
 800e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c0:	3468      	adds	r4, #104	; 0x68
 800e7c2:	e7d9      	b.n	800e778 <__sfp+0x1c>
 800e7c4:	2104      	movs	r1, #4
 800e7c6:	4638      	mov	r0, r7
 800e7c8:	f7ff ff62 	bl	800e690 <__sfmoreglue>
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	6030      	str	r0, [r6, #0]
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d1d5      	bne.n	800e780 <__sfp+0x24>
 800e7d4:	f7ff ff78 	bl	800e6c8 <__sfp_lock_release>
 800e7d8:	230c      	movs	r3, #12
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	e7ee      	b.n	800e7bc <__sfp+0x60>
 800e7de:	bf00      	nop
 800e7e0:	0800f868 	.word	0x0800f868
 800e7e4:	ffff0001 	.word	0xffff0001

0800e7e8 <_fwalk_reent>:
 800e7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	4688      	mov	r8, r1
 800e7f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7f4:	2700      	movs	r7, #0
 800e7f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7fa:	f1b9 0901 	subs.w	r9, r9, #1
 800e7fe:	d505      	bpl.n	800e80c <_fwalk_reent+0x24>
 800e800:	6824      	ldr	r4, [r4, #0]
 800e802:	2c00      	cmp	r4, #0
 800e804:	d1f7      	bne.n	800e7f6 <_fwalk_reent+0xe>
 800e806:	4638      	mov	r0, r7
 800e808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e80c:	89ab      	ldrh	r3, [r5, #12]
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d907      	bls.n	800e822 <_fwalk_reent+0x3a>
 800e812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e816:	3301      	adds	r3, #1
 800e818:	d003      	beq.n	800e822 <_fwalk_reent+0x3a>
 800e81a:	4629      	mov	r1, r5
 800e81c:	4630      	mov	r0, r6
 800e81e:	47c0      	blx	r8
 800e820:	4307      	orrs	r7, r0
 800e822:	3568      	adds	r5, #104	; 0x68
 800e824:	e7e9      	b.n	800e7fa <_fwalk_reent+0x12>

0800e826 <__retarget_lock_init_recursive>:
 800e826:	4770      	bx	lr

0800e828 <__retarget_lock_acquire_recursive>:
 800e828:	4770      	bx	lr

0800e82a <__retarget_lock_release_recursive>:
 800e82a:	4770      	bx	lr

0800e82c <__swhatbuf_r>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	460e      	mov	r6, r1
 800e830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e834:	2900      	cmp	r1, #0
 800e836:	b096      	sub	sp, #88	; 0x58
 800e838:	4614      	mov	r4, r2
 800e83a:	461d      	mov	r5, r3
 800e83c:	da08      	bge.n	800e850 <__swhatbuf_r+0x24>
 800e83e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	602a      	str	r2, [r5, #0]
 800e846:	061a      	lsls	r2, r3, #24
 800e848:	d410      	bmi.n	800e86c <__swhatbuf_r+0x40>
 800e84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84e:	e00e      	b.n	800e86e <__swhatbuf_r+0x42>
 800e850:	466a      	mov	r2, sp
 800e852:	f000 faab 	bl	800edac <_fstat_r>
 800e856:	2800      	cmp	r0, #0
 800e858:	dbf1      	blt.n	800e83e <__swhatbuf_r+0x12>
 800e85a:	9a01      	ldr	r2, [sp, #4]
 800e85c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e864:	425a      	negs	r2, r3
 800e866:	415a      	adcs	r2, r3
 800e868:	602a      	str	r2, [r5, #0]
 800e86a:	e7ee      	b.n	800e84a <__swhatbuf_r+0x1e>
 800e86c:	2340      	movs	r3, #64	; 0x40
 800e86e:	2000      	movs	r0, #0
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	b016      	add	sp, #88	; 0x58
 800e874:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e878 <__smakebuf_r>:
 800e878:	898b      	ldrh	r3, [r1, #12]
 800e87a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e87c:	079d      	lsls	r5, r3, #30
 800e87e:	4606      	mov	r6, r0
 800e880:	460c      	mov	r4, r1
 800e882:	d507      	bpl.n	800e894 <__smakebuf_r+0x1c>
 800e884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	6123      	str	r3, [r4, #16]
 800e88c:	2301      	movs	r3, #1
 800e88e:	6163      	str	r3, [r4, #20]
 800e890:	b002      	add	sp, #8
 800e892:	bd70      	pop	{r4, r5, r6, pc}
 800e894:	ab01      	add	r3, sp, #4
 800e896:	466a      	mov	r2, sp
 800e898:	f7ff ffc8 	bl	800e82c <__swhatbuf_r>
 800e89c:	9900      	ldr	r1, [sp, #0]
 800e89e:	4605      	mov	r5, r0
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f7ff f949 	bl	800db38 <_malloc_r>
 800e8a6:	b948      	cbnz	r0, 800e8bc <__smakebuf_r+0x44>
 800e8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ac:	059a      	lsls	r2, r3, #22
 800e8ae:	d4ef      	bmi.n	800e890 <__smakebuf_r+0x18>
 800e8b0:	f023 0303 	bic.w	r3, r3, #3
 800e8b4:	f043 0302 	orr.w	r3, r3, #2
 800e8b8:	81a3      	strh	r3, [r4, #12]
 800e8ba:	e7e3      	b.n	800e884 <__smakebuf_r+0xc>
 800e8bc:	4b0d      	ldr	r3, [pc, #52]	; (800e8f4 <__smakebuf_r+0x7c>)
 800e8be:	62b3      	str	r3, [r6, #40]	; 0x28
 800e8c0:	89a3      	ldrh	r3, [r4, #12]
 800e8c2:	6020      	str	r0, [r4, #0]
 800e8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8c8:	81a3      	strh	r3, [r4, #12]
 800e8ca:	9b00      	ldr	r3, [sp, #0]
 800e8cc:	6163      	str	r3, [r4, #20]
 800e8ce:	9b01      	ldr	r3, [sp, #4]
 800e8d0:	6120      	str	r0, [r4, #16]
 800e8d2:	b15b      	cbz	r3, 800e8ec <__smakebuf_r+0x74>
 800e8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f000 fa79 	bl	800edd0 <_isatty_r>
 800e8de:	b128      	cbz	r0, 800e8ec <__smakebuf_r+0x74>
 800e8e0:	89a3      	ldrh	r3, [r4, #12]
 800e8e2:	f023 0303 	bic.w	r3, r3, #3
 800e8e6:	f043 0301 	orr.w	r3, r3, #1
 800e8ea:	81a3      	strh	r3, [r4, #12]
 800e8ec:	89a0      	ldrh	r0, [r4, #12]
 800e8ee:	4305      	orrs	r5, r0
 800e8f0:	81a5      	strh	r5, [r4, #12]
 800e8f2:	e7cd      	b.n	800e890 <__smakebuf_r+0x18>
 800e8f4:	0800e685 	.word	0x0800e685

0800e8f8 <memmove>:
 800e8f8:	4288      	cmp	r0, r1
 800e8fa:	b510      	push	{r4, lr}
 800e8fc:	eb01 0402 	add.w	r4, r1, r2
 800e900:	d902      	bls.n	800e908 <memmove+0x10>
 800e902:	4284      	cmp	r4, r0
 800e904:	4623      	mov	r3, r4
 800e906:	d807      	bhi.n	800e918 <memmove+0x20>
 800e908:	1e43      	subs	r3, r0, #1
 800e90a:	42a1      	cmp	r1, r4
 800e90c:	d008      	beq.n	800e920 <memmove+0x28>
 800e90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e916:	e7f8      	b.n	800e90a <memmove+0x12>
 800e918:	4402      	add	r2, r0
 800e91a:	4601      	mov	r1, r0
 800e91c:	428a      	cmp	r2, r1
 800e91e:	d100      	bne.n	800e922 <memmove+0x2a>
 800e920:	bd10      	pop	{r4, pc}
 800e922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e92a:	e7f7      	b.n	800e91c <memmove+0x24>

0800e92c <__malloc_lock>:
 800e92c:	4801      	ldr	r0, [pc, #4]	; (800e934 <__malloc_lock+0x8>)
 800e92e:	f7ff bf7b 	b.w	800e828 <__retarget_lock_acquire_recursive>
 800e932:	bf00      	nop
 800e934:	200019d4 	.word	0x200019d4

0800e938 <__malloc_unlock>:
 800e938:	4801      	ldr	r0, [pc, #4]	; (800e940 <__malloc_unlock+0x8>)
 800e93a:	f7ff bf76 	b.w	800e82a <__retarget_lock_release_recursive>
 800e93e:	bf00      	nop
 800e940:	200019d4 	.word	0x200019d4

0800e944 <_realloc_r>:
 800e944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e948:	4680      	mov	r8, r0
 800e94a:	4614      	mov	r4, r2
 800e94c:	460e      	mov	r6, r1
 800e94e:	b921      	cbnz	r1, 800e95a <_realloc_r+0x16>
 800e950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e954:	4611      	mov	r1, r2
 800e956:	f7ff b8ef 	b.w	800db38 <_malloc_r>
 800e95a:	b92a      	cbnz	r2, 800e968 <_realloc_r+0x24>
 800e95c:	f7ff f880 	bl	800da60 <_free_r>
 800e960:	4625      	mov	r5, r4
 800e962:	4628      	mov	r0, r5
 800e964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e968:	f000 fa54 	bl	800ee14 <_malloc_usable_size_r>
 800e96c:	4284      	cmp	r4, r0
 800e96e:	4607      	mov	r7, r0
 800e970:	d802      	bhi.n	800e978 <_realloc_r+0x34>
 800e972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e976:	d812      	bhi.n	800e99e <_realloc_r+0x5a>
 800e978:	4621      	mov	r1, r4
 800e97a:	4640      	mov	r0, r8
 800e97c:	f7ff f8dc 	bl	800db38 <_malloc_r>
 800e980:	4605      	mov	r5, r0
 800e982:	2800      	cmp	r0, #0
 800e984:	d0ed      	beq.n	800e962 <_realloc_r+0x1e>
 800e986:	42bc      	cmp	r4, r7
 800e988:	4622      	mov	r2, r4
 800e98a:	4631      	mov	r1, r6
 800e98c:	bf28      	it	cs
 800e98e:	463a      	movcs	r2, r7
 800e990:	f7ff f850 	bl	800da34 <memcpy>
 800e994:	4631      	mov	r1, r6
 800e996:	4640      	mov	r0, r8
 800e998:	f7ff f862 	bl	800da60 <_free_r>
 800e99c:	e7e1      	b.n	800e962 <_realloc_r+0x1e>
 800e99e:	4635      	mov	r5, r6
 800e9a0:	e7df      	b.n	800e962 <_realloc_r+0x1e>

0800e9a2 <__ssputs_r>:
 800e9a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a6:	688e      	ldr	r6, [r1, #8]
 800e9a8:	429e      	cmp	r6, r3
 800e9aa:	4682      	mov	sl, r0
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	4690      	mov	r8, r2
 800e9b0:	461f      	mov	r7, r3
 800e9b2:	d838      	bhi.n	800ea26 <__ssputs_r+0x84>
 800e9b4:	898a      	ldrh	r2, [r1, #12]
 800e9b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9ba:	d032      	beq.n	800ea22 <__ssputs_r+0x80>
 800e9bc:	6825      	ldr	r5, [r4, #0]
 800e9be:	6909      	ldr	r1, [r1, #16]
 800e9c0:	eba5 0901 	sub.w	r9, r5, r1
 800e9c4:	6965      	ldr	r5, [r4, #20]
 800e9c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	444b      	add	r3, r9
 800e9d2:	106d      	asrs	r5, r5, #1
 800e9d4:	429d      	cmp	r5, r3
 800e9d6:	bf38      	it	cc
 800e9d8:	461d      	movcc	r5, r3
 800e9da:	0553      	lsls	r3, r2, #21
 800e9dc:	d531      	bpl.n	800ea42 <__ssputs_r+0xa0>
 800e9de:	4629      	mov	r1, r5
 800e9e0:	f7ff f8aa 	bl	800db38 <_malloc_r>
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	b950      	cbnz	r0, 800e9fe <__ssputs_r+0x5c>
 800e9e8:	230c      	movs	r3, #12
 800e9ea:	f8ca 3000 	str.w	r3, [sl]
 800e9ee:	89a3      	ldrh	r3, [r4, #12]
 800e9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f4:	81a3      	strh	r3, [r4, #12]
 800e9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9fe:	6921      	ldr	r1, [r4, #16]
 800ea00:	464a      	mov	r2, r9
 800ea02:	f7ff f817 	bl	800da34 <memcpy>
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea10:	81a3      	strh	r3, [r4, #12]
 800ea12:	6126      	str	r6, [r4, #16]
 800ea14:	6165      	str	r5, [r4, #20]
 800ea16:	444e      	add	r6, r9
 800ea18:	eba5 0509 	sub.w	r5, r5, r9
 800ea1c:	6026      	str	r6, [r4, #0]
 800ea1e:	60a5      	str	r5, [r4, #8]
 800ea20:	463e      	mov	r6, r7
 800ea22:	42be      	cmp	r6, r7
 800ea24:	d900      	bls.n	800ea28 <__ssputs_r+0x86>
 800ea26:	463e      	mov	r6, r7
 800ea28:	6820      	ldr	r0, [r4, #0]
 800ea2a:	4632      	mov	r2, r6
 800ea2c:	4641      	mov	r1, r8
 800ea2e:	f7ff ff63 	bl	800e8f8 <memmove>
 800ea32:	68a3      	ldr	r3, [r4, #8]
 800ea34:	1b9b      	subs	r3, r3, r6
 800ea36:	60a3      	str	r3, [r4, #8]
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	4433      	add	r3, r6
 800ea3c:	6023      	str	r3, [r4, #0]
 800ea3e:	2000      	movs	r0, #0
 800ea40:	e7db      	b.n	800e9fa <__ssputs_r+0x58>
 800ea42:	462a      	mov	r2, r5
 800ea44:	f7ff ff7e 	bl	800e944 <_realloc_r>
 800ea48:	4606      	mov	r6, r0
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d1e1      	bne.n	800ea12 <__ssputs_r+0x70>
 800ea4e:	6921      	ldr	r1, [r4, #16]
 800ea50:	4650      	mov	r0, sl
 800ea52:	f7ff f805 	bl	800da60 <_free_r>
 800ea56:	e7c7      	b.n	800e9e8 <__ssputs_r+0x46>

0800ea58 <_svfiprintf_r>:
 800ea58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5c:	4698      	mov	r8, r3
 800ea5e:	898b      	ldrh	r3, [r1, #12]
 800ea60:	061b      	lsls	r3, r3, #24
 800ea62:	b09d      	sub	sp, #116	; 0x74
 800ea64:	4607      	mov	r7, r0
 800ea66:	460d      	mov	r5, r1
 800ea68:	4614      	mov	r4, r2
 800ea6a:	d50e      	bpl.n	800ea8a <_svfiprintf_r+0x32>
 800ea6c:	690b      	ldr	r3, [r1, #16]
 800ea6e:	b963      	cbnz	r3, 800ea8a <_svfiprintf_r+0x32>
 800ea70:	2140      	movs	r1, #64	; 0x40
 800ea72:	f7ff f861 	bl	800db38 <_malloc_r>
 800ea76:	6028      	str	r0, [r5, #0]
 800ea78:	6128      	str	r0, [r5, #16]
 800ea7a:	b920      	cbnz	r0, 800ea86 <_svfiprintf_r+0x2e>
 800ea7c:	230c      	movs	r3, #12
 800ea7e:	603b      	str	r3, [r7, #0]
 800ea80:	f04f 30ff 	mov.w	r0, #4294967295
 800ea84:	e0d1      	b.n	800ec2a <_svfiprintf_r+0x1d2>
 800ea86:	2340      	movs	r3, #64	; 0x40
 800ea88:	616b      	str	r3, [r5, #20]
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea8e:	2320      	movs	r3, #32
 800ea90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea98:	2330      	movs	r3, #48	; 0x30
 800ea9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec44 <_svfiprintf_r+0x1ec>
 800ea9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eaa2:	f04f 0901 	mov.w	r9, #1
 800eaa6:	4623      	mov	r3, r4
 800eaa8:	469a      	mov	sl, r3
 800eaaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaae:	b10a      	cbz	r2, 800eab4 <_svfiprintf_r+0x5c>
 800eab0:	2a25      	cmp	r2, #37	; 0x25
 800eab2:	d1f9      	bne.n	800eaa8 <_svfiprintf_r+0x50>
 800eab4:	ebba 0b04 	subs.w	fp, sl, r4
 800eab8:	d00b      	beq.n	800ead2 <_svfiprintf_r+0x7a>
 800eaba:	465b      	mov	r3, fp
 800eabc:	4622      	mov	r2, r4
 800eabe:	4629      	mov	r1, r5
 800eac0:	4638      	mov	r0, r7
 800eac2:	f7ff ff6e 	bl	800e9a2 <__ssputs_r>
 800eac6:	3001      	adds	r0, #1
 800eac8:	f000 80aa 	beq.w	800ec20 <_svfiprintf_r+0x1c8>
 800eacc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eace:	445a      	add	r2, fp
 800ead0:	9209      	str	r2, [sp, #36]	; 0x24
 800ead2:	f89a 3000 	ldrb.w	r3, [sl]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f000 80a2 	beq.w	800ec20 <_svfiprintf_r+0x1c8>
 800eadc:	2300      	movs	r3, #0
 800eade:	f04f 32ff 	mov.w	r2, #4294967295
 800eae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eae6:	f10a 0a01 	add.w	sl, sl, #1
 800eaea:	9304      	str	r3, [sp, #16]
 800eaec:	9307      	str	r3, [sp, #28]
 800eaee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaf2:	931a      	str	r3, [sp, #104]	; 0x68
 800eaf4:	4654      	mov	r4, sl
 800eaf6:	2205      	movs	r2, #5
 800eaf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eafc:	4851      	ldr	r0, [pc, #324]	; (800ec44 <_svfiprintf_r+0x1ec>)
 800eafe:	f7f1 fb57 	bl	80001b0 <memchr>
 800eb02:	9a04      	ldr	r2, [sp, #16]
 800eb04:	b9d8      	cbnz	r0, 800eb3e <_svfiprintf_r+0xe6>
 800eb06:	06d0      	lsls	r0, r2, #27
 800eb08:	bf44      	itt	mi
 800eb0a:	2320      	movmi	r3, #32
 800eb0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb10:	0711      	lsls	r1, r2, #28
 800eb12:	bf44      	itt	mi
 800eb14:	232b      	movmi	r3, #43	; 0x2b
 800eb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb20:	d015      	beq.n	800eb4e <_svfiprintf_r+0xf6>
 800eb22:	9a07      	ldr	r2, [sp, #28]
 800eb24:	4654      	mov	r4, sl
 800eb26:	2000      	movs	r0, #0
 800eb28:	f04f 0c0a 	mov.w	ip, #10
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb32:	3b30      	subs	r3, #48	; 0x30
 800eb34:	2b09      	cmp	r3, #9
 800eb36:	d94e      	bls.n	800ebd6 <_svfiprintf_r+0x17e>
 800eb38:	b1b0      	cbz	r0, 800eb68 <_svfiprintf_r+0x110>
 800eb3a:	9207      	str	r2, [sp, #28]
 800eb3c:	e014      	b.n	800eb68 <_svfiprintf_r+0x110>
 800eb3e:	eba0 0308 	sub.w	r3, r0, r8
 800eb42:	fa09 f303 	lsl.w	r3, r9, r3
 800eb46:	4313      	orrs	r3, r2
 800eb48:	9304      	str	r3, [sp, #16]
 800eb4a:	46a2      	mov	sl, r4
 800eb4c:	e7d2      	b.n	800eaf4 <_svfiprintf_r+0x9c>
 800eb4e:	9b03      	ldr	r3, [sp, #12]
 800eb50:	1d19      	adds	r1, r3, #4
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	9103      	str	r1, [sp, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	bfbb      	ittet	lt
 800eb5a:	425b      	neglt	r3, r3
 800eb5c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb60:	9307      	strge	r3, [sp, #28]
 800eb62:	9307      	strlt	r3, [sp, #28]
 800eb64:	bfb8      	it	lt
 800eb66:	9204      	strlt	r2, [sp, #16]
 800eb68:	7823      	ldrb	r3, [r4, #0]
 800eb6a:	2b2e      	cmp	r3, #46	; 0x2e
 800eb6c:	d10c      	bne.n	800eb88 <_svfiprintf_r+0x130>
 800eb6e:	7863      	ldrb	r3, [r4, #1]
 800eb70:	2b2a      	cmp	r3, #42	; 0x2a
 800eb72:	d135      	bne.n	800ebe0 <_svfiprintf_r+0x188>
 800eb74:	9b03      	ldr	r3, [sp, #12]
 800eb76:	1d1a      	adds	r2, r3, #4
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	9203      	str	r2, [sp, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	bfb8      	it	lt
 800eb80:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb84:	3402      	adds	r4, #2
 800eb86:	9305      	str	r3, [sp, #20]
 800eb88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec54 <_svfiprintf_r+0x1fc>
 800eb8c:	7821      	ldrb	r1, [r4, #0]
 800eb8e:	2203      	movs	r2, #3
 800eb90:	4650      	mov	r0, sl
 800eb92:	f7f1 fb0d 	bl	80001b0 <memchr>
 800eb96:	b140      	cbz	r0, 800ebaa <_svfiprintf_r+0x152>
 800eb98:	2340      	movs	r3, #64	; 0x40
 800eb9a:	eba0 000a 	sub.w	r0, r0, sl
 800eb9e:	fa03 f000 	lsl.w	r0, r3, r0
 800eba2:	9b04      	ldr	r3, [sp, #16]
 800eba4:	4303      	orrs	r3, r0
 800eba6:	3401      	adds	r4, #1
 800eba8:	9304      	str	r3, [sp, #16]
 800ebaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebae:	4826      	ldr	r0, [pc, #152]	; (800ec48 <_svfiprintf_r+0x1f0>)
 800ebb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebb4:	2206      	movs	r2, #6
 800ebb6:	f7f1 fafb 	bl	80001b0 <memchr>
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d038      	beq.n	800ec30 <_svfiprintf_r+0x1d8>
 800ebbe:	4b23      	ldr	r3, [pc, #140]	; (800ec4c <_svfiprintf_r+0x1f4>)
 800ebc0:	bb1b      	cbnz	r3, 800ec0a <_svfiprintf_r+0x1b2>
 800ebc2:	9b03      	ldr	r3, [sp, #12]
 800ebc4:	3307      	adds	r3, #7
 800ebc6:	f023 0307 	bic.w	r3, r3, #7
 800ebca:	3308      	adds	r3, #8
 800ebcc:	9303      	str	r3, [sp, #12]
 800ebce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebd0:	4433      	add	r3, r6
 800ebd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ebd4:	e767      	b.n	800eaa6 <_svfiprintf_r+0x4e>
 800ebd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebda:	460c      	mov	r4, r1
 800ebdc:	2001      	movs	r0, #1
 800ebde:	e7a5      	b.n	800eb2c <_svfiprintf_r+0xd4>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	3401      	adds	r4, #1
 800ebe4:	9305      	str	r3, [sp, #20]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	f04f 0c0a 	mov.w	ip, #10
 800ebec:	4620      	mov	r0, r4
 800ebee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebf2:	3a30      	subs	r2, #48	; 0x30
 800ebf4:	2a09      	cmp	r2, #9
 800ebf6:	d903      	bls.n	800ec00 <_svfiprintf_r+0x1a8>
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d0c5      	beq.n	800eb88 <_svfiprintf_r+0x130>
 800ebfc:	9105      	str	r1, [sp, #20]
 800ebfe:	e7c3      	b.n	800eb88 <_svfiprintf_r+0x130>
 800ec00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec04:	4604      	mov	r4, r0
 800ec06:	2301      	movs	r3, #1
 800ec08:	e7f0      	b.n	800ebec <_svfiprintf_r+0x194>
 800ec0a:	ab03      	add	r3, sp, #12
 800ec0c:	9300      	str	r3, [sp, #0]
 800ec0e:	462a      	mov	r2, r5
 800ec10:	4b0f      	ldr	r3, [pc, #60]	; (800ec50 <_svfiprintf_r+0x1f8>)
 800ec12:	a904      	add	r1, sp, #16
 800ec14:	4638      	mov	r0, r7
 800ec16:	f3af 8000 	nop.w
 800ec1a:	1c42      	adds	r2, r0, #1
 800ec1c:	4606      	mov	r6, r0
 800ec1e:	d1d6      	bne.n	800ebce <_svfiprintf_r+0x176>
 800ec20:	89ab      	ldrh	r3, [r5, #12]
 800ec22:	065b      	lsls	r3, r3, #25
 800ec24:	f53f af2c 	bmi.w	800ea80 <_svfiprintf_r+0x28>
 800ec28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec2a:	b01d      	add	sp, #116	; 0x74
 800ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec30:	ab03      	add	r3, sp, #12
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	462a      	mov	r2, r5
 800ec36:	4b06      	ldr	r3, [pc, #24]	; (800ec50 <_svfiprintf_r+0x1f8>)
 800ec38:	a904      	add	r1, sp, #16
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	f7ff f9b8 	bl	800dfb0 <_printf_i>
 800ec40:	e7eb      	b.n	800ec1a <_svfiprintf_r+0x1c2>
 800ec42:	bf00      	nop
 800ec44:	0800f86c 	.word	0x0800f86c
 800ec48:	0800f876 	.word	0x0800f876
 800ec4c:	00000000 	.word	0x00000000
 800ec50:	0800e9a3 	.word	0x0800e9a3
 800ec54:	0800f872 	.word	0x0800f872

0800ec58 <_raise_r>:
 800ec58:	291f      	cmp	r1, #31
 800ec5a:	b538      	push	{r3, r4, r5, lr}
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	460d      	mov	r5, r1
 800ec60:	d904      	bls.n	800ec6c <_raise_r+0x14>
 800ec62:	2316      	movs	r3, #22
 800ec64:	6003      	str	r3, [r0, #0]
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}
 800ec6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec6e:	b112      	cbz	r2, 800ec76 <_raise_r+0x1e>
 800ec70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec74:	b94b      	cbnz	r3, 800ec8a <_raise_r+0x32>
 800ec76:	4620      	mov	r0, r4
 800ec78:	f000 f830 	bl	800ecdc <_getpid_r>
 800ec7c:	462a      	mov	r2, r5
 800ec7e:	4601      	mov	r1, r0
 800ec80:	4620      	mov	r0, r4
 800ec82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec86:	f000 b817 	b.w	800ecb8 <_kill_r>
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d00a      	beq.n	800eca4 <_raise_r+0x4c>
 800ec8e:	1c59      	adds	r1, r3, #1
 800ec90:	d103      	bne.n	800ec9a <_raise_r+0x42>
 800ec92:	2316      	movs	r3, #22
 800ec94:	6003      	str	r3, [r0, #0]
 800ec96:	2001      	movs	r0, #1
 800ec98:	e7e7      	b.n	800ec6a <_raise_r+0x12>
 800ec9a:	2400      	movs	r4, #0
 800ec9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eca0:	4628      	mov	r0, r5
 800eca2:	4798      	blx	r3
 800eca4:	2000      	movs	r0, #0
 800eca6:	e7e0      	b.n	800ec6a <_raise_r+0x12>

0800eca8 <raise>:
 800eca8:	4b02      	ldr	r3, [pc, #8]	; (800ecb4 <raise+0xc>)
 800ecaa:	4601      	mov	r1, r0
 800ecac:	6818      	ldr	r0, [r3, #0]
 800ecae:	f7ff bfd3 	b.w	800ec58 <_raise_r>
 800ecb2:	bf00      	nop
 800ecb4:	20000040 	.word	0x20000040

0800ecb8 <_kill_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4d07      	ldr	r5, [pc, #28]	; (800ecd8 <_kill_r+0x20>)
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	4608      	mov	r0, r1
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	602b      	str	r3, [r5, #0]
 800ecc6:	f7f1 ffd2 	bl	8000c6e <_kill>
 800ecca:	1c43      	adds	r3, r0, #1
 800eccc:	d102      	bne.n	800ecd4 <_kill_r+0x1c>
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	b103      	cbz	r3, 800ecd4 <_kill_r+0x1c>
 800ecd2:	6023      	str	r3, [r4, #0]
 800ecd4:	bd38      	pop	{r3, r4, r5, pc}
 800ecd6:	bf00      	nop
 800ecd8:	200019d8 	.word	0x200019d8

0800ecdc <_getpid_r>:
 800ecdc:	f7f1 bfbf 	b.w	8000c5e <_getpid>

0800ece0 <__sread>:
 800ece0:	b510      	push	{r4, lr}
 800ece2:	460c      	mov	r4, r1
 800ece4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece8:	f000 f89c 	bl	800ee24 <_read_r>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	bfab      	itete	ge
 800ecf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecf2:	89a3      	ldrhlt	r3, [r4, #12]
 800ecf4:	181b      	addge	r3, r3, r0
 800ecf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ecfa:	bfac      	ite	ge
 800ecfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ecfe:	81a3      	strhlt	r3, [r4, #12]
 800ed00:	bd10      	pop	{r4, pc}

0800ed02 <__swrite>:
 800ed02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed06:	461f      	mov	r7, r3
 800ed08:	898b      	ldrh	r3, [r1, #12]
 800ed0a:	05db      	lsls	r3, r3, #23
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	460c      	mov	r4, r1
 800ed10:	4616      	mov	r6, r2
 800ed12:	d505      	bpl.n	800ed20 <__swrite+0x1e>
 800ed14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed18:	2302      	movs	r3, #2
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f000 f868 	bl	800edf0 <_lseek_r>
 800ed20:	89a3      	ldrh	r3, [r4, #12]
 800ed22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed2a:	81a3      	strh	r3, [r4, #12]
 800ed2c:	4632      	mov	r2, r6
 800ed2e:	463b      	mov	r3, r7
 800ed30:	4628      	mov	r0, r5
 800ed32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed36:	f000 b817 	b.w	800ed68 <_write_r>

0800ed3a <__sseek>:
 800ed3a:	b510      	push	{r4, lr}
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed42:	f000 f855 	bl	800edf0 <_lseek_r>
 800ed46:	1c43      	adds	r3, r0, #1
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	bf15      	itete	ne
 800ed4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed56:	81a3      	strheq	r3, [r4, #12]
 800ed58:	bf18      	it	ne
 800ed5a:	81a3      	strhne	r3, [r4, #12]
 800ed5c:	bd10      	pop	{r4, pc}

0800ed5e <__sclose>:
 800ed5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed62:	f000 b813 	b.w	800ed8c <_close_r>
	...

0800ed68 <_write_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d07      	ldr	r5, [pc, #28]	; (800ed88 <_write_r+0x20>)
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	4608      	mov	r0, r1
 800ed70:	4611      	mov	r1, r2
 800ed72:	2200      	movs	r2, #0
 800ed74:	602a      	str	r2, [r5, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	f7fd fe3a 	bl	800c9f0 <_write>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	d102      	bne.n	800ed86 <_write_r+0x1e>
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	b103      	cbz	r3, 800ed86 <_write_r+0x1e>
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	bd38      	pop	{r3, r4, r5, pc}
 800ed88:	200019d8 	.word	0x200019d8

0800ed8c <_close_r>:
 800ed8c:	b538      	push	{r3, r4, r5, lr}
 800ed8e:	4d06      	ldr	r5, [pc, #24]	; (800eda8 <_close_r+0x1c>)
 800ed90:	2300      	movs	r3, #0
 800ed92:	4604      	mov	r4, r0
 800ed94:	4608      	mov	r0, r1
 800ed96:	602b      	str	r3, [r5, #0]
 800ed98:	f7f1 ffa0 	bl	8000cdc <_close>
 800ed9c:	1c43      	adds	r3, r0, #1
 800ed9e:	d102      	bne.n	800eda6 <_close_r+0x1a>
 800eda0:	682b      	ldr	r3, [r5, #0]
 800eda2:	b103      	cbz	r3, 800eda6 <_close_r+0x1a>
 800eda4:	6023      	str	r3, [r4, #0]
 800eda6:	bd38      	pop	{r3, r4, r5, pc}
 800eda8:	200019d8 	.word	0x200019d8

0800edac <_fstat_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	4d07      	ldr	r5, [pc, #28]	; (800edcc <_fstat_r+0x20>)
 800edb0:	2300      	movs	r3, #0
 800edb2:	4604      	mov	r4, r0
 800edb4:	4608      	mov	r0, r1
 800edb6:	4611      	mov	r1, r2
 800edb8:	602b      	str	r3, [r5, #0]
 800edba:	f7f1 ff9b 	bl	8000cf4 <_fstat>
 800edbe:	1c43      	adds	r3, r0, #1
 800edc0:	d102      	bne.n	800edc8 <_fstat_r+0x1c>
 800edc2:	682b      	ldr	r3, [r5, #0]
 800edc4:	b103      	cbz	r3, 800edc8 <_fstat_r+0x1c>
 800edc6:	6023      	str	r3, [r4, #0]
 800edc8:	bd38      	pop	{r3, r4, r5, pc}
 800edca:	bf00      	nop
 800edcc:	200019d8 	.word	0x200019d8

0800edd0 <_isatty_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d06      	ldr	r5, [pc, #24]	; (800edec <_isatty_r+0x1c>)
 800edd4:	2300      	movs	r3, #0
 800edd6:	4604      	mov	r4, r0
 800edd8:	4608      	mov	r0, r1
 800edda:	602b      	str	r3, [r5, #0]
 800eddc:	f7f1 ff9a 	bl	8000d14 <_isatty>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d102      	bne.n	800edea <_isatty_r+0x1a>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	b103      	cbz	r3, 800edea <_isatty_r+0x1a>
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	200019d8 	.word	0x200019d8

0800edf0 <_lseek_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d07      	ldr	r5, [pc, #28]	; (800ee10 <_lseek_r+0x20>)
 800edf4:	4604      	mov	r4, r0
 800edf6:	4608      	mov	r0, r1
 800edf8:	4611      	mov	r1, r2
 800edfa:	2200      	movs	r2, #0
 800edfc:	602a      	str	r2, [r5, #0]
 800edfe:	461a      	mov	r2, r3
 800ee00:	f7f1 ff93 	bl	8000d2a <_lseek>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_lseek_r+0x1e>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_lseek_r+0x1e>
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	200019d8 	.word	0x200019d8

0800ee14 <_malloc_usable_size_r>:
 800ee14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee18:	1f18      	subs	r0, r3, #4
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	bfbc      	itt	lt
 800ee1e:	580b      	ldrlt	r3, [r1, r0]
 800ee20:	18c0      	addlt	r0, r0, r3
 800ee22:	4770      	bx	lr

0800ee24 <_read_r>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	4d07      	ldr	r5, [pc, #28]	; (800ee44 <_read_r+0x20>)
 800ee28:	4604      	mov	r4, r0
 800ee2a:	4608      	mov	r0, r1
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	2200      	movs	r2, #0
 800ee30:	602a      	str	r2, [r5, #0]
 800ee32:	461a      	mov	r2, r3
 800ee34:	f7f1 ff35 	bl	8000ca2 <_read>
 800ee38:	1c43      	adds	r3, r0, #1
 800ee3a:	d102      	bne.n	800ee42 <_read_r+0x1e>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	b103      	cbz	r3, 800ee42 <_read_r+0x1e>
 800ee40:	6023      	str	r3, [r4, #0]
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
 800ee44:	200019d8 	.word	0x200019d8

0800ee48 <_init>:
 800ee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4a:	bf00      	nop
 800ee4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee4e:	bc08      	pop	{r3}
 800ee50:	469e      	mov	lr, r3
 800ee52:	4770      	bx	lr

0800ee54 <_fini>:
 800ee54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee56:	bf00      	nop
 800ee58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee5a:	bc08      	pop	{r3}
 800ee5c:	469e      	mov	lr, r3
 800ee5e:	4770      	bx	lr
