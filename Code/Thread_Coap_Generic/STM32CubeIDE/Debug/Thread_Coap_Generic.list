
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9b4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c4e0  0800c4e0  0001c4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c4e4  0800c4e4  0001c4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000008  0800c4e8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 SYSTEM_DRIVER_CONTEXT 00000011  200000a4  0800c584  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006fc  200000b8  0800c595  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 00002804  200007b4  0800c595  000207b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 13 .debug_info   0003acc2  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074ff  00000000  00000000  0005ada7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f58  00000000  00000000  000622a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c30  00000000  00000000  00065200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032cb6  00000000  00000000  00067e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ad43  00000000  00000000  0009aae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114633  00000000  00000000  000d5829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e9e5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cc1c  00000000  00000000  001e9eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000b8 	.word	0x200000b8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800badc 	.word	0x0800badc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000bc 	.word	0x200000bc
 800017c:	0800badc 	.word	0x0800badc

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800025c:	23ff      	movs	r3, #255	; 0xff
 800025e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000260:	2300      	movs	r3, #0
 8000262:	81fb      	strh	r3, [r7, #14]
 8000264:	e021      	b.n	80002aa <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000266:	89fb      	ldrh	r3, [r7, #14]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	4053      	eors	r3, r2
 8000272:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000274:	2308      	movs	r3, #8
 8000276:	733b      	strb	r3, [r7, #12]
 8000278:	e011      	b.n	800029e <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800027a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800027e:	2b00      	cmp	r3, #0
 8000280:	da07      	bge.n	8000292 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000282:	7b7b      	ldrb	r3, [r7, #13]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b25b      	sxtb	r3, r3
 8000288:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800028c:	b25b      	sxtb	r3, r3
 800028e:	737b      	strb	r3, [r7, #13]
 8000290:	e002      	b.n	8000298 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000298:	7b3b      	ldrb	r3, [r7, #12]
 800029a:	3b01      	subs	r3, #1
 800029c:	733b      	strb	r3, [r7, #12]
 800029e:	7b3b      	ldrb	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1ea      	bne.n	800027a <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80002a4:	89fb      	ldrh	r3, [r7, #14]
 80002a6:	3301      	adds	r3, #1
 80002a8:	81fb      	strh	r3, [r7, #14]
 80002aa:	89fa      	ldrh	r2, [r7, #14]
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3d9      	bcc.n	8000266 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
 80002cc:	4613      	mov	r3, r2
 80002ce:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	4619      	mov	r1, r3
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ffbb 	bl	8000250 <sensirion_common_generate_crc>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	787b      	ldrb	r3, [r7, #1]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d002      	beq.n	80002ea <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80002e4:	f04f 33ff 	mov.w	r3, #4294967295
 80002e8:	e000      	b.n	80002ec <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	4413      	add	r3, r2
 800030c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000316:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f8a2 	bl	8000468 <sensirion_i2c_read>
 8000324:	4603      	mov	r3, r0
 8000326:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800032a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000332:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000336:	e047      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000338:	2300      	movs	r3, #0
 800033a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800033e:	2300      	movs	r3, #0
 8000340:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000344:	e039      	b.n	80003ba <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000346:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800034a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800034c:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800034e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000352:	3302      	adds	r3, #2
 8000354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000356:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	2102      	movs	r1, #2
 800035e:	f7ff ffaf 	bl	80002c0 <sensirion_common_check_crc>
 8000362:	4603      	mov	r3, r0
 8000364:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 8000368:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000370:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000374:	e028      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8000376:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800037a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800037c:	441a      	add	r2, r3
 800037e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000382:	1c59      	adds	r1, r3, #1
 8000384:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 8000388:	4619      	mov	r1, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	440b      	add	r3, r1
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000396:	3301      	adds	r3, #1
 8000398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800039a:	441a      	add	r2, r3
 800039c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80003a0:	1c59      	adds	r1, r3, #1
 80003a2:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80003a6:	4619      	mov	r1, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	440b      	add	r3, r1
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80003b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80003b4:	3303      	adds	r3, #3
 80003b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80003ba:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80003be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3bf      	bcc.n	8000346 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3758      	adds	r7, #88	; 0x58
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80003e0:	88ba      	ldrh	r2, [r7, #4]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	6839      	ldr	r1, [r7, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff84 	bl	80002f4 <sensirion_i2c_read_words_as_bytes>
 80003ec:	4603      	mov	r3, r0
 80003ee:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80003f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sensirion_i2c_read_words+0x2e>
        return ret;
 80003f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003fc:	e020      	b.n	8000440 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e017      	b.n	8000434 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	4413      	add	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21a      	sxth	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	3301      	adds	r3, #1
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b21b      	sxth	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b219      	sxth	r1, r3
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	b28a      	uxth	r2, r1
 800042c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	3301      	adds	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	b29b      	uxth	r3, r3
 8000438:	88ba      	ldrh	r2, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	d8e2      	bhi.n	8000404 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <sensirion_i2c_init+0x1c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000d4 	.word	0x200000d4

08000468 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <sensirion_i2c_read+0x34>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	b29b      	uxth	r3, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b299      	uxth	r1, r3
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	2205      	movs	r2, #5
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	f004 fb66 	bl	8004b5c <HAL_I2C_Master_Receive>
 8000490:	4603      	mov	r3, r0
 8000492:	b25b      	sxtb	r3, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000d4 	.word	0x200000d4

080004a0 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	4613      	mov	r3, r2
 80004ae:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <sensirion_i2c_write+0x34>)
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	b299      	uxth	r1, r3
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	2205      	movs	r2, #5
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	f004 fa56 	bl	8004974 <HAL_I2C_Master_Transmit>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b25b      	sxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000d4 	.word	0x200000d4

080004d8 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004e4:	fba2 2303 	umull	r2, r3, r2, r3
 80004e8:	099b      	lsrs	r3, r3, #6
 80004ea:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004f0:	fba3 1302 	umull	r1, r3, r3, r2
 80004f4:	099b      	lsrs	r3, r3, #6
 80004f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <sensirion_sleep_usec+0x32>
        msec++;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f001 fda6 	bl	800205c <HAL_Delay>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	10624dd3 	.word	0x10624dd3

0800051c <sht4x_activate_medium_heater>:
#define SHT_DRV_VERSION_STR "5.3.0"
static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


int16_t sht4x_activate_medium_heater(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]
    buffer[offset++] = (uint8_t)0x24;
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	81fa      	strh	r2, [r7, #14]
 800052c:	3310      	adds	r3, #16
 800052e:	443b      	add	r3, r7
 8000530:	2224      	movs	r2, #36	; 0x24
 8000532:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write(SHT4X_ADDRESS, &buffer[0], offset);
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	2044      	movs	r0, #68	; 0x44
 800053e:	f7ff ffaf 	bl	80004a0 <sensirion_i2c_write>
 8000542:	4603      	mov	r3, r0
 8000544:	81bb      	strh	r3, [r7, #12]
    if (error) {
 8000546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <sht4x_activate_medium_heater+0x38>
        return error;
 800054e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <sht4x_activate_medium_heater+0x40>
    }

    sensirion_sleep_usec(110000);
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <sht4x_activate_medium_heater+0x48>)
 8000556:	f7ff ffbf 	bl	80004d8 <sensirion_sleep_usec>

    return NO_ERROR;
 800055a:	2300      	movs	r3, #0
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	0001adb0 	.word	0x0001adb0

08000568 <sht4x_measure>:
        return ret;
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
    return sht4x_read(temperature, humidity);
}

int16_t sht4x_measure(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	4904      	ldr	r1, [pc, #16]	; (8000580 <sht4x_measure+0x18>)
 8000570:	2044      	movs	r0, #68	; 0x44
 8000572:	f7ff ff95 	bl	80004a0 <sensirion_i2c_write>
 8000576:	4603      	mov	r3, r0
 8000578:	b21b      	sxth	r3, r3
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000008 	.word	0x20000008

08000584 <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2202      	movs	r2, #2
 8000594:	4619      	mov	r1, r3
 8000596:	2044      	movs	r0, #68	; 0x44
 8000598:	f7ff ff1a 	bl	80003d0 <sensirion_i2c_read_words>
 800059c:	4603      	mov	r3, r0
 800059e:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 80005a0:	893b      	ldrh	r3, [r7, #8]
 80005a2:	461a      	mov	r2, r3
 80005a4:	f245 5373 	movw	r3, #21875	; 0x5573
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	135b      	asrs	r3, r3, #13
 80005ae:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80005b2:	3bc8      	subs	r3, #200	; 0xc8
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 80005b8:	897b      	ldrh	r3, [r7, #10]
 80005ba:	461a      	mov	r2, r3
 80005bc:	f643 5309 	movw	r3, #15625	; 0x3d09
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	135b      	asrs	r3, r3, #13
 80005c6:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 80005ca:	3b10      	subs	r3, #16
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	6013      	str	r3, [r2, #0]

    return ret;
 80005d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d007      	beq.n	80005fc <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <sht4x_enable_low_power_mode+0x3c>)
 80005ee:	22e0      	movs	r2, #224	; 0xe0
 80005f0:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <sht4x_enable_low_power_mode+0x40>)
 80005f4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80005f8:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 80005fa:	e006      	b.n	800060a <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <sht4x_enable_low_power_mode+0x3c>)
 80005fe:	22fd      	movs	r2, #253	; 0xfd
 8000600:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <sht4x_enable_low_power_mode+0x40>)
 8000604:	f242 7210 	movw	r2, #10000	; 0x2710
 8000608:	801a      	strh	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008
 800061c:	2000000a 	.word	0x2000000a

08000620 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <platform_stts22h_init+0x3c>)
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <platform_stts22h_init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <platform_stts22h_init+0x3c>)
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <platform_stts22h_init+0x44>)
 8000632:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 8000634:	4a09      	ldr	r2, [pc, #36]	; (800065c <platform_stts22h_init+0x3c>)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <platform_stts22h_init+0x48>)
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <platform_stts22h_init+0x3c>)
 800063e:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <platform_stts22h_init+0x4c>)
 8000642:	f000 f944 	bl	80008ce <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <platform_stts22h_init+0x4c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2ba0      	cmp	r3, #160	; 0xa0
 800064c:	bf0c      	ite	eq
 800064e:	2301      	moveq	r3, #1
 8000650:	2300      	movne	r3, #0
 8000652:	b2db      	uxtb	r3, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000d8 	.word	0x200000d8
 8000660:	08000671 	.word	0x08000671
 8000664:	080006a7 	.word	0x080006a7
 8000668:	200000e8 	.word	0x200000e8
 800066c:	200000ec 	.word	0x200000ec

08000670 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	461a      	mov	r2, r3
 800067c:	460b      	mov	r3, r1
 800067e:	72fb      	strb	r3, [r7, #11]
 8000680:	4613      	mov	r3, r2
 8000682:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	b29b      	uxth	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b299      	uxth	r1, r3
 800068c:	893b      	ldrh	r3, [r7, #8]
 800068e:	2205      	movs	r2, #5
 8000690:	9200      	str	r2, [sp, #0]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f004 fa61 	bl	8004b5c <HAL_I2C_Master_Receive>
 800069a:	4603      	mov	r3, r0
 800069c:	b25b      	sxtb	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af02      	add	r7, sp, #8
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	461a      	mov	r2, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	72fb      	strb	r3, [r7, #11]
 80006b6:	4613      	mov	r3, r2
 80006b8:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	b299      	uxth	r1, r3
 80006c2:	893b      	ldrh	r3, [r7, #8]
 80006c4:	2205      	movs	r2, #5
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f004 f952 	bl	8004974 <HAL_I2C_Master_Transmit>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b25b      	sxtb	r3, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <stts22h_read_reg+0x30>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	685c      	ldr	r4, [r3, #4]
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <stts22h_read_reg+0x30>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68d8      	ldr	r0, [r3, #12]
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	79f9      	ldrb	r1, [r7, #7]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	47a0      	blx	r4
 8000700:	60f8      	str	r0, [r7, #12]

  return ret;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	200000e8 	.word	0x200000e8

08000710 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <stts22h_write_reg+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681c      	ldr	r4, [r3, #0]
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <stts22h_write_reg+0x30>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68d8      	ldr	r0, [r3, #12]
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	79f9      	ldrb	r1, [r7, #7]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	47a0      	blx	r4
 8000734:	60f8      	str	r0, [r7, #12]

  return ret;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	200000e8 	.word	0x200000e8

08000744 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	2004      	movs	r0, #4
 8000758:	f7ff ffc0 	bl	80006dc <stts22h_read_reg>
 800075c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d107      	bne.n	8000774 <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	200c      	movs	r0, #12
 800076e:	f7ff ffb5 	bl	80006dc <stts22h_read_reg>
 8000772:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d11d      	bne.n	80007b6 <stts22h_temp_data_rate_set+0x72>
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d11a      	bne.n	80007b6 <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000780:	7c3b      	ldrb	r3, [r7, #16]
 8000782:	f043 0302 	orr.w	r3, r3, #2
 8000786:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	200c      	movs	r0, #12
 8000792:	f7ff ffbd 	bl	8000710 <stts22h_write_reg>
 8000796:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10b      	bne.n	80007b6 <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800079e:	7c3b      	ldrb	r3, [r7, #16]
 80007a0:	f36f 0341 	bfc	r3, #1, #1
 80007a4:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	200c      	movs	r0, #12
 80007b0:	f7ff ffae 	bl	8000710 <stts22h_write_reg>
 80007b4:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d008      	beq.n	80007ce <stts22h_temp_data_rate_set+0x8a>
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d005      	beq.n	80007ce <stts22h_temp_data_rate_set+0x8a>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b22      	cmp	r3, #34	; 0x22
 80007c6:	d002      	beq.n	80007ce <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b32      	cmp	r3, #50	; 0x32
 80007cc:	d123      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80007ce:	7b3b      	ldrb	r3, [r7, #12]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d11d      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d11a      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80007e0:	7c3b      	ldrb	r3, [r7, #16]
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2201      	movs	r2, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	200c      	movs	r0, #12
 80007f2:	f7ff ff8d 	bl	8000710 <stts22h_write_reg>
 80007f6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 80007fe:	7c3b      	ldrb	r3, [r7, #16]
 8000800:	f36f 0341 	bfc	r3, #1, #1
 8000804:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	200c      	movs	r0, #12
 8000810:	f7ff ff7e 	bl	8000710 <stts22h_write_reg>
 8000814:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b04      	cmp	r3, #4
 800081a:	d125      	bne.n	8000868 <stts22h_temp_data_rate_set+0x124>
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d122      	bne.n	8000868 <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000822:	7c3b      	ldrb	r3, [r7, #16]
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 800082a:	7c3b      	ldrb	r3, [r7, #16]
 800082c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000830:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	200c      	movs	r0, #12
 800083c:	f7ff ff68 	bl	8000710 <stts22h_write_reg>
 8000840:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10f      	bne.n	8000868 <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000848:	7c3b      	ldrb	r3, [r7, #16]
 800084a:	f36f 0341 	bfc	r3, #1, #1
 800084e:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000850:	7c3b      	ldrb	r3, [r7, #16]
 8000852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000856:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	200c      	movs	r0, #12
 8000862:	f7ff ff55 	bl	8000710 <stts22h_write_reg>
 8000866:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d12a      	bne.n	80008c4 <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	7b3b      	ldrb	r3, [r7, #12]
 8000878:	f362 0300 	bfi	r3, r2, #0, #1
 800087c:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	7b3b      	ldrb	r3, [r7, #12]
 800088a:	f362 0382 	bfi	r3, r2, #2, #1
 800088e:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	7b3b      	ldrb	r3, [r7, #12]
 800089c:	f362 13c7 	bfi	r3, r2, #7, #1
 80008a0:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	f003 0303 	and.w	r3, r3, #3
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	7b3b      	ldrb	r3, [r7, #12]
 80008ae:	f362 1305 	bfi	r3, r2, #4, #2
 80008b2:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	2004      	movs	r0, #4
 80008be:	f7ff ff27 	bl	8000710 <stts22h_write_reg>
 80008c2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80008c4:	697b      	ldr	r3, [r7, #20]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fefe 	bl	80006dc <stts22h_read_reg>
 80008e0:	60f8      	str	r0, [r7, #12]

  return ret;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80008ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f0:	3304      	adds	r3, #4

080008f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80008f6:	d3f9      	bcc.n	80008ec <CopyDataInit>
  bx lr
 80008f8:	4770      	bx	lr

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80008fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80008fc:	3004      	adds	r0, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80008fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>
  bx lr
 8000902:	4770      	bx	lr

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f003 f8c0 	bl	8003a8c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <LoopForever+0x8>)
 800090e:	490c      	ldr	r1, [pc, #48]	; (8000940 <LoopForever+0xc>)
 8000910:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <LoopForever+0x10>)
 8000912:	2300      	movs	r3, #0
 8000914:	f7ff ffed 	bl	80008f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <LoopForever+0x14>)
 800091a:	490c      	ldr	r1, [pc, #48]	; (800094c <LoopForever+0x18>)
 800091c:	2300      	movs	r3, #0
 800091e:	f7ff ffee 	bl	80008fe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <LoopForever+0x1c>)
 8000924:	490b      	ldr	r1, [pc, #44]	; (8000954 <LoopForever+0x20>)
 8000926:	2300      	movs	r3, #0
 8000928:	f7ff ffe9 	bl	80008fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092c:	f009 fef2 	bl	800a714 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000930:	f002 fb8a 	bl	8003048 <main>

08000934 <LoopForever>:

LoopForever:
  b LoopForever
 8000934:	e7fe      	b.n	8000934 <LoopForever>
 8000936:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000938:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 800093c:	20000008 	.word	0x20000008
 8000940:	200000a4 	.word	0x200000a4
 8000944:	0800c4e8 	.word	0x0800c4e8
  INIT_BSS _sbss, _ebss
 8000948:	200000b8 	.word	0x200000b8
 800094c:	200007b4 	.word	0x200007b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000950:	200300e8 	.word	0x200300e8
 8000954:	20030c6a 	.word	0x20030c6a

08000958 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_IRQHandler>

0800095a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  return 1;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_kill>:

int _kill(int pid, int sig)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000974:	f009 feb6 	bl	800a6e4 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	2216      	movs	r2, #22
 800097c:	601a      	str	r2, [r3, #0]
  return -1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_exit>:

void _exit (int status)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000992:	f04f 31ff 	mov.w	r1, #4294967295
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffe7 	bl	800096a <_kill>
  while (1) {}    /* Make sure we hang here */
 800099c:	e7fe      	b.n	800099c <_exit+0x12>

0800099e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e00a      	b.n	80009c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b0:	f3af 8000 	nop.w
 80009b4:	4601      	mov	r1, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	b2ca      	uxtb	r2, r1
 80009be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3301      	adds	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dbf0      	blt.n	80009b0 <_read+0x12>
  }

  return len;
 80009ce:	687b      	ldr	r3, [r7, #4]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e009      	b.n	80009fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	60ba      	str	r2, [r7, #8]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dbf1      	blt.n	80009ea <_write+0x12>
  }
  return len;
 8000a06:	687b      	ldr	r3, [r7, #4]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_close>:

int _close(int file)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a38:	605a      	str	r2, [r3, #4]
  return 0;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_isatty>:

int _isatty(int file)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a50:	2301      	movs	r3, #1
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b085      	sub	sp, #20
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f009 fe1c 	bl	800a6e4 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20024000 	.word	0x20024000
 8000ad8:	00002000 	.word	0x00002000
 8000adc:	200000f0 	.word	0x200000f0
 8000ae0:	200007b8 	.word	0x200007b8

08000ae4 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000af0:	2300      	movs	r3, #0
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f007 fd7f 	bl	80085fa <otCoapSendResponseWithParameters>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <APP_THREAD_Init>:
static otInstance *sInstance = NULL;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN APP_THREAD_INIT_1 */

	/* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2002      	movs	r0, #2
 8000b12:	f009 fa77 	bl	800a004 <UTIL_LPM_SetStopMode>
	SHCI_CmdStatus_t ThreadInitStatus;

	/* Check the compatibility with the Coprocessor Wireless Firmware loaded */
	APP_THREAD_CheckWirelessFirmwareInfo();
 8000b16:	f000 fa53 	bl	8000fc0 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

	/* Register cmdbuffer */
	APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000b1a:	4829      	ldr	r0, [pc, #164]	; (8000bc0 <APP_THREAD_Init+0xb8>)
 8000b1c:	f000 fcae 	bl	800147c <APP_THREAD_RegisterCmdBuffer>

	/**
	 * Do not allow standby in the application
	 */
	UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000b20:	2101      	movs	r1, #1
 8000b22:	2002      	movs	r0, #2
 8000b24:	f009 fa9e 	bl	800a064 <UTIL_LPM_SetOffMode>

	/* Init config buffer and call TL_THREAD_Init */
	APP_THREAD_TL_THREAD_INIT();
 8000b28:	f000 fd5a 	bl	80015e0 <APP_THREAD_TL_THREAD_INIT>

	/* Configure UART for sending CLI command from M4 */
	APP_THREAD_Init_UART_CLI();
 8000b2c:	f000 fd50 	bl	80015d0 <APP_THREAD_Init_UART_CLI>

	/* Send Thread start system cmd to M0 */
	ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000b30:	f008 fd33 	bl	800959a <SHCI_C2_THREAD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(ThreadInitStatus);

	/* Register task */
	/* Create the different tasks */
	UTIL_SEQ_RegTask(1 << (uint32_t) CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU,
 8000b38:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <APP_THREAD_Init+0xbc>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f009 fbf3 	bl	800a328 <UTIL_SEQ_RegTask>
			APP_THREAD_ProcessMsgM0ToM4);

	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated,
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <APP_THREAD_Init+0xc0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	4921      	ldr	r1, [pc, #132]	; (8000bcc <APP_THREAD_Init+0xc4>)
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f002 f821 	bl	8002b90 <HW_TS_Create>
			(HW_TS_pTimerCb_t) APP_THREAD_SendCoapMsg);
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &setThreadLpTimerId, hw_ts_SingleShot,
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <APP_THREAD_Init+0xc8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	4920      	ldr	r1, [pc, #128]	; (8000bd4 <APP_THREAD_Init+0xcc>)
 8000b54:	2000      	movs	r0, #0
 8000b56:	f002 f81b 	bl	8002b90 <HW_TS_Create>
			APP_THREAD_SetSleepyEndDeviceMode);
	HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <APP_THREAD_Init+0xc4>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	f24f 0223 	movw	r2, #61475	; 0xf023
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 f911 	bl	8002d8c <HW_TS_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <APP_THREAD_Init+0xd0>)
 8000b70:	f003 fdf8 	bl	8004764 <HAL_GPIO_WritePin>

	sInstance = otInstanceInitSingle();
 8000b74:	f007 fda9 	bl	80086ca <otInstanceInitSingle>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <APP_THREAD_Init+0xd4>)
 8000b7c:	6013      	str	r3, [r2, #0]
	assert(sInstance);
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <APP_THREAD_Init+0xd4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d105      	bne.n	8000b92 <APP_THREAD_Init+0x8a>
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <APP_THREAD_Init+0xd8>)
 8000b88:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <APP_THREAD_Init+0xdc>)
 8000b8a:	21d1      	movs	r1, #209	; 0xd1
 8000b8c:	4816      	ldr	r0, [pc, #88]	; (8000be8 <APP_THREAD_Init+0xe0>)
 8000b8e:	f009 fd8b 	bl	800a6a8 <__assert_func>
	/* USER CODE BEGIN INIT TASKS */
	APP_THREAD_SetSleepyEndDeviceMode();
 8000b92:	f000 f8e1 	bl	8000d58 <APP_THREAD_SetSleepyEndDeviceMode>
	/* Initialize and configure the Thread device*/
	otPlatRadioSetTransmitPower(sInstance, 6);
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <APP_THREAD_Init+0xd4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2106      	movs	r1, #6
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f008 fcc9 	bl	8009534 <otPlatRadioSetTransmitPower>
	APP_THREAD_DeviceConfig();
 8000ba2:	f000 f933 	bl	8000e0c <APP_THREAD_DeviceConfig>
	//appSrpInit();
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f009 fa2b 	bl	800a004 <UTIL_LPM_SetStopMode>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f008 fd1e 	bl	80095f2 <SHCI_C2_RADIO_AllowLowPower>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200300e8 	.word	0x200300e8
 8000bc4:	08001675 	.word	0x08001675
 8000bc8:	08001249 	.word	0x08001249
 8000bcc:	20000108 	.word	0x20000108
 8000bd0:	08000d59 	.word	0x08000d59
 8000bd4:	20000109 	.word	0x20000109
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	20000248 	.word	0x20000248
 8000be0:	0800bb00 	.word	0x0800bb00
 8000be4:	0800c33c 	.word	0x0800c33c
 8000be8:	0800bb0c 	.word	0x0800bb0c

08000bec <APP_THREAD_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN APP_THREAD_Error_1 */

	/* USER CODE END APP_THREAD_Error_1 */
	switch (ErrId)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b16      	cmp	r3, #22
 8000bfa:	f200 8081 	bhi.w	8000d00 <APP_THREAD_Error+0x114>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <APP_THREAD_Error+0x18>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c61 	.word	0x08000c61
 8000c08:	08000c6b 	.word	0x08000c6b
 8000c0c:	08000c75 	.word	0x08000c75
 8000c10:	08000c7f 	.word	0x08000c7f
 8000c14:	08000c89 	.word	0x08000c89
 8000c18:	08000c93 	.word	0x08000c93
 8000c1c:	08000c9d 	.word	0x08000c9d
 8000c20:	08000ca7 	.word	0x08000ca7
 8000c24:	08000cbb 	.word	0x08000cbb
 8000c28:	08000cc5 	.word	0x08000cc5
 8000c2c:	08000ccf 	.word	0x08000ccf
 8000c30:	08000cd9 	.word	0x08000cd9
 8000c34:	08000d01 	.word	0x08000d01
 8000c38:	08000ce3 	.word	0x08000ce3
 8000c3c:	08000ced 	.word	0x08000ced
 8000c40:	08000d01 	.word	0x08000d01
 8000c44:	08000d01 	.word	0x08000d01
 8000c48:	08000d01 	.word	0x08000d01
 8000c4c:	08000d01 	.word	0x08000d01
 8000c50:	08000d01 	.word	0x08000d01
 8000c54:	08000cf7 	.word	0x08000cf7
 8000c58:	08000d01 	.word	0x08000d01
 8000c5c:	08000cb1 	.word	0x08000cb1
	{
	case ERR_REC_MULTI_MSG_FROM_M0:
		APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	482c      	ldr	r0, [pc, #176]	; (8000d14 <APP_THREAD_Error+0x128>)
 8000c64:	f000 f998 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000c68:	e04f      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_STATE_CB:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ", ErrCode);
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	482a      	ldr	r0, [pc, #168]	; (8000d18 <APP_THREAD_Error+0x12c>)
 8000c6e:	f000 f993 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000c72:	e04a      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_CHANNEL:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ", ErrCode);
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	4829      	ldr	r0, [pc, #164]	; (8000d1c <APP_THREAD_Error+0x130>)
 8000c78:	f000 f98e 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000c7c:	e045      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_PANID:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ", ErrCode);
 8000c7e:	6839      	ldr	r1, [r7, #0]
 8000c80:	4827      	ldr	r0, [pc, #156]	; (8000d20 <APP_THREAD_Error+0x134>)
 8000c82:	f000 f989 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000c86:	e040      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_IPV6_ENABLE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ", ErrCode);
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	4826      	ldr	r0, [pc, #152]	; (8000d24 <APP_THREAD_Error+0x138>)
 8000c8c:	f000 f984 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000c90:	e03b      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_START:
		APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	4824      	ldr	r0, [pc, #144]	; (8000d28 <APP_THREAD_Error+0x13c>)
 8000c96:	f000 f97f 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000c9a:	e036      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_ERASE_PERSISTENT_INFO:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",
 8000c9c:	6839      	ldr	r1, [r7, #0]
 8000c9e:	4823      	ldr	r0, [pc, #140]	; (8000d2c <APP_THREAD_Error+0x140>)
 8000ca0:	f000 f97a 	bl	8000f98 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ca4:	e031      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_NETWORK_KEY:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ", ErrCode);
 8000ca6:	6839      	ldr	r1, [r7, #0]
 8000ca8:	4821      	ldr	r0, [pc, #132]	; (8000d30 <APP_THREAD_Error+0x144>)
 8000caa:	f000 f975 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000cae:	e02c      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_CHECK_WIRELESS:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ", ErrCode);
 8000cb0:	6839      	ldr	r1, [r7, #0]
 8000cb2:	4820      	ldr	r0, [pc, #128]	; (8000d34 <APP_THREAD_Error+0x148>)
 8000cb4:	f000 f970 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000cb8:	e027      	b.n	8000d0a <APP_THREAD_Error+0x11e>
		/* USER CODE BEGIN APP_THREAD_Error_2 */
	case ERR_THREAD_COAP_START:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ", ErrCode);
 8000cba:	6839      	ldr	r1, [r7, #0]
 8000cbc:	481e      	ldr	r0, [pc, #120]	; (8000d38 <APP_THREAD_Error+0x14c>)
 8000cbe:	f000 f96b 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000cc2:	e022      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_ADD_RESSOURCE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",
 8000cc4:	6839      	ldr	r1, [r7, #0]
 8000cc6:	481d      	ldr	r0, [pc, #116]	; (8000d3c <APP_THREAD_Error+0x150>)
 8000cc8:	f000 f966 	bl	8000f98 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ccc:	e01d      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MESSAGE_READ:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ", ErrCode);
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	481b      	ldr	r0, [pc, #108]	; (8000d40 <APP_THREAD_Error+0x154>)
 8000cd2:	f000 f961 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000cd6:	e018      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_RESPONSE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",
 8000cd8:	6839      	ldr	r1, [r7, #0]
 8000cda:	481a      	ldr	r0, [pc, #104]	; (8000d44 <APP_THREAD_Error+0x158>)
 8000cdc:	f000 f95c 	bl	8000f98 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ce0:	e013      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_APPEND:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ", ErrCode);
 8000ce2:	6839      	ldr	r1, [r7, #0]
 8000ce4:	4818      	ldr	r0, [pc, #96]	; (8000d48 <APP_THREAD_Error+0x15c>)
 8000ce6:	f000 f957 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000cea:	e00e      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_REQUEST:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ", ErrCode);
 8000cec:	6839      	ldr	r1, [r7, #0]
 8000cee:	4817      	ldr	r0, [pc, #92]	; (8000d4c <APP_THREAD_Error+0x160>)
 8000cf0:	f000 f952 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000cf4:	e009      	b.n	8000d0a <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MSG_COMPARE_FAILED:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	4815      	ldr	r0, [pc, #84]	; (8000d50 <APP_THREAD_Error+0x164>)
 8000cfa:	f000 f94d 	bl	8000f98 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000cfe:	e004      	b.n	8000d0a <APP_THREAD_Error+0x11e>
		/* USER CODE END APP_THREAD_Error_2 */
	default:
		APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <APP_THREAD_Error+0x168>)
 8000d04:	f000 f948 	bl	8000f98 <APP_THREAD_TraceError>
		break;
 8000d08:	bf00      	nop
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	0800bb90 	.word	0x0800bb90
 8000d18:	0800bbb4 	.word	0x0800bbb4
 8000d1c:	0800bbd8 	.word	0x0800bbd8
 8000d20:	0800bbf8 	.word	0x0800bbf8
 8000d24:	0800bc18 	.word	0x0800bc18
 8000d28:	0800bc38 	.word	0x0800bc38
 8000d2c:	0800bc54 	.word	0x0800bc54
 8000d30:	0800bc80 	.word	0x0800bc80
 8000d34:	0800bca4 	.word	0x0800bca4
 8000d38:	0800bcc8 	.word	0x0800bcc8
 8000d3c:	0800bce8 	.word	0x0800bce8
 8000d40:	0800bd10 	.word	0x0800bd10
 8000d44:	0800bd34 	.word	0x0800bd34
 8000d48:	0800bd5c 	.word	0x0800bd5c
 8000d4c:	0800bd7c 	.word	0x0800bd7c
 8000d50:	0800bda4 	.word	0x0800bda4
 8000d54:	0800bdcc 	.word	0x0800bdcc

08000d58 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	otError error = OT_ERROR_NONE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]

	/* Set the pool period to 5 sec. It means that when the device will enter
	 * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
	 * This message will act as keep alive message.
	 */
	otLinkSetPollPeriod(sInstance, 5000);
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <APP_THREAD_SetSleepyEndDeviceMode+0xa8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f007 fd04 	bl	8008778 <otLinkSetPollPeriod>

	/* Set the sleepy end device mode */
	OT_LinkMode.mRxOnWhenIdle = 0;
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8000d72:	7813      	ldrb	r3, [r2, #0]
 8000d74:	f36f 0300 	bfc	r3, #0, #1
 8000d78:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mDeviceType = 0;
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8000d7c:	7813      	ldrb	r3, [r2, #0]
 8000d7e:	f36f 0341 	bfc	r3, #1, #1
 8000d82:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mNetworkData = 0;
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8000d86:	7813      	ldrb	r3, [r2, #0]
 8000d88:	f36f 0382 	bfc	r3, #2, #1
 8000d8c:	7013      	strb	r3, [r2, #0]

	error = otThreadSetLinkMode(sInstance, OT_LinkMode);
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <APP_THREAD_SetSleepyEndDeviceMode+0xa8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8000d94:	7811      	ldrb	r1, [r2, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f008 fe5c 	bl	8009a54 <otThreadSetLinkMode>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <APP_THREAD_SetSleepyEndDeviceMode+0x58>
		APP_THREAD_Error(ERR_THREAD_LINK_MODE, error);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4619      	mov	r1, r3
 8000daa:	2011      	movs	r0, #17
 8000dac:	f7ff ff1e 	bl	8000bec <APP_THREAD_Error>
	   * to modify its mode to MTD.
	   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
	   * then reattach.
	   *
	   */
	  if (sleepyEndDeviceFlag == FALSE)
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <APP_THREAD_SetSleepyEndDeviceMode+0xb0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d11e      	bne.n	8000df6 <APP_THREAD_SetSleepyEndDeviceMode+0x9e>
	  {
	    error = otThreadSetEnabled(NULL, false);
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f008 fe1a 	bl	80099f4 <otThreadSetEnabled>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
	    if (error != OT_ERROR_NONE)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <APP_THREAD_SetSleepyEndDeviceMode+0x7c>
	      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	2011      	movs	r0, #17
 8000dd0:	f7ff ff0c 	bl	8000bec <APP_THREAD_Error>
	    error = otThreadSetEnabled(NULL, true);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f008 fe0c 	bl	80099f4 <otThreadSetEnabled>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
	    if (error != OT_ERROR_NONE)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <APP_THREAD_SetSleepyEndDeviceMode+0x98>
	      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4619      	mov	r1, r3
 8000dea:	2011      	movs	r0, #17
 8000dec:	f7ff fefe 	bl	8000bec <APP_THREAD_Error>
	    sleepyEndDeviceFlag = TRUE;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <APP_THREAD_SetSleepyEndDeviceMode+0xb0>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
	  }
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000248 	.word	0x20000248
 8000e04:	200000f4 	.word	0x200000f4
 8000e08:	200000f8 	.word	0x200000f8

08000e0c <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b0a7      	sub	sp, #156	; 0x9c
 8000e10:	af00      	add	r7, sp, #0

	static char aNetworkName[] = "OpenThread X-1";

	otOperationalDataset aDataset;

	memset(&aDataset, 0, sizeof(otOperationalDataset));
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	2278      	movs	r2, #120	; 0x78
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f009 fcb4 	bl	800a788 <memset>
	 * Fields that can be configured in otOperationDataset to override defaults:
	 *     Network Name, Mesh Local Prefix, Extended PAN ID, PAN ID, Delay Timer,
	 *     Channel, Channel Mask Page 0, Network Key, PSKc, Security Policy
	 */
	//aDataset.mActiveTimestamp.mSeconds             = 1;
	aDataset.mComponents.mIsActiveTimestampPresent = true;
 8000e20:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Channel to 15 */
	aDataset.mChannel = 15;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	aDataset.mComponents.mIsChannelPresent = true;
 8000e32:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	/* Set Pan ID to 2222 */
	aDataset.mPanId = (otPanId) 0xDEAD;
 8000e3e:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8000e42:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	aDataset.mComponents.mIsPanIdPresent = true;
 8000e46:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Extended Pan ID to  */
	uint8_t extPanId[OT_EXT_PAN_ID_SIZE] =
 8000e52:	4a49      	ldr	r2, [pc, #292]	; (8000f78 <APP_THREAD_DeviceConfig+0x16c>)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e5c:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 0x72, 0x53, 0xc0, 0xf9, 0x58, 0xe3, 0x3f, 0x94 };
	memcpy(aDataset.mExtendedPanId.m8, extPanId,
 8000e60:	f107 0259 	add.w	r2, r7, #89	; 0x59
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	cb03      	ldmia	r3!, {r0, r1}
 8000e6a:	6010      	str	r0, [r2, #0]
 8000e6c:	6051      	str	r1, [r2, #4]
			sizeof(aDataset.mExtendedPanId));
	aDataset.mComponents.mIsExtendedPanIdPresent = true;
 8000e6e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set network key to  */
	uint8_t key[OT_NETWORK_KEY_SIZE] =
 8000e7a:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <APP_THREAD_DeviceConfig+0x170>)
 8000e7c:	463c      	mov	r4, r7
 8000e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ 0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9, 0xca, 0x86, 0x85, 0xab,
			0x99, 0xda, 0xc9, 0x51 };
	memcpy(aDataset.mNetworkKey.m8, key, sizeof(aDataset.mNetworkKey));
 8000e84:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e88:	463b      	mov	r3, r7
 8000e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	aDataset.mComponents.mIsNetworkKeyPresent = true;
 8000e90:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Network Name */
	size_t length = strlen(aNetworkName);
 8000e9c:	4838      	ldr	r0, [pc, #224]	; (8000f80 <APP_THREAD_DeviceConfig+0x174>)
 8000e9e:	f7ff f979 	bl	8000194 <strlen>
 8000ea2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	assert(length <= OT_NETWORK_NAME_MAX_SIZE);
 8000ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d906      	bls.n	8000ebc <APP_THREAD_DeviceConfig+0xb0>
 8000eae:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <APP_THREAD_DeviceConfig+0x178>)
 8000eb0:	4a35      	ldr	r2, [pc, #212]	; (8000f88 <APP_THREAD_DeviceConfig+0x17c>)
 8000eb2:	f240 11b1 	movw	r1, #433	; 0x1b1
 8000eb6:	4835      	ldr	r0, [pc, #212]	; (8000f8c <APP_THREAD_DeviceConfig+0x180>)
 8000eb8:	f009 fbf6 	bl	800a6a8 <__assert_func>
	memcpy(aDataset.mNetworkName.m8, aNetworkName, length);
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	3330      	adds	r3, #48	; 0x30
 8000ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ec6:	492e      	ldr	r1, [pc, #184]	; (8000f80 <APP_THREAD_DeviceConfig+0x174>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f009 fc4f 	bl	800a76c <memcpy>
	aDataset.mComponents.mIsNetworkNamePresent = true;
 8000ece:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	/* Set the Active Operational Dataset to this dataset */
	error = otDatasetSetActive(sInstance, &aDataset);
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <APP_THREAD_DeviceConfig+0x184>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f107 0218 	add.w	r2, r7, #24
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f007 fbbf 	bl	8008668 <otDatasetSetActive>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	error = otIp6SetEnabled(sInstance, true);
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <APP_THREAD_DeviceConfig+0x184>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f007 fc0e 	bl	8008718 <otIp6SetEnabled>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 8000f02:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <APP_THREAD_DeviceConfig+0x10a>
	{
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8000f0a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2004      	movs	r0, #4
 8000f12:	f7ff fe6b 	bl	8000bec <APP_THREAD_Error>
	}
	error = otThreadSetEnabled(sInstance, true);
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <APP_THREAD_DeviceConfig+0x184>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f008 fd69 	bl	80099f4 <otThreadSetEnabled>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 8000f28:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <APP_THREAD_DeviceConfig+0x130>
	{
		APP_THREAD_Error(ERR_THREAD_START, error);
 8000f30:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000f34:	4619      	mov	r1, r3
 8000f36:	2005      	movs	r0, #5
 8000f38:	f7ff fe58 	bl	8000bec <APP_THREAD_Error>
	}
	/* USER CODE BEGIN DEVICECONFIG */
	/* Start the COAP server */
	error = otCoapStart(sInstance, OT_DEFAULT_COAP_PORT);
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <APP_THREAD_DeviceConfig+0x184>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f241 6133 	movw	r1, #5683	; 0x1633
 8000f44:	4618      	mov	r0, r3
 8000f46:	f007 fafc 	bl	8008542 <otCoapStart>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 8000f50:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <APP_THREAD_DeviceConfig+0x158>
	{
		APP_THREAD_Error(ERR_THREAD_COAP_START, error);
 8000f58:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	2008      	movs	r0, #8
 8000f60:	f7ff fe44 	bl	8000bec <APP_THREAD_Error>
	}
	/* Add COAP resources */
	otCoapAddResource(sInstance, &OT_Ressource);
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <APP_THREAD_DeviceConfig+0x184>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	490a      	ldr	r1, [pc, #40]	; (8000f94 <APP_THREAD_DeviceConfig+0x188>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f007 fb19 	bl	80085a2 <otCoapAddResource>

	/* USER CODE END DEVICECONFIG */
}
 8000f70:	bf00      	nop
 8000f72:	379c      	adds	r7, #156	; 0x9c
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	0800be00 	.word	0x0800be00
 8000f7c:	0800be08 	.word	0x0800be08
 8000f80:	2000001c 	.word	0x2000001c
 8000f84:	0800bddc 	.word	0x0800bddc
 8000f88:	0800c34c 	.word	0x0800c34c
 8000f8c:	0800bb0c 	.word	0x0800bb0c
 8000f90:	20000248 	.word	0x20000248
 8000f94:	2000000c 	.word	0x2000000c

08000f98 <APP_THREAD_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
 * @retval None
 */
static void APP_THREAD_TraceError(const char *pMess, uint32_t ErrCode)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TRACE_ERROR */
	APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <APP_THREAD_TraceError+0x24>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	2000      	movs	r0, #0
 8000fae:	f002 fd5d 	bl	8003a6c <logApplication>

	/* USER CODE END TRACE_ERROR */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	0800be18 	.word	0x0800be18

08000fc0 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af02      	add	r7, sp, #8
	WirelessFwInfo_t wireless_info_instance;
	WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	617b      	str	r3, [r7, #20]

	if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f008 fb30 	bl	8009630 <SHCI_GetWirelessFwInfo>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
	{
		APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2016      	movs	r0, #22
 8000fda:	f7ff fe07 	bl	8000bec <APP_THREAD_Error>
					(uint32_t) ERR_INTERFACE_FATAL);
			break;
		}
		APP_DBG("**********************************************************");
	}
}
 8000fde:	e07c      	b.n	80010da <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
		APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8000fe0:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f002 fd41 	bl	8003a6c <logApplication>
		APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor,
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	789b      	ldrb	r3, [r3, #2]
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	460b      	mov	r3, r1
 8001000:	4a39      	ldr	r2, [pc, #228]	; (80010e8 <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 8001002:	2101      	movs	r1, #1
 8001004:	2000      	movs	r0, #0
 8001006:	f002 fd31 	bl	8003a6c <logApplication>
		APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	4a37      	ldr	r2, [pc, #220]	; (80010ec <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8001010:	2101      	movs	r1, #1
 8001012:	2000      	movs	r0, #0
 8001014:	f002 fd2a 	bl	8003a6c <logApplication>
		APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	78db      	ldrb	r3, [r3, #3]
 800101c:	4a34      	ldr	r2, [pc, #208]	; (80010f0 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 800101e:	2101      	movs	r1, #1
 8001020:	2000      	movs	r0, #0
 8001022:	f002 fd23 	bl	8003a6c <logApplication>
		APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor,
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	7a9b      	ldrb	r3, [r3, #10]
 800102a:	4619      	mov	r1, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	7adb      	ldrb	r3, [r3, #11]
 8001030:	461a      	mov	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	7b1b      	ldrb	r3, [r3, #12]
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	9200      	str	r2, [sp, #0]
 800103a:	460b      	mov	r3, r1
 800103c:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 800103e:	2101      	movs	r1, #1
 8001040:	2000      	movs	r0, #0
 8001042:	f002 fd13 	bl	8003a6c <logApplication>
		APP_DBG("Stack type: %d", p_wireless_info->StackType);
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	7a5b      	ldrb	r3, [r3, #9]
 800104a:	4a2b      	ldr	r2, [pc, #172]	; (80010f8 <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 800104c:	2101      	movs	r1, #1
 800104e:	2000      	movs	r0, #0
 8001050:	f002 fd0c 	bl	8003a6c <logApplication>
		APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	7a1b      	ldrb	r3, [r3, #8]
 8001058:	4a28      	ldr	r2, [pc, #160]	; (80010fc <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 800105a:	2101      	movs	r1, #1
 800105c:	2000      	movs	r0, #0
 800105e:	f002 fd05 	bl	8003a6c <logApplication>
		APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	79db      	ldrb	r3, [r3, #7]
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 8001068:	2101      	movs	r1, #1
 800106a:	2000      	movs	r0, #0
 800106c:	f002 fcfe 	bl	8003a6c <logApplication>
		APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	799b      	ldrb	r3, [r3, #6]
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 8001076:	2101      	movs	r1, #1
 8001078:	2000      	movs	r0, #0
 800107a:	f002 fcf7 	bl	8003a6c <logApplication>
		APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	795b      	ldrb	r3, [r3, #5]
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8001084:	2101      	movs	r1, #1
 8001086:	2000      	movs	r0, #0
 8001088:	f002 fcf0 	bl	8003a6c <logApplication>
		switch (p_wireless_info->StackType)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	7a5b      	ldrb	r3, [r3, #9]
 8001090:	2b50      	cmp	r3, #80	; 0x50
 8001092:	d012      	beq.n	80010ba <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8001094:	2b50      	cmp	r3, #80	; 0x50
 8001096:	dc16      	bgt.n	80010c6 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8001098:	2b10      	cmp	r3, #16
 800109a:	d002      	beq.n	80010a2 <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 800109c:	2b11      	cmp	r3, #17
 800109e:	d006      	beq.n	80010ae <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 80010a0:	e011      	b.n	80010c6 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
			APP_DBG("FW Type : Thread FTD")
 80010a2:	4a1a      	ldr	r2, [pc, #104]	; (800110c <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	2000      	movs	r0, #0
 80010a8:	f002 fce0 	bl	8003a6c <logApplication>
			break;
 80010ac:	e010      	b.n	80010d0 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_DBG("FW Type : Thread MTD")
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	2000      	movs	r0, #0
 80010b4:	f002 fcda 	bl	8003a6c <logApplication>
			break;
 80010b8:	e00a      	b.n	80010d0 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_DBG("FW Type : Static Concurrent Mode BLE/Thread")
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 80010bc:	2101      	movs	r1, #1
 80010be:	2000      	movs	r0, #0
 80010c0:	f002 fcd4 	bl	8003a6c <logApplication>
			break;
 80010c4:	e004      	b.n	80010d0 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 80010c6:	2101      	movs	r1, #1
 80010c8:	2016      	movs	r0, #22
 80010ca:	f7ff fd8f 	bl	8000bec <APP_THREAD_Error>
			break;
 80010ce:	bf00      	nop
		APP_DBG("**********************************************************");
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	2000      	movs	r0, #0
 80010d6:	f002 fcc9 	bl	8003a6c <logApplication>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800be3c 	.word	0x0800be3c
 80010e8:	0800be78 	.word	0x0800be78
 80010ec:	0800be94 	.word	0x0800be94
 80010f0:	0800beb0 	.word	0x0800beb0
 80010f4:	0800bec8 	.word	0x0800bec8
 80010f8:	0800bee4 	.word	0x0800bee4
 80010fc:	0800bef4 	.word	0x0800bef4
 8001100:	0800bf08 	.word	0x0800bf08
 8001104:	0800bf1c 	.word	0x0800bf1c
 8001108:	0800bf30 	.word	0x0800bf30
 800110c:	0800bf44 	.word	0x0800bf44
 8001110:	0800bf5c 	.word	0x0800bf5c
 8001114:	0800bf74 	.word	0x0800bf74
 8001118:	0800bfa0 	.word	0x0800bfa0

0800111c <APP_THREAD_CoapPermissionsRequestHandler>:
 */

static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8001128:	2100      	movs	r1, #0
 800112a:	2001      	movs	r0, #1
 800112c:	f008 fa61 	bl	80095f2 <SHCI_C2_RADIO_AllowLowPower>
	coapConnectionEstablished = true;
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <APP_THREAD_CoapPermissionsRequestHandler+0x110>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2102      	movs	r1, #2
 800113a:	483d      	ldr	r0, [pc, #244]	; (8001230 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 800113c:	f003 fb12 	bl	8004764 <HAL_GPIO_WritePin>
	APP_DBG(
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4a3c      	ldr	r2, [pc, #240]	; (8001234 <APP_THREAD_CoapPermissionsRequestHandler+0x118>)
 8001144:	2101      	movs	r1, #1
 8001146:	2000      	movs	r0, #0
 8001148:	f002 fc90 	bl	8003a6c <logApplication>
					"***********************************************************************",
			pContext);
	/* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
	//GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
	//printIPv6Addr(&aMessageInfo->mPeerAddr);
	brAddr = pMessageInfo->mPeerAddr;
 800114c:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <APP_THREAD_CoapPermissionsRequestHandler+0x11c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4614      	mov	r4, r2
 8001152:	3310      	adds	r3, #16
 8001154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	otError error = OT_ERROR_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	77fb      	strb	r3, [r7, #31]
	otMessage *responseMessage;
	otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 800115e:	2344      	movs	r3, #68	; 0x44
 8001160:	77bb      	strb	r3, [r7, #30]
	otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f007 f8f7 	bl	8008356 <otCoapMessageGetCode>
 8001168:	4603      	mov	r3, r0
 800116a:	777b      	strb	r3, [r7, #29]

	responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 800116c:	2100      	movs	r1, #0
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f006 ff89 	bl	8008086 <otCoapNewMessage>
 8001174:	61b8      	str	r0, [r7, #24]

	otCoapMessageInitResponse(responseMessage, pMessage,
 8001176:	7fbb      	ldrb	r3, [r7, #30]
 8001178:	2202      	movs	r2, #2
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	69b8      	ldr	r0, [r7, #24]
 800117e:	f006 ffe5 	bl	800814c <otCoapMessageInitResponse>
			OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
	otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f007 f973 	bl	800846e <otCoapMessageGetToken>
 8001188:	4604      	mov	r4, r0
 800118a:	68b8      	ldr	r0, [r7, #8]
 800118c:	f007 f941 	bl	8008412 <otCoapMessageGetTokenLength>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4621      	mov	r1, r4
 8001196:	69b8      	ldr	r0, [r7, #24]
 8001198:	f007 f816 	bl	80081c8 <otCoapMessageSetToken>
			otCoapMessageGetTokenLength(pMessage));
	otCoapMessageSetPayloadMarker(responseMessage);
 800119c:	69b8      	ldr	r0, [r7, #24]
 800119e:	f007 f8ac 	bl	80082fa <otCoapMessageSetPayloadMarker>

	uint16_t offset = otMessageGetOffset(pMessage);
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f007 fb44 	bl	8008830 <otMessageGetOffset>
 80011a8:	4603      	mov	r3, r0
 80011aa:	82fb      	strh	r3, [r7, #22]
	otMessageRead(pMessage, offset, resource_name, sizeof(resource_name) - 1);
 80011ac:	8af9      	ldrh	r1, [r7, #22]
 80011ae:	231f      	movs	r3, #31
 80011b0:	4a22      	ldr	r2, [pc, #136]	; (800123c <APP_THREAD_CoapPermissionsRequestHandler+0x120>)
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f007 fba5 	bl	8008902 <otMessageRead>

	if (OT_COAP_CODE_GET == messageCode)
 80011b8:	7f7b      	ldrb	r3, [r7, #29]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10e      	bne.n	80011dc <APP_THREAD_CoapPermissionsRequestHandler+0xc0>
	{

		error = otMessageAppend(responseMessage, "ack", 3);
 80011be:	2203      	movs	r2, #3
 80011c0:	491f      	ldr	r1, [pc, #124]	; (8001240 <APP_THREAD_CoapPermissionsRequestHandler+0x124>)
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f007 fb64 	bl	8008890 <otMessageAppend>
 80011c8:	4603      	mov	r3, r0
 80011ca:	77fb      	strb	r3, [r7, #31]
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff fc87 	bl	8000ae4 <otCoapSendResponse>
 80011d6:	4603      	mov	r3, r0
 80011d8:	77fb      	strb	r3, [r7, #31]
 80011da:	e011      	b.n	8001200 <APP_THREAD_CoapPermissionsRequestHandler+0xe4>
				pMessageInfo);
	}
	else
	{
		error = otMessageAppend(responseMessage, "nack", 4);
 80011dc:	2204      	movs	r2, #4
 80011de:	4919      	ldr	r1, [pc, #100]	; (8001244 <APP_THREAD_CoapPermissionsRequestHandler+0x128>)
 80011e0:	69b8      	ldr	r0, [r7, #24]
 80011e2:	f007 fb55 	bl	8008890 <otMessageAppend>
 80011e6:	4603      	mov	r3, r0
 80011e8:	77fb      	strb	r3, [r7, #31]
		otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 80011ea:	2185      	movs	r1, #133	; 0x85
 80011ec:	69b8      	ldr	r0, [r7, #24]
 80011ee:	f007 f8e0 	bl	80083b2 <otCoapMessageSetCode>
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fc74 	bl	8000ae4 <otCoapSendResponse>
 80011fc:	4603      	mov	r3, r0
 80011fe:	77fb      	strb	r3, [r7, #31]
				pMessageInfo);
	}

	if (error != OT_ERROR_NONE && responseMessage != NULL)
 8001200:	7ffb      	ldrb	r3, [r7, #31]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <APP_THREAD_CoapPermissionsRequestHandler+0xf6>
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <APP_THREAD_CoapPermissionsRequestHandler+0xf6>
	{
		otMessageFree(responseMessage);
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f007 fae2 	bl	80087d6 <otMessageFree>
	}

	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8001212:	2101      	movs	r1, #1
 8001214:	2001      	movs	r0, #1
 8001216:	f008 f9ec 	bl	80095f2 <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2102      	movs	r1, #2
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 8001220:	f003 faa0 	bl	8004764 <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	3724      	adds	r7, #36	; 0x24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	20000244 	.word	0x20000244
 8001230:	48000800 	.word	0x48000800
 8001234:	0800bfdc 	.word	0x0800bfdc
 8001238:	2000022c 	.word	0x2000022c
 800123c:	2000020c 	.word	0x2000020c
 8001240:	0800c1b0 	.word	0x0800c1b0
 8001244:	0800c1b4 	.word	0x0800c1b4

08001248 <APP_THREAD_SendCoapMsg>:
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf, bool require_ack)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b0ad      	sub	sp, #180	; 0xb4
 800124c:	af0e      	add	r7, sp, #56	; 0x38
 800124e:	6278      	str	r0, [r7, #36]	; 0x24
 8001250:	460b      	mov	r3, r1
 8001252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (!coapConnectionEstablished)
 8001256:	4b7f      	ldr	r3, [pc, #508]	; (8001454 <APP_THREAD_SendCoapMsg+0x20c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	f083 0301 	eor.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 80f3 	bne.w	800144c <APP_THREAD_SendCoapMsg+0x204>
		return;
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8001266:	2100      	movs	r1, #0
 8001268:	2001      	movs	r0, #1
 800126a:	f008 f9c2 	bl	80095f2 <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2102      	movs	r1, #2
 8001272:	4879      	ldr	r0, [pc, #484]	; (8001458 <APP_THREAD_SendCoapMsg+0x210>)
 8001274:	f003 fa76 	bl	8004764 <HAL_GPIO_WritePin>
	int8_t rssi;
	int16_t tmp_aux;
	require_ack = false;
 8001278:	2300      	movs	r3, #0
 800127a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	//otThreadGetParentLastRssi(NULL, &rssi);
	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 800127e:	4977      	ldr	r1, [pc, #476]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 8001280:	4877      	ldr	r0, [pc, #476]	; (8001460 <APP_THREAD_SendCoapMsg+0x218>)
 8001282:	f7ff f97f 	bl	8000584 <sht4x_read>
	//stts22h_temperature_raw_get(&tmp_aux);
	sensor_data.temp_aux = tmp_aux;
 8001286:	4a75      	ldr	r2, [pc, #468]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 8001288:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800128c:	8113      	strh	r3, [r2, #8]
	int8_t state;
	int8_t ret = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	if (ret == RES_HEAT)
 8001294:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <APP_THREAD_SendCoapMsg+0x58>
		sht4x_activate_medium_heater();
 800129c:	f7ff f93e 	bl	800051c <sht4x_activate_medium_heater>
	 * opt_buf (uint32_t): light levels in lux
	 * vdd_meas (uint32_t): supply voltage in mV
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012a0:	2301      	movs	r3, #1
 80012a2:	469c      	mov	ip, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80012a4:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012a8:	461d      	mov	r5, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80012aa:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012ac:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012ae:	461e      	mov	r6, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012b4:	61fb      	str	r3, [r7, #28]
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3],
 80012b6:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012ba:	61bb      	str	r3, [r7, #24]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80012bc:	4b69      	ldr	r3, [pc, #420]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012be:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012c0:	617b      	str	r3, [r7, #20]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80012c2:	4b68      	ldr	r3, [pc, #416]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012c4:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012c6:	613b      	str	r3, [r7, #16]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80012c8:	4b66      	ldr	r3, [pc, #408]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012ca:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012cc:	60fb      	str	r3, [r7, #12]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80012ce:	4b65      	ldr	r3, [pc, #404]	; (8001464 <APP_THREAD_SendCoapMsg+0x21c>)
 80012d0:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b61      	ldr	r3, [pc, #388]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4b60      	ldr	r3, [pc, #384]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 80012da:	6819      	ldr	r1, [r3, #0]
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux,
 80012dc:	4b5f      	ldr	r3, [pc, #380]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 80012de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d",
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	f997 0073 	ldrsb.w	r0, [r7, #115]	; 0x73
 80012e8:	f997 4072 	ldrsb.w	r4, [r7, #114]	; 0x72
 80012ec:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 80012f0:	930d      	str	r3, [sp, #52]	; 0x34
 80012f2:	940c      	str	r4, [sp, #48]	; 0x30
 80012f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	900a      	str	r0, [sp, #40]	; 0x28
 80012fa:	9109      	str	r1, [sp, #36]	; 0x24
 80012fc:	9208      	str	r2, [sp, #32]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	9207      	str	r2, [sp, #28]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	9206      	str	r2, [sp, #24]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	9205      	str	r2, [sp, #20]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	9204      	str	r2, [sp, #16]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	9203      	str	r2, [sp, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	9601      	str	r6, [sp, #4]
 8001318:	9500      	str	r5, [sp, #0]
 800131a:	4663      	mov	r3, ip
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <APP_THREAD_SendCoapMsg+0x220>)
 800131e:	21fe      	movs	r1, #254	; 0xfe
 8001320:	4852      	ldr	r0, [pc, #328]	; (800146c <APP_THREAD_SendCoapMsg+0x224>)
 8001322:	f009 fe17 	bl	800af54 <sniprintf>
			ret, rssi, state);
	buf = tmp_tx_buf;
 8001326:	4b51      	ldr	r3, [pc, #324]	; (800146c <APP_THREAD_SendCoapMsg+0x224>)
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d",
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4b4b      	ldr	r3, [pc, #300]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	494a      	ldr	r1, [pc, #296]	; (800145c <APP_THREAD_SendCoapMsg+0x214>)
 8001334:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001338:	9101      	str	r1, [sp, #4]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <APP_THREAD_SendCoapMsg+0x228>)
 8001340:	2101      	movs	r1, #1
 8001342:	2000      	movs	r0, #0
 8001344:	f002 fb92 	bl	8003a6c <logApplication>
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
	otError error = OT_ERROR_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	otMessage *message = NULL;
 800134e:	2300      	movs	r3, #0
 8001350:	66fb      	str	r3, [r7, #108]	; 0x6c
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	// Default parameters
	otCoapType coapType =
			require_ack ?
					OT_COAP_TYPE_CONFIRMABLE : OT_COAP_TYPE_NON_CONFIRMABLE;
 8001358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
	otCoapType coapType =
 8001362:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	otIp6Address coapDestinationIp = brAddr;
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <APP_THREAD_SendCoapMsg+0x22c>)
 8001368:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800136c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(NULL, NULL);
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f006 fe86 	bl	8008086 <otCoapNewMessage>
 800137a:	66f8      	str	r0, [r7, #108]	; 0x6c

	otCoapMessageInit(message, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800137c:	2203      	movs	r2, #3
 800137e:	2101      	movs	r1, #1
 8001380:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001382:	f006 feae 	bl	80080e2 <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 8001386:	2102      	movs	r1, #2
 8001388:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800138a:	f006 ff54 	bl	8008236 <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 800138e:	493a      	ldr	r1, [pc, #232]	; (8001478 <APP_THREAD_SendCoapMsg+0x230>)
 8001390:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001392:	f006 ff80 	bl	8008296 <otCoapMessageAppendUriPathOptions>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	payloadLength = strlen(buf);
 800139c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800139e:	f7fe fef9 	bl	8000194 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	if (payloadLength > 0)
 80013a8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <APP_THREAD_SendCoapMsg+0x174>
	{
		error = otCoapMessageSetPayloadMarker(message);
 80013b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80013b2:	f006 ffa2 	bl	80082fa <otCoapMessageSetPayloadMarker>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	// Embed content into message if given
	if (payloadLength > 0)
 80013bc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d009      	beq.n	80013d8 <APP_THREAD_SendCoapMsg+0x190>
	{
		error = otMessageAppend(message, buf, payloadLength);
 80013c4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80013c8:	461a      	mov	r2, r3
 80013ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80013ce:	f007 fa5f 	bl	8008890 <otMessageAppend>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 80013d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013dc:	222c      	movs	r2, #44	; 0x2c
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 f9d1 	bl	800a788 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 80013e6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80013ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80013f4:	f241 6333 	movw	r3, #5683	; 0x1633
 80013f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	if (coapConnectionEstablished)
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <APP_THREAD_SendCoapMsg+0x20c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <APP_THREAD_SendCoapMsg+0x1e2>
	{
		error = otCoapSendRequestWithParameters(NULL, message, &messageInfo,
 8001404:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001408:	2300      	movs	r3, #0
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001414:	2000      	movs	r0, #0
 8001416:	f007 f857 	bl	80084c8 <otCoapSendRequestWithParameters>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				NULL,
				NULL,
				NULL);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <APP_THREAD_SendCoapMsg+0x210>)
 8001426:	f003 f99d 	bl	8004764 <HAL_GPIO_WritePin>
	}

	if ((error != OT_ERROR_NONE) && (message != NULL))
 800142a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <APP_THREAD_SendCoapMsg+0x1f6>
 8001432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <APP_THREAD_SendCoapMsg+0x1f6>
	{
		otMessageFree(message);
 8001438:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800143a:	f007 f9cc 	bl	80087d6 <otMessageFree>
	}
	sht4x_measure();
 800143e:	f7ff f893 	bl	8000568 <sht4x_measure>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8001442:	2101      	movs	r1, #1
 8001444:	2001      	movs	r0, #1
 8001446:	f008 f8d4 	bl	80095f2 <SHCI_C2_RADIO_AllowLowPower>
 800144a:	e000      	b.n	800144e <APP_THREAD_SendCoapMsg+0x206>
		return;
 800144c:	bf00      	nop
}
 800144e:	377c      	adds	r7, #124	; 0x7c
 8001450:	46bd      	mov	sp, r7
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	20000244 	.word	0x20000244
 8001458:	48000800 	.word	0x48000800
 800145c:	200005a4 	.word	0x200005a4
 8001460:	200005a8 	.word	0x200005a8
 8001464:	2000023c 	.word	0x2000023c
 8001468:	0800c220 	.word	0x0800c220
 800146c:	2000010c 	.word	0x2000010c
 8001470:	0800c248 	.word	0x0800c248
 8001474:	2000022c 	.word	0x2000022c
 8001478:	2000020c 	.word	0x2000020c

0800147c <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	p_thread_otcmdbuffer = p_buffer;
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200000fc 	.word	0x200000fc

0800149c <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	330c      	adds	r3, #12
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200000fc 	.word	0x200000fc

080014b4 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) ((TL_EvtPacket_t*) p_thread_otcmdbuffer)->evtserial.evt.payload;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	330b      	adds	r3, #11
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	200000fc 	.word	0x200000fc

080014cc <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) (p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	330b      	adds	r3, #11
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	20000100 	.word	0x20000100

080014e4 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

	/* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
	p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <Ot_Cmd_Transfer_Common+0x44>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014f4:	725a      	strb	r2, [r3, #9]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f042 0202 	orr.w	r2, r2, #2
 80014fc:	729a      	strb	r2, [r3, #10]
	/* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
	 * + ID (4 bytes) + Size (4 bytes) */
	uint32_t l_size =
			((Thread_OT_Cmd_Request_t*) (p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <Ot_Cmd_Transfer_Common+0x44>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	330c      	adds	r3, #12
 8001504:	685b      	ldr	r3, [r3, #4]
					* 4U + 8U;
 8001506:	3302      	adds	r3, #2
	uint32_t l_size =
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	607b      	str	r3, [r7, #4]
	p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <Ot_Cmd_Transfer_Common+0x44>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	72da      	strb	r2, [r3, #11]

	TL_OT_SendCmd();
 8001516:	f008 fbf7 	bl	8009d08 <TL_OT_SendCmd>

	/* Wait completion of cmd */
	Wait_Getting_Ack_From_M0();
 800151a:	f000 f834 	bl	8001586 <Wait_Getting_Ack_From_M0>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000fc 	.word	0x200000fc

0800152c <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	Ot_Cmd_Transfer_Common();
 8001530:	f7ff ffd8 	bl	80014e4 <Ot_Cmd_Transfer_Common>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(Otbuffer);

	Receive_Ack_From_M0();
 8001540:	f000 f828 	bl	8001594 <Receive_Ack_From_M0>

	/* Does not allow OpenThread M0 to M4 notification */
	g_ot_notification_allowed = 0U;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <TL_OT_CmdEvtReceived+0x1c>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000025c 	.word	0x2000025c

08001558 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	p_thread_notif_M0_to_M4 = Notbuffer;
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <TL_THREAD_NotReceived+0x1c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]

	Receive_Notification_From_M0();
 8001566:	f000 f81d 	bl	80015a4 <Receive_Notification_From_M0>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000100 	.word	0x20000100

08001578 <Pre_OtCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_OtCmdProcessing(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800157c:	2004      	movs	r0, #4
 800157e:	f008 ff41 	bl	800a404 <UTIL_SEQ_WaitEvt>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}

08001586 <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
	UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800158a:	2002      	movs	r0, #2
 800158c:	f008 ff3a 	bl	800a404 <UTIL_SEQ_WaitEvt>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8001598:	2002      	movs	r0, #2
 800159a:	f008 ff13 	bl	800a3c4 <UTIL_SEQ_SetEvt>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	CptReceiveMsgFromM0++;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <Receive_Notification_From_M0+0x1c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <Receive_Notification_From_M0+0x1c>)
 80015b0:	6013      	str	r3, [r2, #0]
	UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80015b2:	2100      	movs	r1, #0
 80015b4:	2001      	movs	r0, #1
 80015b6:	f008 fed9 	bl	800a36c <UTIL_SEQ_SetTask>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000104 	.word	0x20000104

080015c4 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static inline void Send_CLI_Ack_For_OT(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	/* Notify M0 that characters have been sent to UART */
	TL_THREAD_CliSendAck();
 80015c8:	f008 fbba 	bl	8009d40 <TL_THREAD_CliSendAck>

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
	MX_LPUART1_UART_Init();
	HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*) &ThreadOtCmdBuffer;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80015e8:	601a      	str	r2, [r3, #0]
	ThreadConfigBuffer.p_ThreadNotAckBuffer =
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <APP_THREAD_TL_THREAD_INIT+0x30>)
 80015ee:	609a      	str	r2, [r3, #8]
			(uint8_t*) ThreadNotifRspEvtBuffer;
	ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*) &ThreadCliCmdBuffer;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <APP_THREAD_TL_THREAD_INIT+0x34>)
 80015f4:	605a      	str	r2, [r3, #4]
	ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*) &ThreadCliNotBuffer;
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <APP_THREAD_TL_THREAD_INIT+0x38>)
 80015fa:	60da      	str	r2, [r3, #12]

	TL_THREAD_Init(&ThreadConfigBuffer);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80015fe:	f008 fb63 	bl	8009cc8 <TL_THREAD_Init>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20030028 	.word	0x20030028
 800160c:	200300e8 	.word	0x200300e8
 8001610:	200301f4 	.word	0x200301f4
 8001614:	20030300 	.word	0x20030300
 8001618:	2003040c 	.word	0x2003040c

0800161c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived(TL_EvtPacket_t *Notbuffer)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	TL_CmdPacket_t *l_CliBuffer = (TL_CmdPacket_t*) Notbuffer;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60fb      	str	r3, [r7, #12]
	uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	7adb      	ldrb	r3, [r3, #11]
 800162c:	72fb      	strb	r3, [r7, #11]

	/* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
	if (strcmp((const char*) l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	330c      	adds	r3, #12
 8001632:	490b      	ldr	r1, [pc, #44]	; (8001660 <TL_THREAD_CliNotReceived+0x44>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe fda3 	bl	8000180 <strcmp>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <TL_THREAD_CliNotReceived+0x38>
	{
		/* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
		HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload,
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f103 010c 	add.w	r1, r3, #12
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <TL_THREAD_CliNotReceived+0x48>)
 800164c:	2002      	movs	r0, #2
 800164e:	f001 fc31 	bl	8002eb4 <HW_UART_Transmit_IT>
	}
	else
	{
		Send_CLI_Ack_For_OT();
	}
}
 8001652:	e001      	b.n	8001658 <TL_THREAD_CliNotReceived+0x3c>
		Send_CLI_Ack_For_OT();
 8001654:	f7ff ffb6 	bl	80015c4 <Send_CLI_Ack_For_OT>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	0800c278 	.word	0x0800c278
 8001664:	08001669 	.word	0x08001669

08001668 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	Send_CLI_Ack_For_OT();
 800166c:	f7ff ffaa 	bl	80015c4 <Send_CLI_Ack_For_OT>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	if (CptReceiveMsgFromM0 != 0)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00d      	beq.n	800169c <APP_THREAD_ProcessMsgM0ToM4+0x28>
	{
		/* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
		if (CptReceiveMsgFromM0 > 1U)
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d904      	bls.n	8001692 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
		{
			APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8001688:	2100      	movs	r1, #0
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff faae 	bl	8000bec <APP_THREAD_Error>
 8001690:	e001      	b.n	8001696 <APP_THREAD_ProcessMsgM0ToM4+0x22>
		}
		else
		{
			OpenThread_CallBack_Processing();
 8001692:	f007 f975 	bl	8008980 <OpenThread_CallBack_Processing>
		}
		/* Reset counter */
		CptReceiveMsgFromM0 = 0;
 8001696:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
	}
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000104 	.word	0x20000104

080016a4 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <LL_PWR_EnableBootC2+0x1c>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <LL_PWR_EnableBootC2+0x1c>)
 80016ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	58000400 	.word	0x58000400

080016c4 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80016ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80016d2:	4905      	ldr	r1, [pc, #20]	; (80016e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58000800 	.word	0x58000800

080016ec <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4904      	ldr	r1, [pc, #16]	; (800170c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	620b      	str	r3, [r1, #32]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	58000800 	.word	0x58000800

08001710 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176c:	68fb      	ldr	r3, [r7, #12]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f043 0201 	orr.w	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	43db      	mvns	r3, r3
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	605a      	str	r2, [r3, #4]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	605a      	str	r2, [r3, #4]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	609a      	str	r2, [r3, #8]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	4013      	ands	r3, r2
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d101      	bne.n	80018a0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69da      	ldr	r2, [r3, #28]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4013      	ands	r3, r2
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d101      	bne.n	80018ca <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80018dc:	2102      	movs	r1, #2
 80018de:	482a      	ldr	r0, [pc, #168]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 80018e0:	f7ff ffe5 	bl	80018ae <LL_C2_IPCC_IsActiveFlag_CHx>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HW_IPCC_Rx_Handler+0x26>
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80018f8:	f000 f8f8 	bl	8001aec <HW_IPCC_SYS_EvtHandler>
 80018fc:	e041      	b.n	8001982 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80018fe:	2104      	movs	r1, #4
 8001900:	4821      	ldr	r0, [pc, #132]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 8001902:	f7ff ffd4 	bl	80018ae <LL_C2_IPCC_IsActiveFlag_CHx>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d009      	beq.n	8001920 <HW_IPCC_Rx_Handler+0x48>
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	43db      	mvns	r3, r3
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800191a:	f000 f937 	bl	8001b8c <HW_IPCC_THREAD_NotEvtHandler>
 800191e:	e030      	b.n	8001982 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001920:	2110      	movs	r1, #16
 8001922:	4819      	ldr	r0, [pc, #100]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 8001924:	f7ff ffc3 	bl	80018ae <LL_C2_IPCC_IsActiveFlag_CHx>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HW_IPCC_Rx_Handler+0x6a>
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	43db      	mvns	r3, r3
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800193c:	f000 f932 	bl	8001ba4 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001940:	e01f      	b.n	8001982 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001942:	2101      	movs	r1, #1
 8001944:	4810      	ldr	r0, [pc, #64]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 8001946:	f7ff ffb2 	bl	80018ae <LL_C2_IPCC_IsActiveFlag_CHx>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HW_IPCC_Rx_Handler+0x8a>
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800195c:	f000 f88a 	bl	8001a74 <HW_IPCC_BLE_EvtHandler>
 8001960:	e00f      	b.n	8001982 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001962:	2108      	movs	r1, #8
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 8001966:	f7ff ffa2 	bl	80018ae <LL_C2_IPCC_IsActiveFlag_CHx>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <HW_IPCC_Rx_Handler+0xac>
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HW_IPCC_Rx_Handler+0xb0>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	43db      	mvns	r3, r3
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800197e:	f000 f95d 	bl	8001c3c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001982:	bf00      	nop
 8001984:	bf00      	nop
}
 8001986:	bd80      	pop	{r7, pc}
 8001988:	58000c00 	.word	0x58000c00

0800198c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001990:	2102      	movs	r1, #2
 8001992:	4822      	ldr	r0, [pc, #136]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 8001994:	f7ff ff76 	bl	8001884 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HW_IPCC_Tx_Handler+0x26>
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80019ac:	f000 f892 	bl	8001ad4 <HW_IPCC_SYS_CmdEvtHandler>
 80019b0:	e031      	b.n	8001a16 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 80019b2:	2104      	movs	r1, #4
 80019b4:	4819      	ldr	r0, [pc, #100]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 80019b6:	f7ff ff65 	bl	8001884 <LL_C1_IPCC_IsActiveFlag_CHx>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HW_IPCC_Tx_Handler+0x48>
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 80019ce:	f000 f8d1 	bl	8001b74 <HW_IPCC_OT_CmdEvtHandler>
 80019d2:	e020      	b.n	8001a16 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80019d4:	2108      	movs	r1, #8
 80019d6:	4811      	ldr	r0, [pc, #68]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 80019d8:	f7ff ff54 	bl	8001884 <LL_C1_IPCC_IsActiveFlag_CHx>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HW_IPCC_Tx_Handler+0x6a>
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 80019f0:	f000 f906 	bl	8001c00 <HW_IPCC_MM_FreeBufHandler>
 80019f4:	e00f      	b.n	8001a16 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80019f6:	2120      	movs	r1, #32
 80019f8:	4808      	ldr	r0, [pc, #32]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 80019fa:	f7ff ff43 	bl	8001884 <LL_C1_IPCC_IsActiveFlag_CHx>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HW_IPCC_Tx_Handler+0x8c>
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HW_IPCC_Tx_Handler+0x90>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001a12:	f000 f83b 	bl	8001a8c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
}
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	58000c00 	.word	0x58000c00

08001a20 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001a24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a28:	f7ff fe8b 	bl	8001742 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001a2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a30:	f7ff fe5c 	bl	80016ec <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001a34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a38:	f7ff fe44 	bl	80016c4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001a3c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001a3e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001a40:	f7ff fe30 	bl	80016a4 <LL_PWR_EnableBootC2>

  return;
 8001a44:	bf00      	nop
}
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001a4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a50:	f7ff fe5e 	bl	8001710 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <HW_IPCC_Init+0x28>)
 8001a56:	f7ff fea0 	bl	800179a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HW_IPCC_Init+0x28>)
 8001a5c:	f7ff fe8d 	bl	800177a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a60:	202c      	movs	r0, #44	; 0x2c
 8001a62:	f002 fa9c 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a66:	202d      	movs	r0, #45	; 0x2d
 8001a68:	f002 fa99 	bl	8003f9e <HAL_NVIC_EnableIRQ>

  return;
 8001a6c:	bf00      	nop
}
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	58000c00 	.word	0x58000c00

08001a74 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001a78:	f008 f86e 	bl	8009b58 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4802      	ldr	r0, [pc, #8]	; (8001a88 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001a80:	f7ff fee3 	bl	800184a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001a84:	bf00      	nop
}
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58000c00 	.word	0x58000c00

08001a8c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001a90:	2120      	movs	r1, #32
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001a94:	f7ff fea4 	bl	80017e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001a98:	f008 f88e 	bl	8009bb8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001a9c:	bf00      	nop
}
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58000c00 	.word	0x58000c00

08001aa4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <HW_IPCC_SYS_Init+0x10>)
 8001aac:	f7ff feaa 	bl	8001804 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001ab0:	bf00      	nop
}
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	58000c00 	.word	0x58000c00

08001ab8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001abc:	2102      	movs	r1, #2
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <HW_IPCC_SYS_SendCmd+0x18>)
 8001ac0:	f7ff fed1 	bl	8001866 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <HW_IPCC_SYS_SendCmd+0x18>)
 8001ac8:	f7ff fe77 	bl	80017ba <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001acc:	bf00      	nop
}
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	58000c00 	.word	0x58000c00

08001ad4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001adc:	f7ff fe80 	bl	80017e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001ae0:	f008 f8ba 	bl	8009c58 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001ae4:	bf00      	nop
}
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	58000c00 	.word	0x58000c00

08001aec <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001af0:	f008 f8c8 	bl	8009c84 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001af4:	2102      	movs	r1, #2
 8001af6:	4802      	ldr	r0, [pc, #8]	; (8001b00 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001af8:	f7ff fea7 	bl	800184a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001afc:	bf00      	nop
}
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	58000c00 	.word	0x58000c00

08001b04 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4804      	ldr	r0, [pc, #16]	; (8001b1c <HW_IPCC_THREAD_Init+0x18>)
 8001b0c:	f7ff fe7a 	bl	8001804 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001b10:	2110      	movs	r1, #16
 8001b12:	4802      	ldr	r0, [pc, #8]	; (8001b1c <HW_IPCC_THREAD_Init+0x18>)
 8001b14:	f7ff fe76 	bl	8001804 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b18:	bf00      	nop
}
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	58000c00 	.word	0x58000c00

08001b20 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001b24:	2104      	movs	r1, #4
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <HW_IPCC_OT_SendCmd+0x18>)
 8001b28:	f7ff fe9d 	bl	8001866 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4802      	ldr	r0, [pc, #8]	; (8001b38 <HW_IPCC_OT_SendCmd+0x18>)
 8001b30:	f7ff fe43 	bl	80017ba <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001b34:	bf00      	nop
}
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58000c00 	.word	0x58000c00

08001b3c <HW_IPCC_THREAD_SendAck>:

  return;
}

void HW_IPCC_THREAD_SendAck( void )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001b40:	2104      	movs	r1, #4
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <HW_IPCC_THREAD_SendAck+0x18>)
 8001b44:	f7ff fe81 	bl	800184a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001b48:	2104      	movs	r1, #4
 8001b4a:	4802      	ldr	r0, [pc, #8]	; (8001b54 <HW_IPCC_THREAD_SendAck+0x18>)
 8001b4c:	f7ff fe5a 	bl	8001804 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b50:	bf00      	nop
}
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	58000c00 	.word	0x58000c00

08001b58 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	4804      	ldr	r0, [pc, #16]	; (8001b70 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001b60:	f7ff fe73 	bl	800184a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001b64:	2110      	movs	r1, #16
 8001b66:	4802      	ldr	r0, [pc, #8]	; (8001b70 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001b68:	f7ff fe4c 	bl	8001804 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b6c:	bf00      	nop
}
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	58000c00 	.word	0x58000c00

08001b74 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001b78:	2104      	movs	r1, #4
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001b7c:	f7ff fe30 	bl	80017e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001b80:	f008 f8ec 	bl	8009d5c <HW_IPCC_OT_CmdEvtNot>

  return;
 8001b84:	bf00      	nop
}
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	58000c00 	.word	0x58000c00

08001b8c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001b90:	2104      	movs	r1, #4
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001b94:	f7ff fe48 	bl	8001828 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001b98:	f008 f8ec 	bl	8009d74 <HW_IPCC_THREAD_EvtNot>

  return;
 8001b9c:	bf00      	nop
}
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	58000c00 	.word	0x58000c00

08001ba4 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001ba8:	2110      	movs	r1, #16
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001bac:	f7ff fe3c 	bl	8001828 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001bb0:	f008 f8ec 	bl	8009d8c <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001bb4:	bf00      	nop
}
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58000c00 	.word	0x58000c00

08001bbc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001bc4:	2108      	movs	r1, #8
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001bc8:	f7ff fe5c 	bl	8001884 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001bd8:	2108      	movs	r1, #8
 8001bda:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001bdc:	f7ff fded 	bl	80017ba <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001be0:	e006      	b.n	8001bf0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001be6:	2108      	movs	r1, #8
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001bea:	f7ff fe3c 	bl	8001866 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001bee:	bf00      	nop
}
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	58000c00 	.word	0x58000c00
 8001bfc:	2000024c 	.word	0x2000024c

08001c00 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001c04:	2108      	movs	r1, #8
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001c08:	f7ff fdea 	bl	80017e0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001c12:	2108      	movs	r1, #8
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001c16:	f7ff fe26 	bl	8001866 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001c1a:	bf00      	nop
}
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	58000c00 	.word	0x58000c00
 8001c24:	2000024c 	.word	0x2000024c

08001c28 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	4802      	ldr	r0, [pc, #8]	; (8001c38 <HW_IPCC_TRACES_Init+0x10>)
 8001c30:	f7ff fde8 	bl	8001804 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c34:	bf00      	nop
}
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	58000c00 	.word	0x58000c00

08001c3c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001c40:	f008 f936 	bl	8009eb0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001c44:	2108      	movs	r1, #8
 8001c46:	4802      	ldr	r0, [pc, #8]	; (8001c50 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001c48:	f7ff fdff 	bl	800184a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001c4c:	bf00      	nop
}
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	58000c00 	.word	0x58000c00

08001c54 <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
	SensorQueueLL *ret = malloc(sizeof(SensorQueueLL));
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	f008 fd7e 	bl	800a75c <malloc>
 8001c60:	4603      	mov	r3, r0
 8001c62:	607b      	str	r3, [r7, #4]
	ret->front = NULL;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
	ret->rear = NULL;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	605a      	str	r2, [r3, #4]
	ret->size = 0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	721a      	strb	r2, [r3, #8]
	return ret;
 8001c76:	687b      	ldr	r3, [r7, #4]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <app_algo_init>:

	return ret;
}

void app_algo_init(SensorData_t data)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 8001c8c:	f7ff ffe2 	bl	8001c54 <create_sensor_LL>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <app_algo_init+0x38>)
 8001c94:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <app_algo_init+0x38>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <app_algo_init+0x38>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	4a02      	ldr	r2, [pc, #8]	; (8001cb8 <app_algo_init+0x38>)
 8001cae:	6093      	str	r3, [r2, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000250 	.word	0x20000250

08001cbc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <LL_C2_PWR_SetPowerMode+0x28>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4905      	ldr	r1, [pc, #20]	; (8001ce4 <LL_C2_PWR_SetPowerMode+0x28>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	58000400 	.word	0x58000400

08001ce8 <LL_EXTI_EnableIT_32_63>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <LL_EXTI_EnableIT_32_63+0x24>)
 8001cf2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001cf6:	4905      	ldr	r1, [pc, #20]	; (8001d0c <LL_EXTI_EnableIT_32_63+0x24>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	58000800 	.word	0x58000800

08001d10 <LL_C2_EXTI_EnableIT_32_63>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8001d1a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8001d1e:	4905      	ldr	r1, [pc, #20]	; (8001d34 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	58000800 	.word	0x58000800

08001d38 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001d46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d52:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	cafecafe 	.word	0xcafecafe

08001d74 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <LL_LPM_EnableSleep+0x1c>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <LL_LPM_EnableSleep+0x1c>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6113      	str	r3, [r2, #16]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	22ff      	movs	r2, #255	; 0xff
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	22ca      	movs	r2, #202	; 0xca
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2253      	movs	r2, #83	; 0x53
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 0207 	bic.w	r2, r3, #7
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <MX_APPE_Config+0x18>)
 8001e22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e26:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001e28:	f000 f83c 	bl	8001ea4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001e2c:	f000 f841 	bl	8001eb2 <Config_HSE>

  return;
 8001e30:	bf00      	nop
}
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	58004000 	.word	0x58004000

08001e38 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001e3c:	f000 f84d 	bl	8001eda <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001e40:	f000 f866 	bl	8001f10 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001e44:	4908      	ldr	r1, [pc, #32]	; (8001e68 <MX_APPE_Init+0x30>)
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 fdc8 	bl	80029dc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8001e4c:	f000 f81c 	bl	8001e88 <Init_Debug>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001e50:	2101      	movs	r1, #1
 8001e52:	2001      	movs	r0, #1
 8001e54:	f008 f8d6 	bl	800a004 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f008 f902 	bl	800a064 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001e60:	f000 f864 	bl	8001f2c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001e64:	bf00      	nop
}
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000580 	.word	0x20000580

08001e6c <Init_Smps>:

void Init_Smps(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001e70:	bf00      	nop
}
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <Init_Exti>:

void Init_Exti(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001e7e:	2050      	movs	r0, #80	; 0x50
 8001e80:	f7ff ff32 	bl	8001ce8 <LL_EXTI_EnableIT_32_63>

  return;
 8001e84:	bf00      	nop
}
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001e8c:	f001 ff16 	bl	8003cbc <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001e90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001e94:	f7ff ff28 	bl	8001ce8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001e98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001e9c:	f7ff ff38 	bl	8001d10 <LL_C2_EXTI_EnableIT_32_63>

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8001ea0:	bf00      	nop
}
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <Reset_Device>:
static void Reset_Device(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001ea8:	bf00      	nop
}
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f008 f869 	bl	8009f90 <OTP_Read>
 8001ebe:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	799b      	ldrb	r3, [r3, #6]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff34 	bl	8001d38 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
}
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <System_Init>:

static void System_Init(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	af00      	add	r7, sp, #0
  Init_Smps();
 8001ede:	f7ff ffc5 	bl	8001e6c <Init_Smps>

  Init_Exti();
 8001ee2:	f7ff ffca 	bl	8001e7a <Init_Exti>

  Init_Rtc();
 8001ee6:	f000 f803 	bl	8001ef0 <Init_Rtc>

  return;
 8001eea:	bf00      	nop
}
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <Init_Rtc+0x1c>)
 8001ef6:	f7ff ff6e 	bl	8001dd6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001efa:	2100      	movs	r1, #0
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <Init_Rtc+0x1c>)
 8001efe:	f7ff ff7a 	bl	8001df6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001f02:	4802      	ldr	r0, [pc, #8]	; (8001f0c <Init_Rtc+0x1c>)
 8001f04:	f7ff ff5a 	bl	8001dbc <LL_RTC_EnableWriteProtection>

  return;
 8001f08:	bf00      	nop
}
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40002800 	.word	0x40002800

08001f10 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001f14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f18:	f7ff ff2c 	bl	8001d74 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001f1c:	f008 f860 	bl	8009fe0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001f20:	2004      	movs	r0, #4
 8001f22:	f7ff fecb 	bl	8001cbc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001f26:	bf00      	nop
}
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001f32:	f007 fdd7 	bl	8009ae4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <appe_Tl_Init+0x50>)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2004      	movs	r0, #4
 8001f3c:	f008 f9f4 	bl	800a328 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <appe_Tl_Init+0x54>)
 8001f42:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <appe_Tl_Init+0x58>)
 8001f46:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480e      	ldr	r0, [pc, #56]	; (8001f88 <appe_Tl_Init+0x5c>)
 8001f4e:	f007 fc1d 	bl	800978c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <appe_Tl_Init+0x60>)
 8001f58:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <appe_Tl_Init+0x64>)
 8001f5c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001f5e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001f62:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f007 ff1b 	bl	8009da4 <TL_MM_Init>

  TL_Enable();
 8001f6e:	f007 fdb2 	bl	8009ad6 <TL_Enable>

  return;
 8001f72:	bf00      	nop
}
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	080097c5 	.word	0x080097c5
 8001f80:	20030a54 	.word	0x20030a54
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001fab 	.word	0x08001fab
 8001f8c:	20030b60 	.word	0x20030b60
 8001f90:	20030518 	.word	0x20030518

08001f94 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001f9e:	bf00      	nop
}
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	330b      	adds	r3, #11
 8001fb8:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8001fc4:	d004      	beq.n	8001fd0 <APPE_SysUserEvtRx+0x26>
 8001fc6:	f249 2201 	movw	r2, #37377	; 0x9201
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001fce:	e008      	b.n	8001fe2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001fd0:	f000 f834 	bl	800203c <APPE_SysEvtReadyProcessing>
         break;
 8001fd4:	e005      	b.n	8001fe2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	789b      	ldrb	r3, [r3, #2]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f806 	bl	8001fec <APPE_SysEvtError>
         break;
 8001fe0:	bf00      	nop
  }
  return;
 8001fe2:	bf00      	nop
}
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b7d      	cmp	r3, #125	; 0x7d
 8001ffa:	d002      	beq.n	8002002 <APPE_SysEvtError+0x16>
 8001ffc:	2b7e      	cmp	r3, #126	; 0x7e
 8001ffe:	d006      	beq.n	800200e <APPE_SysEvtError+0x22>
 8002000:	e00b      	b.n	800201a <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <APPE_SysEvtError+0x44>)
 8002004:	2101      	movs	r1, #1
 8002006:	2000      	movs	r0, #0
 8002008:	f001 fd30 	bl	8003a6c <logApplication>
       break;
 800200c:	e00c      	b.n	8002028 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <APPE_SysEvtError+0x48>)
 8002010:	2101      	movs	r1, #1
 8002012:	2000      	movs	r0, #0
 8002014:	f001 fd2a 	bl	8003a6c <logApplication>
       break;
 8002018:	e006      	b.n	8002028 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <APPE_SysEvtError+0x4c>)
 800201e:	2101      	movs	r1, #1
 8002020:	2000      	movs	r0, #0
 8002022:	f001 fd23 	bl	8003a6c <logApplication>
       break;
 8002026:	bf00      	nop
  }
  return;
 8002028:	bf00      	nop
}
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	0800c27c 	.word	0x0800c27c
 8002034:	0800c2a0 	.word	0x0800c2a0
 8002038:	0800c2c0 	.word	0x0800c2c0

0800203c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8002040:	f007 ff24 	bl	8009e8c <TL_TRACES_Init>

  APP_THREAD_Init();
 8002044:	f7fe fd60 	bl	8000b08 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002048:	2100      	movs	r1, #0
 800204a:	2001      	movs	r0, #1
 800204c:	f007 ffda 	bl	800a004 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002050:	2100      	movs	r1, #0
 8002052:	2001      	movs	r0, #1
 8002054:	f008 f806 	bl	800a064 <UTIL_LPM_SetOffMode>
  return;
 8002058:	bf00      	nop
}
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f001 fde6 	bl	8003c34 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d00a      	beq.n	800208c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002076:	f001 fdf5 	bl	8003c64 <HAL_GetTickFreq>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002084:	e002      	b.n	800208c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002086:	f7ff fe89 	bl	8001d9c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800208a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800208c:	f001 fdd2 	bl	8003c34 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f4      	bhi.n	8002086 <HAL_Delay+0x2a>
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80020aa:	f04f 30ff 	mov.w	r0, #4294967295
 80020ae:	f008 f83f 	bl	800a130 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80020ba:	f008 f803 	bl	800a0c4 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80020be:	bf00      	nop
}
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d003      	beq.n	80020dc <UTIL_SEQ_EvtIdle+0x18>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d00c      	beq.n	80020f4 <UTIL_SEQ_EvtIdle+0x30>
 80020da:	e012      	b.n	8002102 <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <UTIL_SEQ_EvtIdle+0x50>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d103      	bne.n	80020ec <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f008 f823 	bl	800a130 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 80020ea:	e00f      	b.n	800210c <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f008 f81f 	bl	800a130 <UTIL_SEQ_Run>
    break;
 80020f2:	e00b      	b.n	800210c <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80020f4:	2004      	movs	r0, #4
 80020f6:	f008 f965 	bl	800a3c4 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f008 f818 	bl	800a130 <UTIL_SEQ_Run>
    break;
 8002100:	e004      	b.n	800210c <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002102:	f04f 30ff 	mov.w	r0, #4294967295
 8002106:	f008 f813 	bl	800a130 <UTIL_SEQ_Run>
    break;
 800210a:	bf00      	nop
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000025c 	.word	0x2000025c

08002118 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8002120:	2100      	movs	r1, #0
 8002122:	2004      	movs	r0, #4
 8002124:	f008 f922 	bl	800a36c <UTIL_SEQ_SetTask>
  return;
 8002128:	bf00      	nop
}
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8002138:	2001      	movs	r0, #1
 800213a:	f008 f943 	bl	800a3c4 <UTIL_SEQ_SetEvt>
  return;
 800213e:	bf00      	nop
}
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800214e:	2001      	movs	r0, #1
 8002150:	f008 f958 	bl	800a404 <UTIL_SEQ_WaitEvt>
  return;
 8002154:	bf00      	nop
}
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f007 fe59 	bl	8009e1c <TL_MM_EvtDone>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002182:	2101      	movs	r1, #1
 8002184:	2000      	movs	r0, #0
 8002186:	f001 fc71 	bl	8003a6c <logApplication>
  switch(GPIO_Pin)
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002190:	d003      	beq.n	800219a <HAL_GPIO_EXTI_Callback+0x26>
 8002192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002196:	d005      	beq.n	80021a4 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8002198:	e005      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 800219a:	2101      	movs	r1, #1
 800219c:	2008      	movs	r0, #8
 800219e:	f008 f8e5 	bl	800a36c <UTIL_SEQ_SetTask>
        break;
 80021a2:	e000      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x32>
        break;
 80021a4:	bf00      	nop
  }
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800c2e0 	.word	0x0800c2e0

080021b4 <LL_EXTI_EnableIT_0_31>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80021be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80021c2:	4905      	ldr	r1, [pc, #20]	; (80021d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	58000800 	.word	0x58000800

080021dc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4904      	ldr	r1, [pc, #16]	; (80021fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	58000800 	.word	0x58000800

08002200 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <ReadRtcSsrValue+0x3c>)
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	b29b      	uxth	r3, r3
 800220c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <ReadRtcSsrValue+0x3c>)
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	b29b      	uxth	r3, r3
 8002214:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002216:	e005      	b.n	8002224 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <ReadRtcSsrValue+0x3c>)
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	b29b      	uxth	r3, r3
 8002222:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d1f5      	bne.n	8002218 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800222c:	683b      	ldr	r3, [r7, #0]
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40002800 	.word	0x40002800

08002240 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	460a      	mov	r2, r1
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002250:	79ba      	ldrb	r2, [r7, #6]
 8002252:	491d      	ldr	r1, [pc, #116]	; (80022c8 <LinkTimerAfter+0x88>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	3315      	adds	r3, #21
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d009      	beq.n	800227e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <LinkTimerAfter+0x88>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	3314      	adds	r3, #20
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800227e:	79fa      	ldrb	r2, [r7, #7]
 8002280:	4911      	ldr	r1, [pc, #68]	; (80022c8 <LinkTimerAfter+0x88>)
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	3315      	adds	r3, #21
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002292:	79fa      	ldrb	r2, [r7, #7]
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <LinkTimerAfter+0x88>)
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3314      	adds	r3, #20
 80022a2:	79ba      	ldrb	r2, [r7, #6]
 80022a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80022a6:	79ba      	ldrb	r2, [r7, #6]
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <LinkTimerAfter+0x88>)
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	3315      	adds	r3, #21
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	701a      	strb	r2, [r3, #0]

  return;
 80022ba:	bf00      	nop
}
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000260 	.word	0x20000260

080022cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <LinkTimerBefore+0xb8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	79ba      	ldrb	r2, [r7, #6]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d032      	beq.n	800234e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80022e8:	79ba      	ldrb	r2, [r7, #6]
 80022ea:	4927      	ldr	r1, [pc, #156]	; (8002388 <LinkTimerBefore+0xbc>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3314      	adds	r3, #20
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	4922      	ldr	r1, [pc, #136]	; (8002388 <LinkTimerBefore+0xbc>)
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	3315      	adds	r3, #21
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	491d      	ldr	r1, [pc, #116]	; (8002388 <LinkTimerBefore+0xbc>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3315      	adds	r3, #21
 8002320:	79ba      	ldrb	r2, [r7, #6]
 8002322:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	4918      	ldr	r1, [pc, #96]	; (8002388 <LinkTimerBefore+0xbc>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	3314      	adds	r3, #20
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002338:	79ba      	ldrb	r2, [r7, #6]
 800233a:	4913      	ldr	r1, [pc, #76]	; (8002388 <LinkTimerBefore+0xbc>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3314      	adds	r3, #20
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800234c:	e014      	b.n	8002378 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800234e:	79fa      	ldrb	r2, [r7, #7]
 8002350:	490d      	ldr	r1, [pc, #52]	; (8002388 <LinkTimerBefore+0xbc>)
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3315      	adds	r3, #21
 800235e:	79ba      	ldrb	r2, [r7, #6]
 8002360:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002362:	79ba      	ldrb	r2, [r7, #6]
 8002364:	4908      	ldr	r1, [pc, #32]	; (8002388 <LinkTimerBefore+0xbc>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3314      	adds	r3, #20
 8002372:	79fa      	ldrb	r2, [r7, #7]
 8002374:	701a      	strb	r2, [r3, #0]
  return;
 8002376:	bf00      	nop
}
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	200002f0 	.word	0x200002f0
 8002388:	20000260 	.word	0x20000260

0800238c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002396:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <linkTimer+0x144>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b06      	cmp	r3, #6
 800239e:	d118      	bne.n	80023d2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80023a0:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <linkTimer+0x144>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <linkTimer+0x148>)
 80023a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80023aa:	4a49      	ldr	r2, [pc, #292]	; (80024d0 <linkTimer+0x144>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	4949      	ldr	r1, [pc, #292]	; (80024d8 <linkTimer+0x14c>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3315      	adds	r3, #21
 80023c0:	2206      	movs	r2, #6
 80023c2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80023c4:	4b45      	ldr	r3, [pc, #276]	; (80024dc <linkTimer+0x150>)
 80023c6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	81fb      	strh	r3, [r7, #14]
 80023d0:	e078      	b.n	80024c4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80023d2:	f000 f909 	bl	80025e8 <ReturnTimeElapsed>
 80023d6:	4603      	mov	r3, r0
 80023d8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80023da:	79fa      	ldrb	r2, [r7, #7]
 80023dc:	493e      	ldr	r1, [pc, #248]	; (80024d8 <linkTimer+0x14c>)
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	3308      	adds	r3, #8
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	89fb      	ldrh	r3, [r7, #14]
 80023ee:	79fa      	ldrb	r2, [r7, #7]
 80023f0:	4419      	add	r1, r3
 80023f2:	4839      	ldr	r0, [pc, #228]	; (80024d8 <linkTimer+0x14c>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4403      	add	r3, r0
 80023fe:	3308      	adds	r3, #8
 8002400:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	4934      	ldr	r1, [pc, #208]	; (80024d8 <linkTimer+0x14c>)
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	3308      	adds	r3, #8
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <linkTimer+0x144>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	4a2e      	ldr	r2, [pc, #184]	; (80024d8 <linkTimer+0x14c>)
 8002420:	460b      	mov	r3, r1
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	440b      	add	r3, r1
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	3308      	adds	r3, #8
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	d337      	bcc.n	80024a4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <linkTimer+0x144>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800243a:	7b7a      	ldrb	r2, [r7, #13]
 800243c:	4926      	ldr	r1, [pc, #152]	; (80024d8 <linkTimer+0x14c>)
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3315      	adds	r3, #21
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800244e:	e013      	b.n	8002478 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002450:	7b7a      	ldrb	r2, [r7, #13]
 8002452:	4921      	ldr	r1, [pc, #132]	; (80024d8 <linkTimer+0x14c>)
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3315      	adds	r3, #21
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002464:	7b7a      	ldrb	r2, [r7, #13]
 8002466:	491c      	ldr	r1, [pc, #112]	; (80024d8 <linkTimer+0x14c>)
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	3315      	adds	r3, #21
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002478:	7b3b      	ldrb	r3, [r7, #12]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d00b      	beq.n	8002496 <linkTimer+0x10a>
 800247e:	7b3a      	ldrb	r2, [r7, #12]
 8002480:	4915      	ldr	r1, [pc, #84]	; (80024d8 <linkTimer+0x14c>)
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	3308      	adds	r3, #8
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	429a      	cmp	r2, r3
 8002494:	d2dc      	bcs.n	8002450 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002496:	7b7a      	ldrb	r2, [r7, #13]
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fecf 	bl	8002240 <LinkTimerAfter>
 80024a2:	e00f      	b.n	80024c4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <linkTimer+0x144>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff0c 	bl	80022cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <linkTimer+0x144>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <linkTimer+0x148>)
 80024bc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <linkTimer+0x144>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80024c4:	89fb      	ldrh	r3, [r7, #14]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200002f0 	.word	0x200002f0
 80024d4:	200002f1 	.word	0x200002f1
 80024d8:	20000260 	.word	0x20000260
 80024dc:	200002f4 	.word	0x200002f4

080024e0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	460a      	mov	r2, r1
 80024ea:	71fb      	strb	r3, [r7, #7]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80024f0:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <UnlinkTimer+0xf8>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	79fa      	ldrb	r2, [r7, #7]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d111      	bne.n	8002520 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <UnlinkTimer+0xf8>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b36      	ldr	r3, [pc, #216]	; (80025dc <UnlinkTimer+0xfc>)
 8002504:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002506:	79fa      	ldrb	r2, [r7, #7]
 8002508:	4935      	ldr	r1, [pc, #212]	; (80025e0 <UnlinkTimer+0x100>)
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	3315      	adds	r3, #21
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <UnlinkTimer+0xf8>)
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e03e      	b.n	800259e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	492f      	ldr	r1, [pc, #188]	; (80025e0 <UnlinkTimer+0x100>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3314      	adds	r3, #20
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	492a      	ldr	r1, [pc, #168]	; (80025e0 <UnlinkTimer+0x100>)
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	3315      	adds	r3, #21
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002548:	79f9      	ldrb	r1, [r7, #7]
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	4824      	ldr	r0, [pc, #144]	; (80025e0 <UnlinkTimer+0x100>)
 800254e:	460b      	mov	r3, r1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	440b      	add	r3, r1
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4403      	add	r3, r0
 8002558:	3315      	adds	r3, #21
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b2d8      	uxtb	r0, r3
 800255e:	4920      	ldr	r1, [pc, #128]	; (80025e0 <UnlinkTimer+0x100>)
 8002560:	4613      	mov	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	3315      	adds	r3, #21
 800256c:	4602      	mov	r2, r0
 800256e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	2b06      	cmp	r3, #6
 8002574:	d013      	beq.n	800259e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002576:	79f9      	ldrb	r1, [r7, #7]
 8002578:	7bba      	ldrb	r2, [r7, #14]
 800257a:	4819      	ldr	r0, [pc, #100]	; (80025e0 <UnlinkTimer+0x100>)
 800257c:	460b      	mov	r3, r1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	440b      	add	r3, r1
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4403      	add	r3, r0
 8002586:	3314      	adds	r3, #20
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b2d8      	uxtb	r0, r3
 800258c:	4914      	ldr	r1, [pc, #80]	; (80025e0 <UnlinkTimer+0x100>)
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	3314      	adds	r3, #20
 800259a:	4602      	mov	r2, r0
 800259c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800259e:	79fa      	ldrb	r2, [r7, #7]
 80025a0:	490f      	ldr	r1, [pc, #60]	; (80025e0 <UnlinkTimer+0x100>)
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	330c      	adds	r3, #12
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <UnlinkTimer+0xf8>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d107      	bne.n	80025cc <UnlinkTimer+0xec>
 80025bc:	79bb      	ldrb	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <UnlinkTimer+0x104>)
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	601a      	str	r2, [r3, #0]
  }

  return;
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
}
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	200002f0 	.word	0x200002f0
 80025dc:	200002f1 	.word	0x200002f1
 80025e0:	20000260 	.word	0x20000260
 80025e4:	200002f4 	.word	0x200002f4

080025e8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <ReturnTimeElapsed+0x70>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d026      	beq.n	8002646 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80025f8:	f7ff fe02 	bl	8002200 <ReadRtcSsrValue>
 80025fc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <ReturnTimeElapsed+0x70>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d805      	bhi.n	8002614 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <ReturnTimeElapsed+0x70>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	e00a      	b.n	800262a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <ReturnTimeElapsed+0x74>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <ReturnTimeElapsed+0x70>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <ReturnTimeElapsed+0x78>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <ReturnTimeElapsed+0x7c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	40d3      	lsrs	r3, r2
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	e001      	b.n	800264a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b29b      	uxth	r3, r3
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200002f4 	.word	0x200002f4
 800265c:	200002fc 	.word	0x200002fc
 8002660:	200002fa 	.word	0x200002fa
 8002664:	200002f9 	.word	0x200002f9

08002668 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002678:	f7ff fdc2 	bl	8002200 <ReadRtcSsrValue>
 800267c:	4603      	mov	r3, r0
 800267e:	4a21      	ldr	r2, [pc, #132]	; (8002704 <RestartWakeupCounter+0x9c>)
 8002680:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002682:	2003      	movs	r0, #3
 8002684:	f001 fcb7 	bl	8003ff6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002688:	e039      	b.n	80026fe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d803      	bhi.n	8002698 <RestartWakeupCounter+0x30>
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <RestartWakeupCounter+0xa0>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d002      	beq.n	800269e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	3b01      	subs	r3, #1
 800269c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800269e:	bf00      	nop
 80026a0:	4b1a      	ldr	r3, [pc, #104]	; (800270c <RestartWakeupCounter+0xa4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f8      	beq.n	80026a0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <RestartWakeupCounter+0xa4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <RestartWakeupCounter+0xa4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80026be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <RestartWakeupCounter+0xa8>)
 80026c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80026c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80026c8:	2003      	movs	r0, #3
 80026ca:	f001 fca2 	bl	8004012 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <RestartWakeupCounter+0xac>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <RestartWakeupCounter+0xac>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80026de:	f7ff fd8f 	bl	8002200 <ReadRtcSsrValue>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <RestartWakeupCounter+0x9c>)
 80026e6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <RestartWakeupCounter+0xa4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <RestartWakeupCounter+0xa4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80026f8:	f3af 8000 	nop.w
  return ;
 80026fc:	bf00      	nop
}
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200002f4 	.word	0x200002f4
 8002708:	200002f9 	.word	0x200002f9
 800270c:	20000580 	.word	0x20000580
 8002710:	58000800 	.word	0x58000800
 8002714:	40002800 	.word	0x40002800

08002718 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800271e:	4b45      	ldr	r3, [pc, #276]	; (8002834 <RescheduleTimerList+0x11c>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d107      	bne.n	800273c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800272c:	bf00      	nop
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <RescheduleTimerList+0x120>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f8      	bne.n	800272e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800273c:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <RescheduleTimerList+0x120>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <RescheduleTimerList+0x120>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800274c:	4b3b      	ldr	r3, [pc, #236]	; (800283c <RescheduleTimerList+0x124>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	493a      	ldr	r1, [pc, #232]	; (8002840 <RescheduleTimerList+0x128>)
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3308      	adds	r3, #8
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002766:	f7ff ff3f 	bl	80025e8 <ReturnTimeElapsed>
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	d205      	bcs.n	8002782 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800277a:	4b32      	ldr	r3, [pc, #200]	; (8002844 <RescheduleTimerList+0x12c>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e04d      	b.n	800281e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	4a30      	ldr	r2, [pc, #192]	; (8002848 <RescheduleTimerList+0x130>)
 8002786:	8812      	ldrh	r2, [r2, #0]
 8002788:	b292      	uxth	r2, r2
 800278a:	4413      	add	r3, r2
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4293      	cmp	r3, r2
 8002792:	d906      	bls.n	80027a2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002794:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <RescheduleTimerList+0x130>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <RescheduleTimerList+0x12c>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e03d      	b.n	800281e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80027ac:	4b25      	ldr	r3, [pc, #148]	; (8002844 <RescheduleTimerList+0x12c>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80027b2:	e034      	b.n	800281e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	4922      	ldr	r1, [pc, #136]	; (8002840 <RescheduleTimerList+0x128>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	3308      	adds	r3, #8
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d20a      	bcs.n	80027e2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	491c      	ldr	r1, [pc, #112]	; (8002840 <RescheduleTimerList+0x128>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	3308      	adds	r3, #8
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e013      	b.n	800280a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <RescheduleTimerList+0x128>)
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	3308      	adds	r3, #8
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	1ac9      	subs	r1, r1, r3
 80027fa:	4811      	ldr	r0, [pc, #68]	; (8002840 <RescheduleTimerList+0x128>)
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4403      	add	r3, r0
 8002806:	3308      	adds	r3, #8
 8002808:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	490c      	ldr	r1, [pc, #48]	; (8002840 <RescheduleTimerList+0x128>)
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	3315      	adds	r3, #21
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d1c7      	bne.n	80027b4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002824:	89bb      	ldrh	r3, [r7, #12]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff1e 	bl	8002668 <RestartWakeupCounter>

  return ;
 800282c:	bf00      	nop
}
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40002800 	.word	0x40002800
 8002838:	20000580 	.word	0x20000580
 800283c:	200002f0 	.word	0x200002f0
 8002840:	20000260 	.word	0x20000260
 8002844:	200002f8 	.word	0x200002f8
 8002848:	200002fe 	.word	0x200002fe

0800284c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002852:	f3ef 8310 	mrs	r3, PRIMASK
 8002856:	617b      	str	r3, [r7, #20]
  return(result);
 8002858:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	22ca      	movs	r2, #202	; 0xca
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
 8002868:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2253      	movs	r2, #83	; 0x53
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4b54      	ldr	r3, [pc, #336]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002880:	4b52      	ldr	r3, [pc, #328]	; (80029cc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002888:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800288c:	4950      	ldr	r1, [pc, #320]	; (80029d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	330c      	adds	r3, #12
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d16e      	bne.n	8002980 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80028a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028a6:	494a      	ldr	r1, [pc, #296]	; (80029d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80028b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028ba:	4945      	ldr	r1, [pc, #276]	; (80029d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	3310      	adds	r3, #16
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d04c      	beq.n	8002970 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80028d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028da:	493d      	ldr	r1, [pc, #244]	; (80029d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	330d      	adds	r3, #13
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d124      	bne.n	800293a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80028f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028f4:	2101      	movs	r1, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fdf2 	bl	80024e0 <UnlinkTimer>
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002908:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800290c:	4930      	ldr	r1, [pc, #192]	; (80029d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	3304      	adds	r3, #4
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa32 	bl	8002d8c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	22ca      	movs	r2, #202	; 0xca
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2253      	movs	r2, #83	; 0x53
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
 8002938:	e012      	b.n	8002960 <HW_TS_RTC_Wakeup_Handler+0x114>
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f99a 	bl	8002c84 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	22ca      	movs	r2, #202	; 0xca
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2253      	movs	r2, #83	; 0x53
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	4619      	mov	r1, r3
 8002968:	69b8      	ldr	r0, [r7, #24]
 800296a:	f000 fa95 	bl	8002e98 <HW_TS_RTC_Int_AppNot>
 800296e:	e022      	b.n	80029b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002970:	f7ff fed2 	bl	8002718 <RescheduleTimerList>
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f383 8810 	msr	PRIMASK, r3
}
 800297e:	e01a      	b.n	80029b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002980:	bf00      	nop
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f8      	beq.n	8002982 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80029a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80029a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f383 8810 	msr	PRIMASK, r3
}
 80029b4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	22ff      	movs	r2, #255	; 0xff
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80029be:	bf00      	nop
}
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000580 	.word	0x20000580
 80029cc:	200002f0 	.word	0x200002f0
 80029d0:	20000260 	.word	0x20000260
 80029d4:	200002f8 	.word	0x200002f8
 80029d8:	58000800 	.word	0x58000800

080029dc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80029e8:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <HW_TS_Init+0x188>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	22ca      	movs	r2, #202	; 0xca
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
 80029f0:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HW_TS_Init+0x188>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2253      	movs	r2, #83	; 0x53
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029f8:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HW_TS_Init+0x18c>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a5a      	ldr	r2, [pc, #360]	; (8002b68 <HW_TS_Init+0x18c>)
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002a04:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HW_TS_Init+0x18c>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f1c3 0304 	rsb	r3, r3, #4
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <HW_TS_Init+0x190>)
 8002a18:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002a1a:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <HW_TS_Init+0x18c>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a22:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002a26:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	fa92 f2a2 	rbit	r2, r2
 8002a2e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	d101      	bne.n	8002a3e <HW_TS_Init+0x62>
  {
    return 32U;
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	e003      	b.n	8002a46 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b48      	ldr	r3, [pc, #288]	; (8002b70 <HW_TS_Init+0x194>)
 8002a50:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002a52:	4b45      	ldr	r3, [pc, #276]	; (8002b68 <HW_TS_Init+0x18c>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HW_TS_Init+0x198>)
 8002a64:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HW_TS_Init+0x198>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <HW_TS_Init+0x194>)
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a78:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <HW_TS_Init+0x190>)
 8002a7a:	7812      	ldrb	r2, [r2, #0]
 8002a7c:	40d3      	lsrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d904      	bls.n	8002a94 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HW_TS_Init+0x19c>)
 8002a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	e003      	b.n	8002a9c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HW_TS_Init+0x19c>)
 8002a9a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002a9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002aa0:	f7ff fb9c 	bl	80021dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002aa4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002aa8:	f7ff fb84 	bl	80021b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d13d      	bne.n	8002b2e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HW_TS_Init+0x1a0>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HW_TS_Init+0x1a4>)
 8002aba:	f04f 32ff 	mov.w	r2, #4294967295
 8002abe:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e00c      	b.n	8002ae0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002ac6:	7ffa      	ldrb	r2, [r7, #31]
 8002ac8:	492e      	ldr	r1, [pc, #184]	; (8002b84 <HW_TS_Init+0x1a8>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002ada:	7ffb      	ldrb	r3, [r7, #31]
 8002adc:	3301      	adds	r3, #1
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d9ef      	bls.n	8002ac6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HW_TS_Init+0x1ac>)
 8002ae8:	2206      	movs	r2, #6
 8002aea:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HW_TS_Init+0x188>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HW_TS_Init+0x188>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HW_TS_Init+0x188>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HW_TS_Init+0x188>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b0c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002b0e:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <HW_TS_Init+0x1b0>)
 8002b10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b14:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002b16:	2003      	movs	r0, #3
 8002b18:	f001 fa7b 	bl	8004012 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HW_TS_Init+0x188>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HW_TS_Init+0x188>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e009      	b.n	8002b42 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HW_TS_Init+0x188>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f001 fa5a 	bl	8003ff6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HW_TS_Init+0x188>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	22ff      	movs	r2, #255	; 0xff
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	2003      	movs	r0, #3
 8002b50:	f001 fa0b 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002b54:	2003      	movs	r0, #3
 8002b56:	f001 fa22 	bl	8003f9e <HAL_NVIC_EnableIRQ>

  return;
 8002b5a:	bf00      	nop
}
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000580 	.word	0x20000580
 8002b68:	40002800 	.word	0x40002800
 8002b6c:	200002f9 	.word	0x200002f9
 8002b70:	200002fa 	.word	0x200002fa
 8002b74:	200002fc 	.word	0x200002fc
 8002b78:	200002fe 	.word	0x200002fe
 8002b7c:	200002f8 	.word	0x200002f8
 8002b80:	200002f4 	.word	0x200002f4
 8002b84:	20000260 	.word	0x20000260
 8002b88:	200002f0 	.word	0x200002f0
 8002b8c:	58000800 	.word	0x58000800

08002b90 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8002baa:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bac:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002bae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb0:	b672      	cpsid	i
}
 8002bb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002bb4:	e004      	b.n	8002bc0 <HW_TS_Create+0x30>
  {
    loop++;
 8002bb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d80c      	bhi.n	8002be2 <HW_TS_Create+0x52>
 8002bc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002bcc:	492c      	ldr	r1, [pc, #176]	; (8002c80 <HW_TS_Create+0xf0>)
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	330c      	adds	r3, #12
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e9      	bne.n	8002bb6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d038      	beq.n	8002c5c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002bea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002bee:	4924      	ldr	r1, [pc, #144]	; (8002c80 <HW_TS_Create+0xf0>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f383 8810 	msr	PRIMASK, r3
}
 8002c0a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002c0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c10:	491b      	ldr	r1, [pc, #108]	; (8002c80 <HW_TS_Create+0xf0>)
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002c22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c26:	4916      	ldr	r1, [pc, #88]	; (8002c80 <HW_TS_Create+0xf0>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	330d      	adds	r3, #13
 8002c34:	79fa      	ldrb	r2, [r7, #7]
 8002c36:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002c38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c3c:	4910      	ldr	r1, [pc, #64]	; (8002c80 <HW_TS_Create+0xf0>)
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c52:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c5a:	e008      	b.n	8002c6e <HW_TS_Create+0xde>
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f383 8810 	msr	PRIMASK, r3
}
 8002c66:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	372c      	adds	r7, #44	; 0x2c
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000260 	.word	0x20000260

08002c84 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c94:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	f001 f98c 	bl	8003fba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ca2:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	22ca      	movs	r2, #202	; 0xca
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2253      	movs	r2, #83	; 0x53
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002cb2:	79fa      	ldrb	r2, [r7, #7]
 8002cb4:	4930      	ldr	r1, [pc, #192]	; (8002d78 <HW_TS_Stop+0xf4>)
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d142      	bne.n	8002d50 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fc06 	bl	80024e0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002cd4:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <HW_TS_Stop+0xf8>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d12f      	bne.n	8002d40 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HW_TS_Stop+0xfc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cec:	d107      	bne.n	8002cfe <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002cee:	bf00      	nop
 8002cf0:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f8      	bne.n	8002cf0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002d0e:	bf00      	nop
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f8      	beq.n	8002d10 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d2e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HW_TS_Stop+0x100>)
 8002d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d36:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f001 f96a 	bl	8004012 <HAL_NVIC_ClearPendingIRQ>
 8002d3e:	e007      	b.n	8002d50 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HW_TS_Stop+0x104>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	7cfa      	ldrb	r2, [r7, #19]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002d4c:	f7ff fce4 	bl	8002718 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HW_TS_Stop+0xf0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	22ff      	movs	r2, #255	; 0xff
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f001 f920 	bl	8003f9e <HAL_NVIC_EnableIRQ>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002d6a:	bf00      	nop
}
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000580 	.word	0x20000580
 8002d78:	20000260 	.word	0x20000260
 8002d7c:	200002f0 	.word	0x200002f0
 8002d80:	40002800 	.word	0x40002800
 8002d84:	58000800 	.word	0x58000800
 8002d88:	200002f1 	.word	0x200002f1

08002d8c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002d98:	79fa      	ldrb	r2, [r7, #7]
 8002d9a:	493b      	ldr	r1, [pc, #236]	; (8002e88 <HW_TS_Start+0xfc>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	330c      	adds	r3, #12
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d103      	bne.n	8002db8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff66 	bl	8002c84 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002dc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc2:	b672      	cpsid	i
}
 8002dc4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002dc6:	2003      	movs	r0, #3
 8002dc8:	f001 f8f7 	bl	8003fba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HW_TS_Start+0x100>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	22ca      	movs	r2, #202	; 0xca
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HW_TS_Start+0x100>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2253      	movs	r2, #83	; 0x53
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002ddc:	79fa      	ldrb	r2, [r7, #7]
 8002dde:	492a      	ldr	r1, [pc, #168]	; (8002e88 <HW_TS_Start+0xfc>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	330c      	adds	r3, #12
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002df0:	79fa      	ldrb	r2, [r7, #7]
 8002df2:	4925      	ldr	r1, [pc, #148]	; (8002e88 <HW_TS_Start+0xfc>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3308      	adds	r3, #8
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	4920      	ldr	r1, [pc, #128]	; (8002e88 <HW_TS_Start+0xfc>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3304      	adds	r3, #4
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fab6 	bl	800238c <linkTimer>
 8002e20:	4603      	mov	r3, r0
 8002e22:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HW_TS_Start+0x104>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <HW_TS_Start+0x108>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	7c7a      	ldrb	r2, [r7, #17]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d002      	beq.n	8002e3c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002e36:	f7ff fc6f 	bl	8002718 <RescheduleTimerList>
 8002e3a:	e013      	b.n	8002e64 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002e3c:	79fa      	ldrb	r2, [r7, #7]
 8002e3e:	4912      	ldr	r1, [pc, #72]	; (8002e88 <HW_TS_Start+0xfc>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	6819      	ldr	r1, [r3, #0]
 8002e4e:	8a7b      	ldrh	r3, [r7, #18]
 8002e50:	79fa      	ldrb	r2, [r7, #7]
 8002e52:	1ac9      	subs	r1, r1, r3
 8002e54:	480c      	ldr	r0, [pc, #48]	; (8002e88 <HW_TS_Start+0xfc>)
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4403      	add	r3, r0
 8002e60:	3308      	adds	r3, #8
 8002e62:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HW_TS_Start+0x100>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	22ff      	movs	r2, #255	; 0xff
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f001 f896 	bl	8003f9e <HAL_NVIC_EnableIRQ>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f383 8810 	msr	PRIMASK, r3
}
 8002e7c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002e7e:	bf00      	nop
}
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000260 	.word	0x20000260
 8002e8c:	20000580 	.word	0x20000580
 8002e90:	200002f0 	.word	0x200002f0
 8002e94:	200002f1 	.word	0x200002f1

08002e98 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4798      	blx	r3

  return;
 8002eaa:	bf00      	nop
}
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HW_UART_Transmit_IT+0x1e>
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d00d      	beq.n	8002eec <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002ed0:	e019      	b.n	8002f06 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <HW_UART_Transmit_IT+0x5c>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HW_UART_Transmit_IT+0x60>)
 8002eda:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HW_UART_Transmit_IT+0x64>)
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	89bb      	ldrh	r3, [r7, #12]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	480b      	ldr	r0, [pc, #44]	; (8002f14 <HW_UART_Transmit_IT+0x60>)
 8002ee6:	f004 fa99 	bl	800741c <HAL_UART_Transmit_IT>
            break;
 8002eea:	e00c      	b.n	8002f06 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002eec:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <HW_UART_Transmit_IT+0x68>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HW_UART_Transmit_IT+0x6c>)
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <HW_UART_Transmit_IT+0x70>)
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	89bb      	ldrh	r3, [r7, #12]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	4808      	ldr	r0, [pc, #32]	; (8002f20 <HW_UART_Transmit_IT+0x6c>)
 8002f00:	f004 fa8c 	bl	800741c <HAL_UART_Transmit_IT>
            break;
 8002f04:	bf00      	nop
    }

    return;
 8002f06:	bf00      	nop
}
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000300 	.word	0x20000300
 8002f14:	200003d8 	.word	0x200003d8
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	20000304 	.word	0x20000304
 8002f20:	20000344 	.word	0x20000344
 8002f24:	40008000 	.word	0x40008000

08002f28 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_UART_TxCpltCallback+0x4c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00a      	beq.n	8002f50 <HAL_UART_TxCpltCallback+0x28>
 8002f3a:	4a0f      	ldr	r2, [pc, #60]	; (8002f78 <HAL_UART_TxCpltCallback+0x50>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10f      	bne.n	8002f60 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_UART_TxCpltCallback+0x54>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_UART_TxCpltCallback+0x54>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4798      	blx	r3
            }
            break;
 8002f4e:	e009      	b.n	8002f64 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_UART_TxCpltCallback+0x58>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_UART_TxCpltCallback+0x58>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4798      	blx	r3
            }
            break;
 8002f5e:	e003      	b.n	8002f68 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002f60:	bf00      	nop
 8002f62:	e002      	b.n	8002f6a <HAL_UART_TxCpltCallback+0x42>
            break;
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <HAL_UART_TxCpltCallback+0x42>
            break;
 8002f68:	bf00      	nop
    }

    return;
 8002f6a:	bf00      	nop
}
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40008000 	.word	0x40008000
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	20000300 	.word	0x20000300
 8002f80:	20000304 	.word	0x20000304

08002f84 <LL_RCC_LSE_SetDriveCapability>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f023 0218 	bic.w	r2, r3, #24
 8002f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_AHB1_GRP1_EnableClock>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_AHB2_GRP1_EnableClock>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4013      	ands	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_APB1_GRP1_EnableClock>:
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4313      	orrs	r3, r2
 800302a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800304c:	f000 fd84 	bl	8003b58 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8003050:	f7fe fee4 	bl	8001e1c <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003054:	f000 f824 	bl	80030a0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8003058:	f000 f87e 	bl	8003158 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 800305c:	f000 f89c 	bl	8003198 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003060:	f000 f962 	bl	8003328 <MX_GPIO_Init>
	MX_DMA_Init();
 8003064:	f000 f946 	bl	80032f4 <MX_DMA_Init>
	MX_RF_Init();
 8003068:	f000 f908 	bl	800327c <MX_RF_Init>
	MX_RTC_Init();
 800306c:	f000 f90e 	bl	800328c <MX_RTC_Init>
	MX_I2C1_Init();
 8003070:	f000 f8a6 	bl	80031c0 <MX_I2C1_Init>

	/*--[ Scanning Done ]--*/
	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8003074:	f7fe fee0 	bl	8001e38 <MX_APPE_Init>
	app_algo_init();
 8003078:	f7fe fe02 	bl	8001c80 <app_algo_init>

	sensirion_i2c_init(&hi2c1);
 800307c:	4807      	ldr	r0, [pc, #28]	; (800309c <main+0x54>)
 800307e:	f7fd f9e3 	bl	8000448 <sensirion_i2c_init>

	sht4x_enable_low_power_mode(1);
 8003082:	2001      	movs	r0, #1
 8003084:	f7fd faaa 	bl	80005dc <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 8003088:	4804      	ldr	r0, [pc, #16]	; (800309c <main+0x54>)
 800308a:	f7fd fac9 	bl	8000620 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x04);
 800308e:	2004      	movs	r0, #4
 8003090:	f7fd fb58 	bl	8000744 <stts22h_temp_data_rate_set>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 8003094:	f7ff f807 	bl	80020a6 <MX_APPE_Process>
 8003098:	e7fc      	b.n	8003094 <main+0x4c>
 800309a:	bf00      	nop
 800309c:	2000052c 	.word	0x2000052c

080030a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b09a      	sub	sp, #104	; 0x68
 80030a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030a6:	f107 0320 	add.w	r3, r7, #32
 80030aa:	2248      	movs	r2, #72	; 0x48
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f007 fb6a 	bl	800a788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	615a      	str	r2, [r3, #20]
 80030c4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80030c6:	f002 f9e7 	bl	8005498 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7ff ff5a 	bl	8002f84 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <SystemClock_Config+0xb4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <SystemClock_Config+0xb4>)
 80030da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <SystemClock_Config+0xb4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80030ec:	2307      	movs	r3, #7
 80030ee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030f6:	2301      	movs	r3, #1
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003100:	2340      	movs	r3, #64	; 0x40
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003104:	2300      	movs	r3, #0
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003108:	f107 0320 	add.w	r3, r7, #32
 800310c:	4618      	mov	r0, r3
 800310e:	f002 fdbd 	bl	8005c8c <HAL_RCC_OscConfig>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003118:	f000 f930 	bl	800337c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800311c:	236f      	movs	r3, #111	; 0x6f
 800311e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003120:	2302      	movs	r3, #2
 8003122:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f003 f919 	bl	8006374 <HAL_RCC_ClockConfig>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003148:	f000 f918 	bl	800337c <Error_Handler>
  }
}
 800314c:	bf00      	nop
 800314e:	3768      	adds	r7, #104	; 0x68
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58000400 	.word	0x58000400

08003158 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b094      	sub	sp, #80	; 0x50
 800315c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800315e:	463b      	mov	r3, r7
 8003160:	2250      	movs	r2, #80	; 0x50
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f007 fb0f 	bl	800a788 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 800316a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316e:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003170:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003174:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003176:	2302      	movs	r3, #2
 8003178:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800317a:	2300      	movs	r3, #0
 800317c:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800317e:	463b      	mov	r3, r7
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fd08 	bl	8006b96 <HAL_RCCEx_PeriphCLKConfig>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 800318c:	f000 f8f6 	bl	800337c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8003190:	bf00      	nop
 8003192:	3750      	adds	r7, #80	; 0x50
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_IPCC_Init+0x20>)
 800319e:	4a07      	ldr	r2, [pc, #28]	; (80031bc <MX_IPCC_Init+0x24>)
 80031a0:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <MX_IPCC_Init+0x20>)
 80031a4:	f002 f8f2 	bl	800538c <HAL_IPCC_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_IPCC_Init+0x1a>
		Error_Handler();
 80031ae:	f000 f8e5 	bl	800337c <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000308 	.word	0x20000308
 80031bc:	58000c00 	.word	0x58000c00

080031c0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 80031c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80031ca:	f7ff ff23 	bl	8003014 <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	2002      	movs	r0, #2
 80031d0:	f7ff ff07 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80031d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031d8:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80031da:	2312      	movs	r3, #18
 80031dc:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80031de:	2301      	movs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80031e6:	2304      	movs	r3, #4
 80031e8:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4820      	ldr	r0, [pc, #128]	; (8003270 <MX_I2C1_Init+0xb0>)
 80031f0:	f001 f948 	bl	8004484 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <MX_I2C1_Init+0xb4>)
 80031f6:	4a20      	ldr	r2, [pc, #128]	; (8003278 <MX_I2C1_Init+0xb8>)
 80031f8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <MX_I2C1_Init+0xb4>)
 80031fc:	f640 6214 	movw	r2, #3604	; 0xe14
 8003200:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <MX_I2C1_Init+0xb4>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <MX_I2C1_Init+0xb4>)
 800320a:	2201      	movs	r2, #1
 800320c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <MX_I2C1_Init+0xb4>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <MX_I2C1_Init+0xb4>)
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <MX_I2C1_Init+0xb4>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <MX_I2C1_Init+0xb4>)
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <MX_I2C1_Init+0xb4>)
 8003228:	2200      	movs	r2, #0
 800322a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800322c:	4811      	ldr	r0, [pc, #68]	; (8003274 <MX_I2C1_Init+0xb4>)
 800322e:	f001 fb07 	bl	8004840 <HAL_I2C_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_I2C1_Init+0x7c>
		Error_Handler();
 8003238:	f000 f8a0 	bl	800337c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800323c:	2100      	movs	r1, #0
 800323e:	480d      	ldr	r0, [pc, #52]	; (8003274 <MX_I2C1_Init+0xb4>)
 8003240:	f001 fffa 	bl	8005238 <HAL_I2CEx_ConfigAnalogFilter>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800324a:	f000 f897 	bl	800337c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800324e:	2100      	movs	r1, #0
 8003250:	4808      	ldr	r0, [pc, #32]	; (8003274 <MX_I2C1_Init+0xb4>)
 8003252:	f002 f83c 	bl	80052ce <HAL_I2CEx_ConfigDigitalFilter>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_I2C1_Init+0xa0>
		Error_Handler();
 800325c:	f000 f88e 	bl	800337c <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003260:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003264:	f002 f880 	bl	8005368 <HAL_I2CEx_EnableFastModePlus>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	48000400 	.word	0x48000400
 8003274:	2000052c 	.word	0x2000052c
 8003278:	40005400 	.word	0x40005400

0800327c <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <MX_RTC_Init+0x60>)
 8003292:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <MX_RTC_Init+0x64>)
 8003294:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <MX_RTC_Init+0x60>)
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <MX_RTC_Init+0x60>)
 800329e:	220f      	movs	r2, #15
 80032a0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <MX_RTC_Init+0x60>)
 80032a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80032a8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <MX_RTC_Init+0x60>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <MX_RTC_Init+0x60>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <MX_RTC_Init+0x60>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <MX_RTC_Init+0x60>)
 80032be:	2200      	movs	r2, #0
 80032c0:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80032c2:	480a      	ldr	r0, [pc, #40]	; (80032ec <MX_RTC_Init+0x60>)
 80032c4:	f003 feee 	bl	80070a4 <HAL_RTC_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_RTC_Init+0x46>
		Error_Handler();
 80032ce:	f000 f855 	bl	800337c <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	4805      	ldr	r0, [pc, #20]	; (80032ec <MX_RTC_Init+0x60>)
 80032d8:	f003 ffe4 	bl	80072a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80032e2:	f000 f84b 	bl	800337c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000580 	.word	0x20000580
 80032f0:	40002800 	.word	0x40002800

080032f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80032f8:	2004      	movs	r0, #4
 80032fa:	f7ff fe59 	bl	8002fb0 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80032fe:	2001      	movs	r0, #1
 8003300:	f7ff fe56 	bl	8002fb0 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003304:	2200      	movs	r2, #0
 8003306:	2100      	movs	r1, #0
 8003308:	200b      	movs	r0, #11
 800330a:	f000 fe2e 	bl	8003f6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800330e:	200b      	movs	r0, #11
 8003310:	f000 fe45 	bl	8003f9e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	200c      	movs	r0, #12
 800331a:	f000 fe26 	bl	8003f6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800331e:	200c      	movs	r0, #12
 8003320:	f000 fe3d 	bl	8003f9e <HAL_NVIC_EnableIRQ>

}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}

08003328 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800332e:	2004      	movs	r0, #4
 8003330:	f7ff fe57 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003334:	2001      	movs	r0, #1
 8003336:	f7ff fe54 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800333a:	2002      	movs	r0, #2
 800333c:	f7ff fe51 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800334e:	2303      	movs	r3, #3
 8003350:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003352:	2301      	movs	r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <MX_GPIO_Init+0x50>)
 8003364:	f001 f88e 	bl	8004484 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003368:	2102      	movs	r1, #2
 800336a:	4803      	ldr	r0, [pc, #12]	; (8003378 <MX_GPIO_Init+0x50>)
 800336c:	f001 fa12 	bl	8004794 <HAL_GPIO_TogglePin>

}
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	48000800 	.word	0x48000800

0800337c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <LL_PWR_SetPowerMode>:
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <LL_PWR_SetPowerMode+0x24>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 0207 	bic.w	r2, r3, #7
 800339c:	4904      	ldr	r1, [pc, #16]	; (80033b0 <LL_PWR_SetPowerMode+0x24>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	58000400 	.word	0x58000400

080033b4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <LL_PWR_ClearFlag_WU+0x14>)
 80033ba:	221f      	movs	r2, #31
 80033bc:	619a      	str	r2, [r3, #24]
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	58000400 	.word	0x58000400

080033cc <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d101      	bne.n	80033e4 <LL_PWR_IsActiveFlag_C2SB+0x18>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	58000400 	.word	0x58000400

080033f4 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003406:	d101      	bne.n	800340c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	58000400 	.word	0x58000400

0800341c <LL_RCC_HSE_Enable>:
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800342a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <LL_RCC_HSE_IsReady>:
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800344c:	d101      	bne.n	8003452 <LL_RCC_HSE_IsReady+0x18>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <LL_RCC_HSE_IsReady+0x1a>
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_RCC_HSI_Enable>:
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_RCC_HSI_IsReady>:
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d101      	bne.n	8003494 <LL_RCC_HSI_IsReady+0x18>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <LL_RCC_HSI_IsReady+0x1a>
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_RCC_SetSysClkSource>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_RCC_GetSysClkSource>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_LPM_EnableSleep>:
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <LL_LPM_EnableSleep+0x1c>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <LL_LPM_EnableSleep+0x1c>)
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	6113      	str	r3, [r2, #16]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <LL_LPM_EnableDeepSleep+0x1c>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <LL_LPM_EnableDeepSleep+0x1c>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6113      	str	r3, [r2, #16]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	3220      	adds	r2, #32
 8003558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800355c:	4a05      	ldr	r2, [pc, #20]	; (8003574 <LL_HSEM_1StepLock+0x2c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d001      	beq.n	8003566 <LL_HSEM_1StepLock+0x1e>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <LL_HSEM_1StepLock+0x20>
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	80000400 	.word	0x80000400

08003578 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 80035a2:	f000 fb6b 	bl	8003c7c <HAL_SuspendTick>

  EnterLowPower();
 80035a6:	f000 f835 	bl	8003614 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 80035aa:	f7ff ff03 	bl	80033b4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 80035ae:	2003      	movs	r0, #3
 80035b0:	f7ff feec 	bl	800338c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80035b4:	f7ff ffb8 	bl	8003528 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80035b8:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 80035ba:	bf00      	nop
}
 80035bc:	bd80      	pop	{r7, pc}

080035be <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 80035c2:	f000 fb6b 	bl	8003c9c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 80035c6:	bf00      	nop
}
 80035c8:	bd80      	pop	{r7, pc}

080035ca <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 80035ce:	f000 fb55 	bl	8003c7c <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 80035d2:	f000 f81f 	bl	8003614 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/

  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 80035d6:	2002      	movs	r0, #2
 80035d8:	f7ff fed8 	bl	800338c <LL_PWR_SetPowerMode>

 // LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80035dc:	f7ff ffa4 	bl	8003528 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80035e0:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 80035e2:	bf00      	nop
}
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 80035ea:	f000 f84f 	bl	800368c <ExitLowPower>

  HAL_ResumeTick();
 80035ee:	f000 fb55 	bl	8003c9c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 80035f2:	bf00      	nop
}
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 80035fa:	f000 fb3f 	bl	8003c7c <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80035fe:	f7ff ff83 	bl	8003508 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003602:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8003604:	bf00      	nop
}
 8003606:	bd80      	pop	{r7, pc}

08003608 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 800360c:	f000 fb46 	bl	8003c9c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8003610:	bf00      	nop
}
 8003612:	bd80      	pop	{r7, pc}

08003614 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003618:	bf00      	nop
 800361a:	2103      	movs	r1, #3
 800361c:	4819      	ldr	r0, [pc, #100]	; (8003684 <EnterLowPower+0x70>)
 800361e:	f7ff ff93 	bl	8003548 <LL_HSEM_1StepLock>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f8      	bne.n	800361a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8003628:	2104      	movs	r1, #4
 800362a:	4816      	ldr	r0, [pc, #88]	; (8003684 <EnterLowPower+0x70>)
 800362c:	f7ff ff8c 	bl	8003548 <LL_HSEM_1StepLock>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d117      	bne.n	8003666 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8003636:	f7ff fedd 	bl	80033f4 <LL_PWR_IsActiveFlag_C2DS>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <EnterLowPower+0x36>
 8003640:	f7ff fec4 	bl	80033cc <LL_PWR_IsActiveFlag_C2SB>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2104      	movs	r1, #4
 800364e:	480d      	ldr	r0, [pc, #52]	; (8003684 <EnterLowPower+0x70>)
 8003650:	f7ff ff92 	bl	8003578 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8003654:	f000 f852 	bl	80036fc <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <EnterLowPower+0x74>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <EnterLowPower+0x74>)
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e007      	b.n	8003676 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8003666:	f000 f849 	bl	80036fc <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <EnterLowPower+0x74>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a06      	ldr	r2, [pc, #24]	; (8003688 <EnterLowPower+0x74>)
 8003670:	f023 0307 	bic.w	r3, r3, #7
 8003674:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2103      	movs	r1, #3
 800367a:	4802      	ldr	r0, [pc, #8]	; (8003684 <EnterLowPower+0x70>)
 800367c:	f7ff ff7c 	bl	8003578 <LL_HSEM_ReleaseLock>

  return;
 8003680:	bf00      	nop
}
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58001400 	.word	0x58001400
 8003688:	58004000 	.word	0x58004000

0800368c <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2104      	movs	r1, #4
 8003694:	4817      	ldr	r0, [pc, #92]	; (80036f4 <ExitLowPower+0x68>)
 8003696:	f7ff ff6f 	bl	8003578 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 800369a:	bf00      	nop
 800369c:	2103      	movs	r1, #3
 800369e:	4815      	ldr	r0, [pc, #84]	; (80036f4 <ExitLowPower+0x68>)
 80036a0:	f7ff ff52 	bl	8003548 <LL_HSEM_1StepLock>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f8      	bne.n	800369c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80036aa:	f7ff ff0d 	bl	80034c8 <LL_RCC_GetSysClkSource>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d118      	bne.n	80036e6 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 80036b4:	f7ff feb2 	bl	800341c <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <ExitLowPower+0x6c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 0307 	bic.w	r3, r3, #7
 80036c0:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <ExitLowPower+0x6c>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 80036c8:	bf00      	nop
 80036ca:	f7ff feb6 	bl	800343a <LL_RCC_HSE_IsReady>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0fa      	beq.n	80036ca <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80036d4:	2002      	movs	r0, #2
 80036d6:	f7ff fee3 	bl	80034a0 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 80036da:	bf00      	nop
 80036dc:	f7ff fef4 	bl	80034c8 <LL_RCC_GetSysClkSource>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d1fa      	bne.n	80036dc <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2103      	movs	r1, #3
 80036ea:	4802      	ldr	r0, [pc, #8]	; (80036f4 <ExitLowPower+0x68>)
 80036ec:	f7ff ff44 	bl	8003578 <LL_HSEM_ReleaseLock>

  return;
 80036f0:	bf00      	nop
}
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	58001400 	.word	0x58001400
 80036f8:	58004000 	.word	0x58004000

080036fc <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8003700:	f7ff fead 	bl	800345e <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8003704:	bf00      	nop
 8003706:	f7ff feb9 	bl	800347c <LL_RCC_HSI_IsReady>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0fa      	beq.n	8003706 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff fec5 	bl	80034a0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8003716:	2000      	movs	r0, #0
 8003718:	f7ff fee2 	bl	80034e0 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800371c:	bf00      	nop
 800371e:	f7ff fed3 	bl	80034c8 <LL_RCC_GetSysClkSource>
 8003722:	4603      	mov	r3, r0
 8003724:	2b04      	cmp	r3, #4
 8003726:	d1fa      	bne.n	800371e <Switch_On_HSI+0x22>
  return;
 8003728:	bf00      	nop
}
 800372a:	bd80      	pop	{r7, pc}

0800372c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <LL_AHB3_GRP1_EnableClock>:
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4313      	orrs	r3, r2
 8003790:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4013      	ands	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_APB1_GRP1_EnableClock>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80037c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037d0:	68fb      	ldr	r3, [r7, #12]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80037e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037e6:	f7ff ffc8 	bl	800377a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	2100      	movs	r1, #0
 80037ee:	2001      	movs	r0, #1
 80037f0:	f000 fbbb 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80037f4:	2001      	movs	r0, #1
 80037f6:	f000 fbd2 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	2004      	movs	r0, #4
 8003800:	f000 fbb3 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003804:	2004      	movs	r0, #4
 8003806:	f000 fbca 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	2005      	movs	r0, #5
 8003810:	f000 fbab 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003814:	2005      	movs	r0, #5
 8003816:	f000 fbc2 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	2100      	movs	r1, #0
 800381e:	2015      	movs	r0, #21
 8003820:	f000 fba3 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003824:	2015      	movs	r0, #21
 8003826:	f000 fbba 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	202b      	movs	r0, #43	; 0x2b
 8003830:	f000 fb9b 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003834:	202b      	movs	r0, #43	; 0x2b
 8003836:	f000 fbb2 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800383a:	2200      	movs	r2, #0
 800383c:	2100      	movs	r1, #0
 800383e:	202e      	movs	r0, #46	; 0x2e
 8003840:	f000 fb93 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003844:	202e      	movs	r0, #46	; 0x2e
 8003846:	f000 fbaa 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800384a:	2200      	movs	r2, #0
 800384c:	2100      	movs	r1, #0
 800384e:	2036      	movs	r0, #54	; 0x36
 8003850:	f000 fb8b 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003854:	2036      	movs	r0, #54	; 0x36
 8003856:	f000 fba2 	bl	8003f9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <HAL_IPCC_MspInit+0x44>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d113      	bne.n	800389a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003876:	f7ff ff80 	bl	800377a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	202c      	movs	r0, #44	; 0x2c
 8003880:	f000 fb73 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003884:	202c      	movs	r0, #44	; 0x2c
 8003886:	f000 fb8a 	bl	8003f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2100      	movs	r1, #0
 800388e:	202d      	movs	r0, #45	; 0x2d
 8003890:	f000 fb6b 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003894:	202d      	movs	r0, #45	; 0x2d
 8003896:	f000 fb82 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	58000c00 	.word	0x58000c00

080038a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b096      	sub	sp, #88	; 0x58
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	2250      	movs	r2, #80	; 0x50
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f006 ff65 	bl	800a788 <memset>
  if(hrtc->Instance==RTC)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_RTC_MspInit+0x80>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d12b      	bne.n	8003920 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80038c8:	f001 fde6 	bl	8005498 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80038cc:	f001 fde4 	bl	8005498 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 80038d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80038d4:	f7ff ff2a 	bl	800372c <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 f954 	bl	8006b96 <HAL_RCCEx_PeriphCLKConfig>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80038f4:	f7ff fd42 	bl	800337c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038f8:	f7ff ff2e 	bl	8003758 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80038fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003900:	f7ff ff54 	bl	80037ac <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003904:	2200      	movs	r2, #0
 8003906:	2100      	movs	r1, #0
 8003908:	2003      	movs	r0, #3
 800390a:	f000 fb2e 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800390e:	2003      	movs	r0, #3
 8003910:	f000 fb45 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RTC_MspInit+0x80>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a03      	ldr	r2, [pc, #12]	; (8003928 <HAL_RTC_MspInit+0x80>)
 800391a:	f023 0307 	bic.w	r3, r3, #7
 800391e:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003920:	bf00      	nop
 8003922:	3758      	adds	r7, #88	; 0x58
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40002800 	.word	0x40002800

0800392c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <HardFault_Handler+0x4>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <MemManage_Handler+0x4>

08003946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <BusFault_Handler+0x4>

0800394c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <UsageFault_Handler+0x4>

08003952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800396e:	b480      	push	{r7}
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003980:	f000 f944 	bl	8003c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 800398c:	f001 fdea 	bl	8005564 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003998:	f7fe ff58 	bl	800284c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}

080039a0 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80039a4:	f000 fcb0 	bl	8004308 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <DMA1_Channel1_IRQHandler+0x10>)
 80039c2:	f000 fbf2 	bl	80041aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000046c 	.word	0x2000046c

080039d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <DMA1_Channel2_IRQHandler+0x10>)
 80039d6:	f000 fbe8 	bl	80041aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200004cc 	.word	0x200004cc

080039e4 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <USART1_IRQHandler+0x10>)
 80039fa:	f003 fda3 	bl	8007544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200003d8 	.word	0x200003d8

08003a08 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <LPUART1_IRQHandler+0x10>)
 8003a0e:	f003 fd99 	bl	8007544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000344 	.word	0x20000344

08003a1c <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003a2e:	f7fd ff53 	bl	80018d8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003a3a:	f7fd ffa7 	bl	800198c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003a46:	f000 fed7 	bl	80047f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8003a60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a64:	f000 feb0 	bl	80047c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003a68:	bf00      	nop
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003a6c:	b40c      	push	{r2, r3}
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	460a      	mov	r2, r1
 8003a78:	71fb      	strb	r3, [r7, #7]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	b002      	add	sp, #8
 8003a8a:	4770      	bx	lr

08003a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <SystemInit+0xa0>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <SystemInit+0xa0>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <SystemInit+0xa0>)
 8003a9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003abe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <SystemInit+0xa4>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003adc:	f023 0305 	bic.w	r3, r3, #5
 8003ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afc:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <SystemInit+0xa8>)
 8003afe:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	4a0b      	ldr	r2, [pc, #44]	; (8003b34 <SystemInit+0xa8>)
 8003b06:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000ed00 	.word	0xe000ed00
 8003b30:	faf6fefb 	.word	0xfaf6fefb
 8003b34:	22041000 	.word	0x22041000

08003b38 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6053      	str	r3, [r2, #4]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e0042000 	.word	0xe0042000

08003b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <HAL_Init+0x3c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a0b      	ldr	r2, [pc, #44]	; (8003b94 <HAL_Init+0x3c>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b6e:	2003      	movs	r0, #3
 8003b70:	f000 f9f0 	bl	8003f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b74:	2000      	movs	r0, #0
 8003b76:	f000 f80f 	bl	8003b98 <HAL_InitTick>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	e001      	b.n	8003b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b86:	f7ff fe2a 	bl	80037de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	58004000 	.word	0x58004000

08003b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <HAL_InitTick+0x6c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d024      	beq.n	8003bf6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bac:	f002 fd8e 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_InitTick+0x6c>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fa0a 	bl	8003fde <HAL_SYSTICK_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10f      	bne.n	8003bf0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	d809      	bhi.n	8003bea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	f000 f9c4 	bl	8003f6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <HAL_InitTick+0x70>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e007      	b.n	8003bfa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e004      	b.n	8003bfa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e001      	b.n	8003bfa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000034 	.word	0x20000034
 8003c08:	20000030 	.word	0x20000030

08003c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_IncTick+0x20>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_IncTick+0x24>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <HAL_IncTick+0x24>)
 8003c1e:	6013      	str	r3, [r2, #0]
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000034 	.word	0x20000034
 8003c30:	200005b0 	.word	0x200005b0

08003c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return uwTick;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_GetTick+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	200005b0 	.word	0x200005b0

08003c4c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_GetTickPrio+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000030 	.word	0x20000030

08003c64 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_GetTickFreq+0x14>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000034 	.word	0x20000034

08003c7c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_SuspendTick+0x1c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_SuspendTick+0x1c>)
 8003c86:	f023 0302 	bic.w	r3, r3, #2
 8003c8a:	6013      	str	r3, [r2, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_ResumeTick+0x1c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_ResumeTick+0x1c>)
 8003ca6:	f043 0302 	orr.w	r3, r3, #2
 8003caa:	6013      	str	r3, [r2, #0]
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003cc0:	f7ff ff3a 	bl	8003b38 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4907      	ldr	r1, [pc, #28]	; (8003d64 <__NVIC_EnableIRQ+0x38>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	db12      	blt.n	8003da0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 021f 	and.w	r2, r3, #31
 8003d80:	490a      	ldr	r1, [pc, #40]	; (8003dac <__NVIC_DisableIRQ+0x44>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2001      	movs	r0, #1
 8003d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8e:	3320      	adds	r3, #32
 8003d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d94:	f3bf 8f4f 	dsb	sy
}
 8003d98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d9a:	f3bf 8f6f 	isb	sy
}
 8003d9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000e100 	.word	0xe000e100

08003db0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	db0c      	blt.n	8003ddc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	4907      	ldr	r1, [pc, #28]	; (8003de8 <__NVIC_SetPendingIRQ+0x38>)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd6:	3340      	adds	r3, #64	; 0x40
 8003dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000e100 	.word	0xe000e100

08003dec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0c      	blt.n	8003e18 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4907      	ldr	r1, [pc, #28]	; (8003e24 <__NVIC_ClearPendingIRQ+0x38>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	3360      	adds	r3, #96	; 0x60
 8003e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	e000e100 	.word	0xe000e100

08003e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	6039      	str	r1, [r7, #0]
 8003e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	db0a      	blt.n	8003e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	490c      	ldr	r1, [pc, #48]	; (8003e74 <__NVIC_SetPriority+0x4c>)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e50:	e00a      	b.n	8003e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4908      	ldr	r1, [pc, #32]	; (8003e78 <__NVIC_SetPriority+0x50>)
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	3b04      	subs	r3, #4
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	440b      	add	r3, r1
 8003e66:	761a      	strb	r2, [r3, #24]
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	e000e100 	.word	0xe000e100
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f1c3 0307 	rsb	r3, r3, #7
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	bf28      	it	cs
 8003e9a:	2304      	movcs	r3, #4
 8003e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d902      	bls.n	8003eac <NVIC_EncodePriority+0x30>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3b03      	subs	r3, #3
 8003eaa:	e000      	b.n	8003eae <NVIC_EncodePriority+0x32>
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	43d9      	mvns	r1, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	4313      	orrs	r3, r2
         );
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3724      	adds	r7, #36	; 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003ee8:	f3bf 8f4f 	dsb	sy
}
 8003eec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <__NVIC_SystemReset+0x24>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003ef6:	4904      	ldr	r1, [pc, #16]	; (8003f08 <__NVIC_SystemReset+0x24>)
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <__NVIC_SystemReset+0x28>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003efe:	f3bf 8f4f 	dsb	sy
}
 8003f02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <__NVIC_SystemReset+0x20>
 8003f08:	e000ed00 	.word	0xe000ed00
 8003f0c:	05fa0004 	.word	0x05fa0004

08003f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f20:	d301      	bcc.n	8003f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00f      	b.n	8003f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <SysTick_Config+0x40>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2e:	210f      	movs	r1, #15
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	f7ff ff78 	bl	8003e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SysTick_Config+0x40>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <SysTick_Config+0x40>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010

08003f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff feb3 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f78:	f7ff feca 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff7a 	bl	8003e7c <NVIC_EncodePriority>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff49 	bl	8003e28 <__NVIC_SetPriority>
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff febd 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fecd 	bl	8003d68 <__NVIC_DisableIRQ>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003fda:	f7ff ff83 	bl	8003ee4 <__NVIC_SystemReset>

08003fde <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ff92 	bl	8003f10 <SysTick_Config>
 8003fec:	4603      	mov	r3, r0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fed3 	bl	8003db0 <__NVIC_SetPendingIRQ>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800401c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fee3 	bl	8003dec <__NVIC_ClearPendingIRQ>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e04f      	b.n	80040e0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d008      	beq.n	800405e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2204      	movs	r2, #4
 8004050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e040      	b.n	80040e0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 020e 	bic.w	r2, r2, #14
 800406c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800407c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f003 021c 	and.w	r2, r3, #28
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f202 	lsl.w	r2, r1, r2
 80040a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00c      	beq.n	80040ce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d005      	beq.n	8004110 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2204      	movs	r2, #4
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
 800410e:	e047      	b.n	80041a0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 020e 	bic.w	r2, r2, #14
 800411e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800413e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	f003 021c 	and.w	r2, r3, #28
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f202 	lsl.w	r2, r1, r2
 8004152:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800415c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800417e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
    }
  }
  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f003 031c 	and.w	r3, r3, #28
 80041ca:	2204      	movs	r2, #4
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d026      	beq.n	8004224 <HAL_DMA_IRQHandler+0x7a>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d021      	beq.n	8004224 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0204 	bic.w	r2, r2, #4
 80041fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f003 021c 	and.w	r2, r3, #28
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2104      	movs	r1, #4
 800420c:	fa01 f202 	lsl.w	r2, r1, r2
 8004210:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	2b00      	cmp	r3, #0
 8004218:	d071      	beq.n	80042fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004222:	e06c      	b.n	80042fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f003 031c 	and.w	r3, r3, #28
 800422c:	2202      	movs	r2, #2
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02e      	beq.n	8004296 <HAL_DMA_IRQHandler+0xec>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d029      	beq.n	8004296 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 020a 	bic.w	r2, r2, #10
 800425e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f003 021c 	and.w	r2, r3, #28
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2102      	movs	r1, #2
 8004276:	fa01 f202 	lsl.w	r2, r1, r2
 800427a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d038      	beq.n	80042fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004294:	e033      	b.n	80042fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 031c 	and.w	r3, r3, #28
 800429e:	2208      	movs	r2, #8
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02a      	beq.n	8004300 <HAL_DMA_IRQHandler+0x156>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d025      	beq.n	8004300 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 020e 	bic.w	r2, r2, #14
 80042c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c8:	f003 021c 	and.w	r2, r3, #28
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
}
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004314:	4b41      	ldr	r3, [pc, #260]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800431c:	4013      	ands	r3, r2
 800431e:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004320:	4b3e      	ldr	r3, [pc, #248]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	43db      	mvns	r3, r3
 800432a:	493c      	ldr	r1, [pc, #240]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 800432c:	4013      	ands	r3, r2
 800432e:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_FLASH_IRQHandler+0x11c>)
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	e008      	b.n	8004356 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 8004344:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d022      	beq.n	80043a2 <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800435c:	4b30      	ldr	r3, [pc, #192]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	4a2e      	ldr	r2, [pc, #184]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 8004366:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_FLASH_IRQHandler+0x7a>
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800437c:	4927      	ldr	r1, [pc, #156]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 800437e:	4313      	orrs	r3, r2
 8004380:	618b      	str	r3, [r1, #24]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <HAL_FLASH_IRQHandler+0x8e>
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004394:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f84d 	bl	800443c <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d124      	bne.n	80043f8 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 80043b4:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d117      	bne.n	80043ec <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043c4:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 80043c6:	4b16      	ldr	r3, [pc, #88]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043d6:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f837 	bl	8004450 <FLASH_PageErase>
 80043e2:	e006      	b.n	80043f2 <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
 80043ea:	e002      	b.n	80043f2 <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f818 	bl	8004428 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4a05      	ldr	r2, [pc, #20]	; (800441c <HAL_FLASH_IRQHandler+0x114>)
 8004406:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800440a:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_FLASH_IRQHandler+0x118>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
  }
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	58004000 	.word	0x58004000
 8004420:	200005b4 	.word	0x200005b4
 8004424:	00040001 	.word	0x00040001

08004428 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <FLASH_PageErase+0x30>)
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4313      	orrs	r3, r2
 8004466:	4a06      	ldr	r2, [pc, #24]	; (8004480 <FLASH_PageErase+0x30>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	6153      	str	r3, [r2, #20]
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	58004000 	.word	0x58004000

08004484 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004492:	e14c      	b.n	800472e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 813e 	beq.w	8004728 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d005      	beq.n	80044c4 <HAL_GPIO_Init+0x40>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d130      	bne.n	8004526 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044fa:	2201      	movs	r2, #1
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 0201 	and.w	r2, r3, #1
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b03      	cmp	r3, #3
 8004530:	d017      	beq.n	8004562 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	2203      	movs	r2, #3
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d123      	bne.n	80045b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	220f      	movs	r2, #15
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	08da      	lsrs	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3208      	adds	r2, #8
 80045b0:	6939      	ldr	r1, [r7, #16]
 80045b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	2203      	movs	r2, #3
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8098 	beq.w	8004728 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80045f8:	4a54      	ldr	r2, [pc, #336]	; (800474c <HAL_GPIO_Init+0x2c8>)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	3302      	adds	r3, #2
 8004600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	220f      	movs	r2, #15
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004622:	d019      	beq.n	8004658 <HAL_GPIO_Init+0x1d4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <HAL_GPIO_Init+0x2cc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_GPIO_Init+0x1d0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a49      	ldr	r2, [pc, #292]	; (8004754 <HAL_GPIO_Init+0x2d0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00d      	beq.n	8004650 <HAL_GPIO_Init+0x1cc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a48      	ldr	r2, [pc, #288]	; (8004758 <HAL_GPIO_Init+0x2d4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <HAL_GPIO_Init+0x1c8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a47      	ldr	r2, [pc, #284]	; (800475c <HAL_GPIO_Init+0x2d8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_GPIO_Init+0x1c4>
 8004644:	2304      	movs	r3, #4
 8004646:	e008      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004648:	2307      	movs	r3, #7
 800464a:	e006      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 800464c:	2303      	movs	r3, #3
 800464e:	e004      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004650:	2302      	movs	r3, #2
 8004652:	e002      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004658:	2300      	movs	r3, #0
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	f002 0203 	and.w	r2, r2, #3
 8004660:	0092      	lsls	r2, r2, #2
 8004662:	4093      	lsls	r3, r2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800466a:	4938      	ldr	r1, [pc, #224]	; (800474c <HAL_GPIO_Init+0x2c8>)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004678:	4b39      	ldr	r3, [pc, #228]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43db      	mvns	r3, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800469c:	4a30      	ldr	r2, [pc, #192]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046a2:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046f2:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80046fa:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004720:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3301      	adds	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	f47f aeab 	bne.w	8004494 <HAL_GPIO_Init+0x10>
  }
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40010000 	.word	0x40010000
 8004750:	48000400 	.word	0x48000400
 8004754:	48000800 	.word	0x48000800
 8004758:	48000c00 	.word	0x48000c00
 800475c:	48001000 	.word	0x48001000
 8004760:	58000800 	.word	0x58000800

08004764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	807b      	strh	r3, [r7, #2]
 8004770:	4613      	mov	r3, r2
 8004772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004774:	787b      	ldrb	r3, [r7, #1]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800477a:	887a      	ldrh	r2, [r7, #2]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004780:	e002      	b.n	8004788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004782:	887a      	ldrh	r2, [r7, #2]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	041a      	lsls	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43d9      	mvns	r1, r3
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	400b      	ands	r3, r1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d006      	beq.n	80047ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fcc4 	bl	8002174 <HAL_GPIO_EXTI_Callback>
  }
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	58000800 	.word	0x58000800

080047f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_HSEM_IRQHandler+0x30>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_HSEM_IRQHandler+0x30>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	43db      	mvns	r3, r3
 800480c:	4906      	ldr	r1, [pc, #24]	; (8004828 <HAL_HSEM_IRQHandler+0x30>)
 800480e:	4013      	ands	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004812:	4a05      	ldr	r2, [pc, #20]	; (8004828 <HAL_HSEM_IRQHandler+0x30>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f807 	bl	800482c <HAL_HSEM_FreeCallback>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	58001500 	.word	0x58001500

0800482c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e081      	b.n	8004956 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f879 	bl	800495e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004890:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	e006      	b.n	80048c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d104      	bne.n	80048da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69d9      	ldr	r1, [r3, #28]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	461a      	mov	r2, r3
 8004980:	460b      	mov	r3, r1
 8004982:	817b      	strh	r3, [r7, #10]
 8004984:	4613      	mov	r3, r2
 8004986:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b20      	cmp	r3, #32
 8004992:	f040 80da 	bne.w	8004b4a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_I2C_Master_Transmit+0x30>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e0d3      	b.n	8004b4c <HAL_I2C_Master_Transmit+0x1d8>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ac:	f7ff f942 	bl	8003c34 <HAL_GetTick>
 80049b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2319      	movs	r3, #25
 80049b8:	2201      	movs	r2, #1
 80049ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f9e6 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0be      	b.n	8004b4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2221      	movs	r2, #33	; 0x21
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2210      	movs	r2, #16
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	893a      	ldrh	r2, [r7, #8]
 80049ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2bff      	cmp	r3, #255	; 0xff
 80049fe:	d90e      	bls.n	8004a1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	22ff      	movs	r2, #255	; 0xff
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	8979      	ldrh	r1, [r7, #10]
 8004a0e:	4b51      	ldr	r3, [pc, #324]	; (8004b54 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fbdc 	bl	80051d4 <I2C_TransferConfig>
 8004a1c:	e06c      	b.n	8004af8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	8979      	ldrh	r1, [r7, #10]
 8004a30:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fbcb 	bl	80051d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a3e:	e05b      	b.n	8004af8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	6a39      	ldr	r1, [r7, #32]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f9e3 	bl	8004e10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e07b      	b.n	8004b4c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d034      	beq.n	8004af8 <HAL_I2C_Master_Transmit+0x184>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d130      	bne.n	8004af8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f975 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e04d      	b.n	8004b4c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	; 0xff
 8004ab8:	d90e      	bls.n	8004ad8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	; 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fb7f 	bl	80051d4 <I2C_TransferConfig>
 8004ad6:	e00f      	b.n	8004af8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fb6e 	bl	80051d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d19e      	bne.n	8004a40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6a39      	ldr	r1, [r7, #32]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f9c2 	bl	8004e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e01a      	b.n	8004b4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_I2C_Master_Transmit+0x1e4>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	80002000 	.word	0x80002000
 8004b58:	fe00e800 	.word	0xfe00e800

08004b5c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	461a      	mov	r2, r3
 8004b68:	460b      	mov	r3, r1
 8004b6a:	817b      	strh	r3, [r7, #10]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	f040 80db 	bne.w	8004d34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_I2C_Master_Receive+0x30>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0d4      	b.n	8004d36 <HAL_I2C_Master_Receive+0x1da>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b94:	f7ff f84e 	bl	8003c34 <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2319      	movs	r3, #25
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f8f2 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0bf      	b.n	8004d36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2222      	movs	r2, #34	; 0x22
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	893a      	ldrh	r2, [r7, #8]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2bff      	cmp	r3, #255	; 0xff
 8004be6:	d90e      	bls.n	8004c06 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	22ff      	movs	r2, #255	; 0xff
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	8979      	ldrh	r1, [r7, #10]
 8004bf6:	4b52      	ldr	r3, [pc, #328]	; (8004d40 <HAL_I2C_Master_Receive+0x1e4>)
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fae8 	bl	80051d4 <I2C_TransferConfig>
 8004c04:	e06d      	b.n	8004ce2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	8979      	ldrh	r1, [r7, #10]
 8004c18:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <HAL_I2C_Master_Receive+0x1e4>)
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fad7 	bl	80051d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004c26:	e05c      	b.n	8004ce2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	6a39      	ldr	r1, [r7, #32]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f96b 	bl	8004f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e07c      	b.n	8004d36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d034      	beq.n	8004ce2 <HAL_I2C_Master_Receive+0x186>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d130      	bne.n	8004ce2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2180      	movs	r1, #128	; 0x80
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f880 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e04d      	b.n	8004d36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2bff      	cmp	r3, #255	; 0xff
 8004ca2:	d90e      	bls.n	8004cc2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fa8a 	bl	80051d4 <I2C_TransferConfig>
 8004cc0:	e00f      	b.n	8004ce2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	8979      	ldrh	r1, [r7, #10]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fa79 	bl	80051d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d19d      	bne.n	8004c28 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	6a39      	ldr	r1, [r7, #32]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f8cd 	bl	8004e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e01a      	b.n	8004d36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2220      	movs	r2, #32
 8004d06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_I2C_Master_Receive+0x1e8>)
 8004d14:	400b      	ands	r3, r1
 8004d16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e000      	b.n	8004d36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	80002400 	.word	0x80002400
 8004d44:	fe00e800 	.word	0xfe00e800

08004d48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d103      	bne.n	8004d66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d007      	beq.n	8004d84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	619a      	str	r2, [r3, #24]
  }
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da0:	e022      	b.n	8004de8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d01e      	beq.n	8004de8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004daa:	f7fe ff43 	bl	8003c34 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d302      	bcc.n	8004dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d113      	bne.n	8004de8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e00f      	b.n	8004e08 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d0cd      	beq.n	8004da2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e1c:	e02c      	b.n	8004e78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8ea 	bl	8004ffc <I2C_IsErrorOccurred>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e02a      	b.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d01e      	beq.n	8004e78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3a:	f7fe fefb 	bl	8003c34 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d302      	bcc.n	8004e50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d113      	bne.n	8004e78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e007      	b.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d1cb      	bne.n	8004e1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e9c:	e028      	b.n	8004ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f8aa 	bl	8004ffc <I2C_IsErrorOccurred>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e026      	b.n	8004f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fe febf 	bl	8003c34 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d113      	bne.n	8004ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e007      	b.n	8004f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d1cf      	bne.n	8004e9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f14:	e064      	b.n	8004fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f86e 	bl	8004ffc <I2C_IsErrorOccurred>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e062      	b.n	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d138      	bne.n	8004faa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d105      	bne.n	8004f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e04e      	b.n	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d107      	bne.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2210      	movs	r2, #16
 8004f66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
 8004f6e:	e002      	b.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e022      	b.n	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fe fe43 	bl	8003c34 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e007      	b.n	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d193      	bne.n	8004f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	fe00e800 	.word	0xfe00e800

08004ffc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	d075      	beq.n	8005114 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2210      	movs	r2, #16
 800502e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005030:	e056      	b.n	80050e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d052      	beq.n	80050e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fe fdfb 	bl	8003c34 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <I2C_IsErrorOccurred+0x54>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d147      	bne.n	80050e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005062:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005072:	d12e      	bne.n	80050d2 <I2C_IsErrorOccurred+0xd6>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800507a:	d02a      	beq.n	80050d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800507c:	7cfb      	ldrb	r3, [r7, #19]
 800507e:	2b20      	cmp	r3, #32
 8005080:	d027      	beq.n	80050d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005090:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005092:	f7fe fdcf 	bl	8003c34 <HAL_GetTick>
 8005096:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005098:	e01b      	b.n	80050d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800509a:	f7fe fdcb 	bl	8003c34 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b19      	cmp	r3, #25
 80050a6:	d914      	bls.n	80050d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d1dc      	bne.n	800509a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d003      	beq.n	80050f6 <I2C_IsErrorOccurred+0xfa>
 80050ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d09d      	beq.n	8005032 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2220      	movs	r2, #32
 8005104:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	f043 0304 	orr.w	r3, r3, #4
 800510c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005136:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	f043 0308 	orr.w	r3, r3, #8
 800514e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01c      	beq.n	80051c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff fddc 	bl	8004d48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <I2C_IsErrorOccurred+0x1d4>)
 800519c:	400b      	ands	r3, r1
 800519e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80051c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	fe00e800 	.word	0xfe00e800

080051d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	817b      	strh	r3, [r7, #10]
 80051e2:	4613      	mov	r3, r2
 80051e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051ec:	7a7b      	ldrb	r3, [r7, #9]
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005202:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	0d5b      	lsrs	r3, r3, #21
 800520e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <I2C_TransferConfig+0x60>)
 8005214:	430b      	orrs	r3, r1
 8005216:	43db      	mvns	r3, r3
 8005218:	ea02 0103 	and.w	r1, r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	03ff63ff 	.word	0x03ff63ff

08005238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b20      	cmp	r3, #32
 800524c:	d138      	bne.n	80052c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005258:	2302      	movs	r3, #2
 800525a:	e032      	b.n	80052c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	; 0x24
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800528a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6819      	ldr	r1, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d139      	bne.n	8005358 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e033      	b.n	800535a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2224      	movs	r2, #36	; 0x24
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005320:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	e000      	b.n	800535a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4904      	ldr	r1, [pc, #16]	; (8005388 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40010000 	.word	0x40010000

0800538c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01e      	beq.n	80053dc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <HAL_IPCC_Init+0x60>)
 80053a0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fe fa56 	bl	8003860 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80053b4:	68b8      	ldr	r0, [r7, #8]
 80053b6:	f000 f85b 	bl	8005470 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f82c 	bl	8005424 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80053da:	e001      	b.n	80053e0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	58000c00 	.word	0x58000c00

080053f0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	4613      	mov	r3, r2
 80053fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e00f      	b.n	8005452 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	4a0b      	ldr	r2, [pc, #44]	; (8005468 <IPCC_SetDefaultCallbacks+0x44>)
 800543c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3306      	adds	r3, #6
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <IPCC_SetDefaultCallbacks+0x48>)
 800544a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3301      	adds	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b05      	cmp	r3, #5
 8005456:	d9ec      	bls.n	8005432 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	080053f1 	.word	0x080053f1
 800546c:	0800540b 	.word	0x0800540b

08005470 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005484:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	223f      	movs	r2, #63	; 0x3f
 800548a:	609a      	str	r2, [r3, #8]
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a04      	ldr	r2, [pc, #16]	; (80054b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a6:	6013      	str	r3, [r2, #0]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	58000400 	.word	0x58000400

080054b8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <LL_EXTI_ReadFlag_0_31+0x1c>)
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4013      	ands	r3, r2
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	58000800 	.word	0x58000800

080054e8 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4013      	ands	r3, r2
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	58000800 	.word	0x58000800

08005508 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005510:	4a04      	ldr	r2, [pc, #16]	; (8005524 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60d3      	str	r3, [r2, #12]
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	58000800 	.word	0x58000800

08005528 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58000800 	.word	0x58000800

08005548 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <HAL_PWREx_GetVoltageRange+0x18>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005554:	4618      	mov	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	58000400 	.word	0x58000400

08005564 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8005568:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800556c:	f7ff ffac 	bl	80054c8 <LL_EXTI_ReadFlag_0_31>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005576:	f7ff ff9f 	bl	80054b8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800557a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800557e:	f7ff ffc3 	bl	8005508 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8005582:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005586:	f7ff ff9f 	bl	80054c8 <LL_EXTI_ReadFlag_0_31>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005590:	f000 f811 	bl	80055b6 <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005594:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005598:	f7ff ffb6 	bl	8005508 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 800559c:	2002      	movs	r0, #2
 800559e:	f7ff ffa3 	bl	80054e8 <LL_EXTI_ReadFlag_32_63>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80055a8:	f000 f80c 	bl	80055c4 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80055ac:	2002      	movs	r0, #2
 80055ae:	f7ff ffbb 	bl	8005528 <LL_EXTI_ClearFlag_32_63>
  }
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80055b6:	b480      	push	{r7}
 80055b8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e4:	d101      	bne.n	80055ea <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_RCC_HSE_Enable>:
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_RCC_HSE_Disable>:
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <LL_RCC_HSE_IsReady>:
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005644:	d101      	bne.n	800564a <LL_RCC_HSE_IsReady+0x18>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <LL_RCC_HSE_IsReady+0x1a>
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_RCC_HSI_Enable>:
{
 8005656:	b480      	push	{r7}
 8005658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800565a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]
}
 800566a:	bf00      	nop
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <LL_RCC_HSI_Disable>:
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_RCC_HSI_IsReady>:
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a4:	d101      	bne.n	80056aa <LL_RCC_HSI_IsReady+0x18>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <LL_RCC_HSI_IsReady+0x1a>
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80056be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	061b      	lsls	r3, r3, #24
 80056cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <LL_RCC_HSI48_Enable>:
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80056e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <LL_RCC_HSI48_Disable>:
{
 8005702:	b480      	push	{r7}
 8005704:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800570e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_RCC_HSI48_IsReady>:
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d101      	bne.n	800573c <LL_RCC_HSI48_IsReady+0x18>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <LL_RCC_HSI48_IsReady+0x1a>
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <LL_RCC_LSE_Enable>:
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800574c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <LL_RCC_LSE_Disable>:
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800576e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <LL_RCC_LSE_EnableBypass>:
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579c:	f043 0304 	orr.w	r3, r3, #4
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <LL_RCC_LSE_DisableBypass>:
{
 80057ae:	b480      	push	{r7}
 80057b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057be:	f023 0304 	bic.w	r3, r3, #4
 80057c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057c6:	bf00      	nop
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <LL_RCC_LSE_IsReady>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d101      	bne.n	80057e8 <LL_RCC_LSE_IsReady+0x18>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <LL_RCC_LSE_IsReady+0x1a>
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <LL_RCC_LSI1_Enable>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_RCC_LSI1_Disable>:
{
 8005816:	b480      	push	{r7}
 8005818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_RCC_LSI1_IsReady>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b02      	cmp	r3, #2
 800584a:	d101      	bne.n	8005850 <LL_RCC_LSI1_IsReady+0x18>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <LL_RCC_LSI1_IsReady+0x1a>
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_RCC_LSI2_Enable>:
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <LL_RCC_LSI2_Disable>:
{
 800587e:	b480      	push	{r7}
 8005880:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588e:	f023 0304 	bic.w	r3, r3, #4
 8005892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005896:	bf00      	nop
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <LL_RCC_LSI2_IsReady>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d101      	bne.n	80058b8 <LL_RCC_LSI2_IsReady+0x18>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <LL_RCC_LSI2_IsReady+0x1a>
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_RCC_LSI2_SetTrimming>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <LL_RCC_MSI_Enable>:
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6013      	str	r3, [r2, #0]
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_RCC_MSI_Disable>:
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591e:	f023 0301 	bic.w	r3, r3, #1
 8005922:	6013      	str	r3, [r2, #0]
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_RCC_MSI_IsReady>:
{
 800592e:	b480      	push	{r7}
 8005930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b02      	cmp	r3, #2
 800593e:	d101      	bne.n	8005944 <LL_RCC_MSI_IsReady+0x16>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <LL_RCC_MSI_IsReady+0x18>
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_RCC_MSI_SetRange>:
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_RCC_MSI_GetRange>:
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2bb0      	cmp	r3, #176	; 0xb0
 800598e:	d901      	bls.n	8005994 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005990:	23b0      	movs	r3, #176	; 0xb0
 8005992:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005994:	687b      	ldr	r3, [r7, #4]
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_RCC_MSI_SetCalibTrimming>:
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_RCC_SetSysClkSource>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f023 0203 	bic.w	r2, r3, #3
 80059de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	608b      	str	r3, [r1, #8]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <LL_RCC_GetSysClkSource>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <LL_RCC_SetAHBPrescaler>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <LL_RCC_SetAHB4Prescaler>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a70:	f023 020f 	bic.w	r2, r3, #15
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_RCC_SetAPB1Prescaler>:
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_SetAPB2Prescaler>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_GetAHBPrescaler>:
{
 8005ade:	b480      	push	{r7}
 8005ae0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_GetAHB4Prescaler>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b24:	6013      	str	r3, [r2, #0]
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b42:	6013      	str	r3, [r2, #0]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b60:	d101      	bne.n	8005b66 <LL_RCC_PLL_IsReady+0x18>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <LL_RCC_PLL_IsReady+0x1a>
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be6:	d101      	bne.n	8005bec <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c0c:	d101      	bne.n	8005c12 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c32:	d101      	bne.n	8005c38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c56:	d101      	bne.n	8005c5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c7a:	d101      	bne.n	8005c80 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b08d      	sub	sp, #52	; 0x34
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e363      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 808d 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cac:	f7ff fea2 	bl	80059f4 <LL_RCC_GetSysClkSource>
 8005cb0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cb2:	f7ff ff83 	bl	8005bbc <LL_RCC_PLL_GetMainSource>
 8005cb6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_RCC_OscConfig+0x3e>
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	2b0c      	cmp	r3, #12
 8005cc2:	d147      	bne.n	8005d54 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d144      	bne.n	8005d54 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e347      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005cda:	f7ff fe4d 	bl	8005978 <LL_RCC_MSI_GetRange>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d914      	bls.n	8005d0e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fd03 	bl	80066f4 <RCC_SetFlashLatencyFromMSIRange>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e336      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fe27 	bl	8005950 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff fe4b 	bl	80059a2 <LL_RCC_MSI_SetCalibTrimming>
 8005d0c:	e013      	b.n	8005d36 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fe1c 	bl	8005950 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fe40 	bl	80059a2 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fce4 	bl	80066f4 <RCC_SetFlashLatencyFromMSIRange>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e317      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d36:	f000 fcc9 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4aa4      	ldr	r2, [pc, #656]	; (8005fd0 <HAL_RCC_OscConfig+0x344>)
 8005d3e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d40:	4ba4      	ldr	r3, [pc, #656]	; (8005fd4 <HAL_RCC_OscConfig+0x348>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fd ff27 	bl	8003b98 <HAL_InitTick>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d039      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e308      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01e      	beq.n	8005d9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d5c:	f7ff fdc9 	bl	80058f2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d60:	f7fd ff68 	bl	8003c34 <HAL_GetTick>
 8005d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d68:	f7fd ff64 	bl	8003c34 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e2f5      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d7a:	f7ff fdd8 	bl	800592e <LL_RCC_MSI_IsReady>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f1      	beq.n	8005d68 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fde1 	bl	8005950 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fe05 	bl	80059a2 <LL_RCC_MSI_SetCalibTrimming>
 8005d98:	e015      	b.n	8005dc6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d9a:	f7ff fdb9 	bl	8005910 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d9e:	f7fd ff49 	bl	8003c34 <HAL_GetTick>
 8005da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005da6:	f7fd ff45 	bl	8003c34 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e2d6      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005db8:	f7ff fdb9 	bl	800592e <LL_RCC_MSI_IsReady>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f1      	bne.n	8005da6 <HAL_RCC_OscConfig+0x11a>
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005dc4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d047      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd2:	f7ff fe0f 	bl	80059f4 <LL_RCC_GetSysClkSource>
 8005dd6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dd8:	f7ff fef0 	bl	8005bbc <LL_RCC_PLL_GetMainSource>
 8005ddc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_OscConfig+0x164>
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	2b0c      	cmp	r3, #12
 8005de8:	d108      	bne.n	8005dfc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d105      	bne.n	8005dfc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d134      	bne.n	8005e62 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e2b4      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d102      	bne.n	8005e0c <HAL_RCC_OscConfig+0x180>
 8005e06:	f7ff fbf6 	bl	80055f6 <LL_RCC_HSE_Enable>
 8005e0a:	e001      	b.n	8005e10 <HAL_RCC_OscConfig+0x184>
 8005e0c:	f7ff fc02 	bl	8005614 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fd ff0c 	bl	8003c34 <HAL_GetTick>
 8005e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e20:	f7fd ff08 	bl	8003c34 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	; 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e299      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e32:	f7ff fbfe 	bl	8005632 <LL_RCC_HSE_IsReady>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f1      	beq.n	8005e20 <HAL_RCC_OscConfig+0x194>
 8005e3c:	e011      	b.n	8005e62 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3e:	f7fd fef9 	bl	8003c34 <HAL_GetTick>
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e46:	f7fd fef5 	bl	8003c34 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b64      	cmp	r3, #100	; 0x64
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e286      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e58:	f7ff fbeb 	bl	8005632 <LL_RCC_HSE_IsReady>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f1      	bne.n	8005e46 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d04c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e6e:	f7ff fdc1 	bl	80059f4 <LL_RCC_GetSysClkSource>
 8005e72:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e74:	f7ff fea2 	bl	8005bbc <LL_RCC_PLL_GetMainSource>
 8005e78:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_OscConfig+0x200>
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b0c      	cmp	r3, #12
 8005e84:	d10e      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e266      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fc0a 	bl	80056b6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ea2:	e031      	b.n	8005f08 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d019      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eac:	f7ff fbd3 	bl	8005656 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fd fec0 	bl	8003c34 <HAL_GetTick>
 8005eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb8:	f7fd febc 	bl	8003c34 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e24d      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005eca:	f7ff fbe2 	bl	8005692 <LL_RCC_HSI_IsReady>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f1      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fbec 	bl	80056b6 <LL_RCC_HSI_SetCalibTrimming>
 8005ede:	e013      	b.n	8005f08 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee0:	f7ff fbc8 	bl	8005674 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fd fea6 	bl	8003c34 <HAL_GetTick>
 8005ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eec:	f7fd fea2 	bl	8003c34 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e233      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005efe:	f7ff fbc8 	bl	8005692 <LL_RCC_HSI_IsReady>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f1      	bne.n	8005eec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a3 	beq.w	8006068 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d076      	beq.n	8006018 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d046      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005f36:	f7ff fc7f 	bl	8005838 <LL_RCC_LSI1_IsReady>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d113      	bne.n	8005f68 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005f40:	f7ff fc58 	bl	80057f4 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f44:	f7fd fe76 	bl	8003c34 <HAL_GetTick>
 8005f48:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f4c:	f7fd fe72 	bl	8003c34 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e203      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f5e:	f7ff fc6b 	bl	8005838 <LL_RCC_LSI1_IsReady>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f1      	beq.n	8005f4c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005f68:	f7ff fc78 	bl	800585c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fd fe62 	bl	8003c34 <HAL_GetTick>
 8005f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f74:	f7fd fe5e 	bl	8003c34 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e1ef      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f86:	f7ff fc8b 	bl	80058a0 <LL_RCC_LSI2_IsReady>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f1      	beq.n	8005f74 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fc95 	bl	80058c4 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005f9a:	f7ff fc3c 	bl	8005816 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9e:	f7fd fe49 	bl	8003c34 <HAL_GetTick>
 8005fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fa6:	f7fd fe45 	bl	8003c34 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e1d6      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005fb8:	f7ff fc3e 	bl	8005838 <LL_RCC_LSI1_IsReady>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f1      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x31a>
 8005fc2:	e051      	b.n	8006068 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005fc4:	f7ff fc16 	bl	80057f4 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7fd fe34 	bl	8003c34 <HAL_GetTick>
 8005fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005fce:	e00c      	b.n	8005fea <HAL_RCC_OscConfig+0x35e>
 8005fd0:	2000002c 	.word	0x2000002c
 8005fd4:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fd8:	f7fd fe2c 	bl	8003c34 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e1bd      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005fea:	f7ff fc25 	bl	8005838 <LL_RCC_LSI1_IsReady>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f1      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005ff4:	f7ff fc43 	bl	800587e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ffa:	f7fd fe1b 	bl	8003c34 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b03      	cmp	r3, #3
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e1ac      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800600c:	f7ff fc48 	bl	80058a0 <LL_RCC_LSI2_IsReady>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f1      	bne.n	8005ffa <HAL_RCC_OscConfig+0x36e>
 8006016:	e027      	b.n	8006068 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006018:	f7ff fc31 	bl	800587e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fd fe0a 	bl	8003c34 <HAL_GetTick>
 8006020:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006024:	f7fd fe06 	bl	8003c34 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b03      	cmp	r3, #3
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e197      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006036:	f7ff fc33 	bl	80058a0 <LL_RCC_LSI2_IsReady>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f1      	bne.n	8006024 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006040:	f7ff fbe9 	bl	8005816 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006044:	f7fd fdf6 	bl	8003c34 <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800604c:	f7fd fdf2 	bl	8003c34 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e183      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800605e:	f7ff fbeb 	bl	8005838 <LL_RCC_LSI1_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1f1      	bne.n	800604c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d05b      	beq.n	800612c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006074:	4ba7      	ldr	r3, [pc, #668]	; (8006314 <HAL_RCC_OscConfig+0x688>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d114      	bne.n	80060aa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006080:	f7ff fa0a 	bl	8005498 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006084:	f7fd fdd6 	bl	8003c34 <HAL_GetTick>
 8006088:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608c:	f7fd fdd2 	bl	8003c34 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e163      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800609e:	4b9d      	ldr	r3, [pc, #628]	; (8006314 <HAL_RCC_OscConfig+0x688>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d102      	bne.n	80060b8 <HAL_RCC_OscConfig+0x42c>
 80060b2:	f7ff fb49 	bl	8005748 <LL_RCC_LSE_Enable>
 80060b6:	e00c      	b.n	80060d2 <HAL_RCC_OscConfig+0x446>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b05      	cmp	r3, #5
 80060be:	d104      	bne.n	80060ca <HAL_RCC_OscConfig+0x43e>
 80060c0:	f7ff fb64 	bl	800578c <LL_RCC_LSE_EnableBypass>
 80060c4:	f7ff fb40 	bl	8005748 <LL_RCC_LSE_Enable>
 80060c8:	e003      	b.n	80060d2 <HAL_RCC_OscConfig+0x446>
 80060ca:	f7ff fb4e 	bl	800576a <LL_RCC_LSE_Disable>
 80060ce:	f7ff fb6e 	bl	80057ae <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d014      	beq.n	8006104 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060da:	f7fd fdab 	bl	8003c34 <HAL_GetTick>
 80060de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060e0:	e00a      	b.n	80060f8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e2:	f7fd fda7 	bl	8003c34 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e136      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060f8:	f7ff fb6a 	bl	80057d0 <LL_RCC_LSE_IsReady>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0ef      	beq.n	80060e2 <HAL_RCC_OscConfig+0x456>
 8006102:	e013      	b.n	800612c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006104:	f7fd fd96 	bl	8003c34 <HAL_GetTick>
 8006108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800610a:	e00a      	b.n	8006122 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610c:	f7fd fd92 	bl	8003c34 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	f241 3288 	movw	r2, #5000	; 0x1388
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e121      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006122:	f7ff fb55 	bl	80057d0 <LL_RCC_LSE_IsReady>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ef      	bne.n	800610c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d02c      	beq.n	8006192 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	d014      	beq.n	800616a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006140:	f7ff face 	bl	80056e0 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fd fd76 	bl	8003c34 <HAL_GetTick>
 8006148:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800614c:	f7fd fd72 	bl	8003c34 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e103      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800615e:	f7ff fae1 	bl	8005724 <LL_RCC_HSI48_IsReady>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f1      	beq.n	800614c <HAL_RCC_OscConfig+0x4c0>
 8006168:	e013      	b.n	8006192 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800616a:	f7ff faca 	bl	8005702 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616e:	f7fd fd61 	bl	8003c34 <HAL_GetTick>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006176:	f7fd fd5d 	bl	8003c34 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e0ee      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006188:	f7ff facc 	bl	8005724 <LL_RCC_HSI48_IsReady>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f1      	bne.n	8006176 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80e4 	beq.w	8006364 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800619c:	f7ff fc2a 	bl	80059f4 <LL_RCC_GetSysClkSource>
 80061a0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80061a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	f040 80b4 	bne.w	800631c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0203 	and.w	r2, r3, #3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	429a      	cmp	r2, r3
 80061c0:	d123      	bne.n	800620a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d11c      	bne.n	800620a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061dc:	429a      	cmp	r2, r3
 80061de:	d114      	bne.n	800620a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d10d      	bne.n	800620a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d106      	bne.n	800620a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006206:	429a      	cmp	r2, r3
 8006208:	d05d      	beq.n	80062c6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b0c      	cmp	r3, #12
 800620e:	d058      	beq.n	80062c2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e0a1      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006222:	f7ff fc85 	bl	8005b30 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006226:	f7fd fd05 	bl	8003c34 <HAL_GetTick>
 800622a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800622e:	f7fd fd01 	bl	8003c34 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e092      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ef      	bne.n	800622e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800624e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	4b30      	ldr	r3, [pc, #192]	; (8006318 <HAL_RCC_OscConfig+0x68c>)
 8006256:	4013      	ands	r3, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006260:	4311      	orrs	r1, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006266:	0212      	lsls	r2, r2, #8
 8006268:	4311      	orrs	r1, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800626e:	4311      	orrs	r1, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006274:	4311      	orrs	r1, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800627a:	430a      	orrs	r2, r1
 800627c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006280:	4313      	orrs	r3, r2
 8006282:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006284:	f7ff fc45 	bl	8005b12 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006296:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006298:	f7fd fccc 	bl	8003c34 <HAL_GetTick>
 800629c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fd fcc8 	bl	8003c34 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e059      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ef      	beq.n	80062a0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062c0:	e050      	b.n	8006364 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e04f      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d147      	bne.n	8006364 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80062d4:	f7ff fc1d 	bl	8005b12 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062e8:	f7fd fca4 	bl	8003c34 <HAL_GetTick>
 80062ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f0:	f7fd fca0 	bl	8003c34 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e031      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0ef      	beq.n	80062f0 <HAL_RCC_OscConfig+0x664>
 8006310:	e028      	b.n	8006364 <HAL_RCC_OscConfig+0x6d8>
 8006312:	bf00      	nop
 8006314:	58000400 	.word	0x58000400
 8006318:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	2b0c      	cmp	r3, #12
 8006320:	d01e      	beq.n	8006360 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006322:	f7ff fc05 	bl	8005b30 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006326:	f7fd fc85 	bl	8003c34 <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632e:	f7fd fc81 	bl	8003c34 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e012      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ef      	bne.n	800632e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <HAL_RCC_OscConfig+0x6e4>)
 800635a:	4013      	ands	r3, r2
 800635c:	60cb      	str	r3, [r1, #12]
 800635e:	e001      	b.n	8006364 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3734      	adds	r7, #52	; 0x34
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}
 800636e:	bf00      	nop
 8006370:	eefefffc 	.word	0xeefefffc

08006374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e12d      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006388:	4b98      	ldr	r3, [pc, #608]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d91b      	bls.n	80063ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006396:	4b95      	ldr	r3, [pc, #596]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 0207 	bic.w	r2, r3, #7
 800639e:	4993      	ldr	r1, [pc, #588]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a6:	f7fd fc45 	bl	8003c34 <HAL_GetTick>
 80063aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063ae:	f7fd fc41 	bl	8003c34 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e111      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c0:	4b8a      	ldr	r3, [pc, #552]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1ef      	bne.n	80063ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff fb14 	bl	8005a0c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063e4:	f7fd fc26 	bl	8003c34 <HAL_GetTick>
 80063e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063ec:	f7fd fc22 	bl	8003c34 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e0f2      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063fe:	f7ff fbe9 	bl	8005bd4 <LL_RCC_IsActiveFlag_HPRE>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f1      	beq.n	80063ec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d016      	beq.n	8006442 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fb0b 	bl	8005a34 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800641e:	f7fd fc09 	bl	8003c34 <HAL_GetTick>
 8006422:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006426:	f7fd fc05 	bl	8003c34 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e0d5      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006438:	f7ff fbde 	bl	8005bf8 <LL_RCC_IsActiveFlag_C2HPRE>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f1      	beq.n	8006426 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fb04 	bl	8005a60 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006458:	f7fd fbec 	bl	8003c34 <HAL_GetTick>
 800645c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006460:	f7fd fbe8 	bl	8003c34 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e0b8      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006472:	f7ff fbd4 	bl	8005c1e <LL_RCC_IsActiveFlag_SHDHPRE>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f1      	beq.n	8006460 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d016      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff fafe 	bl	8005a8e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006492:	f7fd fbcf 	bl	8003c34 <HAL_GetTick>
 8006496:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006498:	e008      	b.n	80064ac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800649a:	f7fd fbcb 	bl	8003c34 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e09b      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80064ac:	f7ff fbca 	bl	8005c44 <LL_RCC_IsActiveFlag_PPRE1>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f1      	beq.n	800649a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff faf4 	bl	8005ab6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064ce:	f7fd fbb1 	bl	8003c34 <HAL_GetTick>
 80064d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064d6:	f7fd fbad 	bl	8003c34 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e07d      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064e8:	f7ff fbbe 	bl	8005c68 <LL_RCC_IsActiveFlag_PPRE2>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f1      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d043      	beq.n	8006586 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d106      	bne.n	8006514 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006506:	f7ff f894 	bl	8005632 <LL_RCC_HSE_IsReady>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11e      	bne.n	800654e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e067      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b03      	cmp	r3, #3
 800651a:	d106      	bne.n	800652a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800651c:	f7ff fb17 	bl	8005b4e <LL_RCC_PLL_IsReady>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d113      	bne.n	800654e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e05c      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006532:	f7ff f9fc 	bl	800592e <LL_RCC_MSI_IsReady>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d108      	bne.n	800654e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e051      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006540:	f7ff f8a7 	bl	8005692 <LL_RCC_HSI_IsReady>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e04a      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fa3a 	bl	80059cc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006558:	f7fd fb6c 	bl	8003c34 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	e00a      	b.n	8006576 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006560:	f7fd fb68 	bl	8003c34 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e036      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	f7ff fa3d 	bl	80059f4 <LL_RCC_GetSysClkSource>
 800657a:	4602      	mov	r2, r0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	429a      	cmp	r2, r3
 8006584:	d1ec      	bne.n	8006560 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006586:	4b19      	ldr	r3, [pc, #100]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d21b      	bcs.n	80065cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006594:	4b15      	ldr	r3, [pc, #84]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f023 0207 	bic.w	r2, r3, #7
 800659c:	4913      	ldr	r1, [pc, #76]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a4:	f7fd fb46 	bl	8003c34 <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065aa:	e008      	b.n	80065be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065ac:	f7fd fb42 	bl	8003c34 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e012      	b.n	80065e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065be:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <HAL_RCC_ClockConfig+0x278>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d1ef      	bne.n	80065ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80065cc:	f000 f87e 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4a07      	ldr	r2, [pc, #28]	; (80065f0 <HAL_RCC_ClockConfig+0x27c>)
 80065d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80065d6:	f7fd fb39 	bl	8003c4c <HAL_GetTickPrio>
 80065da:	4603      	mov	r3, r0
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fd fadb 	bl	8003b98 <HAL_InitTick>
 80065e2:	4603      	mov	r3, r0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	58004000 	.word	0x58004000
 80065f0:	2000002c 	.word	0x2000002c

080065f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f4:	b590      	push	{r4, r7, lr}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065fa:	f7ff f9fb 	bl	80059f4 <LL_RCC_GetSysClkSource>
 80065fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10a      	bne.n	800661c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006606:	f7ff f9b7 	bl	8005978 <LL_RCC_MSI_GetRange>
 800660a:	4603      	mov	r3, r0
 800660c:	091b      	lsrs	r3, r3, #4
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	4a2b      	ldr	r2, [pc, #172]	; (80066c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e04b      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b04      	cmp	r3, #4
 8006620:	d102      	bne.n	8006628 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006622:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e045      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b08      	cmp	r3, #8
 800662c:	d10a      	bne.n	8006644 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800662e:	f7fe ffd0 	bl	80055d2 <LL_RCC_HSE_IsEnabledDiv2>
 8006632:	4603      	mov	r3, r0
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006638:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e03a      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800663e:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e037      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006644:	f7ff faba 	bl	8005bbc <LL_RCC_PLL_GetMainSource>
 8006648:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d003      	beq.n	8006658 <HAL_RCC_GetSysClockFreq+0x64>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d003      	beq.n	800665e <HAL_RCC_GetSysClockFreq+0x6a>
 8006656:	e00d      	b.n	8006674 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006658:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800665a:	60bb      	str	r3, [r7, #8]
        break;
 800665c:	e015      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800665e:	f7fe ffb8 	bl	80055d2 <LL_RCC_HSE_IsEnabledDiv2>
 8006662:	4603      	mov	r3, r0
 8006664:	2b01      	cmp	r3, #1
 8006666:	d102      	bne.n	800666e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006668:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800666a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800666c:	e00d      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800666e:	4b16      	ldr	r3, [pc, #88]	; (80066c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006670:	60bb      	str	r3, [r7, #8]
        break;
 8006672:	e00a      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006674:	f7ff f980 	bl	8005978 <LL_RCC_MSI_GetRange>
 8006678:	4603      	mov	r3, r0
 800667a:	091b      	lsrs	r3, r3, #4
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006686:	60bb      	str	r3, [r7, #8]
        break;
 8006688:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800668a:	f7ff fa72 	bl	8005b72 <LL_RCC_PLL_GetN>
 800668e:	4602      	mov	r2, r0
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	fb03 f402 	mul.w	r4, r3, r2
 8006696:	f7ff fa85 	bl	8005ba4 <LL_RCC_PLL_GetDivider>
 800669a:	4603      	mov	r3, r0
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	3301      	adds	r3, #1
 80066a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80066a4:	f7ff fa72 	bl	8005b8c <LL_RCC_PLL_GetR>
 80066a8:	4603      	mov	r3, r0
 80066aa:	0f5b      	lsrs	r3, r3, #29
 80066ac:	3301      	adds	r3, #1
 80066ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80066b2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd90      	pop	{r4, r7, pc}
 80066be:	bf00      	nop
 80066c0:	0800c3bc 	.word	0x0800c3bc
 80066c4:	00f42400 	.word	0x00f42400
 80066c8:	01e84800 	.word	0x01e84800

080066cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066cc:	b598      	push	{r3, r4, r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066d0:	f7ff ff90 	bl	80065f4 <HAL_RCC_GetSysClockFreq>
 80066d4:	4604      	mov	r4, r0
 80066d6:	f7ff fa02 	bl	8005ade <LL_RCC_GetAHBPrescaler>
 80066da:	4603      	mov	r3, r0
 80066dc:	091b      	lsrs	r3, r3, #4
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	4a03      	ldr	r2, [pc, #12]	; (80066f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80066e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	bd98      	pop	{r3, r4, r7, pc}
 80066f0:	0800c37c 	.word	0x0800c37c

080066f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2bb0      	cmp	r3, #176	; 0xb0
 8006700:	d903      	bls.n	800670a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e007      	b.n	800671a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	4a11      	ldr	r2, [pc, #68]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006718:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800671a:	f7ff f9ec 	bl	8005af6 <LL_RCC_GetAHB4Prescaler>
 800671e:	4603      	mov	r3, r0
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	4a0d      	ldr	r2, [pc, #52]	; (800675c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006732:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006738:	fba2 2303 	umull	r2, r3, r2, r3
 800673c:	0c9c      	lsrs	r4, r3, #18
 800673e:	f7fe ff03 	bl	8005548 <HAL_PWREx_GetVoltageRange>
 8006742:	4603      	mov	r3, r0
 8006744:	4619      	mov	r1, r3
 8006746:	4620      	mov	r0, r4
 8006748:	f000 f80c 	bl	8006764 <RCC_SetFlashLatency>
 800674c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bd90      	pop	{r4, r7, pc}
 8006756:	bf00      	nop
 8006758:	0800c3bc 	.word	0x0800c3bc
 800675c:	0800c37c 	.word	0x0800c37c
 8006760:	431bde83 	.word	0x431bde83

08006764 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b093      	sub	sp, #76	; 0x4c
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <RCC_SetFlashLatency+0xe8>)
 8006770:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800677a:	4a35      	ldr	r2, [pc, #212]	; (8006850 <RCC_SetFlashLatency+0xec>)
 800677c:	f107 031c 	add.w	r3, r7, #28
 8006780:	ca07      	ldmia	r2, {r0, r1, r2}
 8006782:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006786:	4b33      	ldr	r3, [pc, #204]	; (8006854 <RCC_SetFlashLatency+0xf0>)
 8006788:	f107 040c 	add.w	r4, r7, #12
 800678c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800678e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006792:	2300      	movs	r3, #0
 8006794:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679c:	d11a      	bne.n	80067d4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800679e:	2300      	movs	r3, #0
 80067a0:	643b      	str	r3, [r7, #64]	; 0x40
 80067a2:	e013      	b.n	80067cc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80067a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	3348      	adds	r3, #72	; 0x48
 80067aa:	443b      	add	r3, r7
 80067ac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d807      	bhi.n	80067c6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	3348      	adds	r3, #72	; 0x48
 80067bc:	443b      	add	r3, r7
 80067be:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80067c2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80067c4:	e020      	b.n	8006808 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c8:	3301      	adds	r3, #1
 80067ca:	643b      	str	r3, [r7, #64]	; 0x40
 80067cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d9e8      	bls.n	80067a4 <RCC_SetFlashLatency+0x40>
 80067d2:	e019      	b.n	8006808 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d8:	e013      	b.n	8006802 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80067da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	3348      	adds	r3, #72	; 0x48
 80067e0:	443b      	add	r3, r7
 80067e2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d807      	bhi.n	80067fc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	3348      	adds	r3, #72	; 0x48
 80067f2:	443b      	add	r3, r7
 80067f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80067f8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80067fa:	e005      	b.n	8006808 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fe:	3301      	adds	r3, #1
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006804:	2b02      	cmp	r3, #2
 8006806:	d9e8      	bls.n	80067da <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006808:	4b13      	ldr	r3, [pc, #76]	; (8006858 <RCC_SetFlashLatency+0xf4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 0207 	bic.w	r2, r3, #7
 8006810:	4911      	ldr	r1, [pc, #68]	; (8006858 <RCC_SetFlashLatency+0xf4>)
 8006812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006818:	f7fd fa0c 	bl	8003c34 <HAL_GetTick>
 800681c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800681e:	e008      	b.n	8006832 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006820:	f7fd fa08 	bl	8003c34 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e007      	b.n	8006842 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <RCC_SetFlashLatency+0xf4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800683c:	429a      	cmp	r2, r3
 800683e:	d1ef      	bne.n	8006820 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	374c      	adds	r7, #76	; 0x4c
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}
 800684a:	bf00      	nop
 800684c:	0800c310 	.word	0x0800c310
 8006850:	0800c320 	.word	0x0800c320
 8006854:	0800c32c 	.word	0x0800c32c
 8006858:	58004000 	.word	0x58004000

0800685c <LL_RCC_LSE_IsEnabled>:
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <LL_RCC_LSE_IsEnabled+0x18>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <LL_RCC_LSE_IsEnabled+0x1a>
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <LL_RCC_LSE_IsReady>:
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b02      	cmp	r3, #2
 8006892:	d101      	bne.n	8006898 <LL_RCC_LSE_IsReady+0x18>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <LL_RCC_LSE_IsReady+0x1a>
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <LL_RCC_SetRFWKPClockSource>:
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80068ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4313      	orrs	r3, r2
 80068c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <LL_RCC_SetSMPSClockSource>:
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80068d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	624b      	str	r3, [r1, #36]	; 0x24
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_RCC_SetSMPSPrescaler>:
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800690a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4313      	orrs	r3, r2
 8006912:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <LL_RCC_SetUSARTClockSource>:
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006930:	f023 0203 	bic.w	r2, r3, #3
 8006934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <LL_RCC_SetLPUARTClockSource>:
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_RCC_SetI2CClockSource>:
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006984:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	091b      	lsrs	r3, r3, #4
 800698c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800699c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <LL_RCC_SetLPTIMClockSource>:
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	041b      	lsls	r3, r3, #16
 80069c8:	43db      	mvns	r3, r3
 80069ca:	401a      	ands	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <LL_RCC_SetSAIClockSource>:
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80069ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <LL_RCC_SetRNGClockSource>:
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <LL_RCC_SetCLK48ClockSource>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <LL_RCC_SetUSBClockSource>:
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff ffe3 	bl	8006a3e <LL_RCC_SetCLK48ClockSource>
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <LL_RCC_SetADCClockSource>:
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <LL_RCC_SetRTCClockSource>:
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <LL_RCC_GetRTCClockSource>:
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_ForceBackupDomainReset>:
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b0a:	bf00      	nop
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b2c:	bf00      	nop
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <LL_RCC_PLLSAI1_Enable>:
{
 8006b36:	b480      	push	{r7}
 8006b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b48:	6013      	str	r3, [r2, #0]
}
 8006b4a:	bf00      	nop
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <LL_RCC_PLLSAI1_Disable>:
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b66:	6013      	str	r3, [r2, #0]
}
 8006b68:	bf00      	nop
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_PLLSAI1_IsReady>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b84:	d101      	bne.n	8006b8a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b088      	sub	sp, #32
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d034      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bba:	d021      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006bbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bc0:	d81b      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bc6:	d01d      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bcc:	d815      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd6:	d110      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006be8:	e00d      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 f947 	bl	8006e82 <RCCEx_PLLSAI1_ConfigNP>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bf8:	e005      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	77fb      	strb	r3, [r7, #31]
        break;
 8006bfe:	e002      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c06:	7ffb      	ldrb	r3, [r7, #31]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d105      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fee8 	bl	80069e6 <LL_RCC_SetSAIClockSource>
 8006c16:	e001      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7ffb      	ldrb	r3, [r7, #31]
 8006c1a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d046      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006c28:	f7ff ff56 	bl	8006ad8 <LL_RCC_GetRTCClockSource>
 8006c2c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d03c      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006c38:	f7fe fc2e 	bl	8005498 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d105      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff ff30 	bl	8006aac <LL_RCC_SetRTCClockSource>
 8006c4c:	e02e      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006c58:	f7ff ff4b 	bl	8006af2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006c5c:	f7ff ff5a 	bl	8006b14 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006c78:	f7ff fdf0 	bl	800685c <LL_RCC_LSE_IsEnabled>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d114      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c82:	f7fc ffd7 	bl	8003c34 <HAL_GetTick>
 8006c86:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006c88:	e00b      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c8a:	f7fc ffd3 	bl	8003c34 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d902      	bls.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	77fb      	strb	r3, [r7, #31]
              break;
 8006ca0:	e004      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006ca2:	f7ff fded 	bl	8006880 <LL_RCC_LSE_IsReady>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d1ee      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006cac:	7ffb      	ldrb	r3, [r7, #31]
 8006cae:	77bb      	strb	r3, [r7, #30]
 8006cb0:	e001      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
 8006cb4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fe2a 	bl	8006920 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fe35 	bl	800694c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fe5d 	bl	80069b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fe52 	bl	80069b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fe2a 	bl	8006978 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff fe1f 	bl	8006978 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d022      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fe8d 	bl	8006a6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d58:	d107      	bne.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d68:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d72:	d10b      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f8dd 	bl	8006f38 <RCCEx_PLLSAI1_ConfigNQ>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006d82:	7ffb      	ldrb	r3, [r7, #31]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006d88:	7ffb      	ldrb	r3, [r7, #31]
 8006d8a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d02b      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d008      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006daa:	d003      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d105      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fe2a 	bl	8006a12 <LL_RCC_SetRNGClockSource>
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f7ff fe21 	bl	8006a12 <LL_RCC_SetRNGClockSource>
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fe34 	bl	8006a3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006dde:	d107      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d022      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fe3d 	bl	8006a80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e0e:	d107      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e1e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e28:	d10b      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f8dd 	bl	8006fee <RCCEx_PLLSAI1_ConfigNR>
 8006e34:	4603      	mov	r3, r0
 8006e36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006e38:	7ffb      	ldrb	r3, [r7, #31]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006e3e:	7ffb      	ldrb	r3, [r7, #31]
 8006e40:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fd26 	bl	80068a4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fd45 	bl	80068f8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fd2c 	bl	80068d0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006e78:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006e8e:	f7ff fe61 	bl	8006b54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e92:	f7fc fecf 	bl	8003c34 <HAL_GetTick>
 8006e96:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006e98:	e009      	b.n	8006eae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e9a:	f7fc fecb 	bl	8003c34 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d902      	bls.n	8006eae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006eac:	e004      	b.n	8006eb8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006eae:	f7ff fe60 	bl	8006b72 <LL_RCC_PLLSAI1_IsReady>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f0      	bne.n	8006e9a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d137      	bne.n	8006f2e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006eec:	f7ff fe23 	bl	8006b36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ef0:	f7fc fea0 	bl	8003c34 <HAL_GetTick>
 8006ef4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ef6:	e009      	b.n	8006f0c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ef8:	f7fc fe9c 	bl	8003c34 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d902      	bls.n	8006f0c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	73fb      	strb	r3, [r7, #15]
        break;
 8006f0a:	e004      	b.n	8006f16 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006f0c:	f7ff fe31 	bl	8006b72 <LL_RCC_PLLSAI1_IsReady>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d1f0      	bne.n	8006ef8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d108      	bne.n	8006f2e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006f44:	f7ff fe06 	bl	8006b54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f48:	f7fc fe74 	bl	8003c34 <HAL_GetTick>
 8006f4c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f4e:	e009      	b.n	8006f64 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f50:	f7fc fe70 	bl	8003c34 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d902      	bls.n	8006f64 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	73fb      	strb	r3, [r7, #15]
      break;
 8006f62:	e004      	b.n	8006f6e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f64:	f7ff fe05 	bl	8006b72 <LL_RCC_PLLSAI1_IsReady>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d137      	bne.n	8006fe4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006fa2:	f7ff fdc8 	bl	8006b36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa6:	f7fc fe45 	bl	8003c34 <HAL_GetTick>
 8006faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fac:	e009      	b.n	8006fc2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fae:	f7fc fe41 	bl	8003c34 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d902      	bls.n	8006fc2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8006fc0:	e004      	b.n	8006fcc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fc2:	f7ff fdd6 	bl	8006b72 <LL_RCC_PLLSAI1_IsReady>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d1f0      	bne.n	8006fae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d108      	bne.n	8006fe4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006ffa:	f7ff fdab 	bl	8006b54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ffe:	f7fc fe19 	bl	8003c34 <HAL_GetTick>
 8007002:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007004:	e009      	b.n	800701a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007006:	f7fc fe15 	bl	8003c34 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d902      	bls.n	800701a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	73fb      	strb	r3, [r7, #15]
      break;
 8007018:	e004      	b.n	8007024 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800701a:	f7ff fdaa 	bl	8006b72 <LL_RCC_PLLSAI1_IsReady>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f0      	bne.n	8007006 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d137      	bne.n	800709a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800702a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800703e:	4313      	orrs	r3, r2
 8007040:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007054:	4313      	orrs	r3, r2
 8007056:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007058:	f7ff fd6d 	bl	8006b36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705c:	f7fc fdea 	bl	8003c34 <HAL_GetTick>
 8007060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007062:	e009      	b.n	8007078 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007064:	f7fc fde6 	bl	8003c34 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d902      	bls.n	8007078 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	73fb      	strb	r3, [r7, #15]
        break;
 8007076:	e004      	b.n	8007082 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007078:	f7ff fd7b 	bl	8006b72 <LL_RCC_PLLSAI1_IsReady>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	d1f0      	bne.n	8007064 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007096:	4313      	orrs	r3, r2
 8007098:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e09f      	b.n	80071f6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fc fbec 	bl	80038a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070d8:	4b49      	ldr	r3, [pc, #292]	; (8007200 <HAL_RTC_Init+0x15c>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d07e      	beq.n	80071e2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	22ca      	movs	r2, #202	; 0xca
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2253      	movs	r2, #83	; 0x53
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f8ab 	bl	8007250 <RTC_EnterInitMode>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2204      	movs	r2, #4
 800710c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e067      	b.n	80071e6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6899      	ldr	r1, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68d2      	ldr	r2, [r2, #12]
 8007150:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6919      	ldr	r1, [r3, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	041a      	lsls	r2, r3, #16
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007174:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0203 	bic.w	r2, r2, #3
 8007184:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d113      	bne.n	80071d4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f829 	bl	8007204 <HAL_RTC_WaitForSynchro>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00d      	beq.n	80071d4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	22ff      	movs	r2, #255	; 0xff
 80071be:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2204      	movs	r2, #4
 80071c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e010      	b.n	80071f6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	22ff      	movs	r2, #255	; 0xff
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
 80071e0:	e001      	b.n	80071e6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40002800 	.word	0x40002800

08007204 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800721a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800721c:	f7fc fd0a 	bl	8003c34 <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007222:	e009      	b.n	8007238 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007224:	f7fc fd06 	bl	8003c34 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007232:	d901      	bls.n	8007238 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e007      	b.n	8007248 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0ee      	beq.n	8007224 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d119      	bne.n	800729a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f04f 32ff 	mov.w	r2, #4294967295
 800726e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007270:	f7fc fce0 	bl	8003c34 <HAL_GetTick>
 8007274:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007276:	e009      	b.n	800728c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007278:	f7fc fcdc 	bl	8003c34 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007286:	d901      	bls.n	800728c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e007      	b.n	800729c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0ee      	beq.n	8007278 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e0a8      	b.n	8007410 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	22ca      	movs	r2, #202	; 0xca
 80072d4:	625a      	str	r2, [r3, #36]	; 0x24
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2253      	movs	r2, #83	; 0x53
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d020      	beq.n	800732e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80072ec:	f7fc fca2 	bl	8003c34 <HAL_GetTick>
 80072f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80072f2:	e015      	b.n	8007320 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072f4:	f7fc fc9e 	bl	8003c34 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007302:	d90d      	bls.n	8007320 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	22ff      	movs	r2, #255	; 0xff
 800730a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2203      	movs	r2, #3
 8007310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e077      	b.n	8007410 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e2      	bne.n	80072f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800734e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007350:	f7fc fc70 	bl	8003c34 <HAL_GetTick>
 8007354:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007356:	e015      	b.n	8007384 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007358:	f7fc fc6c 	bl	8003c34 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007366:	d90d      	bls.n	8007384 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	22ff      	movs	r2, #255	; 0xff
 800736e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2203      	movs	r2, #3
 8007374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e045      	b.n	8007410 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0e2      	beq.n	8007358 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0207 	bic.w	r2, r2, #7
 80073a8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6899      	ldr	r1, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c0:	4a15      	ldr	r2, [pc, #84]	; (8007418 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80073ca:	4b13      	ldr	r3, [pc, #76]	; (8007418 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a12      	ldr	r2, [pc, #72]	; (8007418 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073d4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073e4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073f4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	22ff      	movs	r2, #255	; 0xff
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	58000800 	.word	0x58000800

0800741c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800741c:	b480      	push	{r7}
 800741e:	b091      	sub	sp, #68	; 0x44
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007430:	2b20      	cmp	r3, #32
 8007432:	d178      	bne.n	8007526 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Transmit_IT+0x24>
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e071      	b.n	8007528 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2221      	movs	r2, #33	; 0x21
 800746c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007478:	d12a      	bne.n	80074d0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007482:	d107      	bne.n	8007494 <HAL_UART_Transmit_IT+0x78>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4a29      	ldr	r2, [pc, #164]	; (8007534 <HAL_UART_Transmit_IT+0x118>)
 8007490:	679a      	str	r2, [r3, #120]	; 0x78
 8007492:	e002      	b.n	800749a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a28      	ldr	r2, [pc, #160]	; (8007538 <HAL_UART_Transmit_IT+0x11c>)
 8007498:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3308      	adds	r3, #8
 80074a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3308      	adds	r3, #8
 80074b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ba:	637a      	str	r2, [r7, #52]	; 0x34
 80074bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e5      	bne.n	800749a <HAL_UART_Transmit_IT+0x7e>
 80074ce:	e028      	b.n	8007522 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d8:	d107      	bne.n	80074ea <HAL_UART_Transmit_IT+0xce>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4a15      	ldr	r2, [pc, #84]	; (800753c <HAL_UART_Transmit_IT+0x120>)
 80074e6:	679a      	str	r2, [r3, #120]	; 0x78
 80074e8:	e002      	b.n	80074f0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a14      	ldr	r2, [pc, #80]	; (8007540 <HAL_UART_Transmit_IT+0x124>)
 80074ee:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	613b      	str	r3, [r7, #16]
   return(result);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	623b      	str	r3, [r7, #32]
 8007510:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69f9      	ldr	r1, [r7, #28]
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	61bb      	str	r3, [r7, #24]
   return(result);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e000      	b.n	8007528 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007526:	2302      	movs	r3, #2
  }
}
 8007528:	4618      	mov	r0, r3
 800752a:	3744      	adds	r7, #68	; 0x44
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	08007f0b 	.word	0x08007f0b
 8007538:	08007e2b 	.word	0x08007e2b
 800753c:	08007d69 	.word	0x08007d69
 8007540:	08007cb1 	.word	0x08007cb1

08007544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b0ba      	sub	sp, #232	; 0xe8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800756a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800756e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007572:	4013      	ands	r3, r2
 8007574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d11b      	bne.n	80075b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800758c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d105      	bne.n	80075a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800759c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d009      	beq.n	80075b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 82e3 	beq.w	8007b74 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
      }
      return;
 80075b6:	e2dd      	b.n	8007b74 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8123 	beq.w	8007808 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80075c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80075c6:	4b8d      	ldr	r3, [pc, #564]	; (80077fc <HAL_UART_IRQHandler+0x2b8>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80075ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075d2:	4b8b      	ldr	r3, [pc, #556]	; (8007800 <HAL_UART_IRQHandler+0x2bc>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8116 	beq.w	8007808 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d011      	beq.n	800760c <HAL_UART_IRQHandler+0xc8>
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2201      	movs	r2, #1
 80075fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	f043 0201 	orr.w	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800760c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d011      	beq.n	800763c <HAL_UART_IRQHandler+0xf8>
 8007618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2202      	movs	r2, #2
 800762a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f043 0204 	orr.w	r2, r3, #4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d011      	beq.n	800766c <HAL_UART_IRQHandler+0x128>
 8007648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2204      	movs	r2, #4
 800765a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007662:	f043 0202 	orr.w	r2, r3, #2
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d017      	beq.n	80076a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d105      	bne.n	8007690 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007684:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007688:	4b5c      	ldr	r3, [pc, #368]	; (80077fc <HAL_UART_IRQHandler+0x2b8>)
 800768a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2208      	movs	r2, #8
 8007696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769e:	f043 0208 	orr.w	r2, r3, #8
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d012      	beq.n	80076da <HAL_UART_IRQHandler+0x196>
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00c      	beq.n	80076da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8249 	beq.w	8007b78 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d013      	beq.n	800771a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d005      	beq.n	800773e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007736:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800773a:	2b00      	cmp	r3, #0
 800773c:	d054      	beq.n	80077e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa3a 	bl	8007bb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d146      	bne.n	80077e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800776c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800777e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800778a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1d9      	bne.n	8007752 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d017      	beq.n	80077d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ae:	4a15      	ldr	r2, [pc, #84]	; (8007804 <HAL_UART_IRQHandler+0x2c0>)
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fc fc97 	bl	80040ec <HAL_DMA_Abort_IT>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d019      	beq.n	80077f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80077d2:	4610      	mov	r0, r2
 80077d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d6:	e00f      	b.n	80077f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f9d7 	bl	8007b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077de:	e00b      	b.n	80077f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9d3 	bl	8007b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e6:	e007      	b.n	80077f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f9cf 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80077f6:	e1bf      	b.n	8007b78 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f8:	bf00      	nop
    return;
 80077fa:	e1bd      	b.n	8007b78 <HAL_UART_IRQHandler+0x634>
 80077fc:	10000001 	.word	0x10000001
 8007800:	04000120 	.word	0x04000120
 8007804:	08007c85 	.word	0x08007c85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800780c:	2b01      	cmp	r3, #1
 800780e:	f040 8153 	bne.w	8007ab8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 814c 	beq.w	8007ab8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 8145 	beq.w	8007ab8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2210      	movs	r2, #16
 8007834:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	f040 80bb 	bne.w	80079bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 818f 	beq.w	8007b7c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007864:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007868:	429a      	cmp	r2, r3
 800786a:	f080 8187 	bcs.w	8007b7c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007874:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 8087 	bne.w	800799a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1da      	bne.n	800788c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800790c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e1      	bne.n	80078d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800793c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e3      	bne.n	8007912 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007968:	f023 0310 	bic.w	r3, r3, #16
 800796c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800797a:	65bb      	str	r3, [r7, #88]	; 0x58
 800797c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e4      	bne.n	8007958 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007994:	4618      	mov	r0, r3
 8007996:	f7fc fb4a 	bl	800402e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f8f3 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079ba:	e0df      	b.n	8007b7c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80d1 	beq.w	8007b80 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80079de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80cc 	beq.w	8007b80 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e4      	bne.n	80079e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a34:	f023 0301 	bic.w	r3, r3, #1
 8007a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a46:	633a      	str	r2, [r7, #48]	; 0x30
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e1      	bne.n	8007a1e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0310 	bic.w	r3, r3, #16
 8007a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	69b9      	ldr	r1, [r7, #24]
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e4      	bne.n	8007a6e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f875 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab6:	e063      	b.n	8007b80 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x59e>
 8007ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d008      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fab5 	bl	800804a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae0:	e051      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d014      	beq.n	8007b18 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d03a      	beq.n	8007b84 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
    }
    return;
 8007b16:	e035      	b.n	8007b84 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <HAL_UART_IRQHandler+0x5f4>
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fa5f 	bl	8007ff4 <UART_EndTransmit_IT>
    return;
 8007b36:	e026      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d009      	beq.n	8007b58 <HAL_UART_IRQHandler+0x614>
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fa8e 	bl	8008072 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b56:	e016      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <HAL_UART_IRQHandler+0x642>
 8007b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	da0c      	bge.n	8007b86 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa76 	bl	800805e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b72:	e008      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
      return;
 8007b74:	bf00      	nop
 8007b76:	e006      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
    return;
 8007b78:	bf00      	nop
 8007b7a:	e004      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
      return;
 8007b7c:	bf00      	nop
 8007b7e:	e002      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
      return;
 8007b80:	bf00      	nop
 8007b82:	e000      	b.n	8007b86 <HAL_UART_IRQHandler+0x642>
    return;
 8007b84:	bf00      	nop
  }
}
 8007b86:	37e8      	adds	r7, #232	; 0xe8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b095      	sub	sp, #84	; 0x54
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bde:	643b      	str	r3, [r7, #64]	; 0x40
 8007be0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007be4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e6      	bne.n	8007bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e3      	bne.n	8007bf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d118      	bne.n	8007c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f023 0310 	bic.w	r3, r3, #16
 8007c46:	647b      	str	r3, [r7, #68]	; 0x44
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6979      	ldr	r1, [r7, #20]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c78:	bf00      	nop
 8007c7a:	3754      	adds	r7, #84	; 0x54
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff ff72 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b08f      	sub	sp, #60	; 0x3c
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cbe:	2b21      	cmp	r3, #33	; 0x21
 8007cc0:	d14c      	bne.n	8007d5c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d132      	bne.n	8007d34 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d14:	633b      	str	r3, [r7, #48]	; 0x30
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6979      	ldr	r1, [r7, #20]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e6      	bne.n	8007d00 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007d32:	e013      	b.n	8007d5c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	781a      	ldrb	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	3b01      	subs	r3, #1
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007d5c:	bf00      	nop
 8007d5e:	373c      	adds	r7, #60	; 0x3c
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b091      	sub	sp, #68	; 0x44
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	2b21      	cmp	r3, #33	; 0x21
 8007d78:	d151      	bne.n	8007e1e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d132      	bne.n	8007dec <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	623b      	str	r3, [r7, #32]
   return(result);
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
 8007da6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e6      	bne.n	8007d86 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	69b9      	ldr	r1, [r7, #24]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	617b      	str	r3, [r7, #20]
   return(result);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e6      	bne.n	8007db8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007dea:	e018      	b.n	8007e1e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e00:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e06:	1c9a      	adds	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	3b01      	subs	r3, #1
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007e1e:	bf00      	nop
 8007e20:	3744      	adds	r7, #68	; 0x44
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b091      	sub	sp, #68	; 0x44
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e38:	2b21      	cmp	r3, #33	; 0x21
 8007e3a:	d160      	bne.n	8007efe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e42:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007e44:	e057      	b.n	8007ef6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d133      	bne.n	8007eba <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	623b      	str	r3, [r7, #32]
   return(result);
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e72:	633a      	str	r2, [r7, #48]	; 0x30
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e5      	bne.n	8007e52 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007eb8:	e021      	b.n	8007efe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d013      	beq.n	8007ef0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007ef0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007ef6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1a4      	bne.n	8007e46 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007efc:	e7ff      	b.n	8007efe <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007efe:	bf00      	nop
 8007f00:	3744      	adds	r7, #68	; 0x44
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b091      	sub	sp, #68	; 0x44
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f18:	2b21      	cmp	r3, #33	; 0x21
 8007f1a:	d165      	bne.n	8007fe8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f22:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f24:	e05c      	b.n	8007fe0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d133      	bne.n	8007f9a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3308      	adds	r3, #8
 8007f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e5      	bne.n	8007f32 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	61bb      	str	r3, [r7, #24]
 8007f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007f98:	e026      	b.n	8007fe8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d018      	beq.n	8007fda <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fac:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fbc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc2:	1c9a      	adds	r2, r3, #2
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007fda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007fe0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d19f      	bne.n	8007f26 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007fe6:	e7ff      	b.n	8007fe8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007fe8:	bf00      	nop
 8007fea:	3744      	adds	r7, #68	; 0x44
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	60bb      	str	r3, [r7, #8]
   return(result);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	613b      	str	r3, [r7, #16]
   return(result);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e6      	bne.n	8007ffc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7fa ff73 	bl	8002f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008042:	bf00      	nop
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008090:	f7f9 fa72 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008094:	f7f9 fa02 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8008098:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f062 0208 	orn	r2, r2, #8
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	2200      	movs	r2, #0
 80080a6:	705a      	strb	r2, [r3, #1]
 80080a8:	2200      	movs	r2, #0
 80080aa:	709a      	strb	r2, [r3, #2]
 80080ac:	2200      	movs	r2, #0
 80080ae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f042 0201 	orr.w	r2, r2, #1
 80080b8:	711a      	strb	r2, [r3, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	715a      	strb	r2, [r3, #5]
 80080be:	2200      	movs	r2, #0
 80080c0:	719a      	strb	r2, [r3, #6]
 80080c2:	2200      	movs	r2, #0
 80080c4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80080cc:	f7f9 fa2e 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80080d0:	f7f9 f9f0 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80080d4:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]

}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
 80080ee:	4613      	mov	r3, r2
 80080f0:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80080f2:	f7f9 fa41 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80080f6:	f7f9 f9d1 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80080fa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f062 0228 	orn	r2, r2, #40	; 0x28
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	2200      	movs	r2, #0
 8008108:	705a      	strb	r2, [r3, #1]
 800810a:	2200      	movs	r2, #0
 800810c:	709a      	strb	r2, [r3, #2]
 800810e:	2200      	movs	r2, #0
 8008110:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f042 0203 	orr.w	r2, r2, #3
 800811a:	711a      	strb	r2, [r3, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	715a      	strb	r2, [r3, #5]
 8008120:	2200      	movs	r2, #0
 8008122:	719a      	strb	r2, [r3, #6]
 8008124:	2200      	movs	r2, #0
 8008126:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 8008134:	78ba      	ldrb	r2, [r7, #2]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800813a:	f7f9 f9f7 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800813e:	f7f9 f9b9 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008142:	60f8      	str	r0, [r7, #12]
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4611      	mov	r1, r2
 8008158:	461a      	mov	r2, r3
 800815a:	460b      	mov	r3, r1
 800815c:	71fb      	strb	r3, [r7, #7]
 800815e:	4613      	mov	r3, r2
 8008160:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8008162:	f7f9 fa09 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008166:	f7f9 f999 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800816a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2200      	movs	r2, #0
 8008170:	f062 0227 	orn	r2, r2, #39	; 0x27
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	705a      	strb	r2, [r3, #1]
 800817a:	2200      	movs	r2, #0
 800817c:	709a      	strb	r2, [r3, #2]
 800817e:	2200      	movs	r2, #0
 8008180:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2200      	movs	r2, #0
 8008186:	f042 0204 	orr.w	r2, r2, #4
 800818a:	711a      	strb	r2, [r3, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	715a      	strb	r2, [r3, #5]
 8008190:	2200      	movs	r2, #0
 8008192:	719a      	strb	r2, [r3, #6]
 8008194:	2200      	movs	r2, #0
 8008196:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 80081a4:	79fa      	ldrb	r2, [r7, #7]
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 80081aa:	79ba      	ldrb	r2, [r7, #6]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 80081b0:	f7f9 f9bc 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80081b4:	f7f9 f97e 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80081b8:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	b2db      	uxtb	r3, r3
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 80081d6:	f7f9 f9cf 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80081da:	f7f9 f95f 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80081de:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f062 0226 	orn	r2, r2, #38	; 0x26
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	2200      	movs	r2, #0
 80081ec:	705a      	strb	r2, [r3, #1]
 80081ee:	2200      	movs	r2, #0
 80081f0:	709a      	strb	r2, [r3, #2]
 80081f2:	2200      	movs	r2, #0
 80081f4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f042 0203 	orr.w	r2, r2, #3
 80081fe:	711a      	strb	r2, [r3, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	715a      	strb	r2, [r3, #5]
 8008204:	2200      	movs	r2, #0
 8008206:	719a      	strb	r2, [r3, #6]
 8008208:	2200      	movs	r2, #0
 800820a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 8008218:	79fa      	ldrb	r2, [r7, #7]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800821e:	f7f9 f985 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008222:	f7f9 f947 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008226:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	b2db      	uxtb	r3, r3
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008242:	f7f9 f999 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008246:	f7f9 f929 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800824a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f062 0225 	orn	r2, r2, #37	; 0x25
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	2200      	movs	r2, #0
 8008258:	705a      	strb	r2, [r3, #1]
 800825a:	2200      	movs	r2, #0
 800825c:	709a      	strb	r2, [r3, #2]
 800825e:	2200      	movs	r2, #0
 8008260:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f042 0202 	orr.w	r2, r2, #2
 800826a:	711a      	strb	r2, [r3, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	715a      	strb	r2, [r3, #5]
 8008270:	2200      	movs	r2, #0
 8008272:	719a      	strb	r2, [r3, #6]
 8008274:	2200      	movs	r2, #0
 8008276:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8008284:	f7f9 f952 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008288:	f7f9 f914 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800828c:	60f8      	str	r0, [r7, #12]
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80082a0:	f7f9 f96a 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80082a4:	f7f9 f8fa 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80082a8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f062 0220 	orn	r2, r2, #32
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	2200      	movs	r2, #0
 80082b6:	705a      	strb	r2, [r3, #1]
 80082b8:	2200      	movs	r2, #0
 80082ba:	709a      	strb	r2, [r3, #2]
 80082bc:	2200      	movs	r2, #0
 80082be:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f042 0202 	orr.w	r2, r2, #2
 80082c8:	711a      	strb	r2, [r3, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	715a      	strb	r2, [r3, #5]
 80082ce:	2200      	movs	r2, #0
 80082d0:	719a      	strb	r2, [r3, #6]
 80082d2:	2200      	movs	r2, #0
 80082d4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80082e2:	f7f9 f923 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80082e6:	f7f9 f8e5 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80082ea:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	b2db      	uxtb	r3, r3
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008302:	f7f9 f939 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008306:	f7f9 f8c9 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800830a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f062 0219 	orn	r2, r2, #25
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	705a      	strb	r2, [r3, #1]
 800831a:	2200      	movs	r2, #0
 800831c:	709a      	strb	r2, [r3, #2]
 800831e:	2200      	movs	r2, #0
 8008320:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	711a      	strb	r2, [r3, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	715a      	strb	r2, [r3, #5]
 8008330:	2200      	movs	r2, #0
 8008332:	719a      	strb	r2, [r3, #6]
 8008334:	2200      	movs	r2, #0
 8008336:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800833e:	f7f9 f8f5 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008342:	f7f9 f8b7 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008346:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	b2db      	uxtb	r3, r3
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800835e:	f7f9 f90b 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008362:	f7f9 f89b 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8008366:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f062 0217 	orn	r2, r2, #23
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	705a      	strb	r2, [r3, #1]
 8008376:	2200      	movs	r2, #0
 8008378:	709a      	strb	r2, [r3, #2]
 800837a:	2200      	movs	r2, #0
 800837c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	711a      	strb	r2, [r3, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	715a      	strb	r2, [r3, #5]
 800838c:	2200      	movs	r2, #0
 800838e:	719a      	strb	r2, [r3, #6]
 8008390:	2200      	movs	r2, #0
 8008392:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800839a:	f7f9 f8c7 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800839e:	f7f9 f889 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80083a2:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	b2db      	uxtb	r3, r3
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80083be:	f7f9 f8db 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80083c2:	f7f9 f86b 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80083c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f062 0216 	orn	r2, r2, #22
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	2200      	movs	r2, #0
 80083d4:	705a      	strb	r2, [r3, #1]
 80083d6:	2200      	movs	r2, #0
 80083d8:	709a      	strb	r2, [r3, #2]
 80083da:	2200      	movs	r2, #0
 80083dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f042 0202 	orr.w	r2, r2, #2
 80083e6:	711a      	strb	r2, [r3, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	715a      	strb	r2, [r3, #5]
 80083ec:	2200      	movs	r2, #0
 80083ee:	719a      	strb	r2, [r3, #6]
 80083f0:	2200      	movs	r2, #0
 80083f2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8008400:	f7f9 f894 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008404:	f7f9 f856 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008408:	60f8      	str	r0, [r7, #12]
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800841a:	f7f9 f8ad 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800841e:	f7f9 f83d 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8008422:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f062 0213 	orn	r2, r2, #19
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	2200      	movs	r2, #0
 8008430:	705a      	strb	r2, [r3, #1]
 8008432:	2200      	movs	r2, #0
 8008434:	709a      	strb	r2, [r3, #2]
 8008436:	2200      	movs	r2, #0
 8008438:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f042 0201 	orr.w	r2, r2, #1
 8008442:	711a      	strb	r2, [r3, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	715a      	strb	r2, [r3, #5]
 8008448:	2200      	movs	r2, #0
 800844a:	719a      	strb	r2, [r3, #6]
 800844c:	2200      	movs	r2, #0
 800844e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008456:	f7f9 f869 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800845a:	f7f9 f82b 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800845e:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	b2db      	uxtb	r3, r3
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008476:	f7f9 f87f 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800847a:	f7f9 f80f 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800847e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f062 0212 	orn	r2, r2, #18
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	705a      	strb	r2, [r3, #1]
 800848e:	2200      	movs	r2, #0
 8008490:	709a      	strb	r2, [r3, #2]
 8008492:	2200      	movs	r2, #0
 8008494:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f042 0201 	orr.w	r2, r2, #1
 800849e:	711a      	strb	r2, [r3, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	715a      	strb	r2, [r3, #5]
 80084a4:	2200      	movs	r2, #0
 80084a6:	719a      	strb	r2, [r3, #6]
 80084a8:	2200      	movs	r2, #0
 80084aa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80084b2:	f7f9 f83b 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80084b6:	f7f8 fffd 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80084ba:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 80084d6:	f7f9 f84f 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80084da:	f7f8 ffdf 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80084de:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f062 0209 	orn	r2, r2, #9
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	705a      	strb	r2, [r3, #1]
 80084ee:	2200      	movs	r2, #0
 80084f0:	709a      	strb	r2, [r3, #2]
 80084f2:	2200      	movs	r2, #0
 80084f4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f042 0205 	orr.w	r2, r2, #5
 80084fe:	711a      	strb	r2, [r3, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	715a      	strb	r2, [r3, #5]
 8008504:	2200      	movs	r2, #0
 8008506:	719a      	strb	r2, [r3, #6]
 8008508:	2200      	movs	r2, #0
 800850a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 800851e:	6a3a      	ldr	r2, [r7, #32]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 8008524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 800852a:	f7f8 ffff 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800852e:	f7f8 ffc1 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008532:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	b2db      	uxtb	r3, r3
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800854e:	f7f9 f813 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008552:	f7f8 ffa3 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8008556:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f062 0207 	orn	r2, r2, #7
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	705a      	strb	r2, [r3, #1]
 8008566:	2200      	movs	r2, #0
 8008568:	709a      	strb	r2, [r3, #2]
 800856a:	2200      	movs	r2, #0
 800856c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	711a      	strb	r2, [r3, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	715a      	strb	r2, [r3, #5]
 800857c:	2200      	movs	r2, #0
 800857e:	719a      	strb	r2, [r3, #6]
 8008580:	2200      	movs	r2, #0
 8008582:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 8008584:	887a      	ldrh	r2, [r7, #2]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800858a:	f7f8 ffcf 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800858e:	f7f8 ff91 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008592:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	b2db      	uxtb	r3, r3
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80085ac:	f7f8 ffe4 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80085b0:	f7f8 ff74 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80085b4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f062 0203 	orn	r2, r2, #3
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	2200      	movs	r2, #0
 80085c2:	705a      	strb	r2, [r3, #1]
 80085c4:	2200      	movs	r2, #0
 80085c6:	709a      	strb	r2, [r3, #2]
 80085c8:	2200      	movs	r2, #0
 80085ca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f042 0201 	orr.w	r2, r2, #1
 80085d4:	711a      	strb	r2, [r3, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	715a      	strb	r2, [r3, #5]
 80085da:	2200      	movs	r2, #0
 80085dc:	719a      	strb	r2, [r3, #6]
 80085de:	2200      	movs	r2, #0
 80085e0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80085e8:	f7f8 ffa0 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80085ec:	f7f8 ff62 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80085f0:	60f8      	str	r0, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b086      	sub	sp, #24
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 8008608:	f7f8 ffb6 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800860c:	f7f8 ff46 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8008610:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	2200      	movs	r2, #0
 800861a:	f042 0201 	orr.w	r2, r2, #1
 800861e:	705a      	strb	r2, [r3, #1]
 8008620:	2200      	movs	r2, #0
 8008622:	709a      	strb	r2, [r3, #2]
 8008624:	2200      	movs	r2, #0
 8008626:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2200      	movs	r2, #0
 800862c:	f042 0203 	orr.w	r2, r2, #3
 8008630:	711a      	strb	r2, [r3, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	715a      	strb	r2, [r3, #5]
 8008636:	2200      	movs	r2, #0
 8008638:	719a      	strb	r2, [r3, #6]
 800863a:	2200      	movs	r2, #0
 800863c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008650:	f7f8 ff6c 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008654:	f7f8 ff2e 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008658:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	b2db      	uxtb	r3, r3
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <otDatasetSetActive>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otDatasetSetActive(otInstance *aInstance, const otOperationalDataset *aDataset)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008672:	f7f8 ff81 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008676:	f7f8 ff11 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800867a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_DATASET_SET_ACTIVE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	f042 0201 	orr.w	r2, r2, #1
 800868c:	705a      	strb	r2, [r3, #1]
 800868e:	2200      	movs	r2, #0
 8008690:	709a      	strb	r2, [r3, #2]
 8008692:	2200      	movs	r2, #0
 8008694:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	711a      	strb	r2, [r3, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	715a      	strb	r2, [r3, #5]
 80086a4:	2200      	movs	r2, #0
 80086a6:	719a      	strb	r2, [r3, #6]
 80086a8:	2200      	movs	r2, #0
 80086aa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aDataset;
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80086b2:	f7f8 ff3b 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80086b6:	f7f8 fefd 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80086ba:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	b2db      	uxtb	r3, r3
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 80086d0:	f7f8 ff52 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80086d4:	f7f8 fee2 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80086d8:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f062 0235 	orn	r2, r2, #53	; 0x35
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	2200      	movs	r2, #0
 80086e6:	705a      	strb	r2, [r3, #1]
 80086e8:	2200      	movs	r2, #0
 80086ea:	709a      	strb	r2, [r3, #2]
 80086ec:	2200      	movs	r2, #0
 80086ee:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	711a      	strb	r2, [r3, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	715a      	strb	r2, [r3, #5]
 80086fa:	2200      	movs	r2, #0
 80086fc:	719a      	strb	r2, [r3, #6]
 80086fe:	2200      	movs	r2, #0
 8008700:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8008702:	f7f8 ff13 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008706:	f7f8 fed5 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800870a:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008724:	f7f8 ff28 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008728:	f7f8 feb8 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800872c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	2200      	movs	r2, #0
 800873a:	705a      	strb	r2, [r3, #1]
 800873c:	2200      	movs	r2, #0
 800873e:	709a      	strb	r2, [r3, #2]
 8008740:	2200      	movs	r2, #0
 8008742:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f042 0201 	orr.w	r2, r2, #1
 800874c:	711a      	strb	r2, [r3, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	715a      	strb	r2, [r3, #5]
 8008752:	2200      	movs	r2, #0
 8008754:	719a      	strb	r2, [r3, #6]
 8008756:	2200      	movs	r2, #0
 8008758:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008760:	f7f8 fee4 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008764:	f7f8 fea6 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008768:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	b2db      	uxtb	r3, r3
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008782:	f7f8 fef9 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008786:	f7f8 fe89 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800878a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f042 0210 	orr.w	r2, r2, #16
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	2200      	movs	r2, #0
 8008798:	705a      	strb	r2, [r3, #1]
 800879a:	2200      	movs	r2, #0
 800879c:	709a      	strb	r2, [r3, #2]
 800879e:	2200      	movs	r2, #0
 80087a0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f042 0201 	orr.w	r2, r2, #1
 80087aa:	711a      	strb	r2, [r3, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	715a      	strb	r2, [r3, #5]
 80087b0:	2200      	movs	r2, #0
 80087b2:	719a      	strb	r2, [r3, #6]
 80087b4:	2200      	movs	r2, #0
 80087b6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80087be:	f7f8 feb5 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80087c2:	f7f8 fe77 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80087c6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	b2db      	uxtb	r3, r3
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80087de:	f7f8 fecb 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80087e2:	f7f8 fe5b 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80087e6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f042 0216 	orr.w	r2, r2, #22
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f042 0201 	orr.w	r2, r2, #1
 80087f8:	705a      	strb	r2, [r3, #1]
 80087fa:	2200      	movs	r2, #0
 80087fc:	709a      	strb	r2, [r3, #2]
 80087fe:	2200      	movs	r2, #0
 8008800:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f042 0201 	orr.w	r2, r2, #1
 800880a:	711a      	strb	r2, [r3, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	715a      	strb	r2, [r3, #5]
 8008810:	2200      	movs	r2, #0
 8008812:	719a      	strb	r2, [r3, #6]
 8008814:	2200      	movs	r2, #0
 8008816:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800881e:	f7f8 fe85 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008822:	f7f8 fe47 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008826:	60f8      	str	r0, [r7, #12]
}
 8008828:	bf00      	nop
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008838:	f7f8 fe9e 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800883c:	f7f8 fe2e 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8008840:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f042 0219 	orr.w	r2, r2, #25
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	2200      	movs	r2, #0
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	705a      	strb	r2, [r3, #1]
 8008854:	2200      	movs	r2, #0
 8008856:	709a      	strb	r2, [r3, #2]
 8008858:	2200      	movs	r2, #0
 800885a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f042 0201 	orr.w	r2, r2, #1
 8008864:	711a      	strb	r2, [r3, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	715a      	strb	r2, [r3, #5]
 800886a:	2200      	movs	r2, #0
 800886c:	719a      	strb	r2, [r3, #6]
 800886e:	2200      	movs	r2, #0
 8008870:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008878:	f7f8 fe58 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800887c:	f7f8 fe1a 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008880:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	b29b      	uxth	r3, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800889e:	f7f8 fe6b 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80088a2:	f7f8 fdfb 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 80088a6:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f042 021e 	orr.w	r2, r2, #30
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f042 0201 	orr.w	r2, r2, #1
 80088b8:	705a      	strb	r2, [r3, #1]
 80088ba:	2200      	movs	r2, #0
 80088bc:	709a      	strb	r2, [r3, #2]
 80088be:	2200      	movs	r2, #0
 80088c0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f042 0203 	orr.w	r2, r2, #3
 80088ca:	711a      	strb	r2, [r3, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	715a      	strb	r2, [r3, #5]
 80088d0:	2200      	movs	r2, #0
 80088d2:	719a      	strb	r2, [r3, #6]
 80088d4:	2200      	movs	r2, #0
 80088d6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 80088ea:	f7f8 fe1f 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80088ee:	f7f8 fde1 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80088f2:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	b2db      	uxtb	r3, r3
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	461a      	mov	r2, r3
 800890e:	460b      	mov	r3, r1
 8008910:	817b      	strh	r3, [r7, #10]
 8008912:	4613      	mov	r3, r2
 8008914:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8008916:	f7f8 fe2f 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800891a:	f7f8 fdbf 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 800891e:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2200      	movs	r2, #0
 8008924:	f042 021f 	orr.w	r2, r2, #31
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	2200      	movs	r2, #0
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	705a      	strb	r2, [r3, #1]
 8008932:	2200      	movs	r2, #0
 8008934:	709a      	strb	r2, [r3, #2]
 8008936:	2200      	movs	r2, #0
 8008938:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2200      	movs	r2, #0
 800893e:	f042 0204 	orr.w	r2, r2, #4
 8008942:	711a      	strb	r2, [r3, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	715a      	strb	r2, [r3, #5]
 8008948:	2200      	movs	r2, #0
 800894a:	719a      	strb	r2, [r3, #6]
 800894c:	2200      	movs	r2, #0
 800894e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8008956:	897a      	ldrh	r2, [r7, #10]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8008962:	893a      	ldrh	r2, [r7, #8]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8008968:	f7f8 fde0 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800896c:	f7f8 fda2 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008970:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	b29b      	uxth	r3, r3
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8008980:	b5b0      	push	{r4, r5, r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800898a:	f7f8 fd9f 	bl	80014cc <THREAD_Get_NotificationPayloadBuffer>
 800898e:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3b01      	subs	r3, #1
 8008996:	2b48      	cmp	r3, #72	; 0x48
 8008998:	f200 8543 	bhi.w	8009422 <OpenThread_CallBack_Processing+0xaa2>
 800899c:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <OpenThread_CallBack_Processing+0x24>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	08008d0f 	.word	0x08008d0f
 80089a8:	08008dc7 	.word	0x08008dc7
 80089ac:	08008e1f 	.word	0x08008e1f
 80089b0:	08008ecb 	.word	0x08008ecb
 80089b4:	08008ed7 	.word	0x08008ed7
 80089b8:	08008ef5 	.word	0x08008ef5
 80089bc:	08009423 	.word	0x08009423
 80089c0:	08008f1f 	.word	0x08008f1f
 80089c4:	08008f39 	.word	0x08008f39
 80089c8:	08008f6d 	.word	0x08008f6d
 80089cc:	08008f8b 	.word	0x08008f8b
 80089d0:	08008fa9 	.word	0x08008fa9
 80089d4:	08009423 	.word	0x08009423
 80089d8:	08008fd3 	.word	0x08008fd3
 80089dc:	08009035 	.word	0x08009035
 80089e0:	0800905b 	.word	0x0800905b
 80089e4:	0800907b 	.word	0x0800907b
 80089e8:	08009099 	.word	0x08009099
 80089ec:	08009423 	.word	0x08009423
 80089f0:	080090c1 	.word	0x080090c1
 80089f4:	080090e9 	.word	0x080090e9
 80089f8:	08009423 	.word	0x08009423
 80089fc:	08009107 	.word	0x08009107
 8008a00:	0800912b 	.word	0x0800912b
 8008a04:	08009155 	.word	0x08009155
 8008a08:	08008b35 	.word	0x08008b35
 8008a0c:	08008b59 	.word	0x08008b59
 8008a10:	08008b7d 	.word	0x08008b7d
 8008a14:	08008ba7 	.word	0x08008ba7
 8008a18:	08009423 	.word	0x08009423
 8008a1c:	08009175 	.word	0x08009175
 8008a20:	08009423 	.word	0x08009423
 8008a24:	08009423 	.word	0x08009423
 8008a28:	08009423 	.word	0x08009423
 8008a2c:	08009423 	.word	0x08009423
 8008a30:	08009423 	.word	0x08009423
 8008a34:	08008dfd 	.word	0x08008dfd
 8008a38:	08008e5d 	.word	0x08008e5d
 8008a3c:	08008e83 	.word	0x08008e83
 8008a40:	08008ea9 	.word	0x08008ea9
 8008a44:	08009197 	.word	0x08009197
 8008a48:	080091d5 	.word	0x080091d5
 8008a4c:	080091ed 	.word	0x080091ed
 8008a50:	08008d2b 	.word	0x08008d2b
 8008a54:	08008d91 	.word	0x08008d91
 8008a58:	08009423 	.word	0x08009423
 8008a5c:	08008bd1 	.word	0x08008bd1
 8008a60:	08008bf1 	.word	0x08008bf1
 8008a64:	08008c11 	.word	0x08008c11
 8008a68:	08008c31 	.word	0x08008c31
 8008a6c:	08008c53 	.word	0x08008c53
 8008a70:	08008c75 	.word	0x08008c75
 8008a74:	08009423 	.word	0x08009423
 8008a78:	08009423 	.word	0x08009423
 8008a7c:	08008ac9 	.word	0x08008ac9
 8008a80:	08008aed 	.word	0x08008aed
 8008a84:	08008b11 	.word	0x08008b11
 8008a88:	08009423 	.word	0x08009423
 8008a8c:	08009423 	.word	0x08009423
 8008a90:	08008c97 	.word	0x08008c97
 8008a94:	08008cb5 	.word	0x08008cb5
 8008a98:	08009423 	.word	0x08009423
 8008a9c:	08008ce7 	.word	0x08008ce7
 8008aa0:	08008da9 	.word	0x08008da9
 8008aa4:	0800921b 	.word	0x0800921b
 8008aa8:	08009239 	.word	0x08009239
 8008aac:	08009257 	.word	0x08009257
 8008ab0:	080092d5 	.word	0x080092d5
 8008ab4:	08009303 	.word	0x08009303
 8008ab8:	08009347 	.word	0x08009347
 8008abc:	080093b1 	.word	0x080093b1
 8008ac0:	080093ef 	.word	0x080093ef
 8008ac4:	0800937b 	.word	0x0800937b
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 8008ac8:	4b9f      	ldr	r3, [pc, #636]	; (8008d48 <OpenThread_CallBack_Processing+0x3c8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 84ab 	beq.w	8009428 <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008ad2:	4b9d      	ldr	r3, [pc, #628]	; (8008d48 <OpenThread_CallBack_Processing+0x3c8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	6892      	ldr	r2, [r2, #8]
 8008ada:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008ae0:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008ae6:	4798      	blx	r3
    }
    break;
 8008ae8:	f000 bc9e 	b.w	8009428 <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8008aec:	4b97      	ldr	r3, [pc, #604]	; (8008d4c <OpenThread_CallBack_Processing+0x3cc>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 849b 	beq.w	800942c <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008af6:	4b95      	ldr	r3, [pc, #596]	; (8008d4c <OpenThread_CallBack_Processing+0x3cc>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	6892      	ldr	r2, [r2, #8]
 8008afe:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008b04:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008b0a:	4798      	blx	r3
    }
    break;
 8008b0c:	f000 bc8e 	b.w	800942c <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8008b10:	4b8f      	ldr	r3, [pc, #572]	; (8008d50 <OpenThread_CallBack_Processing+0x3d0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 848b 	beq.w	8009430 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008b1a:	4b8d      	ldr	r3, [pc, #564]	; (8008d50 <OpenThread_CallBack_Processing+0x3d0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	6892      	ldr	r2, [r2, #8]
 8008b22:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008b28:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008b2e:	4798      	blx	r3
    }
    break;
 8008b30:	f000 bc7e 	b.w	8009430 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8008b34:	4b87      	ldr	r3, [pc, #540]	; (8008d54 <OpenThread_CallBack_Processing+0x3d4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 847b 	beq.w	8009434 <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008b3e:	4b85      	ldr	r3, [pc, #532]	; (8008d54 <OpenThread_CallBack_Processing+0x3d4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	6892      	ldr	r2, [r2, #8]
 8008b46:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008b4c:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008b52:	4798      	blx	r3
    }
    break;
 8008b54:	f000 bc6e 	b.w	8009434 <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 8008b58:	4b7f      	ldr	r3, [pc, #508]	; (8008d58 <OpenThread_CallBack_Processing+0x3d8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 846b 	beq.w	8009438 <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008b62:	4b7d      	ldr	r3, [pc, #500]	; (8008d58 <OpenThread_CallBack_Processing+0x3d8>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	6892      	ldr	r2, [r2, #8]
 8008b6a:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008b70:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008b76:	4798      	blx	r3
    }
    break;
 8008b78:	f000 bc5e 	b.w	8009438 <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 8008b7c:	4b77      	ldr	r3, [pc, #476]	; (8008d5c <OpenThread_CallBack_Processing+0x3dc>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 845b 	beq.w	800943c <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008b86:	4b75      	ldr	r3, [pc, #468]	; (8008d5c <OpenThread_CallBack_Processing+0x3dc>)
 8008b88:	681c      	ldr	r4, [r3, #0]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008b94:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008b9a:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008ba0:	47a0      	blx	r4
    }
    break;
 8008ba2:	f000 bc4b 	b.w	800943c <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 8008ba6:	4b6e      	ldr	r3, [pc, #440]	; (8008d60 <OpenThread_CallBack_Processing+0x3e0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8448 	beq.w	8009440 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008bb0:	4b6b      	ldr	r3, [pc, #428]	; (8008d60 <OpenThread_CallBack_Processing+0x3e0>)
 8008bb2:	681c      	ldr	r4, [r3, #0]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008bbe:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008bc4:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008bca:	47a0      	blx	r4
    }
    break;
 8008bcc:	f000 bc38 	b.w	8009440 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 8008bd0:	4b64      	ldr	r3, [pc, #400]	; (8008d64 <OpenThread_CallBack_Processing+0x3e4>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8435 	beq.w	8009444 <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8008bda:	4b62      	ldr	r3, [pc, #392]	; (8008d64 <OpenThread_CallBack_Processing+0x3e4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	6892      	ldr	r2, [r2, #8]
 8008be2:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8008be8:	4611      	mov	r1, r2
 8008bea:	4798      	blx	r3
    }
    break;
 8008bec:	f000 bc2a 	b.w	8009444 <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 8008bf0:	4b5d      	ldr	r3, [pc, #372]	; (8008d68 <OpenThread_CallBack_Processing+0x3e8>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8427 	beq.w	8009448 <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8008bfa:	4b5b      	ldr	r3, [pc, #364]	; (8008d68 <OpenThread_CallBack_Processing+0x3e8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	6892      	ldr	r2, [r2, #8]
 8008c02:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4798      	blx	r3
    }
    break;
 8008c0c:	f000 bc1c 	b.w	8009448 <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 8008c10:	4b56      	ldr	r3, [pc, #344]	; (8008d6c <OpenThread_CallBack_Processing+0x3ec>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8419 	beq.w	800944c <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8008c1a:	4b54      	ldr	r3, [pc, #336]	; (8008d6c <OpenThread_CallBack_Processing+0x3ec>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	6892      	ldr	r2, [r2, #8]
 8008c22:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4798      	blx	r3
    }
    break;
 8008c2c:	f000 bc0e 	b.w	800944c <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 8008c30:	4b4f      	ldr	r3, [pc, #316]	; (8008d70 <OpenThread_CallBack_Processing+0x3f0>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 840b 	beq.w	8009450 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 8008c3a:	4b4d      	ldr	r3, [pc, #308]	; (8008d70 <OpenThread_CallBack_Processing+0x3f0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	6892      	ldr	r2, [r2, #8]
 8008c42:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8008c48:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8008c4e:	4798      	blx	r3
    }
    break;
 8008c50:	e3fe      	b.n	8009450 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 8008c52:	4b48      	ldr	r3, [pc, #288]	; (8008d74 <OpenThread_CallBack_Processing+0x3f4>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 83fc 	beq.w	8009454 <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 8008c5c:	4b45      	ldr	r3, [pc, #276]	; (8008d74 <OpenThread_CallBack_Processing+0x3f4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	6892      	ldr	r2, [r2, #8]
 8008c64:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 8008c6a:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 8008c70:	4798      	blx	r3
    }
    break;
 8008c72:	e3ef      	b.n	8009454 <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 8008c74:	4b3f      	ldr	r3, [pc, #252]	; (8008d74 <OpenThread_CallBack_Processing+0x3f4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 83ed 	beq.w	8009458 <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 8008c7e:	4b3e      	ldr	r3, [pc, #248]	; (8008d78 <OpenThread_CallBack_Processing+0x3f8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	6892      	ldr	r2, [r2, #8]
 8008c86:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 8008c8c:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 8008c92:	4798      	blx	r3
    }
    break;
 8008c94:	e3e0      	b.n	8009458 <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 8008c96:	4b39      	ldr	r3, [pc, #228]	; (8008d7c <OpenThread_CallBack_Processing+0x3fc>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 83de 	beq.w	800945c <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8008ca0:	4b36      	ldr	r3, [pc, #216]	; (8008d7c <OpenThread_CallBack_Processing+0x3fc>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	6892      	ldr	r2, [r2, #8]
 8008ca8:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4798      	blx	r3
    }
    break;
 8008cb2:	e3d3      	b.n	800945c <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 8008cb4:	4b32      	ldr	r3, [pc, #200]	; (8008d80 <OpenThread_CallBack_Processing+0x400>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 83d1 	beq.w	8009460 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 8008cbe:	4b30      	ldr	r3, [pc, #192]	; (8008d80 <OpenThread_CallBack_Processing+0x400>)
 8008cc0:	681c      	ldr	r4, [r3, #0]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 8008ccc:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 8008cd2:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 8008cd8:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	462b      	mov	r3, r5
 8008ce2:	47a0      	blx	r4
    }
    break;
 8008ce4:	e3bc      	b.n	8009460 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 8008ce6:	4b27      	ldr	r3, [pc, #156]	; (8008d84 <OpenThread_CallBack_Processing+0x404>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 83ba 	beq.w	8009464 <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008cf0:	4b24      	ldr	r3, [pc, #144]	; (8008d84 <OpenThread_CallBack_Processing+0x404>)
 8008cf2:	681c      	ldr	r4, [r3, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008cfe:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008d04:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008d0a:	47a0      	blx	r4
    }
    break;
 8008d0c:	e3aa      	b.n	8009464 <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 8008d0e:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <OpenThread_CallBack_Processing+0x408>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 83a8 	beq.w	8009468 <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8008d18:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <OpenThread_CallBack_Processing+0x408>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8008d24:	4611      	mov	r1, r2
 8008d26:	4798      	blx	r3
    }
    break;
 8008d28:	e39e      	b.n	8009468 <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 8008d2a:	4b18      	ldr	r3, [pc, #96]	; (8008d8c <OpenThread_CallBack_Processing+0x40c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 839c 	beq.w	800946c <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8008d34:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <OpenThread_CallBack_Processing+0x40c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	6892      	ldr	r2, [r2, #8]
 8008d3c:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8008d42:	4611      	mov	r1, r2
 8008d44:	4798      	blx	r3
    }
    break;
 8008d46:	e391      	b.n	800946c <OpenThread_CallBack_Processing+0xaec>
 8008d48:	20000660 	.word	0x20000660
 8008d4c:	20000668 	.word	0x20000668
 8008d50:	20000664 	.word	0x20000664
 8008d54:	200005f4 	.word	0x200005f4
 8008d58:	200005f0 	.word	0x200005f0
 8008d5c:	200005f8 	.word	0x200005f8
 8008d60:	200005ec 	.word	0x200005ec
 8008d64:	2000066c 	.word	0x2000066c
 8008d68:	20000670 	.word	0x20000670
 8008d6c:	20000674 	.word	0x20000674
 8008d70:	2000067c 	.word	0x2000067c
 8008d74:	20000678 	.word	0x20000678
 8008d78:	20000680 	.word	0x20000680
 8008d7c:	2000068c 	.word	0x2000068c
 8008d80:	20000688 	.word	0x20000688
 8008d84:	20000684 	.word	0x20000684
 8008d88:	200005cc 	.word	0x200005cc
 8008d8c:	200005fc 	.word	0x200005fc
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 8008d90:	4b97      	ldr	r3, [pc, #604]	; (8008ff0 <OpenThread_CallBack_Processing+0x670>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 836b 	beq.w	8009470 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 8008d9a:	4b95      	ldr	r3, [pc, #596]	; (8008ff0 <OpenThread_CallBack_Processing+0x670>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	6892      	ldr	r2, [r2, #8]
 8008da2:	4610      	mov	r0, r2
 8008da4:	4798      	blx	r3
    }
    break;
 8008da6:	e363      	b.n	8009470 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 8008da8:	4b92      	ldr	r3, [pc, #584]	; (8008ff4 <OpenThread_CallBack_Processing+0x674>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8361 	beq.w	8009474 <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 8008db2:	4b90      	ldr	r3, [pc, #576]	; (8008ff4 <OpenThread_CallBack_Processing+0x674>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	6892      	ldr	r2, [r2, #8]
 8008dba:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4798      	blx	r3
    }
    break;
 8008dc4:	e356      	b.n	8009474 <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b8a      	ldr	r3, [pc, #552]	; (8008ff8 <OpenThread_CallBack_Processing+0x678>)
 8008dce:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 8008dd0:	4b89      	ldr	r3, [pc, #548]	; (8008ff8 <OpenThread_CallBack_Processing+0x678>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	4a89      	ldr	r2, [pc, #548]	; (8008ffc <OpenThread_CallBack_Processing+0x67c>)
 8008dd8:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 8008dda:	4b88      	ldr	r3, [pc, #544]	; (8008ffc <OpenThread_CallBack_Processing+0x67c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 834a 	beq.w	8009478 <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8008de4:	4b85      	ldr	r3, [pc, #532]	; (8008ffc <OpenThread_CallBack_Processing+0x67c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a83      	ldr	r2, [pc, #524]	; (8008ff8 <OpenThread_CallBack_Processing+0x678>)
 8008dea:	6812      	ldr	r2, [r2, #0]
 8008dec:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8008df2:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8008df8:	4798      	blx	r3
    }
    break;
 8008dfa:	e33d      	b.n	8009478 <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 8008dfc:	4b80      	ldr	r3, [pc, #512]	; (8009000 <OpenThread_CallBack_Processing+0x680>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 833b 	beq.w	800947c <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8008e06:	4b7e      	ldr	r3, [pc, #504]	; (8009000 <OpenThread_CallBack_Processing+0x680>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	6892      	ldr	r2, [r2, #8]
 8008e0e:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8008e14:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8008e1a:	4798      	blx	r3
    }
    break;
 8008e1c:	e32e      	b.n	800947c <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	461a      	mov	r2, r3
 8008e24:	4b77      	ldr	r3, [pc, #476]	; (8009004 <OpenThread_CallBack_Processing+0x684>)
 8008e26:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 8008e28:	4b76      	ldr	r3, [pc, #472]	; (8009004 <OpenThread_CallBack_Processing+0x684>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	4a76      	ldr	r2, [pc, #472]	; (8009008 <OpenThread_CallBack_Processing+0x688>)
 8008e30:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 8008e32:	4b75      	ldr	r3, [pc, #468]	; (8009008 <OpenThread_CallBack_Processing+0x688>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8322 	beq.w	8009480 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8008e3c:	4b72      	ldr	r3, [pc, #456]	; (8009008 <OpenThread_CallBack_Processing+0x688>)
 8008e3e:	681c      	ldr	r4, [r3, #0]
 8008e40:	4b70      	ldr	r3, [pc, #448]	; (8009004 <OpenThread_CallBack_Processing+0x684>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8008e4a:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8008e50:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	47a0      	blx	r4
    }
    break;
 8008e5a:	e311      	b.n	8009480 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 8008e5c:	4b6b      	ldr	r3, [pc, #428]	; (800900c <OpenThread_CallBack_Processing+0x68c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 830f 	beq.w	8009484 <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8008e66:	4b69      	ldr	r3, [pc, #420]	; (800900c <OpenThread_CallBack_Processing+0x68c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	6892      	ldr	r2, [r2, #8]
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	bf14      	ite	ne
 8008e72:	2201      	movne	r2, #1
 8008e74:	2200      	moveq	r2, #0
 8008e76:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4798      	blx	r3
    }
    break;
 8008e80:	e300      	b.n	8009484 <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 8008e82:	4b62      	ldr	r3, [pc, #392]	; (800900c <OpenThread_CallBack_Processing+0x68c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 82fe 	beq.w	8009488 <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8008e8c:	4b5f      	ldr	r3, [pc, #380]	; (800900c <OpenThread_CallBack_Processing+0x68c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	6892      	ldr	r2, [r2, #8]
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	bf14      	ite	ne
 8008e98:	2201      	movne	r2, #1
 8008e9a:	2200      	moveq	r2, #0
 8008e9c:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	4798      	blx	r3
    }
    break;
 8008ea6:	e2ef      	b.n	8009488 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 8008ea8:	4b59      	ldr	r3, [pc, #356]	; (8009010 <OpenThread_CallBack_Processing+0x690>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 82ed 	beq.w	800948c <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8008eb2:	4b57      	ldr	r3, [pc, #348]	; (8009010 <OpenThread_CallBack_Processing+0x690>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	6892      	ldr	r2, [r2, #8]
 8008eba:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8008ec0:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8008ec6:	4798      	blx	r3
    }
    break;
 8008ec8:	e2e0      	b.n	800948c <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 8008eca:	2001      	movs	r0, #1
 8008ecc:	f000 fb78 	bl	80095c0 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 8008ed0:	f7fb f881 	bl	8003fd6 <HAL_NVIC_SystemReset>
    break;
 8008ed4:	e317      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 8008ed6:	4b4f      	ldr	r3, [pc, #316]	; (8009014 <OpenThread_CallBack_Processing+0x694>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 82d8 	beq.w	8009490 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8008ee0:	4b4c      	ldr	r3, [pc, #304]	; (8009014 <OpenThread_CallBack_Processing+0x694>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	6892      	ldr	r2, [r2, #8]
 8008ee8:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4798      	blx	r3
    }
    break;
 8008ef2:	e2cd      	b.n	8009490 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 8008ef4:	4b48      	ldr	r3, [pc, #288]	; (8009018 <OpenThread_CallBack_Processing+0x698>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 82cb 	beq.w	8009494 <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8008efe:	4b46      	ldr	r3, [pc, #280]	; (8009018 <OpenThread_CallBack_Processing+0x698>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	6892      	ldr	r2, [r2, #8]
 8008f06:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	bf14      	ite	ne
 8008f10:	2201      	movne	r2, #1
 8008f12:	2200      	moveq	r2, #0
 8008f14:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8008f1a:	4798      	blx	r3
    }
    break;
 8008f1c:	e2ba      	b.n	8009494 <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 8008f1e:	4b3f      	ldr	r3, [pc, #252]	; (800901c <OpenThread_CallBack_Processing+0x69c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 82b8 	beq.w	8009498 <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 8008f28:	4b3c      	ldr	r3, [pc, #240]	; (800901c <OpenThread_CallBack_Processing+0x69c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 8008f30:	4611      	mov	r1, r2
 8008f32:	2000      	movs	r0, #0
 8008f34:	4798      	blx	r3
    }
    break;
 8008f36:	e2af      	b.n	8009498 <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 8008f38:	4b39      	ldr	r3, [pc, #228]	; (8009020 <OpenThread_CallBack_Processing+0x6a0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 82ad 	beq.w	800949c <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8008f42:	4b37      	ldr	r3, [pc, #220]	; (8009020 <OpenThread_CallBack_Processing+0x6a0>)
 8008f44:	681c      	ldr	r4, [r3, #0]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8008f50:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8008f56:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8008f5c:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	462b      	mov	r3, r5
 8008f68:	47a0      	blx	r4
    }
    break;
 8008f6a:	e297      	b.n	800949c <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <OpenThread_CallBack_Processing+0x6a4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 8295 	beq.w	80094a0 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8008f76:	4b2b      	ldr	r3, [pc, #172]	; (8009024 <OpenThread_CallBack_Processing+0x6a4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	6892      	ldr	r2, [r2, #8]
 8008f7e:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8008f84:	4611      	mov	r1, r2
 8008f86:	4798      	blx	r3
    }
    break;
 8008f88:	e28a      	b.n	80094a0 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 8008f8a:	4b27      	ldr	r3, [pc, #156]	; (8009028 <OpenThread_CallBack_Processing+0x6a8>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 8288 	beq.w	80094a4 <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8008f94:	4b24      	ldr	r3, [pc, #144]	; (8009028 <OpenThread_CallBack_Processing+0x6a8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	6892      	ldr	r2, [r2, #8]
 8008f9c:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4798      	blx	r3
    }
    break;
 8008fa6:	e27d      	b.n	80094a4 <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 8008fa8:	4b20      	ldr	r3, [pc, #128]	; (800902c <OpenThread_CallBack_Processing+0x6ac>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 827b 	beq.w	80094a8 <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8008fb2:	4b1e      	ldr	r3, [pc, #120]	; (800902c <OpenThread_CallBack_Processing+0x6ac>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	6892      	ldr	r2, [r2, #8]
 8008fba:	4610      	mov	r0, r2
          p_notification->Data[1],
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	bf14      	ite	ne
 8008fc4:	2201      	movne	r2, #1
 8008fc6:	2200      	moveq	r2, #0
 8008fc8:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8008fce:	4798      	blx	r3
    }
    break;
 8008fd0:	e26a      	b.n	80094a8 <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 8008fd2:	4b17      	ldr	r3, [pc, #92]	; (8009030 <OpenThread_CallBack_Processing+0x6b0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 8268 	beq.w	80094ac <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8008fdc:	4b14      	ldr	r3, [pc, #80]	; (8009030 <OpenThread_CallBack_Processing+0x6b0>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	6892      	ldr	r2, [r2, #8]
 8008fe4:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8008fea:	4611      	mov	r1, r2
 8008fec:	4798      	blx	r3
    }
    break;
 8008fee:	e25d      	b.n	80094ac <OpenThread_CallBack_Processing+0xb2c>
 8008ff0:	20000600 	.word	0x20000600
 8008ff4:	20000604 	.word	0x20000604
 8008ff8:	20000648 	.word	0x20000648
 8008ffc:	2000063c 	.word	0x2000063c
 8009000:	20000640 	.word	0x20000640
 8009004:	2000064c 	.word	0x2000064c
 8009008:	20000644 	.word	0x20000644
 800900c:	20000654 	.word	0x20000654
 8009010:	20000650 	.word	0x20000650
 8009014:	200005d4 	.word	0x200005d4
 8009018:	200005d8 	.word	0x200005d8
 800901c:	200005d0 	.word	0x200005d0
 8009020:	200005dc 	.word	0x200005dc
 8009024:	200005e0 	.word	0x200005e0
 8009028:	200005e4 	.word	0x200005e4
 800902c:	200005e8 	.word	0x200005e8
 8009030:	20000608 	.word	0x20000608
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 8009034:	4b95      	ldr	r3, [pc, #596]	; (800928c <OpenThread_CallBack_Processing+0x90c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 8239 	beq.w	80094b0 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800903e:	4b93      	ldr	r3, [pc, #588]	; (800928c <OpenThread_CallBack_Processing+0x90c>)
 8009040:	681c      	ldr	r4, [r3, #0]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800904a:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009050:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009056:	47a0      	blx	r4
    }
    break;
 8009058:	e22a      	b.n	80094b0 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800905a:	4b8d      	ldr	r3, [pc, #564]	; (8009290 <OpenThread_CallBack_Processing+0x910>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 8228 	beq.w	80094b4 <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 8009064:	4b8a      	ldr	r3, [pc, #552]	; (8009290 <OpenThread_CallBack_Processing+0x910>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	6892      	ldr	r2, [r2, #8]
 800906c:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 8009076:	4798      	blx	r3
    }
    break;
 8009078:	e21c      	b.n	80094b4 <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800907a:	4b86      	ldr	r3, [pc, #536]	; (8009294 <OpenThread_CallBack_Processing+0x914>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 821a 	beq.w	80094b8 <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 8009084:	4b83      	ldr	r3, [pc, #524]	; (8009294 <OpenThread_CallBack_Processing+0x914>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	6892      	ldr	r2, [r2, #8]
 800908c:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 8009092:	4611      	mov	r1, r2
 8009094:	4798      	blx	r3
    }
    break;
 8009096:	e20f      	b.n	80094b8 <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 8009098:	4b7f      	ldr	r3, [pc, #508]	; (8009298 <OpenThread_CallBack_Processing+0x918>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 820d 	beq.w	80094bc <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80090a2:	4b7d      	ldr	r3, [pc, #500]	; (8009298 <OpenThread_CallBack_Processing+0x918>)
 80090a4:	681c      	ldr	r4, [r3, #0]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80090b0:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80090b6:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80090bc:	47a0      	blx	r4
    }
    break;
 80090be:	e1fd      	b.n	80094bc <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 80090c0:	4b76      	ldr	r3, [pc, #472]	; (800929c <OpenThread_CallBack_Processing+0x91c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 81fb 	beq.w	80094c0 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80090ca:	4b74      	ldr	r3, [pc, #464]	; (800929c <OpenThread_CallBack_Processing+0x91c>)
 80090cc:	681c      	ldr	r4, [r3, #0]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80090d8:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80090de:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80090e4:	47a0      	blx	r4
    }
    break;
 80090e6:	e1eb      	b.n	80094c0 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 80090e8:	4b6d      	ldr	r3, [pc, #436]	; (80092a0 <OpenThread_CallBack_Processing+0x920>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 81e9 	beq.w	80094c4 <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 80090f2:	4b6b      	ldr	r3, [pc, #428]	; (80092a0 <OpenThread_CallBack_Processing+0x920>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	6892      	ldr	r2, [r2, #8]
 80090fa:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 8009100:	4611      	mov	r1, r2
 8009102:	4798      	blx	r3
    }
    break;
 8009104:	e1de      	b.n	80094c4 <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 8009106:	4b67      	ldr	r3, [pc, #412]	; (80092a4 <OpenThread_CallBack_Processing+0x924>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 81dc 	beq.w	80094c8 <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009110:	4b64      	ldr	r3, [pc, #400]	; (80092a4 <OpenThread_CallBack_Processing+0x924>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	6892      	ldr	r2, [r2, #8]
 8009118:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800911e:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009124:	b2d2      	uxtb	r2, r2
 8009126:	4798      	blx	r3
    }
    break;
 8009128:	e1ce      	b.n	80094c8 <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800912a:	4b5f      	ldr	r3, [pc, #380]	; (80092a8 <OpenThread_CallBack_Processing+0x928>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 81cc 	beq.w	80094cc <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009134:	4b5c      	ldr	r3, [pc, #368]	; (80092a8 <OpenThread_CallBack_Processing+0x928>)
 8009136:	681c      	ldr	r4, [r3, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009142:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009148:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800914e:	b2db      	uxtb	r3, r3
 8009150:	47a0      	blx	r4
    }
    break;
 8009152:	e1bb      	b.n	80094cc <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 8009154:	4b55      	ldr	r3, [pc, #340]	; (80092ac <OpenThread_CallBack_Processing+0x92c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 81b9 	beq.w	80094d0 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800915e:	4b53      	ldr	r3, [pc, #332]	; (80092ac <OpenThread_CallBack_Processing+0x92c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	6892      	ldr	r2, [r2, #8]
 8009166:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800916c:	b252      	sxtb	r2, r2
 800916e:	4611      	mov	r1, r2
 8009170:	4798      	blx	r3
    }
    break;
 8009172:	e1ad      	b.n	80094d0 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 8009174:	4b4e      	ldr	r3, [pc, #312]	; (80092b0 <OpenThread_CallBack_Processing+0x930>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 81ab 	beq.w	80094d4 <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800917e:	4b4c      	ldr	r3, [pc, #304]	; (80092b0 <OpenThread_CallBack_Processing+0x930>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	6892      	ldr	r2, [r2, #8]
 8009186:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800918c:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 8009192:	4798      	blx	r3
    }
    break;
 8009194:	e19e      	b.n	80094d4 <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	461a      	mov	r2, r3
 800919c:	4b45      	ldr	r3, [pc, #276]	; (80092b4 <OpenThread_CallBack_Processing+0x934>)
 800919e:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 80091a0:	4b44      	ldr	r3, [pc, #272]	; (80092b4 <OpenThread_CallBack_Processing+0x934>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	4a44      	ldr	r2, [pc, #272]	; (80092b8 <OpenThread_CallBack_Processing+0x938>)
 80091a8:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 80091aa:	4b43      	ldr	r3, [pc, #268]	; (80092b8 <OpenThread_CallBack_Processing+0x938>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 8192 	beq.w	80094d8 <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80091b4:	4b40      	ldr	r3, [pc, #256]	; (80092b8 <OpenThread_CallBack_Processing+0x938>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a3e      	ldr	r2, [pc, #248]	; (80092b4 <OpenThread_CallBack_Processing+0x934>)
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80091c2:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80091c8:	4798      	blx	r3
 80091ca:	4603      	mov	r3, r0
 80091cc:	461a      	mov	r2, r3
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	609a      	str	r2, [r3, #8]
      }
      break;
 80091d2:	e181      	b.n	80094d8 <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 80091d4:	4b39      	ldr	r3, [pc, #228]	; (80092bc <OpenThread_CallBack_Processing+0x93c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 817f 	beq.w	80094dc <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 80091de:	4b37      	ldr	r3, [pc, #220]	; (80092bc <OpenThread_CallBack_Processing+0x93c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	6892      	ldr	r2, [r2, #8]
 80091e6:	4610      	mov	r0, r2
 80091e8:	4798      	blx	r3
    }
    break;
 80091ea:	e177      	b.n	80094dc <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 80091ec:	4b34      	ldr	r3, [pc, #208]	; (80092c0 <OpenThread_CallBack_Processing+0x940>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 8175 	beq.w	80094e0 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 80091f6:	4b32      	ldr	r3, [pc, #200]	; (80092c0 <OpenThread_CallBack_Processing+0x940>)
 80091f8:	6819      	ldr	r1, [r3, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009204:	2200      	movs	r2, #0
 8009206:	461c      	mov	r4, r3
 8009208:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800920e:	b2db      	uxtb	r3, r3
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4622      	mov	r2, r4
 8009214:	462b      	mov	r3, r5
 8009216:	4788      	blx	r1
    }
    break;
 8009218:	e162      	b.n	80094e0 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 800921a:	4b2a      	ldr	r3, [pc, #168]	; (80092c4 <OpenThread_CallBack_Processing+0x944>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8160 	beq.w	80094e4 <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 8009224:	4b27      	ldr	r3, [pc, #156]	; (80092c4 <OpenThread_CallBack_Processing+0x944>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	6892      	ldr	r2, [r2, #8]
 800922c:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 8009232:	4611      	mov	r1, r2
 8009234:	4798      	blx	r3
    }
    break;
 8009236:	e155      	b.n	80094e4 <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 8009238:	4b23      	ldr	r3, [pc, #140]	; (80092c8 <OpenThread_CallBack_Processing+0x948>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8153 	beq.w	80094e8 <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 8009242:	4b21      	ldr	r3, [pc, #132]	; (80092c8 <OpenThread_CallBack_Processing+0x948>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	6892      	ldr	r2, [r2, #8]
 800924a:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 8009250:	4611      	mov	r1, r2
 8009252:	4798      	blx	r3
    }
    break;
 8009254:	e148      	b.n	80094e8 <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800925e:	4a1b      	ldr	r2, [pc, #108]	; (80092cc <OpenThread_CallBack_Processing+0x94c>)
 8009260:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 8009262:	4b1a      	ldr	r3, [pc, #104]	; (80092cc <OpenThread_CallBack_Processing+0x94c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	4a19      	ldr	r2, [pc, #100]	; (80092d0 <OpenThread_CallBack_Processing+0x950>)
 800926a:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 800926c:	4b18      	ldr	r3, [pc, #96]	; (80092d0 <OpenThread_CallBack_Processing+0x950>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 813b 	beq.w	80094ec <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 8009276:	4b16      	ldr	r3, [pc, #88]	; (80092d0 <OpenThread_CallBack_Processing+0x950>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	6892      	ldr	r2, [r2, #8]
 800927e:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	4611      	mov	r1, r2
 8009288:	4798      	blx	r3
    }
    break;
 800928a:	e12f      	b.n	80094ec <OpenThread_CallBack_Processing+0xb6c>
 800928c:	20000614 	.word	0x20000614
 8009290:	20000618 	.word	0x20000618
 8009294:	2000060c 	.word	0x2000060c
 8009298:	20000610 	.word	0x20000610
 800929c:	2000061c 	.word	0x2000061c
 80092a0:	20000620 	.word	0x20000620
 80092a4:	20000624 	.word	0x20000624
 80092a8:	20000628 	.word	0x20000628
 80092ac:	2000062c 	.word	0x2000062c
 80092b0:	20000630 	.word	0x20000630
 80092b4:	20000638 	.word	0x20000638
 80092b8:	20000634 	.word	0x20000634
 80092bc:	20000658 	.word	0x20000658
 80092c0:	2000065c 	.word	0x2000065c
 80092c4:	20000690 	.word	0x20000690
 80092c8:	20000694 	.word	0x20000694
 80092cc:	20000698 	.word	0x20000698
 80092d0:	200006a0 	.word	0x200006a0
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80092dc:	4a8d      	ldr	r2, [pc, #564]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 80092de:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 80092e0:	4b8c      	ldr	r3, [pc, #560]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	4a8c      	ldr	r2, [pc, #560]	; (8009518 <OpenThread_CallBack_Processing+0xb98>)
 80092e8:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 80092ea:	4b8b      	ldr	r3, [pc, #556]	; (8009518 <OpenThread_CallBack_Processing+0xb98>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 80fe 	beq.w	80094f0 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 80092f4:	4b88      	ldr	r3, [pc, #544]	; (8009518 <OpenThread_CallBack_Processing+0xb98>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	6892      	ldr	r2, [r2, #8]
 80092fc:	4610      	mov	r0, r2
 80092fe:	4798      	blx	r3
    }
    break;
 8009300:	e0f6      	b.n	80094f0 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800930a:	4a82      	ldr	r2, [pc, #520]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 800930c:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800930e:	4b81      	ldr	r3, [pc, #516]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	4a81      	ldr	r2, [pc, #516]	; (800951c <OpenThread_CallBack_Processing+0xb9c>)
 8009316:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 8009318:	4b80      	ldr	r3, [pc, #512]	; (800951c <OpenThread_CallBack_Processing+0xb9c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 80e9 	beq.w	80094f4 <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 8009322:	4b7e      	ldr	r3, [pc, #504]	; (800951c <OpenThread_CallBack_Processing+0xb9c>)
 8009324:	681c      	ldr	r4, [r3, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 8009334:	2b00      	cmp	r3, #0
 8009336:	bf14      	ite	ne
 8009338:	2301      	movne	r3, #1
 800933a:	2300      	moveq	r3, #0
 800933c:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 8009342:	47a0      	blx	r4
    }
    break;
 8009344:	e0d6      	b.n	80094f4 <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800934e:	4a71      	ldr	r2, [pc, #452]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 8009350:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 8009352:	4b70      	ldr	r3, [pc, #448]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	4a71      	ldr	r2, [pc, #452]	; (8009520 <OpenThread_CallBack_Processing+0xba0>)
 800935a:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800935c:	4b70      	ldr	r3, [pc, #448]	; (8009520 <OpenThread_CallBack_Processing+0xba0>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80c9 	beq.w	80094f8 <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 8009366:	4b6e      	ldr	r3, [pc, #440]	; (8009520 <OpenThread_CallBack_Processing+0xba0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	6892      	ldr	r2, [r2, #8]
 800936e:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 8009374:	4611      	mov	r1, r2
 8009376:	4798      	blx	r3
    }
    break;
 8009378:	e0be      	b.n	80094f8 <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009382:	4a64      	ldr	r2, [pc, #400]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 8009384:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 8009386:	4b63      	ldr	r3, [pc, #396]	; (8009514 <OpenThread_CallBack_Processing+0xb94>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	4a65      	ldr	r2, [pc, #404]	; (8009524 <OpenThread_CallBack_Processing+0xba4>)
 800938e:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 8009390:	4b64      	ldr	r3, [pc, #400]	; (8009524 <OpenThread_CallBack_Processing+0xba4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80b1 	beq.w	80094fc <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800939a:	4b62      	ldr	r3, [pc, #392]	; (8009524 <OpenThread_CallBack_Processing+0xba4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	6892      	ldr	r2, [r2, #8]
 80093a2:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 80093ac:	4798      	blx	r3
    }
    break;
 80093ae:	e0a5      	b.n	80094fc <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	4a5c      	ldr	r2, [pc, #368]	; (8009528 <OpenThread_CallBack_Processing+0xba8>)
 80093b8:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 80093ba:	4b5b      	ldr	r3, [pc, #364]	; (8009528 <OpenThread_CallBack_Processing+0xba8>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	4a5a      	ldr	r2, [pc, #360]	; (800952c <OpenThread_CallBack_Processing+0xbac>)
 80093c2:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 80093c4:	4b59      	ldr	r3, [pc, #356]	; (800952c <OpenThread_CallBack_Processing+0xbac>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 8099 	beq.w	8009500 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 80093ce:	4b57      	ldr	r3, [pc, #348]	; (800952c <OpenThread_CallBack_Processing+0xbac>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	6892      	ldr	r2, [r2, #8]
 80093d6:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 80093dc:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 80093e2:	4798      	blx	r3
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	609a      	str	r2, [r3, #8]
    }
    break;
 80093ec:	e088      	b.n	8009500 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	4a4c      	ldr	r2, [pc, #304]	; (8009528 <OpenThread_CallBack_Processing+0xba8>)
 80093f6:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 80093f8:	4b4b      	ldr	r3, [pc, #300]	; (8009528 <OpenThread_CallBack_Processing+0xba8>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	4a4c      	ldr	r2, [pc, #304]	; (8009530 <OpenThread_CallBack_Processing+0xbb0>)
 8009400:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 8009402:	4b4b      	ldr	r3, [pc, #300]	; (8009530 <OpenThread_CallBack_Processing+0xbb0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d07c      	beq.n	8009504 <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800940a:	4b49      	ldr	r3, [pc, #292]	; (8009530 <OpenThread_CallBack_Processing+0xbb0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	6892      	ldr	r2, [r2, #8]
 8009412:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 8009418:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800941e:	4798      	blx	r3
    }
    break;
 8009420:	e070      	b.n	8009504 <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	71fb      	strb	r3, [r7, #7]
    break;
 8009426:	e06e      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009428:	bf00      	nop
 800942a:	e06c      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800942c:	bf00      	nop
 800942e:	e06a      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009430:	bf00      	nop
 8009432:	e068      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009434:	bf00      	nop
 8009436:	e066      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009438:	bf00      	nop
 800943a:	e064      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800943c:	bf00      	nop
 800943e:	e062      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009440:	bf00      	nop
 8009442:	e060      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009444:	bf00      	nop
 8009446:	e05e      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009448:	bf00      	nop
 800944a:	e05c      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800944c:	bf00      	nop
 800944e:	e05a      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009450:	bf00      	nop
 8009452:	e058      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009454:	bf00      	nop
 8009456:	e056      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009458:	bf00      	nop
 800945a:	e054      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800945c:	bf00      	nop
 800945e:	e052      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009460:	bf00      	nop
 8009462:	e050      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009464:	bf00      	nop
 8009466:	e04e      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009468:	bf00      	nop
 800946a:	e04c      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800946c:	bf00      	nop
 800946e:	e04a      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009470:	bf00      	nop
 8009472:	e048      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009474:	bf00      	nop
 8009476:	e046      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009478:	bf00      	nop
 800947a:	e044      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800947c:	bf00      	nop
 800947e:	e042      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009480:	bf00      	nop
 8009482:	e040      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009484:	bf00      	nop
 8009486:	e03e      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009488:	bf00      	nop
 800948a:	e03c      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800948c:	bf00      	nop
 800948e:	e03a      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009490:	bf00      	nop
 8009492:	e038      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009494:	bf00      	nop
 8009496:	e036      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009498:	bf00      	nop
 800949a:	e034      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 800949c:	bf00      	nop
 800949e:	e032      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094a0:	bf00      	nop
 80094a2:	e030      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094a4:	bf00      	nop
 80094a6:	e02e      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094a8:	bf00      	nop
 80094aa:	e02c      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094ac:	bf00      	nop
 80094ae:	e02a      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094b0:	bf00      	nop
 80094b2:	e028      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094b4:	bf00      	nop
 80094b6:	e026      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094b8:	bf00      	nop
 80094ba:	e024      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094bc:	bf00      	nop
 80094be:	e022      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094c0:	bf00      	nop
 80094c2:	e020      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094c4:	bf00      	nop
 80094c6:	e01e      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094c8:	bf00      	nop
 80094ca:	e01c      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094cc:	bf00      	nop
 80094ce:	e01a      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094d0:	bf00      	nop
 80094d2:	e018      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094d4:	bf00      	nop
 80094d6:	e016      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
      break;
 80094d8:	bf00      	nop
 80094da:	e014      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094dc:	bf00      	nop
 80094de:	e012      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094e0:	bf00      	nop
 80094e2:	e010      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094e4:	bf00      	nop
 80094e6:	e00e      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094e8:	bf00      	nop
 80094ea:	e00c      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094ec:	bf00      	nop
 80094ee:	e00a      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094f0:	bf00      	nop
 80094f2:	e008      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094f4:	bf00      	nop
 80094f6:	e006      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094f8:	bf00      	nop
 80094fa:	e004      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 80094fc:	bf00      	nop
 80094fe:	e002      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009500:	bf00      	nop
 8009502:	e000      	b.n	8009506 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009504:	bf00      	nop
  }

  TL_THREAD_SendAck();
 8009506:	f000 fc0d 	bl	8009d24 <TL_THREAD_SendAck>
  return status;
 800950a:	79fb      	ldrb	r3, [r7, #7]

}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bdb0      	pop	{r4, r5, r7, pc}
 8009514:	20000698 	.word	0x20000698
 8009518:	200006a4 	.word	0x200006a4
 800951c:	200006a8 	.word	0x200006a8
 8009520:	200006ac 	.word	0x200006ac
 8009524:	200006b8 	.word	0x200006b8
 8009528:	2000069c 	.word	0x2000069c
 800952c:	200006b0 	.word	0x200006b0
 8009530:	200006b4 	.word	0x200006b4

08009534 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8009540:	f7f8 f81a 	bl	8001578 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009544:	f7f7 ffaa 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8009548:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8009552:	701a      	strb	r2, [r3, #0]
 8009554:	2200      	movs	r2, #0
 8009556:	f042 0202 	orr.w	r2, r2, #2
 800955a:	705a      	strb	r2, [r3, #1]
 800955c:	2200      	movs	r2, #0
 800955e:	709a      	strb	r2, [r3, #2]
 8009560:	2200      	movs	r2, #0
 8009562:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f042 0201 	orr.w	r2, r2, #1
 800956c:	711a      	strb	r2, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	715a      	strb	r2, [r3, #5]
 8009572:	2200      	movs	r2, #0
 8009574:	719a      	strb	r2, [r3, #6]
 8009576:	2200      	movs	r2, #0
 8009578:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800957a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009582:	f7f7 ffd3 	bl	800152c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009586:	f7f7 ff95 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800958a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	b2db      	uxtb	r3, r3
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80095a0:	1d3b      	adds	r3, r7, #4
 80095a2:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80095ae:	f000 f957 	bl	8009860 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	330b      	adds	r3, #11
 80095b6:	78db      	ldrb	r3, [r3, #3]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80095ca:	f107 030c 	add.w	r3, r7, #12
 80095ce:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80095d4:	f107 020c 	add.w	r2, r7, #12
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	2101      	movs	r1, #1
 80095dc:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80095e0:	f000 f93e 	bl	8009860 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	330b      	adds	r3, #11
 80095e8:	78db      	ldrb	r3, [r3, #3]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3720      	adds	r7, #32
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b088      	sub	sp, #32
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	4603      	mov	r3, r0
 80095fa:	460a      	mov	r2, r1
 80095fc:	71fb      	strb	r3, [r7, #7]
 80095fe:	4613      	mov	r3, r2
 8009600:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009602:	f107 030c 	add.w	r3, r7, #12
 8009606:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800960c:	79bb      	ldrb	r3, [r7, #6]
 800960e:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 8009610:	f107 020c 	add.w	r2, r7, #12
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2102      	movs	r1, #2
 8009618:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800961c:	f000 f920 	bl	8009860 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	330b      	adds	r3, #11
 8009624:	78db      	ldrb	r3, [r3, #3]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3720      	adds	r7, #32
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009630:	b480      	push	{r7}
 8009632:	b08b      	sub	sp, #44	; 0x2c
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800963c:	2300      	movs	r3, #0
 800963e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800964c:	2300      	movs	r3, #0
 800964e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009658:	4b4a      	ldr	r3, [pc, #296]	; (8009784 <SHCI_GetWirelessFwInfo+0x154>)
 800965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009660:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800966a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a44      	ldr	r2, [pc, #272]	; (8009788 <SHCI_GetWirelessFwInfo+0x158>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d10f      	bne.n	800969c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e01a      	b.n	80096d2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80096a4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80096a8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	0e1b      	lsrs	r3, r3, #24
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	0a1b      	lsrs	r3, r3, #8
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	091b      	lsrs	r3, r3, #4
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 030f 	and.w	r3, r3, #15
 8009708:	b2da      	uxtb	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	0e1b      	lsrs	r3, r3, #24
 8009712:	b2da      	uxtb	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	0c1b      	lsrs	r3, r3, #16
 800971c:	b2da      	uxtb	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	0a1b      	lsrs	r3, r3, #8
 8009726:	b2da      	uxtb	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	b2da      	uxtb	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	b2da      	uxtb	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	0e1b      	lsrs	r3, r3, #24
 8009740:	b2da      	uxtb	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	0c1b      	lsrs	r3, r3, #16
 800974a:	b2da      	uxtb	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	0a1b      	lsrs	r3, r3, #8
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	0e1b      	lsrs	r3, r3, #24
 800975e:	b2da      	uxtb	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	0c1b      	lsrs	r3, r3, #16
 8009768:	b2da      	uxtb	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	b2da      	uxtb	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	372c      	adds	r7, #44	; 0x2c
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	58004000 	.word	0x58004000
 8009788:	a94656b9 	.word	0xa94656b9

0800978c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4a08      	ldr	r2, [pc, #32]	; (80097bc <shci_init+0x30>)
 800979c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800979e:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <shci_init+0x34>)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80097a4:	4806      	ldr	r0, [pc, #24]	; (80097c0 <shci_init+0x34>)
 80097a6:	f000 f911 	bl	80099cc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f894 	bl	80098dc <TlInit>

  return;
 80097b4:	bf00      	nop
}
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200006dc 	.word	0x200006dc
 80097c0:	200006bc 	.word	0x200006bc

080097c4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80097ca:	4822      	ldr	r0, [pc, #136]	; (8009854 <shci_user_evt_proc+0x90>)
 80097cc:	f000 febe 	bl	800a54c <LST_is_empty>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d12b      	bne.n	800982e <shci_user_evt_proc+0x6a>
 80097d6:	4b20      	ldr	r3, [pc, #128]	; (8009858 <shci_user_evt_proc+0x94>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d027      	beq.n	800982e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80097de:	f107 030c 	add.w	r3, r7, #12
 80097e2:	4619      	mov	r1, r3
 80097e4:	481b      	ldr	r0, [pc, #108]	; (8009854 <shci_user_evt_proc+0x90>)
 80097e6:	f000 ff40 	bl	800a66a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80097ea:	4b1c      	ldr	r3, [pc, #112]	; (800985c <shci_user_evt_proc+0x98>)
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00c      	beq.n	800980c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80097f6:	2301      	movs	r3, #1
 80097f8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80097fa:	4b18      	ldr	r3, [pc, #96]	; (800985c <shci_user_evt_proc+0x98>)
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	1d3a      	adds	r2, r7, #4
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009804:	793a      	ldrb	r2, [r7, #4]
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <shci_user_evt_proc+0x94>)
 8009808:	701a      	strb	r2, [r3, #0]
 800980a:	e002      	b.n	8009812 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800980c:	4b12      	ldr	r3, [pc, #72]	; (8009858 <shci_user_evt_proc+0x94>)
 800980e:	2201      	movs	r2, #1
 8009810:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009812:	4b11      	ldr	r3, [pc, #68]	; (8009858 <shci_user_evt_proc+0x94>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fafd 	bl	8009e1c <TL_MM_EvtDone>
 8009822:	e004      	b.n	800982e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4619      	mov	r1, r3
 8009828:	480a      	ldr	r0, [pc, #40]	; (8009854 <shci_user_evt_proc+0x90>)
 800982a:	f000 feb1 	bl	800a590 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800982e:	4809      	ldr	r0, [pc, #36]	; (8009854 <shci_user_evt_proc+0x90>)
 8009830:	f000 fe8c 	bl	800a54c <LST_is_empty>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d107      	bne.n	800984a <shci_user_evt_proc+0x86>
 800983a:	4b07      	ldr	r3, [pc, #28]	; (8009858 <shci_user_evt_proc+0x94>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009842:	4804      	ldr	r0, [pc, #16]	; (8009854 <shci_user_evt_proc+0x90>)
 8009844:	f7f8 fc68 	bl	8002118 <shci_notify_asynch_evt>
  }


  return;
 8009848:	bf00      	nop
 800984a:	bf00      	nop
}
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200000a4 	.word	0x200000a4
 8009858:	200000b4 	.word	0x200000b4
 800985c:	200006bc 	.word	0x200006bc

08009860 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	60ba      	str	r2, [r7, #8]
 8009868:	607b      	str	r3, [r7, #4]
 800986a:	4603      	mov	r3, r0
 800986c:	81fb      	strh	r3, [r7, #14]
 800986e:	460b      	mov	r3, r1
 8009870:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009872:	2000      	movs	r0, #0
 8009874:	f000 f864 	bl	8009940 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009878:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <shci_send+0x74>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	89fa      	ldrh	r2, [r7, #14]
 800987e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009882:	4b14      	ldr	r3, [pc, #80]	; (80098d4 <shci_send+0x74>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	7b7a      	ldrb	r2, [r7, #13]
 8009888:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800988a:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <shci_send+0x74>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	330c      	adds	r3, #12
 8009890:	7b7a      	ldrb	r2, [r7, #13]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 ff69 	bl	800a76c <memcpy>

  shciContext.io.Send(0,0);
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <shci_send+0x78>)
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	2100      	movs	r1, #0
 80098a0:	2000      	movs	r0, #0
 80098a2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80098a4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80098a8:	f7f8 fc4d 	bl	8002146 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f103 0008 	add.w	r0, r3, #8
 80098b2:	4b08      	ldr	r3, [pc, #32]	; (80098d4 <shci_send+0x74>)
 80098b4:	6819      	ldr	r1, [r3, #0]
 80098b6:	4b07      	ldr	r3, [pc, #28]	; (80098d4 <shci_send+0x74>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	789b      	ldrb	r3, [r3, #2]
 80098bc:	3303      	adds	r3, #3
 80098be:	461a      	mov	r2, r3
 80098c0:	f000 ff54 	bl	800a76c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80098c4:	2001      	movs	r0, #1
 80098c6:	f000 f83b 	bl	8009940 <Cmd_SetStatus>

  return;
 80098ca:	bf00      	nop
}
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	200000b0 	.word	0x200000b0
 80098d8:	200006bc 	.word	0x200006bc

080098dc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80098e4:	4a10      	ldr	r2, [pc, #64]	; (8009928 <TlInit+0x4c>)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80098ea:	4810      	ldr	r0, [pc, #64]	; (800992c <TlInit+0x50>)
 80098ec:	f000 fe1e 	bl	800a52c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80098f0:	2001      	movs	r0, #1
 80098f2:	f000 f825 	bl	8009940 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80098f6:	4b0e      	ldr	r3, [pc, #56]	; (8009930 <TlInit+0x54>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80098fc:	4b0d      	ldr	r3, [pc, #52]	; (8009934 <TlInit+0x58>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00c      	beq.n	800991e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009908:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <TlInit+0x5c>)
 800990a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800990c:	4b0b      	ldr	r3, [pc, #44]	; (800993c <TlInit+0x60>)
 800990e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009910:	4b08      	ldr	r3, [pc, #32]	; (8009934 <TlInit+0x58>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f107 020c 	add.w	r2, r7, #12
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
  }

  return;
 800991c:	bf00      	nop
 800991e:	bf00      	nop
}
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	200000b0 	.word	0x200000b0
 800992c:	200000a4 	.word	0x200000a4
 8009930:	200000b4 	.word	0x200000b4
 8009934:	200006bc 	.word	0x200006bc
 8009938:	08009991 	.word	0x08009991
 800993c:	080099a9 	.word	0x080099a9

08009940 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10b      	bne.n	8009968 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009950:	4b0d      	ldr	r3, [pc, #52]	; (8009988 <Cmd_SetStatus+0x48>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <Cmd_SetStatus+0x48>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2000      	movs	r0, #0
 800995e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009960:	4b0a      	ldr	r3, [pc, #40]	; (800998c <Cmd_SetStatus+0x4c>)
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009966:	e00b      	b.n	8009980 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009968:	4b08      	ldr	r3, [pc, #32]	; (800998c <Cmd_SetStatus+0x4c>)
 800996a:	2201      	movs	r2, #1
 800996c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800996e:	4b06      	ldr	r3, [pc, #24]	; (8009988 <Cmd_SetStatus+0x48>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d004      	beq.n	8009980 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009976:	4b04      	ldr	r3, [pc, #16]	; (8009988 <Cmd_SetStatus+0x48>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2001      	movs	r0, #1
 800997c:	4798      	blx	r3
  return;
 800997e:	bf00      	nop
 8009980:	bf00      	nop
}
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	200006dc 	.word	0x200006dc
 800998c:	200000ac 	.word	0x200000ac

08009990 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009998:	2000      	movs	r0, #0
 800999a:	f7f8 fbc9 	bl	8002130 <shci_cmd_resp_release>

  return;
 800999e:	bf00      	nop
}
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4805      	ldr	r0, [pc, #20]	; (80099c8 <TlUserEvtReceived+0x20>)
 80099b4:	f000 fe12 	bl	800a5dc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80099b8:	4803      	ldr	r0, [pc, #12]	; (80099c8 <TlUserEvtReceived+0x20>)
 80099ba:	f7f8 fbad 	bl	8002118 <shci_notify_asynch_evt>

  return;
 80099be:	bf00      	nop
}
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200000a4 	.word	0x200000a4

080099cc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a05      	ldr	r2, [pc, #20]	; (80099ec <shci_register_io_bus+0x20>)
 80099d8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a04      	ldr	r2, [pc, #16]	; (80099f0 <shci_register_io_bus+0x24>)
 80099de:	611a      	str	r2, [r3, #16]

  return;
 80099e0:	bf00      	nop
}
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	08009bcd 	.word	0x08009bcd
 80099f0:	08009c21 	.word	0x08009c21

080099f4 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009a00:	f7f7 fdba 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a04:	f7f7 fd4a 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8009a08:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009a12:	701a      	strb	r2, [r3, #0]
 8009a14:	2200      	movs	r2, #0
 8009a16:	705a      	strb	r2, [r3, #1]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	709a      	strb	r2, [r3, #2]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f042 0201 	orr.w	r2, r2, #1
 8009a28:	711a      	strb	r2, [r3, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	715a      	strb	r2, [r3, #5]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	719a      	strb	r2, [r3, #6]
 8009a32:	2200      	movs	r2, #0
 8009a34:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8009a36:	78fa      	ldrb	r2, [r7, #3]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009a3c:	f7f7 fd76 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009a40:	f7f7 fd38 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009a44:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	b2db      	uxtb	r3, r3
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009a5e:	f7f7 fd8b 	bl	8001578 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a62:	f7f7 fd1b 	bl	800149c <THREAD_Get_OTCmdPayloadBuffer>
 8009a66:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	705a      	strb	r2, [r3, #1]
 8009a76:	2200      	movs	r2, #0
 8009a78:	709a      	strb	r2, [r3, #2]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f042 0203 	orr.w	r2, r2, #3
 8009a86:	711a      	strb	r2, [r3, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	715a      	strb	r2, [r3, #5]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	719a      	strb	r2, [r3, #6]
 8009a90:	2200      	movs	r2, #0
 8009a92:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 8009a94:	783b      	ldrb	r3, [r7, #0]
 8009a96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 8009aa2:	783b      	ldrb	r3, [r7, #0]
 8009aa4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	461a      	mov	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 8009ab0:	783b      	ldrb	r3, [r7, #0]
 8009ab2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	461a      	mov	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009abe:	f7f7 fd35 	bl	800152c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ac2:	f7f7 fcf7 	bl	80014b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ac6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	b2db      	uxtb	r3, r3
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009ada:	f7f7 ffa1 	bl	8001a20 <HW_IPCC_Enable>

  return;
 8009ade:	bf00      	nop
}
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <TL_Init>:


void TL_Init( void )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009ae8:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <TL_Init+0x48>)
 8009aea:	4a11      	ldr	r2, [pc, #68]	; (8009b30 <TL_Init+0x4c>)
 8009aec:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <TL_Init+0x48>)
 8009af0:	4a10      	ldr	r2, [pc, #64]	; (8009b34 <TL_Init+0x50>)
 8009af2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009af4:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <TL_Init+0x48>)
 8009af6:	4a10      	ldr	r2, [pc, #64]	; (8009b38 <TL_Init+0x54>)
 8009af8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <TL_Init+0x48>)
 8009afc:	4a0f      	ldr	r2, [pc, #60]	; (8009b3c <TL_Init+0x58>)
 8009afe:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009b00:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <TL_Init+0x48>)
 8009b02:	4a0f      	ldr	r2, [pc, #60]	; (8009b40 <TL_Init+0x5c>)
 8009b04:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009b06:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <TL_Init+0x48>)
 8009b08:	4a0e      	ldr	r2, [pc, #56]	; (8009b44 <TL_Init+0x60>)
 8009b0a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009b0c:	4b07      	ldr	r3, [pc, #28]	; (8009b2c <TL_Init+0x48>)
 8009b0e:	4a0e      	ldr	r2, [pc, #56]	; (8009b48 <TL_Init+0x64>)
 8009b10:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009b12:	4b06      	ldr	r3, [pc, #24]	; (8009b2c <TL_Init+0x48>)
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <TL_Init+0x68>)
 8009b16:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009b18:	4b04      	ldr	r3, [pc, #16]	; (8009b2c <TL_Init+0x48>)
 8009b1a:	4a0d      	ldr	r2, [pc, #52]	; (8009b50 <TL_Init+0x6c>)
 8009b1c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009b1e:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <TL_Init+0x48>)
 8009b20:	4a0c      	ldr	r2, [pc, #48]	; (8009b54 <TL_Init+0x70>)
 8009b22:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009b24:	f7f7 ff90 	bl	8001a48 <HW_IPCC_Init>

  return;
 8009b28:	bf00      	nop
}
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20030000 	.word	0x20030000
 8009b30:	20030038 	.word	0x20030038
 8009b34:	20030058 	.word	0x20030058
 8009b38:	20030068 	.word	0x20030068
 8009b3c:	20030078 	.word	0x20030078
 8009b40:	20030080 	.word	0x20030080
 8009b44:	20030088 	.word	0x20030088
 8009b48:	20030090 	.word	0x20030090
 8009b4c:	200300ac 	.word	0x200300ac
 8009b50:	200300b0 	.word	0x200300b0
 8009b54:	200300bc 	.word	0x200300bc

08009b58 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009b5e:	e01c      	b.n	8009b9a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009b60:	1d3b      	adds	r3, r7, #4
 8009b62:	4619      	mov	r1, r3
 8009b64:	4812      	ldr	r0, [pc, #72]	; (8009bb0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009b66:	f000 fd80 	bl	800a66a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7a5b      	ldrb	r3, [r3, #9]
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d003      	beq.n	8009b7a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	7a5b      	ldrb	r3, [r3, #9]
 8009b76:	2b0e      	cmp	r3, #14
 8009b78:	d105      	bne.n	8009b86 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	2002      	movs	r0, #2
 8009b80:	f000 f9b0 	bl	8009ee4 <OutputDbgTrace>
 8009b84:	e004      	b.n	8009b90 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	2003      	movs	r0, #3
 8009b8c:	f000 f9aa 	bl	8009ee4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009b90:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	4610      	mov	r0, r2
 8009b98:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009b9a:	4805      	ldr	r0, [pc, #20]	; (8009bb0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009b9c:	f000 fcd6 	bl	800a54c <LST_is_empty>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0dc      	beq.n	8009b60 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009ba6:	bf00      	nop
}
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200300d8 	.word	0x200300d8
 8009bb4:	200006e8 	.word	0x200006e8

08009bb8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4798      	blx	r3

  return;
 8009bc2:	bf00      	nop
}
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200006ec 	.word	0x200006ec

08009bcc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009bd8:	480d      	ldr	r0, [pc, #52]	; (8009c10 <TL_SYS_Init+0x44>)
 8009bda:	f000 fca7 	bl	800a52c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009bde:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <TL_SYS_Init+0x48>)
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <TL_SYS_Init+0x44>)
 8009bf0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009bf2:	f7f7 ff57 	bl	8001aa4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a07      	ldr	r2, [pc, #28]	; (8009c18 <TL_SYS_Init+0x4c>)
 8009bfc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	4a06      	ldr	r2, [pc, #24]	; (8009c1c <TL_SYS_Init+0x50>)
 8009c04:	6013      	str	r3, [r2, #0]

  return 0;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	200300e0 	.word	0x200300e0
 8009c14:	20030000 	.word	0x20030000
 8009c18:	200006f0 	.word	0x200006f0
 8009c1c:	200006f4 	.word	0x200006f4

08009c20 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009c2c:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <TL_SYS_SendCmd+0x34>)
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2210      	movs	r2, #16
 8009c34:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009c36:	4b07      	ldr	r3, [pc, #28]	; (8009c54 <TL_SYS_SendCmd+0x34>)
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	2004      	movs	r0, #4
 8009c40:	f000 f950 	bl	8009ee4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009c44:	f7f7 ff38 	bl	8001ab8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20030000 	.word	0x20030000

08009c58 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009c5c:	4b07      	ldr	r3, [pc, #28]	; (8009c7c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4619      	mov	r1, r3
 8009c64:	2005      	movs	r0, #5
 8009c66:	f000 f93d 	bl	8009ee4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009c6a:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a03      	ldr	r2, [pc, #12]	; (8009c7c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009c70:	68d2      	ldr	r2, [r2, #12]
 8009c72:	6812      	ldr	r2, [r2, #0]
 8009c74:	4610      	mov	r0, r2
 8009c76:	4798      	blx	r3

  return;
 8009c78:	bf00      	nop
}
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	20030000 	.word	0x20030000
 8009c80:	200006f0 	.word	0x200006f0

08009c84 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009c8a:	e00e      	b.n	8009caa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009c8c:	1d3b      	adds	r3, r7, #4
 8009c8e:	4619      	mov	r1, r3
 8009c90:	480b      	ldr	r0, [pc, #44]	; (8009cc0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009c92:	f000 fcea 	bl	800a66a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	2006      	movs	r0, #6
 8009c9c:	f000 f922 	bl	8009ee4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009ca0:	4b08      	ldr	r3, [pc, #32]	; (8009cc4 <HW_IPCC_SYS_EvtNot+0x40>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009caa:	4805      	ldr	r0, [pc, #20]	; (8009cc0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009cac:	f000 fc4e 	bl	800a54c <LST_is_empty>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0ea      	beq.n	8009c8c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009cb6:	bf00      	nop
}
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	200300e0 	.word	0x200300e0
 8009cc4:	200006f4 	.word	0x200006f4

08009cc8 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <TL_THREAD_Init+0x3c>)
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68da      	ldr	r2, [r3, #12]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 8009cf6:	f7f7 ff05 	bl	8001b04 <HW_IPCC_THREAD_Init>

  return;
 8009cfa:	bf00      	nop
}
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20030000 	.word	0x20030000

08009d08 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8009d0c:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <TL_OT_SendCmd+0x18>)
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	2208      	movs	r2, #8
 8009d14:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8009d16:	f7f7 ff03 	bl	8001b20 <HW_IPCC_OT_SendCmd>

  return;
 8009d1a:	bf00      	nop
}
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20030000 	.word	0x20030000

08009d24 <TL_THREAD_SendAck>:

  return;
}

void TL_THREAD_SendAck ( void )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009d28:	4b04      	ldr	r3, [pc, #16]	; (8009d3c <TL_THREAD_SendAck+0x18>)
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	220d      	movs	r2, #13
 8009d30:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8009d32:	f7f7 ff03 	bl	8001b3c <HW_IPCC_THREAD_SendAck>

  return;
 8009d36:	bf00      	nop
}
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20030000 	.word	0x20030000

08009d40 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009d44:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <TL_THREAD_CliSendAck+0x18>)
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	220d      	movs	r2, #13
 8009d4c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8009d4e:	f7f7 ff03 	bl	8001b58 <HW_IPCC_THREAD_CliSendAck>

  return;
 8009d52:	bf00      	nop
}
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20030000 	.word	0x20030000

08009d5c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8009d60:	4b03      	ldr	r3, [pc, #12]	; (8009d70 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7f7 fbe6 	bl	8001538 <TL_OT_CmdEvtReceived>

  return;
 8009d6c:	bf00      	nop
}
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20030000 	.word	0x20030000

08009d74 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8009d78:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <HW_IPCC_THREAD_EvtNot+0x14>)
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f7 fbea 	bl	8001558 <TL_THREAD_NotReceived>

  return;
 8009d84:	bf00      	nop
}
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20030000 	.word	0x20030000

08009d8c <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 8009d90:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f7 fc40 	bl	800161c <TL_THREAD_CliNotReceived>

  return;
 8009d9c:	bf00      	nop
}
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20030000 	.word	0x20030000

08009da4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009dac:	4817      	ldr	r0, [pc, #92]	; (8009e0c <TL_MM_Init+0x68>)
 8009dae:	f000 fbbd 	bl	800a52c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009db2:	4817      	ldr	r0, [pc, #92]	; (8009e10 <TL_MM_Init+0x6c>)
 8009db4:	f000 fbba 	bl	800a52c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009db8:	4b16      	ldr	r3, [pc, #88]	; (8009e14 <TL_MM_Init+0x70>)
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	4a16      	ldr	r2, [pc, #88]	; (8009e18 <TL_MM_Init+0x74>)
 8009dbe:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009dc0:	4b15      	ldr	r3, [pc, #84]	; (8009e18 <TL_MM_Init+0x74>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6892      	ldr	r2, [r2, #8]
 8009dc8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009dca:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <TL_MM_Init+0x74>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	68d2      	ldr	r2, [r2, #12]
 8009dd2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009dd4:	4b10      	ldr	r3, [pc, #64]	; (8009e18 <TL_MM_Init+0x74>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a0c      	ldr	r2, [pc, #48]	; (8009e0c <TL_MM_Init+0x68>)
 8009dda:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009ddc:	4b0e      	ldr	r3, [pc, #56]	; (8009e18 <TL_MM_Init+0x74>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009de6:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <TL_MM_Init+0x74>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6852      	ldr	r2, [r2, #4]
 8009dee:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009df0:	4b09      	ldr	r3, [pc, #36]	; (8009e18 <TL_MM_Init+0x74>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	6912      	ldr	r2, [r2, #16]
 8009df8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009dfa:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <TL_MM_Init+0x74>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	6952      	ldr	r2, [r2, #20]
 8009e02:	619a      	str	r2, [r3, #24]

  return;
 8009e04:	bf00      	nop
}
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	200300c8 	.word	0x200300c8
 8009e10:	200006e0 	.word	0x200006e0
 8009e14:	20030000 	.word	0x20030000
 8009e18:	200006f8 	.word	0x200006f8

08009e1c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	4807      	ldr	r0, [pc, #28]	; (8009e44 <TL_MM_EvtDone+0x28>)
 8009e28:	f000 fbd8 	bl	800a5dc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	2000      	movs	r0, #0
 8009e30:	f000 f858 	bl	8009ee4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009e34:	4804      	ldr	r0, [pc, #16]	; (8009e48 <TL_MM_EvtDone+0x2c>)
 8009e36:	f7f7 fec1 	bl	8001bbc <HW_IPCC_MM_SendFreeBuf>

  return;
 8009e3a:	bf00      	nop
}
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	200006e0 	.word	0x200006e0
 8009e48:	08009e4d 	.word	0x08009e4d

08009e4c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009e52:	e00c      	b.n	8009e6e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009e54:	1d3b      	adds	r3, r7, #4
 8009e56:	4619      	mov	r1, r3
 8009e58:	480a      	ldr	r0, [pc, #40]	; (8009e84 <SendFreeBuf+0x38>)
 8009e5a:	f000 fc06 	bl	800a66a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009e5e:	4b0a      	ldr	r3, [pc, #40]	; (8009e88 <SendFreeBuf+0x3c>)
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 fbb7 	bl	800a5dc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009e6e:	4805      	ldr	r0, [pc, #20]	; (8009e84 <SendFreeBuf+0x38>)
 8009e70:	f000 fb6c 	bl	800a54c <LST_is_empty>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0ec      	beq.n	8009e54 <SendFreeBuf+0x8>
  }

  return;
 8009e7a:	bf00      	nop
}
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	200006e0 	.word	0x200006e0
 8009e88:	20030000 	.word	0x20030000

08009e8c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009e90:	4805      	ldr	r0, [pc, #20]	; (8009ea8 <TL_TRACES_Init+0x1c>)
 8009e92:	f000 fb4b 	bl	800a52c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <TL_TRACES_Init+0x20>)
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	4a03      	ldr	r2, [pc, #12]	; (8009ea8 <TL_TRACES_Init+0x1c>)
 8009e9c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009e9e:	f7f7 fec3 	bl	8001c28 <HW_IPCC_TRACES_Init>

  return;
 8009ea2:	bf00      	nop
}
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	200300d0 	.word	0x200300d0
 8009eac:	20030000 	.word	0x20030000

08009eb0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009eb6:	e008      	b.n	8009eca <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009eb8:	1d3b      	adds	r3, r7, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4808      	ldr	r0, [pc, #32]	; (8009ee0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009ebe:	f000 fbd4 	bl	800a66a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7f8 f949 	bl	800215c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009eca:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009ecc:	f000 fb3e 	bl	800a54c <LST_is_empty>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0f0      	beq.n	8009eb8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009ed6:	bf00      	nop
}
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	200300d0 	.word	0x200300d0

08009ee4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	2b06      	cmp	r3, #6
 8009ef4:	d845      	bhi.n	8009f82 <OutputDbgTrace+0x9e>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <OutputDbgTrace+0x18>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f3d 	.word	0x08009f3d
 8009f04:	08009f43 	.word	0x08009f43
 8009f08:	08009f57 	.word	0x08009f57
 8009f0c:	08009f63 	.word	0x08009f63
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f77 	.word	0x08009f77
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	7a5b      	ldrb	r3, [r3, #9]
 8009f20:	2bff      	cmp	r3, #255	; 0xff
 8009f22:	d005      	beq.n	8009f30 <OutputDbgTrace+0x4c>
 8009f24:	2bff      	cmp	r3, #255	; 0xff
 8009f26:	dc05      	bgt.n	8009f34 <OutputDbgTrace+0x50>
 8009f28:	2b0e      	cmp	r3, #14
 8009f2a:	d005      	beq.n	8009f38 <OutputDbgTrace+0x54>
 8009f2c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009f2e:	e001      	b.n	8009f34 <OutputDbgTrace+0x50>
          break;
 8009f30:	bf00      	nop
 8009f32:	e027      	b.n	8009f84 <OutputDbgTrace+0xa0>
          break;
 8009f34:	bf00      	nop
 8009f36:	e025      	b.n	8009f84 <OutputDbgTrace+0xa0>
          break;
 8009f38:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009f3a:	e023      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009f40:	e020      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	7a5b      	ldrb	r3, [r3, #9]
 8009f4a:	2b0e      	cmp	r3, #14
 8009f4c:	d001      	beq.n	8009f52 <OutputDbgTrace+0x6e>
 8009f4e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009f50:	e000      	b.n	8009f54 <OutputDbgTrace+0x70>
          break;
 8009f52:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f54:	e016      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	7a5b      	ldrb	r3, [r3, #9]
 8009f5e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f60:	e010      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009f66:	e00d      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	7a5b      	ldrb	r3, [r3, #9]
 8009f70:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009f72:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f74:	e006      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	7a5b      	ldrb	r3, [r3, #9]
 8009f7e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f80:	e000      	b.n	8009f84 <OutputDbgTrace+0xa0>

    default:
      break;
 8009f82:	bf00      	nop
  }

  return;
 8009f84:	bf00      	nop
}
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009f9a:	4b0f      	ldr	r3, [pc, #60]	; (8009fd8 <OTP_Read+0x48>)
 8009f9c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009f9e:	e002      	b.n	8009fa6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3b08      	subs	r3, #8
 8009fa4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3307      	adds	r3, #7
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	79fa      	ldrb	r2, [r7, #7]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d003      	beq.n	8009fba <OTP_Read+0x2a>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4a09      	ldr	r2, [pc, #36]	; (8009fdc <OTP_Read+0x4c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d1f2      	bne.n	8009fa0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3307      	adds	r3, #7
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	79fa      	ldrb	r2, [r7, #7]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d001      	beq.n	8009fca <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009fca:	68fb      	ldr	r3, [r7, #12]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	1fff73f8 	.word	0x1fff73f8
 8009fdc:	1fff7000 	.word	0x1fff7000

08009fe0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009fe4:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <UTIL_LPM_Init+0x1c>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <UTIL_LPM_Init+0x20>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009ff0:	bf00      	nop
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	200006fc 	.word	0x200006fc
 800a000:	20000700 	.word	0x20000700

0800a004 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a010:	f3ef 8310 	mrs	r3, PRIMASK
 800a014:	613b      	str	r3, [r7, #16]
  return(result);
 800a016:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a01a:	b672      	cpsid	i
}
 800a01c:	bf00      	nop

  switch( state )
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <UTIL_LPM_SetStopMode+0x32>
 800a024:	2b01      	cmp	r3, #1
 800a026:	d10e      	bne.n	800a046 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a028:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <UTIL_LPM_SetStopMode+0x5c>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4313      	orrs	r3, r2
 800a030:	4a0b      	ldr	r2, [pc, #44]	; (800a060 <UTIL_LPM_SetStopMode+0x5c>)
 800a032:	6013      	str	r3, [r2, #0]
      break;
 800a034:	e008      	b.n	800a048 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	43da      	mvns	r2, r3
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <UTIL_LPM_SetStopMode+0x5c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4013      	ands	r3, r2
 800a040:	4a07      	ldr	r2, [pc, #28]	; (800a060 <UTIL_LPM_SetStopMode+0x5c>)
 800a042:	6013      	str	r3, [r2, #0]
      break;
 800a044:	e000      	b.n	800a048 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a046:	bf00      	nop
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f383 8810 	msr	PRIMASK, r3
}
 800a052:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a054:	bf00      	nop
 800a056:	371c      	adds	r7, #28
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	200006fc 	.word	0x200006fc

0800a064 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a070:	f3ef 8310 	mrs	r3, PRIMASK
 800a074:	613b      	str	r3, [r7, #16]
  return(result);
 800a076:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a078:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a07a:	b672      	cpsid	i
}
 800a07c:	bf00      	nop
  
  switch(state)
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d008      	beq.n	800a096 <UTIL_LPM_SetOffMode+0x32>
 800a084:	2b01      	cmp	r3, #1
 800a086:	d10e      	bne.n	800a0a6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a088:	4b0d      	ldr	r3, [pc, #52]	; (800a0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4313      	orrs	r3, r2
 800a090:	4a0b      	ldr	r2, [pc, #44]	; (800a0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a092:	6013      	str	r3, [r2, #0]
      break;
 800a094:	e008      	b.n	800a0a8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	43da      	mvns	r2, r3
 800a09a:	4b09      	ldr	r3, [pc, #36]	; (800a0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4013      	ands	r3, r2
 800a0a0:	4a07      	ldr	r2, [pc, #28]	; (800a0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a0a2:	6013      	str	r3, [r2, #0]
      break;
 800a0a4:	e000      	b.n	800a0a8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a0a6:	bf00      	nop
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f383 8810 	msr	PRIMASK, r3
}
 800a0b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a0b4:	bf00      	nop
 800a0b6:	371c      	adds	r7, #28
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	20000700 	.word	0x20000700

0800a0c4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a0d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0d4:	b672      	cpsid	i
}
 800a0d6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a0d8:	4b12      	ldr	r3, [pc, #72]	; (800a124 <UTIL_LPM_EnterLowPower+0x60>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d006      	beq.n	800a0ee <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a0e0:	4b11      	ldr	r3, [pc, #68]	; (800a128 <UTIL_LPM_EnterLowPower+0x64>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a0e6:	4b10      	ldr	r3, [pc, #64]	; (800a128 <UTIL_LPM_EnterLowPower+0x64>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4798      	blx	r3
 800a0ec:	e010      	b.n	800a110 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a0ee:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <UTIL_LPM_EnterLowPower+0x68>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d006      	beq.n	800a104 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	; (800a128 <UTIL_LPM_EnterLowPower+0x64>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <UTIL_LPM_EnterLowPower+0x64>)
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	4798      	blx	r3
 800a102:	e005      	b.n	800a110 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a104:	4b08      	ldr	r3, [pc, #32]	; (800a128 <UTIL_LPM_EnterLowPower+0x64>)
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a10a:	4b07      	ldr	r3, [pc, #28]	; (800a128 <UTIL_LPM_EnterLowPower+0x64>)
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	4798      	blx	r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f383 8810 	msr	PRIMASK, r3
}
 800a11a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a11c:	bf00      	nop
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	200006fc 	.word	0x200006fc
 800a128:	0800c364 	.word	0x0800c364
 800a12c:	20000700 	.word	0x20000700

0800a130 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b090      	sub	sp, #64	; 0x40
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a138:	4b73      	ldr	r3, [pc, #460]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a13e:	4b72      	ldr	r3, [pc, #456]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4013      	ands	r3, r2
 800a146:	4a70      	ldr	r2, [pc, #448]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a148:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a14a:	4b70      	ldr	r3, [pc, #448]	; (800a30c <UTIL_SEQ_Run+0x1dc>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a150:	4b6f      	ldr	r3, [pc, #444]	; (800a310 <UTIL_SEQ_Run+0x1e0>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a156:	4b6f      	ldr	r3, [pc, #444]	; (800a314 <UTIL_SEQ_Run+0x1e4>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a15c:	4b6e      	ldr	r3, [pc, #440]	; (800a318 <UTIL_SEQ_Run+0x1e8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a162:	e08d      	b.n	800a280 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a168:	e002      	b.n	800a170 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16c:	3301      	adds	r3, #1
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a170:	4a6a      	ldr	r2, [pc, #424]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a174:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	401a      	ands	r2, r3
 800a17c:	4b62      	ldr	r3, [pc, #392]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4013      	ands	r3, r2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f1      	beq.n	800a16a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a186:	4a65      	ldr	r2, [pc, #404]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	401a      	ands	r2, r3
 800a192:	4b5d      	ldr	r3, [pc, #372]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4013      	ands	r3, r2
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a19a:	4a60      	ldr	r2, [pc, #384]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	4413      	add	r3, r2
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a1ac:	4a5b      	ldr	r2, [pc, #364]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a1ba:	4a58      	ldr	r2, [pc, #352]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 f973 	bl	800a4b4 <SEQ_BitPosition>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4b53      	ldr	r3, [pc, #332]	; (800a320 <UTIL_SEQ_Run+0x1f0>)
 800a1d4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a1d6:	4a51      	ldr	r2, [pc, #324]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	4413      	add	r3, r2
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	4b4f      	ldr	r3, [pc, #316]	; (800a320 <UTIL_SEQ_Run+0x1f0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ea:	43db      	mvns	r3, r3
 800a1ec:	401a      	ands	r2, r3
 800a1ee:	494b      	ldr	r1, [pc, #300]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	440b      	add	r3, r1
 800a1f6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a1fe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a200:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a202:	b672      	cpsid	i
}
 800a204:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a206:	4b46      	ldr	r3, [pc, #280]	; (800a320 <UTIL_SEQ_Run+0x1f0>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2201      	movs	r2, #1
 800a20c:	fa02 f303 	lsl.w	r3, r2, r3
 800a210:	43da      	mvns	r2, r3
 800a212:	4b3e      	ldr	r3, [pc, #248]	; (800a30c <UTIL_SEQ_Run+0x1dc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4013      	ands	r3, r2
 800a218:	4a3c      	ldr	r2, [pc, #240]	; (800a30c <UTIL_SEQ_Run+0x1dc>)
 800a21a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a21c:	2302      	movs	r3, #2
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a220:	e013      	b.n	800a24a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a224:	3b01      	subs	r3, #1
 800a226:	4a3d      	ldr	r2, [pc, #244]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a228:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a22c:	4b3c      	ldr	r3, [pc, #240]	; (800a320 <UTIL_SEQ_Run+0x1f0>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2201      	movs	r2, #1
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	43da      	mvns	r2, r3
 800a238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23a:	3b01      	subs	r3, #1
 800a23c:	400a      	ands	r2, r1
 800a23e:	4937      	ldr	r1, [pc, #220]	; (800a31c <UTIL_SEQ_Run+0x1ec>)
 800a240:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a246:	3b01      	subs	r3, #1
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e8      	bne.n	800a222 <UTIL_SEQ_Run+0xf2>
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f383 8810 	msr	PRIMASK, r3
}
 800a25a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a25c:	4b30      	ldr	r3, [pc, #192]	; (800a320 <UTIL_SEQ_Run+0x1f0>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a30      	ldr	r2, [pc, #192]	; (800a324 <UTIL_SEQ_Run+0x1f4>)
 800a262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a266:	4798      	blx	r3

    local_taskset = TaskSet;
 800a268:	4b28      	ldr	r3, [pc, #160]	; (800a30c <UTIL_SEQ_Run+0x1dc>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a26e:	4b28      	ldr	r3, [pc, #160]	; (800a310 <UTIL_SEQ_Run+0x1e0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a274:	4b27      	ldr	r3, [pc, #156]	; (800a314 <UTIL_SEQ_Run+0x1e4>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a27a:	4b27      	ldr	r3, [pc, #156]	; (800a318 <UTIL_SEQ_Run+0x1e8>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	401a      	ands	r2, r3
 800a286:	4b20      	ldr	r3, [pc, #128]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <UTIL_SEQ_Run+0x16c>
 800a290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	4013      	ands	r3, r2
 800a296:	2b00      	cmp	r3, #0
 800a298:	f43f af64 	beq.w	800a164 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a29c:	4b20      	ldr	r3, [pc, #128]	; (800a320 <UTIL_SEQ_Run+0x1f0>)
 800a29e:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a2a4:	f000 f8f8 	bl	800a498 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ac:	613b      	str	r3, [r7, #16]
  return(result);
 800a2ae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a2b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2b2:	b672      	cpsid	i
}
 800a2b4:	bf00      	nop
  local_taskset = TaskSet;
 800a2b6:	4b15      	ldr	r3, [pc, #84]	; (800a30c <UTIL_SEQ_Run+0x1dc>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a2bc:	4b14      	ldr	r3, [pc, #80]	; (800a310 <UTIL_SEQ_Run+0x1e0>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a2c2:	4b14      	ldr	r3, [pc, #80]	; (800a314 <UTIL_SEQ_Run+0x1e4>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	401a      	ands	r2, r3
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d107      	bne.n	800a2e8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a2d8:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <UTIL_SEQ_Run+0x1e8>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2de:	4013      	ands	r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a2e4:	f7f7 fee7 	bl	80020b6 <UTIL_SEQ_Idle>
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f383 8810 	msr	PRIMASK, r3
}
 800a2f2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a2f4:	f000 f8d7 	bl	800a4a6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a2f8:	4a03      	ldr	r2, [pc, #12]	; (800a308 <UTIL_SEQ_Run+0x1d8>)
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	6013      	str	r3, [r2, #0]

  return;
 800a2fe:	bf00      	nop
}
 800a300:	3740      	adds	r7, #64	; 0x40
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	2000003c 	.word	0x2000003c
 800a30c:	20000704 	.word	0x20000704
 800a310:	20000708 	.word	0x20000708
 800a314:	20000038 	.word	0x20000038
 800a318:	2000070c 	.word	0x2000070c
 800a31c:	20000794 	.word	0x20000794
 800a320:	20000710 	.word	0x20000710
 800a324:	20000714 	.word	0x20000714

0800a328 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a334:	f3ef 8310 	mrs	r3, PRIMASK
 800a338:	617b      	str	r3, [r7, #20]
  return(result);
 800a33a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a33c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a33e:	b672      	cpsid	i
}
 800a340:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 f8b6 	bl	800a4b4 <SEQ_BitPosition>
 800a348:	4603      	mov	r3, r0
 800a34a:	4619      	mov	r1, r3
 800a34c:	4a06      	ldr	r2, [pc, #24]	; (800a368 <UTIL_SEQ_RegTask+0x40>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	f383 8810 	msr	PRIMASK, r3
}
 800a35e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a360:	bf00      	nop
}
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000714 	.word	0x20000714

0800a36c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a376:	f3ef 8310 	mrs	r3, PRIMASK
 800a37a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a37c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a37e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a380:	b672      	cpsid	i
}
 800a382:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a384:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <UTIL_SEQ_SetTask+0x50>)
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	4a0b      	ldr	r2, [pc, #44]	; (800a3bc <UTIL_SEQ_SetTask+0x50>)
 800a38e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a390:	4a0b      	ldr	r2, [pc, #44]	; (800a3c0 <UTIL_SEQ_SetTask+0x54>)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	4908      	ldr	r1, [pc, #32]	; (800a3c0 <UTIL_SEQ_SetTask+0x54>)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f383 8810 	msr	PRIMASK, r3
}
 800a3ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a3b0:	bf00      	nop
}
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20000704 	.word	0x20000704
 800a3c0:	20000794 	.word	0x20000794

0800a3c4 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a3d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3d6:	b672      	cpsid	i
}
 800a3d8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <UTIL_SEQ_SetEvt+0x3c>)
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	4a07      	ldr	r2, [pc, #28]	; (800a400 <UTIL_SEQ_SetEvt+0x3c>)
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f383 8810 	msr	PRIMASK, r3
}
 800a3f0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a3f2:	bf00      	nop
}
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000708 	.word	0x20000708

0800a404 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a40c:	4b1f      	ldr	r3, [pc, #124]	; (800a48c <UTIL_SEQ_WaitEvt+0x88>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a412:	4b1e      	ldr	r3, [pc, #120]	; (800a48c <UTIL_SEQ_WaitEvt+0x88>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d102      	bne.n	800a422 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a41c:	2300      	movs	r3, #0
 800a41e:	61fb      	str	r3, [r7, #28]
 800a420:	e005      	b.n	800a42e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a422:	4b1a      	ldr	r3, [pc, #104]	; (800a48c <UTIL_SEQ_WaitEvt+0x88>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2201      	movs	r2, #1
 800a428:	fa02 f303 	lsl.w	r3, r2, r3
 800a42c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a42e:	4b18      	ldr	r3, [pc, #96]	; (800a490 <UTIL_SEQ_WaitEvt+0x8c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a434:	4a16      	ldr	r2, [pc, #88]	; (800a490 <UTIL_SEQ_WaitEvt+0x8c>)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a43a:	e003      	b.n	800a444 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	69f8      	ldr	r0, [r7, #28]
 800a440:	f7f7 fe40 	bl	80020c4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a444:	4b13      	ldr	r3, [pc, #76]	; (800a494 <UTIL_SEQ_WaitEvt+0x90>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0f5      	beq.n	800a43c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a450:	4a0e      	ldr	r2, [pc, #56]	; (800a48c <UTIL_SEQ_WaitEvt+0x88>)
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a456:	f3ef 8310 	mrs	r3, PRIMASK
 800a45a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a45c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a45e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a460:	b672      	cpsid	i
}
 800a462:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	43da      	mvns	r2, r3
 800a468:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <UTIL_SEQ_WaitEvt+0x90>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4013      	ands	r3, r2
 800a46e:	4a09      	ldr	r2, [pc, #36]	; (800a494 <UTIL_SEQ_WaitEvt+0x90>)
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f383 8810 	msr	PRIMASK, r3
}
 800a47c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a47e:	4a04      	ldr	r2, [pc, #16]	; (800a490 <UTIL_SEQ_WaitEvt+0x8c>)
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	6013      	str	r3, [r2, #0]
  return;
 800a484:	bf00      	nop
}
 800a486:	3720      	adds	r7, #32
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20000710 	.word	0x20000710
 800a490:	2000070c 	.word	0x2000070c
 800a494:	20000708 	.word	0x20000708

0800a498 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a49c:	bf00      	nop
}
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a4aa:	bf00      	nop
}
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	0c1b      	lsrs	r3, r3, #16
 800a4c8:	041b      	lsls	r3, r3, #16
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d104      	bne.n	800a4d8 <SEQ_BitPosition+0x24>
 800a4ce:	2310      	movs	r3, #16
 800a4d0:	73fb      	strb	r3, [r7, #15]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	041b      	lsls	r3, r3, #16
 800a4d6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d105      	bne.n	800a4ee <SEQ_BitPosition+0x3a>
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	73fb      	strb	r3, [r7, #15]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	021b      	lsls	r3, r3, #8
 800a4ec:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d105      	bne.n	800a504 <SEQ_BitPosition+0x50>
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	73fb      	strb	r3, [r7, #15]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	011b      	lsls	r3, r3, #4
 800a502:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	0f1b      	lsrs	r3, r3, #28
 800a508:	4a07      	ldr	r2, [pc, #28]	; (800a528 <SEQ_BitPosition+0x74>)
 800a50a:	5cd2      	ldrb	r2, [r2, r3]
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	4413      	add	r3, r2
 800a510:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	f1c3 031f 	rsb	r3, r3, #31
 800a518:	b2db      	uxtb	r3, r3
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	0800c3fc 	.word	0x0800c3fc

0800a52c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	605a      	str	r2, [r3, #4]
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a554:	f3ef 8310 	mrs	r3, PRIMASK
 800a558:	60fb      	str	r3, [r7, #12]
  return(result);
 800a55a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a55c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a55e:	b672      	cpsid	i
}
 800a560:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d102      	bne.n	800a572 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a56c:	2301      	movs	r3, #1
 800a56e:	75fb      	strb	r3, [r7, #23]
 800a570:	e001      	b.n	800a576 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a572:	2300      	movs	r3, #0
 800a574:	75fb      	strb	r3, [r7, #23]
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f383 8810 	msr	PRIMASK, r3
}
 800a580:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a582:	7dfb      	ldrb	r3, [r7, #23]
}
 800a584:	4618      	mov	r0, r3
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a59a:	f3ef 8310 	mrs	r3, PRIMASK
 800a59e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5a4:	b672      	cpsid	i
}
 800a5a6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f383 8810 	msr	PRIMASK, r3
}
 800a5ce:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a5d0:	bf00      	nop
 800a5d2:	371c      	adds	r7, #28
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5f0:	b672      	cpsid	i
}
 800a5f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f383 8810 	msr	PRIMASK, r3
}
 800a61a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a61c:	bf00      	nop
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a630:	f3ef 8310 	mrs	r3, PRIMASK
 800a634:	60fb      	str	r3, [r7, #12]
  return(result);
 800a636:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a63a:	b672      	cpsid	i
}
 800a63c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	6812      	ldr	r2, [r2, #0]
 800a646:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	6852      	ldr	r2, [r2, #4]
 800a650:	605a      	str	r2, [r3, #4]
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f383 8810 	msr	PRIMASK, r3
}
 800a65c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a65e:	bf00      	nop
 800a660:	371c      	adds	r7, #28
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b086      	sub	sp, #24
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a674:	f3ef 8310 	mrs	r3, PRIMASK
 800a678:	60fb      	str	r3, [r7, #12]
  return(result);
 800a67a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a67c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a67e:	b672      	cpsid	i
}
 800a680:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff ffca 	bl	800a628 <LST_remove_node>
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	f383 8810 	msr	PRIMASK, r3
}
 800a69e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a6a0:	bf00      	nop
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <__assert_func>:
 800a6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6aa:	4614      	mov	r4, r2
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <__assert_func+0x2c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	68d8      	ldr	r0, [r3, #12]
 800a6b6:	b14c      	cbz	r4, 800a6cc <__assert_func+0x24>
 800a6b8:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <__assert_func+0x30>)
 800a6ba:	9100      	str	r1, [sp, #0]
 800a6bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6c0:	4906      	ldr	r1, [pc, #24]	; (800a6dc <__assert_func+0x34>)
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	f000 f814 	bl	800a6f0 <fiprintf>
 800a6c8:	f000 fd38 	bl	800b13c <abort>
 800a6cc:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <__assert_func+0x38>)
 800a6ce:	461c      	mov	r4, r3
 800a6d0:	e7f3      	b.n	800a6ba <__assert_func+0x12>
 800a6d2:	bf00      	nop
 800a6d4:	20000040 	.word	0x20000040
 800a6d8:	0800c40c 	.word	0x0800c40c
 800a6dc:	0800c419 	.word	0x0800c419
 800a6e0:	0800c447 	.word	0x0800c447

0800a6e4 <__errno>:
 800a6e4:	4b01      	ldr	r3, [pc, #4]	; (800a6ec <__errno+0x8>)
 800a6e6:	6818      	ldr	r0, [r3, #0]
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20000040 	.word	0x20000040

0800a6f0 <fiprintf>:
 800a6f0:	b40e      	push	{r1, r2, r3}
 800a6f2:	b503      	push	{r0, r1, lr}
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	ab03      	add	r3, sp, #12
 800a6f8:	4805      	ldr	r0, [pc, #20]	; (800a710 <fiprintf+0x20>)
 800a6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fe:	6800      	ldr	r0, [r0, #0]
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	f000 f953 	bl	800a9ac <_vfiprintf_r>
 800a706:	b002      	add	sp, #8
 800a708:	f85d eb04 	ldr.w	lr, [sp], #4
 800a70c:	b003      	add	sp, #12
 800a70e:	4770      	bx	lr
 800a710:	20000040 	.word	0x20000040

0800a714 <__libc_init_array>:
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	4d0d      	ldr	r5, [pc, #52]	; (800a74c <__libc_init_array+0x38>)
 800a718:	4c0d      	ldr	r4, [pc, #52]	; (800a750 <__libc_init_array+0x3c>)
 800a71a:	1b64      	subs	r4, r4, r5
 800a71c:	10a4      	asrs	r4, r4, #2
 800a71e:	2600      	movs	r6, #0
 800a720:	42a6      	cmp	r6, r4
 800a722:	d109      	bne.n	800a738 <__libc_init_array+0x24>
 800a724:	4d0b      	ldr	r5, [pc, #44]	; (800a754 <__libc_init_array+0x40>)
 800a726:	4c0c      	ldr	r4, [pc, #48]	; (800a758 <__libc_init_array+0x44>)
 800a728:	f001 f9d8 	bl	800badc <_init>
 800a72c:	1b64      	subs	r4, r4, r5
 800a72e:	10a4      	asrs	r4, r4, #2
 800a730:	2600      	movs	r6, #0
 800a732:	42a6      	cmp	r6, r4
 800a734:	d105      	bne.n	800a742 <__libc_init_array+0x2e>
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73c:	4798      	blx	r3
 800a73e:	3601      	adds	r6, #1
 800a740:	e7ee      	b.n	800a720 <__libc_init_array+0xc>
 800a742:	f855 3b04 	ldr.w	r3, [r5], #4
 800a746:	4798      	blx	r3
 800a748:	3601      	adds	r6, #1
 800a74a:	e7f2      	b.n	800a732 <__libc_init_array+0x1e>
 800a74c:	0800c4e0 	.word	0x0800c4e0
 800a750:	0800c4e0 	.word	0x0800c4e0
 800a754:	0800c4e0 	.word	0x0800c4e0
 800a758:	0800c4e4 	.word	0x0800c4e4

0800a75c <malloc>:
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <malloc+0xc>)
 800a75e:	4601      	mov	r1, r0
 800a760:	6818      	ldr	r0, [r3, #0]
 800a762:	f000 b885 	b.w	800a870 <_malloc_r>
 800a766:	bf00      	nop
 800a768:	20000040 	.word	0x20000040

0800a76c <memcpy>:
 800a76c:	440a      	add	r2, r1
 800a76e:	4291      	cmp	r1, r2
 800a770:	f100 33ff 	add.w	r3, r0, #4294967295
 800a774:	d100      	bne.n	800a778 <memcpy+0xc>
 800a776:	4770      	bx	lr
 800a778:	b510      	push	{r4, lr}
 800a77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a77e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a782:	4291      	cmp	r1, r2
 800a784:	d1f9      	bne.n	800a77a <memcpy+0xe>
 800a786:	bd10      	pop	{r4, pc}

0800a788 <memset>:
 800a788:	4402      	add	r2, r0
 800a78a:	4603      	mov	r3, r0
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d100      	bne.n	800a792 <memset+0xa>
 800a790:	4770      	bx	lr
 800a792:	f803 1b01 	strb.w	r1, [r3], #1
 800a796:	e7f9      	b.n	800a78c <memset+0x4>

0800a798 <_free_r>:
 800a798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79a:	2900      	cmp	r1, #0
 800a79c:	d044      	beq.n	800a828 <_free_r+0x90>
 800a79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a2:	9001      	str	r0, [sp, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a7aa:	bfb8      	it	lt
 800a7ac:	18e4      	addlt	r4, r4, r3
 800a7ae:	f000 ff07 	bl	800b5c0 <__malloc_lock>
 800a7b2:	4a1e      	ldr	r2, [pc, #120]	; (800a82c <_free_r+0x94>)
 800a7b4:	9801      	ldr	r0, [sp, #4]
 800a7b6:	6813      	ldr	r3, [r2, #0]
 800a7b8:	b933      	cbnz	r3, 800a7c8 <_free_r+0x30>
 800a7ba:	6063      	str	r3, [r4, #4]
 800a7bc:	6014      	str	r4, [r2, #0]
 800a7be:	b003      	add	sp, #12
 800a7c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7c4:	f000 bf02 	b.w	800b5cc <__malloc_unlock>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d908      	bls.n	800a7de <_free_r+0x46>
 800a7cc:	6825      	ldr	r5, [r4, #0]
 800a7ce:	1961      	adds	r1, r4, r5
 800a7d0:	428b      	cmp	r3, r1
 800a7d2:	bf01      	itttt	eq
 800a7d4:	6819      	ldreq	r1, [r3, #0]
 800a7d6:	685b      	ldreq	r3, [r3, #4]
 800a7d8:	1949      	addeq	r1, r1, r5
 800a7da:	6021      	streq	r1, [r4, #0]
 800a7dc:	e7ed      	b.n	800a7ba <_free_r+0x22>
 800a7de:	461a      	mov	r2, r3
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	b10b      	cbz	r3, 800a7e8 <_free_r+0x50>
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d9fa      	bls.n	800a7de <_free_r+0x46>
 800a7e8:	6811      	ldr	r1, [r2, #0]
 800a7ea:	1855      	adds	r5, r2, r1
 800a7ec:	42a5      	cmp	r5, r4
 800a7ee:	d10b      	bne.n	800a808 <_free_r+0x70>
 800a7f0:	6824      	ldr	r4, [r4, #0]
 800a7f2:	4421      	add	r1, r4
 800a7f4:	1854      	adds	r4, r2, r1
 800a7f6:	42a3      	cmp	r3, r4
 800a7f8:	6011      	str	r1, [r2, #0]
 800a7fa:	d1e0      	bne.n	800a7be <_free_r+0x26>
 800a7fc:	681c      	ldr	r4, [r3, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	6053      	str	r3, [r2, #4]
 800a802:	4421      	add	r1, r4
 800a804:	6011      	str	r1, [r2, #0]
 800a806:	e7da      	b.n	800a7be <_free_r+0x26>
 800a808:	d902      	bls.n	800a810 <_free_r+0x78>
 800a80a:	230c      	movs	r3, #12
 800a80c:	6003      	str	r3, [r0, #0]
 800a80e:	e7d6      	b.n	800a7be <_free_r+0x26>
 800a810:	6825      	ldr	r5, [r4, #0]
 800a812:	1961      	adds	r1, r4, r5
 800a814:	428b      	cmp	r3, r1
 800a816:	bf04      	itt	eq
 800a818:	6819      	ldreq	r1, [r3, #0]
 800a81a:	685b      	ldreq	r3, [r3, #4]
 800a81c:	6063      	str	r3, [r4, #4]
 800a81e:	bf04      	itt	eq
 800a820:	1949      	addeq	r1, r1, r5
 800a822:	6021      	streq	r1, [r4, #0]
 800a824:	6054      	str	r4, [r2, #4]
 800a826:	e7ca      	b.n	800a7be <_free_r+0x26>
 800a828:	b003      	add	sp, #12
 800a82a:	bd30      	pop	{r4, r5, pc}
 800a82c:	200007a4 	.word	0x200007a4

0800a830 <sbrk_aligned>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	4e0e      	ldr	r6, [pc, #56]	; (800a86c <sbrk_aligned+0x3c>)
 800a834:	460c      	mov	r4, r1
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	4605      	mov	r5, r0
 800a83a:	b911      	cbnz	r1, 800a842 <sbrk_aligned+0x12>
 800a83c:	f000 fb7a 	bl	800af34 <_sbrk_r>
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4621      	mov	r1, r4
 800a844:	4628      	mov	r0, r5
 800a846:	f000 fb75 	bl	800af34 <_sbrk_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d00a      	beq.n	800a864 <sbrk_aligned+0x34>
 800a84e:	1cc4      	adds	r4, r0, #3
 800a850:	f024 0403 	bic.w	r4, r4, #3
 800a854:	42a0      	cmp	r0, r4
 800a856:	d007      	beq.n	800a868 <sbrk_aligned+0x38>
 800a858:	1a21      	subs	r1, r4, r0
 800a85a:	4628      	mov	r0, r5
 800a85c:	f000 fb6a 	bl	800af34 <_sbrk_r>
 800a860:	3001      	adds	r0, #1
 800a862:	d101      	bne.n	800a868 <sbrk_aligned+0x38>
 800a864:	f04f 34ff 	mov.w	r4, #4294967295
 800a868:	4620      	mov	r0, r4
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	200007a8 	.word	0x200007a8

0800a870 <_malloc_r>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	1ccd      	adds	r5, r1, #3
 800a876:	f025 0503 	bic.w	r5, r5, #3
 800a87a:	3508      	adds	r5, #8
 800a87c:	2d0c      	cmp	r5, #12
 800a87e:	bf38      	it	cc
 800a880:	250c      	movcc	r5, #12
 800a882:	2d00      	cmp	r5, #0
 800a884:	4607      	mov	r7, r0
 800a886:	db01      	blt.n	800a88c <_malloc_r+0x1c>
 800a888:	42a9      	cmp	r1, r5
 800a88a:	d905      	bls.n	800a898 <_malloc_r+0x28>
 800a88c:	230c      	movs	r3, #12
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	2600      	movs	r6, #0
 800a892:	4630      	mov	r0, r6
 800a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a898:	4e2e      	ldr	r6, [pc, #184]	; (800a954 <_malloc_r+0xe4>)
 800a89a:	f000 fe91 	bl	800b5c0 <__malloc_lock>
 800a89e:	6833      	ldr	r3, [r6, #0]
 800a8a0:	461c      	mov	r4, r3
 800a8a2:	bb34      	cbnz	r4, 800a8f2 <_malloc_r+0x82>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f7ff ffc2 	bl	800a830 <sbrk_aligned>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	d14d      	bne.n	800a94e <_malloc_r+0xde>
 800a8b2:	6834      	ldr	r4, [r6, #0]
 800a8b4:	4626      	mov	r6, r4
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	d140      	bne.n	800a93c <_malloc_r+0xcc>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4638      	mov	r0, r7
 800a8c0:	eb04 0803 	add.w	r8, r4, r3
 800a8c4:	f000 fb36 	bl	800af34 <_sbrk_r>
 800a8c8:	4580      	cmp	r8, r0
 800a8ca:	d13a      	bne.n	800a942 <_malloc_r+0xd2>
 800a8cc:	6821      	ldr	r1, [r4, #0]
 800a8ce:	3503      	adds	r5, #3
 800a8d0:	1a6d      	subs	r5, r5, r1
 800a8d2:	f025 0503 	bic.w	r5, r5, #3
 800a8d6:	3508      	adds	r5, #8
 800a8d8:	2d0c      	cmp	r5, #12
 800a8da:	bf38      	it	cc
 800a8dc:	250c      	movcc	r5, #12
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ffa5 	bl	800a830 <sbrk_aligned>
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d02b      	beq.n	800a942 <_malloc_r+0xd2>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	442b      	add	r3, r5
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	e00e      	b.n	800a910 <_malloc_r+0xa0>
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	1b52      	subs	r2, r2, r5
 800a8f6:	d41e      	bmi.n	800a936 <_malloc_r+0xc6>
 800a8f8:	2a0b      	cmp	r2, #11
 800a8fa:	d916      	bls.n	800a92a <_malloc_r+0xba>
 800a8fc:	1961      	adds	r1, r4, r5
 800a8fe:	42a3      	cmp	r3, r4
 800a900:	6025      	str	r5, [r4, #0]
 800a902:	bf18      	it	ne
 800a904:	6059      	strne	r1, [r3, #4]
 800a906:	6863      	ldr	r3, [r4, #4]
 800a908:	bf08      	it	eq
 800a90a:	6031      	streq	r1, [r6, #0]
 800a90c:	5162      	str	r2, [r4, r5]
 800a90e:	604b      	str	r3, [r1, #4]
 800a910:	4638      	mov	r0, r7
 800a912:	f104 060b 	add.w	r6, r4, #11
 800a916:	f000 fe59 	bl	800b5cc <__malloc_unlock>
 800a91a:	f026 0607 	bic.w	r6, r6, #7
 800a91e:	1d23      	adds	r3, r4, #4
 800a920:	1af2      	subs	r2, r6, r3
 800a922:	d0b6      	beq.n	800a892 <_malloc_r+0x22>
 800a924:	1b9b      	subs	r3, r3, r6
 800a926:	50a3      	str	r3, [r4, r2]
 800a928:	e7b3      	b.n	800a892 <_malloc_r+0x22>
 800a92a:	6862      	ldr	r2, [r4, #4]
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	bf0c      	ite	eq
 800a930:	6032      	streq	r2, [r6, #0]
 800a932:	605a      	strne	r2, [r3, #4]
 800a934:	e7ec      	b.n	800a910 <_malloc_r+0xa0>
 800a936:	4623      	mov	r3, r4
 800a938:	6864      	ldr	r4, [r4, #4]
 800a93a:	e7b2      	b.n	800a8a2 <_malloc_r+0x32>
 800a93c:	4634      	mov	r4, r6
 800a93e:	6876      	ldr	r6, [r6, #4]
 800a940:	e7b9      	b.n	800a8b6 <_malloc_r+0x46>
 800a942:	230c      	movs	r3, #12
 800a944:	603b      	str	r3, [r7, #0]
 800a946:	4638      	mov	r0, r7
 800a948:	f000 fe40 	bl	800b5cc <__malloc_unlock>
 800a94c:	e7a1      	b.n	800a892 <_malloc_r+0x22>
 800a94e:	6025      	str	r5, [r4, #0]
 800a950:	e7de      	b.n	800a910 <_malloc_r+0xa0>
 800a952:	bf00      	nop
 800a954:	200007a4 	.word	0x200007a4

0800a958 <__sfputc_r>:
 800a958:	6893      	ldr	r3, [r2, #8]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	b410      	push	{r4}
 800a960:	6093      	str	r3, [r2, #8]
 800a962:	da08      	bge.n	800a976 <__sfputc_r+0x1e>
 800a964:	6994      	ldr	r4, [r2, #24]
 800a966:	42a3      	cmp	r3, r4
 800a968:	db01      	blt.n	800a96e <__sfputc_r+0x16>
 800a96a:	290a      	cmp	r1, #10
 800a96c:	d103      	bne.n	800a976 <__sfputc_r+0x1e>
 800a96e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a972:	f000 bb23 	b.w	800afbc <__swbuf_r>
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	1c58      	adds	r0, r3, #1
 800a97a:	6010      	str	r0, [r2, #0]
 800a97c:	7019      	strb	r1, [r3, #0]
 800a97e:	4608      	mov	r0, r1
 800a980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <__sfputs_r>:
 800a986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a988:	4606      	mov	r6, r0
 800a98a:	460f      	mov	r7, r1
 800a98c:	4614      	mov	r4, r2
 800a98e:	18d5      	adds	r5, r2, r3
 800a990:	42ac      	cmp	r4, r5
 800a992:	d101      	bne.n	800a998 <__sfputs_r+0x12>
 800a994:	2000      	movs	r0, #0
 800a996:	e007      	b.n	800a9a8 <__sfputs_r+0x22>
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	463a      	mov	r2, r7
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ffda 	bl	800a958 <__sfputc_r>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d1f3      	bne.n	800a990 <__sfputs_r+0xa>
 800a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9ac <_vfiprintf_r>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	b09d      	sub	sp, #116	; 0x74
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	4698      	mov	r8, r3
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	b118      	cbz	r0, 800a9c4 <_vfiprintf_r+0x18>
 800a9bc:	6983      	ldr	r3, [r0, #24]
 800a9be:	b90b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x18>
 800a9c0:	f000 fcde 	bl	800b380 <__sinit>
 800a9c4:	4b89      	ldr	r3, [pc, #548]	; (800abec <_vfiprintf_r+0x240>)
 800a9c6:	429d      	cmp	r5, r3
 800a9c8:	d11b      	bne.n	800aa02 <_vfiprintf_r+0x56>
 800a9ca:	6875      	ldr	r5, [r6, #4]
 800a9cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ce:	07d9      	lsls	r1, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_vfiprintf_r+0x32>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	059a      	lsls	r2, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_vfiprintf_r+0x32>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9da:	f000 fd6f 	bl	800b4bc <__retarget_lock_acquire_recursive>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	071b      	lsls	r3, r3, #28
 800a9e2:	d501      	bpl.n	800a9e8 <_vfiprintf_r+0x3c>
 800a9e4:	692b      	ldr	r3, [r5, #16]
 800a9e6:	b9eb      	cbnz	r3, 800aa24 <_vfiprintf_r+0x78>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f000 fb38 	bl	800b060 <__swsetup_r>
 800a9f0:	b1c0      	cbz	r0, 800aa24 <_vfiprintf_r+0x78>
 800a9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f4:	07dc      	lsls	r4, r3, #31
 800a9f6:	d50e      	bpl.n	800aa16 <_vfiprintf_r+0x6a>
 800a9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fc:	b01d      	add	sp, #116	; 0x74
 800a9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa02:	4b7b      	ldr	r3, [pc, #492]	; (800abf0 <_vfiprintf_r+0x244>)
 800aa04:	429d      	cmp	r5, r3
 800aa06:	d101      	bne.n	800aa0c <_vfiprintf_r+0x60>
 800aa08:	68b5      	ldr	r5, [r6, #8]
 800aa0a:	e7df      	b.n	800a9cc <_vfiprintf_r+0x20>
 800aa0c:	4b79      	ldr	r3, [pc, #484]	; (800abf4 <_vfiprintf_r+0x248>)
 800aa0e:	429d      	cmp	r5, r3
 800aa10:	bf08      	it	eq
 800aa12:	68f5      	ldreq	r5, [r6, #12]
 800aa14:	e7da      	b.n	800a9cc <_vfiprintf_r+0x20>
 800aa16:	89ab      	ldrh	r3, [r5, #12]
 800aa18:	0598      	lsls	r0, r3, #22
 800aa1a:	d4ed      	bmi.n	800a9f8 <_vfiprintf_r+0x4c>
 800aa1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1e:	f000 fd4e 	bl	800b4be <__retarget_lock_release_recursive>
 800aa22:	e7e9      	b.n	800a9f8 <_vfiprintf_r+0x4c>
 800aa24:	2300      	movs	r3, #0
 800aa26:	9309      	str	r3, [sp, #36]	; 0x24
 800aa28:	2320      	movs	r3, #32
 800aa2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa32:	2330      	movs	r3, #48	; 0x30
 800aa34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abf8 <_vfiprintf_r+0x24c>
 800aa38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa3c:	f04f 0901 	mov.w	r9, #1
 800aa40:	4623      	mov	r3, r4
 800aa42:	469a      	mov	sl, r3
 800aa44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa48:	b10a      	cbz	r2, 800aa4e <_vfiprintf_r+0xa2>
 800aa4a:	2a25      	cmp	r2, #37	; 0x25
 800aa4c:	d1f9      	bne.n	800aa42 <_vfiprintf_r+0x96>
 800aa4e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa52:	d00b      	beq.n	800aa6c <_vfiprintf_r+0xc0>
 800aa54:	465b      	mov	r3, fp
 800aa56:	4622      	mov	r2, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7ff ff93 	bl	800a986 <__sfputs_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	f000 80aa 	beq.w	800abba <_vfiprintf_r+0x20e>
 800aa66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa68:	445a      	add	r2, fp
 800aa6a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa6c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 80a2 	beq.w	800abba <_vfiprintf_r+0x20e>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa80:	f10a 0a01 	add.w	sl, sl, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	9307      	str	r3, [sp, #28]
 800aa88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa8c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa8e:	4654      	mov	r4, sl
 800aa90:	2205      	movs	r2, #5
 800aa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa96:	4858      	ldr	r0, [pc, #352]	; (800abf8 <_vfiprintf_r+0x24c>)
 800aa98:	f7f5 fb8a 	bl	80001b0 <memchr>
 800aa9c:	9a04      	ldr	r2, [sp, #16]
 800aa9e:	b9d8      	cbnz	r0, 800aad8 <_vfiprintf_r+0x12c>
 800aaa0:	06d1      	lsls	r1, r2, #27
 800aaa2:	bf44      	itt	mi
 800aaa4:	2320      	movmi	r3, #32
 800aaa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaaa:	0713      	lsls	r3, r2, #28
 800aaac:	bf44      	itt	mi
 800aaae:	232b      	movmi	r3, #43	; 0x2b
 800aab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab4:	f89a 3000 	ldrb.w	r3, [sl]
 800aab8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaba:	d015      	beq.n	800aae8 <_vfiprintf_r+0x13c>
 800aabc:	9a07      	ldr	r2, [sp, #28]
 800aabe:	4654      	mov	r4, sl
 800aac0:	2000      	movs	r0, #0
 800aac2:	f04f 0c0a 	mov.w	ip, #10
 800aac6:	4621      	mov	r1, r4
 800aac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aacc:	3b30      	subs	r3, #48	; 0x30
 800aace:	2b09      	cmp	r3, #9
 800aad0:	d94e      	bls.n	800ab70 <_vfiprintf_r+0x1c4>
 800aad2:	b1b0      	cbz	r0, 800ab02 <_vfiprintf_r+0x156>
 800aad4:	9207      	str	r2, [sp, #28]
 800aad6:	e014      	b.n	800ab02 <_vfiprintf_r+0x156>
 800aad8:	eba0 0308 	sub.w	r3, r0, r8
 800aadc:	fa09 f303 	lsl.w	r3, r9, r3
 800aae0:	4313      	orrs	r3, r2
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	46a2      	mov	sl, r4
 800aae6:	e7d2      	b.n	800aa8e <_vfiprintf_r+0xe2>
 800aae8:	9b03      	ldr	r3, [sp, #12]
 800aaea:	1d19      	adds	r1, r3, #4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	9103      	str	r1, [sp, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbb      	ittet	lt
 800aaf4:	425b      	neglt	r3, r3
 800aaf6:	f042 0202 	orrlt.w	r2, r2, #2
 800aafa:	9307      	strge	r3, [sp, #28]
 800aafc:	9307      	strlt	r3, [sp, #28]
 800aafe:	bfb8      	it	lt
 800ab00:	9204      	strlt	r2, [sp, #16]
 800ab02:	7823      	ldrb	r3, [r4, #0]
 800ab04:	2b2e      	cmp	r3, #46	; 0x2e
 800ab06:	d10c      	bne.n	800ab22 <_vfiprintf_r+0x176>
 800ab08:	7863      	ldrb	r3, [r4, #1]
 800ab0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0c:	d135      	bne.n	800ab7a <_vfiprintf_r+0x1ce>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	1d1a      	adds	r2, r3, #4
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	9203      	str	r2, [sp, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfb8      	it	lt
 800ab1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab1e:	3402      	adds	r4, #2
 800ab20:	9305      	str	r3, [sp, #20]
 800ab22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac08 <_vfiprintf_r+0x25c>
 800ab26:	7821      	ldrb	r1, [r4, #0]
 800ab28:	2203      	movs	r2, #3
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f7f5 fb40 	bl	80001b0 <memchr>
 800ab30:	b140      	cbz	r0, 800ab44 <_vfiprintf_r+0x198>
 800ab32:	2340      	movs	r3, #64	; 0x40
 800ab34:	eba0 000a 	sub.w	r0, r0, sl
 800ab38:	fa03 f000 	lsl.w	r0, r3, r0
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	4303      	orrs	r3, r0
 800ab40:	3401      	adds	r4, #1
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab48:	482c      	ldr	r0, [pc, #176]	; (800abfc <_vfiprintf_r+0x250>)
 800ab4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab4e:	2206      	movs	r2, #6
 800ab50:	f7f5 fb2e 	bl	80001b0 <memchr>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d03f      	beq.n	800abd8 <_vfiprintf_r+0x22c>
 800ab58:	4b29      	ldr	r3, [pc, #164]	; (800ac00 <_vfiprintf_r+0x254>)
 800ab5a:	bb1b      	cbnz	r3, 800aba4 <_vfiprintf_r+0x1f8>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	f023 0307 	bic.w	r3, r3, #7
 800ab64:	3308      	adds	r3, #8
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6a:	443b      	add	r3, r7
 800ab6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6e:	e767      	b.n	800aa40 <_vfiprintf_r+0x94>
 800ab70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab74:	460c      	mov	r4, r1
 800ab76:	2001      	movs	r0, #1
 800ab78:	e7a5      	b.n	800aac6 <_vfiprintf_r+0x11a>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	3401      	adds	r4, #1
 800ab7e:	9305      	str	r3, [sp, #20]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f04f 0c0a 	mov.w	ip, #10
 800ab86:	4620      	mov	r0, r4
 800ab88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8c:	3a30      	subs	r2, #48	; 0x30
 800ab8e:	2a09      	cmp	r2, #9
 800ab90:	d903      	bls.n	800ab9a <_vfiprintf_r+0x1ee>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0c5      	beq.n	800ab22 <_vfiprintf_r+0x176>
 800ab96:	9105      	str	r1, [sp, #20]
 800ab98:	e7c3      	b.n	800ab22 <_vfiprintf_r+0x176>
 800ab9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab9e:	4604      	mov	r4, r0
 800aba0:	2301      	movs	r3, #1
 800aba2:	e7f0      	b.n	800ab86 <_vfiprintf_r+0x1da>
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	462a      	mov	r2, r5
 800abaa:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <_vfiprintf_r+0x258>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	4630      	mov	r0, r6
 800abb0:	f3af 8000 	nop.w
 800abb4:	4607      	mov	r7, r0
 800abb6:	1c78      	adds	r0, r7, #1
 800abb8:	d1d6      	bne.n	800ab68 <_vfiprintf_r+0x1bc>
 800abba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abbc:	07d9      	lsls	r1, r3, #31
 800abbe:	d405      	bmi.n	800abcc <_vfiprintf_r+0x220>
 800abc0:	89ab      	ldrh	r3, [r5, #12]
 800abc2:	059a      	lsls	r2, r3, #22
 800abc4:	d402      	bmi.n	800abcc <_vfiprintf_r+0x220>
 800abc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abc8:	f000 fc79 	bl	800b4be <__retarget_lock_release_recursive>
 800abcc:	89ab      	ldrh	r3, [r5, #12]
 800abce:	065b      	lsls	r3, r3, #25
 800abd0:	f53f af12 	bmi.w	800a9f8 <_vfiprintf_r+0x4c>
 800abd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd6:	e711      	b.n	800a9fc <_vfiprintf_r+0x50>
 800abd8:	ab03      	add	r3, sp, #12
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	462a      	mov	r2, r5
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_vfiprintf_r+0x258>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	4630      	mov	r0, r6
 800abe4:	f000 f880 	bl	800ace8 <_printf_i>
 800abe8:	e7e4      	b.n	800abb4 <_vfiprintf_r+0x208>
 800abea:	bf00      	nop
 800abec:	0800c4a0 	.word	0x0800c4a0
 800abf0:	0800c4c0 	.word	0x0800c4c0
 800abf4:	0800c480 	.word	0x0800c480
 800abf8:	0800c44c 	.word	0x0800c44c
 800abfc:	0800c456 	.word	0x0800c456
 800ac00:	00000000 	.word	0x00000000
 800ac04:	0800a987 	.word	0x0800a987
 800ac08:	0800c452 	.word	0x0800c452

0800ac0c <_printf_common>:
 800ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	4616      	mov	r6, r2
 800ac12:	4699      	mov	r9, r3
 800ac14:	688a      	ldr	r2, [r1, #8]
 800ac16:	690b      	ldr	r3, [r1, #16]
 800ac18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	bfb8      	it	lt
 800ac20:	4613      	movlt	r3, r2
 800ac22:	6033      	str	r3, [r6, #0]
 800ac24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac28:	4607      	mov	r7, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	b10a      	cbz	r2, 800ac32 <_printf_common+0x26>
 800ac2e:	3301      	adds	r3, #1
 800ac30:	6033      	str	r3, [r6, #0]
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	0699      	lsls	r1, r3, #26
 800ac36:	bf42      	ittt	mi
 800ac38:	6833      	ldrmi	r3, [r6, #0]
 800ac3a:	3302      	addmi	r3, #2
 800ac3c:	6033      	strmi	r3, [r6, #0]
 800ac3e:	6825      	ldr	r5, [r4, #0]
 800ac40:	f015 0506 	ands.w	r5, r5, #6
 800ac44:	d106      	bne.n	800ac54 <_printf_common+0x48>
 800ac46:	f104 0a19 	add.w	sl, r4, #25
 800ac4a:	68e3      	ldr	r3, [r4, #12]
 800ac4c:	6832      	ldr	r2, [r6, #0]
 800ac4e:	1a9b      	subs	r3, r3, r2
 800ac50:	42ab      	cmp	r3, r5
 800ac52:	dc26      	bgt.n	800aca2 <_printf_common+0x96>
 800ac54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac58:	1e13      	subs	r3, r2, #0
 800ac5a:	6822      	ldr	r2, [r4, #0]
 800ac5c:	bf18      	it	ne
 800ac5e:	2301      	movne	r3, #1
 800ac60:	0692      	lsls	r2, r2, #26
 800ac62:	d42b      	bmi.n	800acbc <_printf_common+0xb0>
 800ac64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac68:	4649      	mov	r1, r9
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	47c0      	blx	r8
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d01e      	beq.n	800acb0 <_printf_common+0xa4>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	68e5      	ldr	r5, [r4, #12]
 800ac76:	6832      	ldr	r2, [r6, #0]
 800ac78:	f003 0306 	and.w	r3, r3, #6
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	bf08      	it	eq
 800ac80:	1aad      	subeq	r5, r5, r2
 800ac82:	68a3      	ldr	r3, [r4, #8]
 800ac84:	6922      	ldr	r2, [r4, #16]
 800ac86:	bf0c      	ite	eq
 800ac88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac8c:	2500      	movne	r5, #0
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	bfc4      	itt	gt
 800ac92:	1a9b      	subgt	r3, r3, r2
 800ac94:	18ed      	addgt	r5, r5, r3
 800ac96:	2600      	movs	r6, #0
 800ac98:	341a      	adds	r4, #26
 800ac9a:	42b5      	cmp	r5, r6
 800ac9c:	d11a      	bne.n	800acd4 <_printf_common+0xc8>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	e008      	b.n	800acb4 <_printf_common+0xa8>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4652      	mov	r2, sl
 800aca6:	4649      	mov	r1, r9
 800aca8:	4638      	mov	r0, r7
 800acaa:	47c0      	blx	r8
 800acac:	3001      	adds	r0, #1
 800acae:	d103      	bne.n	800acb8 <_printf_common+0xac>
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb8:	3501      	adds	r5, #1
 800acba:	e7c6      	b.n	800ac4a <_printf_common+0x3e>
 800acbc:	18e1      	adds	r1, r4, r3
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	2030      	movs	r0, #48	; 0x30
 800acc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acc6:	4422      	add	r2, r4
 800acc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800accc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acd0:	3302      	adds	r3, #2
 800acd2:	e7c7      	b.n	800ac64 <_printf_common+0x58>
 800acd4:	2301      	movs	r3, #1
 800acd6:	4622      	mov	r2, r4
 800acd8:	4649      	mov	r1, r9
 800acda:	4638      	mov	r0, r7
 800acdc:	47c0      	blx	r8
 800acde:	3001      	adds	r0, #1
 800ace0:	d0e6      	beq.n	800acb0 <_printf_common+0xa4>
 800ace2:	3601      	adds	r6, #1
 800ace4:	e7d9      	b.n	800ac9a <_printf_common+0x8e>
	...

0800ace8 <_printf_i>:
 800ace8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	7e0f      	ldrb	r7, [r1, #24]
 800acee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acf0:	2f78      	cmp	r7, #120	; 0x78
 800acf2:	4691      	mov	r9, r2
 800acf4:	4680      	mov	r8, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	469a      	mov	sl, r3
 800acfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acfe:	d807      	bhi.n	800ad10 <_printf_i+0x28>
 800ad00:	2f62      	cmp	r7, #98	; 0x62
 800ad02:	d80a      	bhi.n	800ad1a <_printf_i+0x32>
 800ad04:	2f00      	cmp	r7, #0
 800ad06:	f000 80d8 	beq.w	800aeba <_printf_i+0x1d2>
 800ad0a:	2f58      	cmp	r7, #88	; 0x58
 800ad0c:	f000 80a3 	beq.w	800ae56 <_printf_i+0x16e>
 800ad10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad18:	e03a      	b.n	800ad90 <_printf_i+0xa8>
 800ad1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad1e:	2b15      	cmp	r3, #21
 800ad20:	d8f6      	bhi.n	800ad10 <_printf_i+0x28>
 800ad22:	a101      	add	r1, pc, #4	; (adr r1, 800ad28 <_printf_i+0x40>)
 800ad24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad28:	0800ad81 	.word	0x0800ad81
 800ad2c:	0800ad95 	.word	0x0800ad95
 800ad30:	0800ad11 	.word	0x0800ad11
 800ad34:	0800ad11 	.word	0x0800ad11
 800ad38:	0800ad11 	.word	0x0800ad11
 800ad3c:	0800ad11 	.word	0x0800ad11
 800ad40:	0800ad95 	.word	0x0800ad95
 800ad44:	0800ad11 	.word	0x0800ad11
 800ad48:	0800ad11 	.word	0x0800ad11
 800ad4c:	0800ad11 	.word	0x0800ad11
 800ad50:	0800ad11 	.word	0x0800ad11
 800ad54:	0800aea1 	.word	0x0800aea1
 800ad58:	0800adc5 	.word	0x0800adc5
 800ad5c:	0800ae83 	.word	0x0800ae83
 800ad60:	0800ad11 	.word	0x0800ad11
 800ad64:	0800ad11 	.word	0x0800ad11
 800ad68:	0800aec3 	.word	0x0800aec3
 800ad6c:	0800ad11 	.word	0x0800ad11
 800ad70:	0800adc5 	.word	0x0800adc5
 800ad74:	0800ad11 	.word	0x0800ad11
 800ad78:	0800ad11 	.word	0x0800ad11
 800ad7c:	0800ae8b 	.word	0x0800ae8b
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	1d1a      	adds	r2, r3, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	602a      	str	r2, [r5, #0]
 800ad88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad90:	2301      	movs	r3, #1
 800ad92:	e0a3      	b.n	800aedc <_printf_i+0x1f4>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	6829      	ldr	r1, [r5, #0]
 800ad98:	0606      	lsls	r6, r0, #24
 800ad9a:	f101 0304 	add.w	r3, r1, #4
 800ad9e:	d50a      	bpl.n	800adb6 <_printf_i+0xce>
 800ada0:	680e      	ldr	r6, [r1, #0]
 800ada2:	602b      	str	r3, [r5, #0]
 800ada4:	2e00      	cmp	r6, #0
 800ada6:	da03      	bge.n	800adb0 <_printf_i+0xc8>
 800ada8:	232d      	movs	r3, #45	; 0x2d
 800adaa:	4276      	negs	r6, r6
 800adac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb0:	485e      	ldr	r0, [pc, #376]	; (800af2c <_printf_i+0x244>)
 800adb2:	230a      	movs	r3, #10
 800adb4:	e019      	b.n	800adea <_printf_i+0x102>
 800adb6:	680e      	ldr	r6, [r1, #0]
 800adb8:	602b      	str	r3, [r5, #0]
 800adba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adbe:	bf18      	it	ne
 800adc0:	b236      	sxthne	r6, r6
 800adc2:	e7ef      	b.n	800ada4 <_printf_i+0xbc>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	1d19      	adds	r1, r3, #4
 800adca:	6029      	str	r1, [r5, #0]
 800adcc:	0601      	lsls	r1, r0, #24
 800adce:	d501      	bpl.n	800add4 <_printf_i+0xec>
 800add0:	681e      	ldr	r6, [r3, #0]
 800add2:	e002      	b.n	800adda <_printf_i+0xf2>
 800add4:	0646      	lsls	r6, r0, #25
 800add6:	d5fb      	bpl.n	800add0 <_printf_i+0xe8>
 800add8:	881e      	ldrh	r6, [r3, #0]
 800adda:	4854      	ldr	r0, [pc, #336]	; (800af2c <_printf_i+0x244>)
 800addc:	2f6f      	cmp	r7, #111	; 0x6f
 800adde:	bf0c      	ite	eq
 800ade0:	2308      	moveq	r3, #8
 800ade2:	230a      	movne	r3, #10
 800ade4:	2100      	movs	r1, #0
 800ade6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adea:	6865      	ldr	r5, [r4, #4]
 800adec:	60a5      	str	r5, [r4, #8]
 800adee:	2d00      	cmp	r5, #0
 800adf0:	bfa2      	ittt	ge
 800adf2:	6821      	ldrge	r1, [r4, #0]
 800adf4:	f021 0104 	bicge.w	r1, r1, #4
 800adf8:	6021      	strge	r1, [r4, #0]
 800adfa:	b90e      	cbnz	r6, 800ae00 <_printf_i+0x118>
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	d04d      	beq.n	800ae9c <_printf_i+0x1b4>
 800ae00:	4615      	mov	r5, r2
 800ae02:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae06:	fb03 6711 	mls	r7, r3, r1, r6
 800ae0a:	5dc7      	ldrb	r7, [r0, r7]
 800ae0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae10:	4637      	mov	r7, r6
 800ae12:	42bb      	cmp	r3, r7
 800ae14:	460e      	mov	r6, r1
 800ae16:	d9f4      	bls.n	800ae02 <_printf_i+0x11a>
 800ae18:	2b08      	cmp	r3, #8
 800ae1a:	d10b      	bne.n	800ae34 <_printf_i+0x14c>
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	07de      	lsls	r6, r3, #31
 800ae20:	d508      	bpl.n	800ae34 <_printf_i+0x14c>
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	6861      	ldr	r1, [r4, #4]
 800ae26:	4299      	cmp	r1, r3
 800ae28:	bfde      	ittt	le
 800ae2a:	2330      	movle	r3, #48	; 0x30
 800ae2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae34:	1b52      	subs	r2, r2, r5
 800ae36:	6122      	str	r2, [r4, #16]
 800ae38:	f8cd a000 	str.w	sl, [sp]
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	aa03      	add	r2, sp, #12
 800ae40:	4621      	mov	r1, r4
 800ae42:	4640      	mov	r0, r8
 800ae44:	f7ff fee2 	bl	800ac0c <_printf_common>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d14c      	bne.n	800aee6 <_printf_i+0x1fe>
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	b004      	add	sp, #16
 800ae52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae56:	4835      	ldr	r0, [pc, #212]	; (800af2c <_printf_i+0x244>)
 800ae58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae5c:	6829      	ldr	r1, [r5, #0]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae64:	6029      	str	r1, [r5, #0]
 800ae66:	061d      	lsls	r5, r3, #24
 800ae68:	d514      	bpl.n	800ae94 <_printf_i+0x1ac>
 800ae6a:	07df      	lsls	r7, r3, #31
 800ae6c:	bf44      	itt	mi
 800ae6e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae72:	6023      	strmi	r3, [r4, #0]
 800ae74:	b91e      	cbnz	r6, 800ae7e <_printf_i+0x196>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	f023 0320 	bic.w	r3, r3, #32
 800ae7c:	6023      	str	r3, [r4, #0]
 800ae7e:	2310      	movs	r3, #16
 800ae80:	e7b0      	b.n	800ade4 <_printf_i+0xfc>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	f043 0320 	orr.w	r3, r3, #32
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	2378      	movs	r3, #120	; 0x78
 800ae8c:	4828      	ldr	r0, [pc, #160]	; (800af30 <_printf_i+0x248>)
 800ae8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae92:	e7e3      	b.n	800ae5c <_printf_i+0x174>
 800ae94:	0659      	lsls	r1, r3, #25
 800ae96:	bf48      	it	mi
 800ae98:	b2b6      	uxthmi	r6, r6
 800ae9a:	e7e6      	b.n	800ae6a <_printf_i+0x182>
 800ae9c:	4615      	mov	r5, r2
 800ae9e:	e7bb      	b.n	800ae18 <_printf_i+0x130>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	6826      	ldr	r6, [r4, #0]
 800aea4:	6961      	ldr	r1, [r4, #20]
 800aea6:	1d18      	adds	r0, r3, #4
 800aea8:	6028      	str	r0, [r5, #0]
 800aeaa:	0635      	lsls	r5, r6, #24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	d501      	bpl.n	800aeb4 <_printf_i+0x1cc>
 800aeb0:	6019      	str	r1, [r3, #0]
 800aeb2:	e002      	b.n	800aeba <_printf_i+0x1d2>
 800aeb4:	0670      	lsls	r0, r6, #25
 800aeb6:	d5fb      	bpl.n	800aeb0 <_printf_i+0x1c8>
 800aeb8:	8019      	strh	r1, [r3, #0]
 800aeba:	2300      	movs	r3, #0
 800aebc:	6123      	str	r3, [r4, #16]
 800aebe:	4615      	mov	r5, r2
 800aec0:	e7ba      	b.n	800ae38 <_printf_i+0x150>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	1d1a      	adds	r2, r3, #4
 800aec6:	602a      	str	r2, [r5, #0]
 800aec8:	681d      	ldr	r5, [r3, #0]
 800aeca:	6862      	ldr	r2, [r4, #4]
 800aecc:	2100      	movs	r1, #0
 800aece:	4628      	mov	r0, r5
 800aed0:	f7f5 f96e 	bl	80001b0 <memchr>
 800aed4:	b108      	cbz	r0, 800aeda <_printf_i+0x1f2>
 800aed6:	1b40      	subs	r0, r0, r5
 800aed8:	6060      	str	r0, [r4, #4]
 800aeda:	6863      	ldr	r3, [r4, #4]
 800aedc:	6123      	str	r3, [r4, #16]
 800aede:	2300      	movs	r3, #0
 800aee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aee4:	e7a8      	b.n	800ae38 <_printf_i+0x150>
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	462a      	mov	r2, r5
 800aeea:	4649      	mov	r1, r9
 800aeec:	4640      	mov	r0, r8
 800aeee:	47d0      	blx	sl
 800aef0:	3001      	adds	r0, #1
 800aef2:	d0ab      	beq.n	800ae4c <_printf_i+0x164>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	079b      	lsls	r3, r3, #30
 800aef8:	d413      	bmi.n	800af22 <_printf_i+0x23a>
 800aefa:	68e0      	ldr	r0, [r4, #12]
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	4298      	cmp	r0, r3
 800af00:	bfb8      	it	lt
 800af02:	4618      	movlt	r0, r3
 800af04:	e7a4      	b.n	800ae50 <_printf_i+0x168>
 800af06:	2301      	movs	r3, #1
 800af08:	4632      	mov	r2, r6
 800af0a:	4649      	mov	r1, r9
 800af0c:	4640      	mov	r0, r8
 800af0e:	47d0      	blx	sl
 800af10:	3001      	adds	r0, #1
 800af12:	d09b      	beq.n	800ae4c <_printf_i+0x164>
 800af14:	3501      	adds	r5, #1
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	9903      	ldr	r1, [sp, #12]
 800af1a:	1a5b      	subs	r3, r3, r1
 800af1c:	42ab      	cmp	r3, r5
 800af1e:	dcf2      	bgt.n	800af06 <_printf_i+0x21e>
 800af20:	e7eb      	b.n	800aefa <_printf_i+0x212>
 800af22:	2500      	movs	r5, #0
 800af24:	f104 0619 	add.w	r6, r4, #25
 800af28:	e7f5      	b.n	800af16 <_printf_i+0x22e>
 800af2a:	bf00      	nop
 800af2c:	0800c45d 	.word	0x0800c45d
 800af30:	0800c46e 	.word	0x0800c46e

0800af34 <_sbrk_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d06      	ldr	r5, [pc, #24]	; (800af50 <_sbrk_r+0x1c>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f5 fd9a 	bl	8000a78 <_sbrk>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_sbrk_r+0x1a>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_sbrk_r+0x1a>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	200007b0 	.word	0x200007b0

0800af54 <sniprintf>:
 800af54:	b40c      	push	{r2, r3}
 800af56:	b530      	push	{r4, r5, lr}
 800af58:	4b17      	ldr	r3, [pc, #92]	; (800afb8 <sniprintf+0x64>)
 800af5a:	1e0c      	subs	r4, r1, #0
 800af5c:	681d      	ldr	r5, [r3, #0]
 800af5e:	b09d      	sub	sp, #116	; 0x74
 800af60:	da08      	bge.n	800af74 <sniprintf+0x20>
 800af62:	238b      	movs	r3, #139	; 0x8b
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	f04f 30ff 	mov.w	r0, #4294967295
 800af6a:	b01d      	add	sp, #116	; 0x74
 800af6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af70:	b002      	add	sp, #8
 800af72:	4770      	bx	lr
 800af74:	f44f 7302 	mov.w	r3, #520	; 0x208
 800af78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800af7c:	bf14      	ite	ne
 800af7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800af82:	4623      	moveq	r3, r4
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	9307      	str	r3, [sp, #28]
 800af88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af8c:	9002      	str	r0, [sp, #8]
 800af8e:	9006      	str	r0, [sp, #24]
 800af90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800af94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af96:	ab21      	add	r3, sp, #132	; 0x84
 800af98:	a902      	add	r1, sp, #8
 800af9a:	4628      	mov	r0, r5
 800af9c:	9301      	str	r3, [sp, #4]
 800af9e:	f000 fba5 	bl	800b6ec <_svfiprintf_r>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	bfbc      	itt	lt
 800afa6:	238b      	movlt	r3, #139	; 0x8b
 800afa8:	602b      	strlt	r3, [r5, #0]
 800afaa:	2c00      	cmp	r4, #0
 800afac:	d0dd      	beq.n	800af6a <sniprintf+0x16>
 800afae:	9b02      	ldr	r3, [sp, #8]
 800afb0:	2200      	movs	r2, #0
 800afb2:	701a      	strb	r2, [r3, #0]
 800afb4:	e7d9      	b.n	800af6a <sniprintf+0x16>
 800afb6:	bf00      	nop
 800afb8:	20000040 	.word	0x20000040

0800afbc <__swbuf_r>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	460e      	mov	r6, r1
 800afc0:	4614      	mov	r4, r2
 800afc2:	4605      	mov	r5, r0
 800afc4:	b118      	cbz	r0, 800afce <__swbuf_r+0x12>
 800afc6:	6983      	ldr	r3, [r0, #24]
 800afc8:	b90b      	cbnz	r3, 800afce <__swbuf_r+0x12>
 800afca:	f000 f9d9 	bl	800b380 <__sinit>
 800afce:	4b21      	ldr	r3, [pc, #132]	; (800b054 <__swbuf_r+0x98>)
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d12b      	bne.n	800b02c <__swbuf_r+0x70>
 800afd4:	686c      	ldr	r4, [r5, #4]
 800afd6:	69a3      	ldr	r3, [r4, #24]
 800afd8:	60a3      	str	r3, [r4, #8]
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	071a      	lsls	r2, r3, #28
 800afde:	d52f      	bpl.n	800b040 <__swbuf_r+0x84>
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	b36b      	cbz	r3, 800b040 <__swbuf_r+0x84>
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	6820      	ldr	r0, [r4, #0]
 800afe8:	1ac0      	subs	r0, r0, r3
 800afea:	6963      	ldr	r3, [r4, #20]
 800afec:	b2f6      	uxtb	r6, r6
 800afee:	4283      	cmp	r3, r0
 800aff0:	4637      	mov	r7, r6
 800aff2:	dc04      	bgt.n	800affe <__swbuf_r+0x42>
 800aff4:	4621      	mov	r1, r4
 800aff6:	4628      	mov	r0, r5
 800aff8:	f000 f92e 	bl	800b258 <_fflush_r>
 800affc:	bb30      	cbnz	r0, 800b04c <__swbuf_r+0x90>
 800affe:	68a3      	ldr	r3, [r4, #8]
 800b000:	3b01      	subs	r3, #1
 800b002:	60a3      	str	r3, [r4, #8]
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	6022      	str	r2, [r4, #0]
 800b00a:	701e      	strb	r6, [r3, #0]
 800b00c:	6963      	ldr	r3, [r4, #20]
 800b00e:	3001      	adds	r0, #1
 800b010:	4283      	cmp	r3, r0
 800b012:	d004      	beq.n	800b01e <__swbuf_r+0x62>
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	07db      	lsls	r3, r3, #31
 800b018:	d506      	bpl.n	800b028 <__swbuf_r+0x6c>
 800b01a:	2e0a      	cmp	r6, #10
 800b01c:	d104      	bne.n	800b028 <__swbuf_r+0x6c>
 800b01e:	4621      	mov	r1, r4
 800b020:	4628      	mov	r0, r5
 800b022:	f000 f919 	bl	800b258 <_fflush_r>
 800b026:	b988      	cbnz	r0, 800b04c <__swbuf_r+0x90>
 800b028:	4638      	mov	r0, r7
 800b02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02c:	4b0a      	ldr	r3, [pc, #40]	; (800b058 <__swbuf_r+0x9c>)
 800b02e:	429c      	cmp	r4, r3
 800b030:	d101      	bne.n	800b036 <__swbuf_r+0x7a>
 800b032:	68ac      	ldr	r4, [r5, #8]
 800b034:	e7cf      	b.n	800afd6 <__swbuf_r+0x1a>
 800b036:	4b09      	ldr	r3, [pc, #36]	; (800b05c <__swbuf_r+0xa0>)
 800b038:	429c      	cmp	r4, r3
 800b03a:	bf08      	it	eq
 800b03c:	68ec      	ldreq	r4, [r5, #12]
 800b03e:	e7ca      	b.n	800afd6 <__swbuf_r+0x1a>
 800b040:	4621      	mov	r1, r4
 800b042:	4628      	mov	r0, r5
 800b044:	f000 f80c 	bl	800b060 <__swsetup_r>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d0cb      	beq.n	800afe4 <__swbuf_r+0x28>
 800b04c:	f04f 37ff 	mov.w	r7, #4294967295
 800b050:	e7ea      	b.n	800b028 <__swbuf_r+0x6c>
 800b052:	bf00      	nop
 800b054:	0800c4a0 	.word	0x0800c4a0
 800b058:	0800c4c0 	.word	0x0800c4c0
 800b05c:	0800c480 	.word	0x0800c480

0800b060 <__swsetup_r>:
 800b060:	4b32      	ldr	r3, [pc, #200]	; (800b12c <__swsetup_r+0xcc>)
 800b062:	b570      	push	{r4, r5, r6, lr}
 800b064:	681d      	ldr	r5, [r3, #0]
 800b066:	4606      	mov	r6, r0
 800b068:	460c      	mov	r4, r1
 800b06a:	b125      	cbz	r5, 800b076 <__swsetup_r+0x16>
 800b06c:	69ab      	ldr	r3, [r5, #24]
 800b06e:	b913      	cbnz	r3, 800b076 <__swsetup_r+0x16>
 800b070:	4628      	mov	r0, r5
 800b072:	f000 f985 	bl	800b380 <__sinit>
 800b076:	4b2e      	ldr	r3, [pc, #184]	; (800b130 <__swsetup_r+0xd0>)
 800b078:	429c      	cmp	r4, r3
 800b07a:	d10f      	bne.n	800b09c <__swsetup_r+0x3c>
 800b07c:	686c      	ldr	r4, [r5, #4]
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b084:	0719      	lsls	r1, r3, #28
 800b086:	d42c      	bmi.n	800b0e2 <__swsetup_r+0x82>
 800b088:	06dd      	lsls	r5, r3, #27
 800b08a:	d411      	bmi.n	800b0b0 <__swsetup_r+0x50>
 800b08c:	2309      	movs	r3, #9
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	f04f 30ff 	mov.w	r0, #4294967295
 800b09a:	e03e      	b.n	800b11a <__swsetup_r+0xba>
 800b09c:	4b25      	ldr	r3, [pc, #148]	; (800b134 <__swsetup_r+0xd4>)
 800b09e:	429c      	cmp	r4, r3
 800b0a0:	d101      	bne.n	800b0a6 <__swsetup_r+0x46>
 800b0a2:	68ac      	ldr	r4, [r5, #8]
 800b0a4:	e7eb      	b.n	800b07e <__swsetup_r+0x1e>
 800b0a6:	4b24      	ldr	r3, [pc, #144]	; (800b138 <__swsetup_r+0xd8>)
 800b0a8:	429c      	cmp	r4, r3
 800b0aa:	bf08      	it	eq
 800b0ac:	68ec      	ldreq	r4, [r5, #12]
 800b0ae:	e7e6      	b.n	800b07e <__swsetup_r+0x1e>
 800b0b0:	0758      	lsls	r0, r3, #29
 800b0b2:	d512      	bpl.n	800b0da <__swsetup_r+0x7a>
 800b0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0b6:	b141      	cbz	r1, 800b0ca <__swsetup_r+0x6a>
 800b0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0bc:	4299      	cmp	r1, r3
 800b0be:	d002      	beq.n	800b0c6 <__swsetup_r+0x66>
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7ff fb69 	bl	800a798 <_free_r>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6063      	str	r3, [r4, #4]
 800b0d6:	6923      	ldr	r3, [r4, #16]
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	f043 0308 	orr.w	r3, r3, #8
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	b94b      	cbnz	r3, 800b0fa <__swsetup_r+0x9a>
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0f0:	d003      	beq.n	800b0fa <__swsetup_r+0x9a>
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f000 fa09 	bl	800b50c <__smakebuf_r>
 800b0fa:	89a0      	ldrh	r0, [r4, #12]
 800b0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b100:	f010 0301 	ands.w	r3, r0, #1
 800b104:	d00a      	beq.n	800b11c <__swsetup_r+0xbc>
 800b106:	2300      	movs	r3, #0
 800b108:	60a3      	str	r3, [r4, #8]
 800b10a:	6963      	ldr	r3, [r4, #20]
 800b10c:	425b      	negs	r3, r3
 800b10e:	61a3      	str	r3, [r4, #24]
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	b943      	cbnz	r3, 800b126 <__swsetup_r+0xc6>
 800b114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b118:	d1ba      	bne.n	800b090 <__swsetup_r+0x30>
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	0781      	lsls	r1, r0, #30
 800b11e:	bf58      	it	pl
 800b120:	6963      	ldrpl	r3, [r4, #20]
 800b122:	60a3      	str	r3, [r4, #8]
 800b124:	e7f4      	b.n	800b110 <__swsetup_r+0xb0>
 800b126:	2000      	movs	r0, #0
 800b128:	e7f7      	b.n	800b11a <__swsetup_r+0xba>
 800b12a:	bf00      	nop
 800b12c:	20000040 	.word	0x20000040
 800b130:	0800c4a0 	.word	0x0800c4a0
 800b134:	0800c4c0 	.word	0x0800c4c0
 800b138:	0800c480 	.word	0x0800c480

0800b13c <abort>:
 800b13c:	b508      	push	{r3, lr}
 800b13e:	2006      	movs	r0, #6
 800b140:	f000 fbfc 	bl	800b93c <raise>
 800b144:	2001      	movs	r0, #1
 800b146:	f7f5 fc20 	bl	800098a <_exit>
	...

0800b14c <__sflush_r>:
 800b14c:	898a      	ldrh	r2, [r1, #12]
 800b14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b152:	4605      	mov	r5, r0
 800b154:	0710      	lsls	r0, r2, #28
 800b156:	460c      	mov	r4, r1
 800b158:	d458      	bmi.n	800b20c <__sflush_r+0xc0>
 800b15a:	684b      	ldr	r3, [r1, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dc05      	bgt.n	800b16c <__sflush_r+0x20>
 800b160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b162:	2b00      	cmp	r3, #0
 800b164:	dc02      	bgt.n	800b16c <__sflush_r+0x20>
 800b166:	2000      	movs	r0, #0
 800b168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b16e:	2e00      	cmp	r6, #0
 800b170:	d0f9      	beq.n	800b166 <__sflush_r+0x1a>
 800b172:	2300      	movs	r3, #0
 800b174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b178:	682f      	ldr	r7, [r5, #0]
 800b17a:	602b      	str	r3, [r5, #0]
 800b17c:	d032      	beq.n	800b1e4 <__sflush_r+0x98>
 800b17e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	075a      	lsls	r2, r3, #29
 800b184:	d505      	bpl.n	800b192 <__sflush_r+0x46>
 800b186:	6863      	ldr	r3, [r4, #4]
 800b188:	1ac0      	subs	r0, r0, r3
 800b18a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b18c:	b10b      	cbz	r3, 800b192 <__sflush_r+0x46>
 800b18e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b190:	1ac0      	subs	r0, r0, r3
 800b192:	2300      	movs	r3, #0
 800b194:	4602      	mov	r2, r0
 800b196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b198:	6a21      	ldr	r1, [r4, #32]
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b0      	blx	r6
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	d106      	bne.n	800b1b2 <__sflush_r+0x66>
 800b1a4:	6829      	ldr	r1, [r5, #0]
 800b1a6:	291d      	cmp	r1, #29
 800b1a8:	d82c      	bhi.n	800b204 <__sflush_r+0xb8>
 800b1aa:	4a2a      	ldr	r2, [pc, #168]	; (800b254 <__sflush_r+0x108>)
 800b1ac:	40ca      	lsrs	r2, r1
 800b1ae:	07d6      	lsls	r6, r2, #31
 800b1b0:	d528      	bpl.n	800b204 <__sflush_r+0xb8>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	6062      	str	r2, [r4, #4]
 800b1b6:	04d9      	lsls	r1, r3, #19
 800b1b8:	6922      	ldr	r2, [r4, #16]
 800b1ba:	6022      	str	r2, [r4, #0]
 800b1bc:	d504      	bpl.n	800b1c8 <__sflush_r+0x7c>
 800b1be:	1c42      	adds	r2, r0, #1
 800b1c0:	d101      	bne.n	800b1c6 <__sflush_r+0x7a>
 800b1c2:	682b      	ldr	r3, [r5, #0]
 800b1c4:	b903      	cbnz	r3, 800b1c8 <__sflush_r+0x7c>
 800b1c6:	6560      	str	r0, [r4, #84]	; 0x54
 800b1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ca:	602f      	str	r7, [r5, #0]
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	d0ca      	beq.n	800b166 <__sflush_r+0x1a>
 800b1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	d002      	beq.n	800b1de <__sflush_r+0x92>
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f7ff fadd 	bl	800a798 <_free_r>
 800b1de:	2000      	movs	r0, #0
 800b1e0:	6360      	str	r0, [r4, #52]	; 0x34
 800b1e2:	e7c1      	b.n	800b168 <__sflush_r+0x1c>
 800b1e4:	6a21      	ldr	r1, [r4, #32]
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b0      	blx	r6
 800b1ec:	1c41      	adds	r1, r0, #1
 800b1ee:	d1c7      	bne.n	800b180 <__sflush_r+0x34>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0c4      	beq.n	800b180 <__sflush_r+0x34>
 800b1f6:	2b1d      	cmp	r3, #29
 800b1f8:	d001      	beq.n	800b1fe <__sflush_r+0xb2>
 800b1fa:	2b16      	cmp	r3, #22
 800b1fc:	d101      	bne.n	800b202 <__sflush_r+0xb6>
 800b1fe:	602f      	str	r7, [r5, #0]
 800b200:	e7b1      	b.n	800b166 <__sflush_r+0x1a>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	e7ad      	b.n	800b168 <__sflush_r+0x1c>
 800b20c:	690f      	ldr	r7, [r1, #16]
 800b20e:	2f00      	cmp	r7, #0
 800b210:	d0a9      	beq.n	800b166 <__sflush_r+0x1a>
 800b212:	0793      	lsls	r3, r2, #30
 800b214:	680e      	ldr	r6, [r1, #0]
 800b216:	bf08      	it	eq
 800b218:	694b      	ldreq	r3, [r1, #20]
 800b21a:	600f      	str	r7, [r1, #0]
 800b21c:	bf18      	it	ne
 800b21e:	2300      	movne	r3, #0
 800b220:	eba6 0807 	sub.w	r8, r6, r7
 800b224:	608b      	str	r3, [r1, #8]
 800b226:	f1b8 0f00 	cmp.w	r8, #0
 800b22a:	dd9c      	ble.n	800b166 <__sflush_r+0x1a>
 800b22c:	6a21      	ldr	r1, [r4, #32]
 800b22e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b230:	4643      	mov	r3, r8
 800b232:	463a      	mov	r2, r7
 800b234:	4628      	mov	r0, r5
 800b236:	47b0      	blx	r6
 800b238:	2800      	cmp	r0, #0
 800b23a:	dc06      	bgt.n	800b24a <__sflush_r+0xfe>
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b242:	81a3      	strh	r3, [r4, #12]
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	e78e      	b.n	800b168 <__sflush_r+0x1c>
 800b24a:	4407      	add	r7, r0
 800b24c:	eba8 0800 	sub.w	r8, r8, r0
 800b250:	e7e9      	b.n	800b226 <__sflush_r+0xda>
 800b252:	bf00      	nop
 800b254:	20400001 	.word	0x20400001

0800b258 <_fflush_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	690b      	ldr	r3, [r1, #16]
 800b25c:	4605      	mov	r5, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	b913      	cbnz	r3, 800b268 <_fflush_r+0x10>
 800b262:	2500      	movs	r5, #0
 800b264:	4628      	mov	r0, r5
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	b118      	cbz	r0, 800b272 <_fflush_r+0x1a>
 800b26a:	6983      	ldr	r3, [r0, #24]
 800b26c:	b90b      	cbnz	r3, 800b272 <_fflush_r+0x1a>
 800b26e:	f000 f887 	bl	800b380 <__sinit>
 800b272:	4b14      	ldr	r3, [pc, #80]	; (800b2c4 <_fflush_r+0x6c>)
 800b274:	429c      	cmp	r4, r3
 800b276:	d11b      	bne.n	800b2b0 <_fflush_r+0x58>
 800b278:	686c      	ldr	r4, [r5, #4]
 800b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0ef      	beq.n	800b262 <_fflush_r+0xa>
 800b282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b284:	07d0      	lsls	r0, r2, #31
 800b286:	d404      	bmi.n	800b292 <_fflush_r+0x3a>
 800b288:	0599      	lsls	r1, r3, #22
 800b28a:	d402      	bmi.n	800b292 <_fflush_r+0x3a>
 800b28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b28e:	f000 f915 	bl	800b4bc <__retarget_lock_acquire_recursive>
 800b292:	4628      	mov	r0, r5
 800b294:	4621      	mov	r1, r4
 800b296:	f7ff ff59 	bl	800b14c <__sflush_r>
 800b29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b29c:	07da      	lsls	r2, r3, #31
 800b29e:	4605      	mov	r5, r0
 800b2a0:	d4e0      	bmi.n	800b264 <_fflush_r+0xc>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	059b      	lsls	r3, r3, #22
 800b2a6:	d4dd      	bmi.n	800b264 <_fflush_r+0xc>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2aa:	f000 f908 	bl	800b4be <__retarget_lock_release_recursive>
 800b2ae:	e7d9      	b.n	800b264 <_fflush_r+0xc>
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <_fflush_r+0x70>)
 800b2b2:	429c      	cmp	r4, r3
 800b2b4:	d101      	bne.n	800b2ba <_fflush_r+0x62>
 800b2b6:	68ac      	ldr	r4, [r5, #8]
 800b2b8:	e7df      	b.n	800b27a <_fflush_r+0x22>
 800b2ba:	4b04      	ldr	r3, [pc, #16]	; (800b2cc <_fflush_r+0x74>)
 800b2bc:	429c      	cmp	r4, r3
 800b2be:	bf08      	it	eq
 800b2c0:	68ec      	ldreq	r4, [r5, #12]
 800b2c2:	e7da      	b.n	800b27a <_fflush_r+0x22>
 800b2c4:	0800c4a0 	.word	0x0800c4a0
 800b2c8:	0800c4c0 	.word	0x0800c4c0
 800b2cc:	0800c480 	.word	0x0800c480

0800b2d0 <std>:
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	b510      	push	{r4, lr}
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2de:	6083      	str	r3, [r0, #8]
 800b2e0:	8181      	strh	r1, [r0, #12]
 800b2e2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2e4:	81c2      	strh	r2, [r0, #14]
 800b2e6:	6183      	str	r3, [r0, #24]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	305c      	adds	r0, #92	; 0x5c
 800b2ee:	f7ff fa4b 	bl	800a788 <memset>
 800b2f2:	4b05      	ldr	r3, [pc, #20]	; (800b308 <std+0x38>)
 800b2f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <std+0x3c>)
 800b2f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2fa:	4b05      	ldr	r3, [pc, #20]	; (800b310 <std+0x40>)
 800b2fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <std+0x44>)
 800b300:	6224      	str	r4, [r4, #32]
 800b302:	6323      	str	r3, [r4, #48]	; 0x30
 800b304:	bd10      	pop	{r4, pc}
 800b306:	bf00      	nop
 800b308:	0800b975 	.word	0x0800b975
 800b30c:	0800b997 	.word	0x0800b997
 800b310:	0800b9cf 	.word	0x0800b9cf
 800b314:	0800b9f3 	.word	0x0800b9f3

0800b318 <_cleanup_r>:
 800b318:	4901      	ldr	r1, [pc, #4]	; (800b320 <_cleanup_r+0x8>)
 800b31a:	f000 b8af 	b.w	800b47c <_fwalk_reent>
 800b31e:	bf00      	nop
 800b320:	0800b259 	.word	0x0800b259

0800b324 <__sfmoreglue>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	2268      	movs	r2, #104	; 0x68
 800b328:	1e4d      	subs	r5, r1, #1
 800b32a:	4355      	muls	r5, r2
 800b32c:	460e      	mov	r6, r1
 800b32e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b332:	f7ff fa9d 	bl	800a870 <_malloc_r>
 800b336:	4604      	mov	r4, r0
 800b338:	b140      	cbz	r0, 800b34c <__sfmoreglue+0x28>
 800b33a:	2100      	movs	r1, #0
 800b33c:	e9c0 1600 	strd	r1, r6, [r0]
 800b340:	300c      	adds	r0, #12
 800b342:	60a0      	str	r0, [r4, #8]
 800b344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b348:	f7ff fa1e 	bl	800a788 <memset>
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd70      	pop	{r4, r5, r6, pc}

0800b350 <__sfp_lock_acquire>:
 800b350:	4801      	ldr	r0, [pc, #4]	; (800b358 <__sfp_lock_acquire+0x8>)
 800b352:	f000 b8b3 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800b356:	bf00      	nop
 800b358:	200007ad 	.word	0x200007ad

0800b35c <__sfp_lock_release>:
 800b35c:	4801      	ldr	r0, [pc, #4]	; (800b364 <__sfp_lock_release+0x8>)
 800b35e:	f000 b8ae 	b.w	800b4be <__retarget_lock_release_recursive>
 800b362:	bf00      	nop
 800b364:	200007ad 	.word	0x200007ad

0800b368 <__sinit_lock_acquire>:
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <__sinit_lock_acquire+0x8>)
 800b36a:	f000 b8a7 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	200007ae 	.word	0x200007ae

0800b374 <__sinit_lock_release>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__sinit_lock_release+0x8>)
 800b376:	f000 b8a2 	b.w	800b4be <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	200007ae 	.word	0x200007ae

0800b380 <__sinit>:
 800b380:	b510      	push	{r4, lr}
 800b382:	4604      	mov	r4, r0
 800b384:	f7ff fff0 	bl	800b368 <__sinit_lock_acquire>
 800b388:	69a3      	ldr	r3, [r4, #24]
 800b38a:	b11b      	cbz	r3, 800b394 <__sinit+0x14>
 800b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b390:	f7ff bff0 	b.w	800b374 <__sinit_lock_release>
 800b394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b398:	6523      	str	r3, [r4, #80]	; 0x50
 800b39a:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <__sinit+0x68>)
 800b39c:	4a13      	ldr	r2, [pc, #76]	; (800b3ec <__sinit+0x6c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	bf04      	itt	eq
 800b3a6:	2301      	moveq	r3, #1
 800b3a8:	61a3      	streq	r3, [r4, #24]
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 f820 	bl	800b3f0 <__sfp>
 800b3b0:	6060      	str	r0, [r4, #4]
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 f81c 	bl	800b3f0 <__sfp>
 800b3b8:	60a0      	str	r0, [r4, #8]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f818 	bl	800b3f0 <__sfp>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	60e0      	str	r0, [r4, #12]
 800b3c4:	2104      	movs	r1, #4
 800b3c6:	6860      	ldr	r0, [r4, #4]
 800b3c8:	f7ff ff82 	bl	800b2d0 <std>
 800b3cc:	68a0      	ldr	r0, [r4, #8]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	2109      	movs	r1, #9
 800b3d2:	f7ff ff7d 	bl	800b2d0 <std>
 800b3d6:	68e0      	ldr	r0, [r4, #12]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	2112      	movs	r1, #18
 800b3dc:	f7ff ff78 	bl	800b2d0 <std>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	61a3      	str	r3, [r4, #24]
 800b3e4:	e7d2      	b.n	800b38c <__sinit+0xc>
 800b3e6:	bf00      	nop
 800b3e8:	0800c448 	.word	0x0800c448
 800b3ec:	0800b319 	.word	0x0800b319

0800b3f0 <__sfp>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	4607      	mov	r7, r0
 800b3f4:	f7ff ffac 	bl	800b350 <__sfp_lock_acquire>
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	; (800b474 <__sfp+0x84>)
 800b3fa:	681e      	ldr	r6, [r3, #0]
 800b3fc:	69b3      	ldr	r3, [r6, #24]
 800b3fe:	b913      	cbnz	r3, 800b406 <__sfp+0x16>
 800b400:	4630      	mov	r0, r6
 800b402:	f7ff ffbd 	bl	800b380 <__sinit>
 800b406:	3648      	adds	r6, #72	; 0x48
 800b408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	d503      	bpl.n	800b418 <__sfp+0x28>
 800b410:	6833      	ldr	r3, [r6, #0]
 800b412:	b30b      	cbz	r3, 800b458 <__sfp+0x68>
 800b414:	6836      	ldr	r6, [r6, #0]
 800b416:	e7f7      	b.n	800b408 <__sfp+0x18>
 800b418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b41c:	b9d5      	cbnz	r5, 800b454 <__sfp+0x64>
 800b41e:	4b16      	ldr	r3, [pc, #88]	; (800b478 <__sfp+0x88>)
 800b420:	60e3      	str	r3, [r4, #12]
 800b422:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b426:	6665      	str	r5, [r4, #100]	; 0x64
 800b428:	f000 f847 	bl	800b4ba <__retarget_lock_init_recursive>
 800b42c:	f7ff ff96 	bl	800b35c <__sfp_lock_release>
 800b430:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b434:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b438:	6025      	str	r5, [r4, #0]
 800b43a:	61a5      	str	r5, [r4, #24]
 800b43c:	2208      	movs	r2, #8
 800b43e:	4629      	mov	r1, r5
 800b440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b444:	f7ff f9a0 	bl	800a788 <memset>
 800b448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b44c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b450:	4620      	mov	r0, r4
 800b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b454:	3468      	adds	r4, #104	; 0x68
 800b456:	e7d9      	b.n	800b40c <__sfp+0x1c>
 800b458:	2104      	movs	r1, #4
 800b45a:	4638      	mov	r0, r7
 800b45c:	f7ff ff62 	bl	800b324 <__sfmoreglue>
 800b460:	4604      	mov	r4, r0
 800b462:	6030      	str	r0, [r6, #0]
 800b464:	2800      	cmp	r0, #0
 800b466:	d1d5      	bne.n	800b414 <__sfp+0x24>
 800b468:	f7ff ff78 	bl	800b35c <__sfp_lock_release>
 800b46c:	230c      	movs	r3, #12
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	e7ee      	b.n	800b450 <__sfp+0x60>
 800b472:	bf00      	nop
 800b474:	0800c448 	.word	0x0800c448
 800b478:	ffff0001 	.word	0xffff0001

0800b47c <_fwalk_reent>:
 800b47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b480:	4606      	mov	r6, r0
 800b482:	4688      	mov	r8, r1
 800b484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b488:	2700      	movs	r7, #0
 800b48a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b48e:	f1b9 0901 	subs.w	r9, r9, #1
 800b492:	d505      	bpl.n	800b4a0 <_fwalk_reent+0x24>
 800b494:	6824      	ldr	r4, [r4, #0]
 800b496:	2c00      	cmp	r4, #0
 800b498:	d1f7      	bne.n	800b48a <_fwalk_reent+0xe>
 800b49a:	4638      	mov	r0, r7
 800b49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a0:	89ab      	ldrh	r3, [r5, #12]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d907      	bls.n	800b4b6 <_fwalk_reent+0x3a>
 800b4a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	d003      	beq.n	800b4b6 <_fwalk_reent+0x3a>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	47c0      	blx	r8
 800b4b4:	4307      	orrs	r7, r0
 800b4b6:	3568      	adds	r5, #104	; 0x68
 800b4b8:	e7e9      	b.n	800b48e <_fwalk_reent+0x12>

0800b4ba <__retarget_lock_init_recursive>:
 800b4ba:	4770      	bx	lr

0800b4bc <__retarget_lock_acquire_recursive>:
 800b4bc:	4770      	bx	lr

0800b4be <__retarget_lock_release_recursive>:
 800b4be:	4770      	bx	lr

0800b4c0 <__swhatbuf_r>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	460e      	mov	r6, r1
 800b4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c8:	2900      	cmp	r1, #0
 800b4ca:	b096      	sub	sp, #88	; 0x58
 800b4cc:	4614      	mov	r4, r2
 800b4ce:	461d      	mov	r5, r3
 800b4d0:	da08      	bge.n	800b4e4 <__swhatbuf_r+0x24>
 800b4d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	602a      	str	r2, [r5, #0]
 800b4da:	061a      	lsls	r2, r3, #24
 800b4dc:	d410      	bmi.n	800b500 <__swhatbuf_r+0x40>
 800b4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e2:	e00e      	b.n	800b502 <__swhatbuf_r+0x42>
 800b4e4:	466a      	mov	r2, sp
 800b4e6:	f000 faab 	bl	800ba40 <_fstat_r>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	dbf1      	blt.n	800b4d2 <__swhatbuf_r+0x12>
 800b4ee:	9a01      	ldr	r2, [sp, #4]
 800b4f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4f8:	425a      	negs	r2, r3
 800b4fa:	415a      	adcs	r2, r3
 800b4fc:	602a      	str	r2, [r5, #0]
 800b4fe:	e7ee      	b.n	800b4de <__swhatbuf_r+0x1e>
 800b500:	2340      	movs	r3, #64	; 0x40
 800b502:	2000      	movs	r0, #0
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	b016      	add	sp, #88	; 0x58
 800b508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b50c <__smakebuf_r>:
 800b50c:	898b      	ldrh	r3, [r1, #12]
 800b50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b510:	079d      	lsls	r5, r3, #30
 800b512:	4606      	mov	r6, r0
 800b514:	460c      	mov	r4, r1
 800b516:	d507      	bpl.n	800b528 <__smakebuf_r+0x1c>
 800b518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	6123      	str	r3, [r4, #16]
 800b520:	2301      	movs	r3, #1
 800b522:	6163      	str	r3, [r4, #20]
 800b524:	b002      	add	sp, #8
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	ab01      	add	r3, sp, #4
 800b52a:	466a      	mov	r2, sp
 800b52c:	f7ff ffc8 	bl	800b4c0 <__swhatbuf_r>
 800b530:	9900      	ldr	r1, [sp, #0]
 800b532:	4605      	mov	r5, r0
 800b534:	4630      	mov	r0, r6
 800b536:	f7ff f99b 	bl	800a870 <_malloc_r>
 800b53a:	b948      	cbnz	r0, 800b550 <__smakebuf_r+0x44>
 800b53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d4ef      	bmi.n	800b524 <__smakebuf_r+0x18>
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	f043 0302 	orr.w	r3, r3, #2
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	e7e3      	b.n	800b518 <__smakebuf_r+0xc>
 800b550:	4b0d      	ldr	r3, [pc, #52]	; (800b588 <__smakebuf_r+0x7c>)
 800b552:	62b3      	str	r3, [r6, #40]	; 0x28
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	6020      	str	r0, [r4, #0]
 800b558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	9b00      	ldr	r3, [sp, #0]
 800b560:	6163      	str	r3, [r4, #20]
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	6120      	str	r0, [r4, #16]
 800b566:	b15b      	cbz	r3, 800b580 <__smakebuf_r+0x74>
 800b568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b56c:	4630      	mov	r0, r6
 800b56e:	f000 fa79 	bl	800ba64 <_isatty_r>
 800b572:	b128      	cbz	r0, 800b580 <__smakebuf_r+0x74>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f023 0303 	bic.w	r3, r3, #3
 800b57a:	f043 0301 	orr.w	r3, r3, #1
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	89a0      	ldrh	r0, [r4, #12]
 800b582:	4305      	orrs	r5, r0
 800b584:	81a5      	strh	r5, [r4, #12]
 800b586:	e7cd      	b.n	800b524 <__smakebuf_r+0x18>
 800b588:	0800b319 	.word	0x0800b319

0800b58c <memmove>:
 800b58c:	4288      	cmp	r0, r1
 800b58e:	b510      	push	{r4, lr}
 800b590:	eb01 0402 	add.w	r4, r1, r2
 800b594:	d902      	bls.n	800b59c <memmove+0x10>
 800b596:	4284      	cmp	r4, r0
 800b598:	4623      	mov	r3, r4
 800b59a:	d807      	bhi.n	800b5ac <memmove+0x20>
 800b59c:	1e43      	subs	r3, r0, #1
 800b59e:	42a1      	cmp	r1, r4
 800b5a0:	d008      	beq.n	800b5b4 <memmove+0x28>
 800b5a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5aa:	e7f8      	b.n	800b59e <memmove+0x12>
 800b5ac:	4402      	add	r2, r0
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	428a      	cmp	r2, r1
 800b5b2:	d100      	bne.n	800b5b6 <memmove+0x2a>
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5be:	e7f7      	b.n	800b5b0 <memmove+0x24>

0800b5c0 <__malloc_lock>:
 800b5c0:	4801      	ldr	r0, [pc, #4]	; (800b5c8 <__malloc_lock+0x8>)
 800b5c2:	f7ff bf7b 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800b5c6:	bf00      	nop
 800b5c8:	200007ac 	.word	0x200007ac

0800b5cc <__malloc_unlock>:
 800b5cc:	4801      	ldr	r0, [pc, #4]	; (800b5d4 <__malloc_unlock+0x8>)
 800b5ce:	f7ff bf76 	b.w	800b4be <__retarget_lock_release_recursive>
 800b5d2:	bf00      	nop
 800b5d4:	200007ac 	.word	0x200007ac

0800b5d8 <_realloc_r>:
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	4680      	mov	r8, r0
 800b5de:	4614      	mov	r4, r2
 800b5e0:	460e      	mov	r6, r1
 800b5e2:	b921      	cbnz	r1, 800b5ee <_realloc_r+0x16>
 800b5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	f7ff b941 	b.w	800a870 <_malloc_r>
 800b5ee:	b92a      	cbnz	r2, 800b5fc <_realloc_r+0x24>
 800b5f0:	f7ff f8d2 	bl	800a798 <_free_r>
 800b5f4:	4625      	mov	r5, r4
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	f000 fa54 	bl	800baa8 <_malloc_usable_size_r>
 800b600:	4284      	cmp	r4, r0
 800b602:	4607      	mov	r7, r0
 800b604:	d802      	bhi.n	800b60c <_realloc_r+0x34>
 800b606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b60a:	d812      	bhi.n	800b632 <_realloc_r+0x5a>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4640      	mov	r0, r8
 800b610:	f7ff f92e 	bl	800a870 <_malloc_r>
 800b614:	4605      	mov	r5, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	d0ed      	beq.n	800b5f6 <_realloc_r+0x1e>
 800b61a:	42bc      	cmp	r4, r7
 800b61c:	4622      	mov	r2, r4
 800b61e:	4631      	mov	r1, r6
 800b620:	bf28      	it	cs
 800b622:	463a      	movcs	r2, r7
 800b624:	f7ff f8a2 	bl	800a76c <memcpy>
 800b628:	4631      	mov	r1, r6
 800b62a:	4640      	mov	r0, r8
 800b62c:	f7ff f8b4 	bl	800a798 <_free_r>
 800b630:	e7e1      	b.n	800b5f6 <_realloc_r+0x1e>
 800b632:	4635      	mov	r5, r6
 800b634:	e7df      	b.n	800b5f6 <_realloc_r+0x1e>

0800b636 <__ssputs_r>:
 800b636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b63a:	688e      	ldr	r6, [r1, #8]
 800b63c:	429e      	cmp	r6, r3
 800b63e:	4682      	mov	sl, r0
 800b640:	460c      	mov	r4, r1
 800b642:	4690      	mov	r8, r2
 800b644:	461f      	mov	r7, r3
 800b646:	d838      	bhi.n	800b6ba <__ssputs_r+0x84>
 800b648:	898a      	ldrh	r2, [r1, #12]
 800b64a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b64e:	d032      	beq.n	800b6b6 <__ssputs_r+0x80>
 800b650:	6825      	ldr	r5, [r4, #0]
 800b652:	6909      	ldr	r1, [r1, #16]
 800b654:	eba5 0901 	sub.w	r9, r5, r1
 800b658:	6965      	ldr	r5, [r4, #20]
 800b65a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b65e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b662:	3301      	adds	r3, #1
 800b664:	444b      	add	r3, r9
 800b666:	106d      	asrs	r5, r5, #1
 800b668:	429d      	cmp	r5, r3
 800b66a:	bf38      	it	cc
 800b66c:	461d      	movcc	r5, r3
 800b66e:	0553      	lsls	r3, r2, #21
 800b670:	d531      	bpl.n	800b6d6 <__ssputs_r+0xa0>
 800b672:	4629      	mov	r1, r5
 800b674:	f7ff f8fc 	bl	800a870 <_malloc_r>
 800b678:	4606      	mov	r6, r0
 800b67a:	b950      	cbnz	r0, 800b692 <__ssputs_r+0x5c>
 800b67c:	230c      	movs	r3, #12
 800b67e:	f8ca 3000 	str.w	r3, [sl]
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	f04f 30ff 	mov.w	r0, #4294967295
 800b68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b692:	6921      	ldr	r1, [r4, #16]
 800b694:	464a      	mov	r2, r9
 800b696:	f7ff f869 	bl	800a76c <memcpy>
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	6126      	str	r6, [r4, #16]
 800b6a8:	6165      	str	r5, [r4, #20]
 800b6aa:	444e      	add	r6, r9
 800b6ac:	eba5 0509 	sub.w	r5, r5, r9
 800b6b0:	6026      	str	r6, [r4, #0]
 800b6b2:	60a5      	str	r5, [r4, #8]
 800b6b4:	463e      	mov	r6, r7
 800b6b6:	42be      	cmp	r6, r7
 800b6b8:	d900      	bls.n	800b6bc <__ssputs_r+0x86>
 800b6ba:	463e      	mov	r6, r7
 800b6bc:	6820      	ldr	r0, [r4, #0]
 800b6be:	4632      	mov	r2, r6
 800b6c0:	4641      	mov	r1, r8
 800b6c2:	f7ff ff63 	bl	800b58c <memmove>
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	1b9b      	subs	r3, r3, r6
 800b6ca:	60a3      	str	r3, [r4, #8]
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	4433      	add	r3, r6
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	e7db      	b.n	800b68e <__ssputs_r+0x58>
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	f7ff ff7e 	bl	800b5d8 <_realloc_r>
 800b6dc:	4606      	mov	r6, r0
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d1e1      	bne.n	800b6a6 <__ssputs_r+0x70>
 800b6e2:	6921      	ldr	r1, [r4, #16]
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	f7ff f857 	bl	800a798 <_free_r>
 800b6ea:	e7c7      	b.n	800b67c <__ssputs_r+0x46>

0800b6ec <_svfiprintf_r>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	4698      	mov	r8, r3
 800b6f2:	898b      	ldrh	r3, [r1, #12]
 800b6f4:	061b      	lsls	r3, r3, #24
 800b6f6:	b09d      	sub	sp, #116	; 0x74
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	d50e      	bpl.n	800b71e <_svfiprintf_r+0x32>
 800b700:	690b      	ldr	r3, [r1, #16]
 800b702:	b963      	cbnz	r3, 800b71e <_svfiprintf_r+0x32>
 800b704:	2140      	movs	r1, #64	; 0x40
 800b706:	f7ff f8b3 	bl	800a870 <_malloc_r>
 800b70a:	6028      	str	r0, [r5, #0]
 800b70c:	6128      	str	r0, [r5, #16]
 800b70e:	b920      	cbnz	r0, 800b71a <_svfiprintf_r+0x2e>
 800b710:	230c      	movs	r3, #12
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	f04f 30ff 	mov.w	r0, #4294967295
 800b718:	e0d1      	b.n	800b8be <_svfiprintf_r+0x1d2>
 800b71a:	2340      	movs	r3, #64	; 0x40
 800b71c:	616b      	str	r3, [r5, #20]
 800b71e:	2300      	movs	r3, #0
 800b720:	9309      	str	r3, [sp, #36]	; 0x24
 800b722:	2320      	movs	r3, #32
 800b724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b728:	f8cd 800c 	str.w	r8, [sp, #12]
 800b72c:	2330      	movs	r3, #48	; 0x30
 800b72e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8d8 <_svfiprintf_r+0x1ec>
 800b732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b736:	f04f 0901 	mov.w	r9, #1
 800b73a:	4623      	mov	r3, r4
 800b73c:	469a      	mov	sl, r3
 800b73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b742:	b10a      	cbz	r2, 800b748 <_svfiprintf_r+0x5c>
 800b744:	2a25      	cmp	r2, #37	; 0x25
 800b746:	d1f9      	bne.n	800b73c <_svfiprintf_r+0x50>
 800b748:	ebba 0b04 	subs.w	fp, sl, r4
 800b74c:	d00b      	beq.n	800b766 <_svfiprintf_r+0x7a>
 800b74e:	465b      	mov	r3, fp
 800b750:	4622      	mov	r2, r4
 800b752:	4629      	mov	r1, r5
 800b754:	4638      	mov	r0, r7
 800b756:	f7ff ff6e 	bl	800b636 <__ssputs_r>
 800b75a:	3001      	adds	r0, #1
 800b75c:	f000 80aa 	beq.w	800b8b4 <_svfiprintf_r+0x1c8>
 800b760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b762:	445a      	add	r2, fp
 800b764:	9209      	str	r2, [sp, #36]	; 0x24
 800b766:	f89a 3000 	ldrb.w	r3, [sl]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80a2 	beq.w	800b8b4 <_svfiprintf_r+0x1c8>
 800b770:	2300      	movs	r3, #0
 800b772:	f04f 32ff 	mov.w	r2, #4294967295
 800b776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b77a:	f10a 0a01 	add.w	sl, sl, #1
 800b77e:	9304      	str	r3, [sp, #16]
 800b780:	9307      	str	r3, [sp, #28]
 800b782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b786:	931a      	str	r3, [sp, #104]	; 0x68
 800b788:	4654      	mov	r4, sl
 800b78a:	2205      	movs	r2, #5
 800b78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b790:	4851      	ldr	r0, [pc, #324]	; (800b8d8 <_svfiprintf_r+0x1ec>)
 800b792:	f7f4 fd0d 	bl	80001b0 <memchr>
 800b796:	9a04      	ldr	r2, [sp, #16]
 800b798:	b9d8      	cbnz	r0, 800b7d2 <_svfiprintf_r+0xe6>
 800b79a:	06d0      	lsls	r0, r2, #27
 800b79c:	bf44      	itt	mi
 800b79e:	2320      	movmi	r3, #32
 800b7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a4:	0711      	lsls	r1, r2, #28
 800b7a6:	bf44      	itt	mi
 800b7a8:	232b      	movmi	r3, #43	; 0x2b
 800b7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b4:	d015      	beq.n	800b7e2 <_svfiprintf_r+0xf6>
 800b7b6:	9a07      	ldr	r2, [sp, #28]
 800b7b8:	4654      	mov	r4, sl
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	f04f 0c0a 	mov.w	ip, #10
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c6:	3b30      	subs	r3, #48	; 0x30
 800b7c8:	2b09      	cmp	r3, #9
 800b7ca:	d94e      	bls.n	800b86a <_svfiprintf_r+0x17e>
 800b7cc:	b1b0      	cbz	r0, 800b7fc <_svfiprintf_r+0x110>
 800b7ce:	9207      	str	r2, [sp, #28]
 800b7d0:	e014      	b.n	800b7fc <_svfiprintf_r+0x110>
 800b7d2:	eba0 0308 	sub.w	r3, r0, r8
 800b7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	46a2      	mov	sl, r4
 800b7e0:	e7d2      	b.n	800b788 <_svfiprintf_r+0x9c>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	1d19      	adds	r1, r3, #4
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	9103      	str	r1, [sp, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfbb      	ittet	lt
 800b7ee:	425b      	neglt	r3, r3
 800b7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f4:	9307      	strge	r3, [sp, #28]
 800b7f6:	9307      	strlt	r3, [sp, #28]
 800b7f8:	bfb8      	it	lt
 800b7fa:	9204      	strlt	r2, [sp, #16]
 800b7fc:	7823      	ldrb	r3, [r4, #0]
 800b7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b800:	d10c      	bne.n	800b81c <_svfiprintf_r+0x130>
 800b802:	7863      	ldrb	r3, [r4, #1]
 800b804:	2b2a      	cmp	r3, #42	; 0x2a
 800b806:	d135      	bne.n	800b874 <_svfiprintf_r+0x188>
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	1d1a      	adds	r2, r3, #4
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	9203      	str	r2, [sp, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	bfb8      	it	lt
 800b814:	f04f 33ff 	movlt.w	r3, #4294967295
 800b818:	3402      	adds	r4, #2
 800b81a:	9305      	str	r3, [sp, #20]
 800b81c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8e8 <_svfiprintf_r+0x1fc>
 800b820:	7821      	ldrb	r1, [r4, #0]
 800b822:	2203      	movs	r2, #3
 800b824:	4650      	mov	r0, sl
 800b826:	f7f4 fcc3 	bl	80001b0 <memchr>
 800b82a:	b140      	cbz	r0, 800b83e <_svfiprintf_r+0x152>
 800b82c:	2340      	movs	r3, #64	; 0x40
 800b82e:	eba0 000a 	sub.w	r0, r0, sl
 800b832:	fa03 f000 	lsl.w	r0, r3, r0
 800b836:	9b04      	ldr	r3, [sp, #16]
 800b838:	4303      	orrs	r3, r0
 800b83a:	3401      	adds	r4, #1
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b842:	4826      	ldr	r0, [pc, #152]	; (800b8dc <_svfiprintf_r+0x1f0>)
 800b844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b848:	2206      	movs	r2, #6
 800b84a:	f7f4 fcb1 	bl	80001b0 <memchr>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d038      	beq.n	800b8c4 <_svfiprintf_r+0x1d8>
 800b852:	4b23      	ldr	r3, [pc, #140]	; (800b8e0 <_svfiprintf_r+0x1f4>)
 800b854:	bb1b      	cbnz	r3, 800b89e <_svfiprintf_r+0x1b2>
 800b856:	9b03      	ldr	r3, [sp, #12]
 800b858:	3307      	adds	r3, #7
 800b85a:	f023 0307 	bic.w	r3, r3, #7
 800b85e:	3308      	adds	r3, #8
 800b860:	9303      	str	r3, [sp, #12]
 800b862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b864:	4433      	add	r3, r6
 800b866:	9309      	str	r3, [sp, #36]	; 0x24
 800b868:	e767      	b.n	800b73a <_svfiprintf_r+0x4e>
 800b86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b86e:	460c      	mov	r4, r1
 800b870:	2001      	movs	r0, #1
 800b872:	e7a5      	b.n	800b7c0 <_svfiprintf_r+0xd4>
 800b874:	2300      	movs	r3, #0
 800b876:	3401      	adds	r4, #1
 800b878:	9305      	str	r3, [sp, #20]
 800b87a:	4619      	mov	r1, r3
 800b87c:	f04f 0c0a 	mov.w	ip, #10
 800b880:	4620      	mov	r0, r4
 800b882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b886:	3a30      	subs	r2, #48	; 0x30
 800b888:	2a09      	cmp	r2, #9
 800b88a:	d903      	bls.n	800b894 <_svfiprintf_r+0x1a8>
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0c5      	beq.n	800b81c <_svfiprintf_r+0x130>
 800b890:	9105      	str	r1, [sp, #20]
 800b892:	e7c3      	b.n	800b81c <_svfiprintf_r+0x130>
 800b894:	fb0c 2101 	mla	r1, ip, r1, r2
 800b898:	4604      	mov	r4, r0
 800b89a:	2301      	movs	r3, #1
 800b89c:	e7f0      	b.n	800b880 <_svfiprintf_r+0x194>
 800b89e:	ab03      	add	r3, sp, #12
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	462a      	mov	r2, r5
 800b8a4:	4b0f      	ldr	r3, [pc, #60]	; (800b8e4 <_svfiprintf_r+0x1f8>)
 800b8a6:	a904      	add	r1, sp, #16
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	f3af 8000 	nop.w
 800b8ae:	1c42      	adds	r2, r0, #1
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	d1d6      	bne.n	800b862 <_svfiprintf_r+0x176>
 800b8b4:	89ab      	ldrh	r3, [r5, #12]
 800b8b6:	065b      	lsls	r3, r3, #25
 800b8b8:	f53f af2c 	bmi.w	800b714 <_svfiprintf_r+0x28>
 800b8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8be:	b01d      	add	sp, #116	; 0x74
 800b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c4:	ab03      	add	r3, sp, #12
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <_svfiprintf_r+0x1f8>)
 800b8cc:	a904      	add	r1, sp, #16
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f7ff fa0a 	bl	800ace8 <_printf_i>
 800b8d4:	e7eb      	b.n	800b8ae <_svfiprintf_r+0x1c2>
 800b8d6:	bf00      	nop
 800b8d8:	0800c44c 	.word	0x0800c44c
 800b8dc:	0800c456 	.word	0x0800c456
 800b8e0:	00000000 	.word	0x00000000
 800b8e4:	0800b637 	.word	0x0800b637
 800b8e8:	0800c452 	.word	0x0800c452

0800b8ec <_raise_r>:
 800b8ec:	291f      	cmp	r1, #31
 800b8ee:	b538      	push	{r3, r4, r5, lr}
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	d904      	bls.n	800b900 <_raise_r+0x14>
 800b8f6:	2316      	movs	r3, #22
 800b8f8:	6003      	str	r3, [r0, #0]
 800b8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b902:	b112      	cbz	r2, 800b90a <_raise_r+0x1e>
 800b904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b908:	b94b      	cbnz	r3, 800b91e <_raise_r+0x32>
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 f830 	bl	800b970 <_getpid_r>
 800b910:	462a      	mov	r2, r5
 800b912:	4601      	mov	r1, r0
 800b914:	4620      	mov	r0, r4
 800b916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b91a:	f000 b817 	b.w	800b94c <_kill_r>
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d00a      	beq.n	800b938 <_raise_r+0x4c>
 800b922:	1c59      	adds	r1, r3, #1
 800b924:	d103      	bne.n	800b92e <_raise_r+0x42>
 800b926:	2316      	movs	r3, #22
 800b928:	6003      	str	r3, [r0, #0]
 800b92a:	2001      	movs	r0, #1
 800b92c:	e7e7      	b.n	800b8fe <_raise_r+0x12>
 800b92e:	2400      	movs	r4, #0
 800b930:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b934:	4628      	mov	r0, r5
 800b936:	4798      	blx	r3
 800b938:	2000      	movs	r0, #0
 800b93a:	e7e0      	b.n	800b8fe <_raise_r+0x12>

0800b93c <raise>:
 800b93c:	4b02      	ldr	r3, [pc, #8]	; (800b948 <raise+0xc>)
 800b93e:	4601      	mov	r1, r0
 800b940:	6818      	ldr	r0, [r3, #0]
 800b942:	f7ff bfd3 	b.w	800b8ec <_raise_r>
 800b946:	bf00      	nop
 800b948:	20000040 	.word	0x20000040

0800b94c <_kill_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d07      	ldr	r5, [pc, #28]	; (800b96c <_kill_r+0x20>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f7f5 f806 	bl	800096a <_kill>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d102      	bne.n	800b968 <_kill_r+0x1c>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	b103      	cbz	r3, 800b968 <_kill_r+0x1c>
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	200007b0 	.word	0x200007b0

0800b970 <_getpid_r>:
 800b970:	f7f4 bff3 	b.w	800095a <_getpid>

0800b974 <__sread>:
 800b974:	b510      	push	{r4, lr}
 800b976:	460c      	mov	r4, r1
 800b978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97c:	f000 f89c 	bl	800bab8 <_read_r>
 800b980:	2800      	cmp	r0, #0
 800b982:	bfab      	itete	ge
 800b984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b986:	89a3      	ldrhlt	r3, [r4, #12]
 800b988:	181b      	addge	r3, r3, r0
 800b98a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b98e:	bfac      	ite	ge
 800b990:	6563      	strge	r3, [r4, #84]	; 0x54
 800b992:	81a3      	strhlt	r3, [r4, #12]
 800b994:	bd10      	pop	{r4, pc}

0800b996 <__swrite>:
 800b996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99a:	461f      	mov	r7, r3
 800b99c:	898b      	ldrh	r3, [r1, #12]
 800b99e:	05db      	lsls	r3, r3, #23
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	4616      	mov	r6, r2
 800b9a6:	d505      	bpl.n	800b9b4 <__swrite+0x1e>
 800b9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f000 f868 	bl	800ba84 <_lseek_r>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	463b      	mov	r3, r7
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ca:	f000 b817 	b.w	800b9fc <_write_r>

0800b9ce <__sseek>:
 800b9ce:	b510      	push	{r4, lr}
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d6:	f000 f855 	bl	800ba84 <_lseek_r>
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	bf15      	itete	ne
 800b9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9ea:	81a3      	strheq	r3, [r4, #12]
 800b9ec:	bf18      	it	ne
 800b9ee:	81a3      	strhne	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}

0800b9f2 <__sclose>:
 800b9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f6:	f000 b813 	b.w	800ba20 <_close_r>
	...

0800b9fc <_write_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	4d07      	ldr	r5, [pc, #28]	; (800ba1c <_write_r+0x20>)
 800ba00:	4604      	mov	r4, r0
 800ba02:	4608      	mov	r0, r1
 800ba04:	4611      	mov	r1, r2
 800ba06:	2200      	movs	r2, #0
 800ba08:	602a      	str	r2, [r5, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	f7f4 ffe4 	bl	80009d8 <_write>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_write_r+0x1e>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_write_r+0x1e>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	200007b0 	.word	0x200007b0

0800ba20 <_close_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d06      	ldr	r5, [pc, #24]	; (800ba3c <_close_r+0x1c>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f4 fff0 	bl	8000a10 <_close>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_close_r+0x1a>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_close_r+0x1a>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	200007b0 	.word	0x200007b0

0800ba40 <_fstat_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d07      	ldr	r5, [pc, #28]	; (800ba60 <_fstat_r+0x20>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	f7f4 ffeb 	bl	8000a28 <_fstat>
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	d102      	bne.n	800ba5c <_fstat_r+0x1c>
 800ba56:	682b      	ldr	r3, [r5, #0]
 800ba58:	b103      	cbz	r3, 800ba5c <_fstat_r+0x1c>
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	bd38      	pop	{r3, r4, r5, pc}
 800ba5e:	bf00      	nop
 800ba60:	200007b0 	.word	0x200007b0

0800ba64 <_isatty_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d06      	ldr	r5, [pc, #24]	; (800ba80 <_isatty_r+0x1c>)
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	602b      	str	r3, [r5, #0]
 800ba70:	f7f4 ffea 	bl	8000a48 <_isatty>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d102      	bne.n	800ba7e <_isatty_r+0x1a>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	b103      	cbz	r3, 800ba7e <_isatty_r+0x1a>
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	200007b0 	.word	0x200007b0

0800ba84 <_lseek_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	; (800baa4 <_lseek_r+0x20>)
 800ba88:	4604      	mov	r4, r0
 800ba8a:	4608      	mov	r0, r1
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	2200      	movs	r2, #0
 800ba90:	602a      	str	r2, [r5, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	f7f4 ffe3 	bl	8000a5e <_lseek>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_lseek_r+0x1e>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_lseek_r+0x1e>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	200007b0 	.word	0x200007b0

0800baa8 <_malloc_usable_size_r>:
 800baa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baac:	1f18      	subs	r0, r3, #4
 800baae:	2b00      	cmp	r3, #0
 800bab0:	bfbc      	itt	lt
 800bab2:	580b      	ldrlt	r3, [r1, r0]
 800bab4:	18c0      	addlt	r0, r0, r3
 800bab6:	4770      	bx	lr

0800bab8 <_read_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4d07      	ldr	r5, [pc, #28]	; (800bad8 <_read_r+0x20>)
 800babc:	4604      	mov	r4, r0
 800babe:	4608      	mov	r0, r1
 800bac0:	4611      	mov	r1, r2
 800bac2:	2200      	movs	r2, #0
 800bac4:	602a      	str	r2, [r5, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	f7f4 ff69 	bl	800099e <_read>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_read_r+0x1e>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_read_r+0x1e>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	200007b0 	.word	0x200007b0

0800badc <_init>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr

0800bae8 <_fini>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr
