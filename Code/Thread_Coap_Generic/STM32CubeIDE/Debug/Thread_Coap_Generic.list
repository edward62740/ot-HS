
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  0800b420  0800b420  0001b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bf08  0800bf08  0001bf08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bf0c  0800bf0c  0001bf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000008  0800bf10  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 SYSTEM_DRIVER_CONTEXT 00000011  20000094  0800bf9c  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f8  200000a8  0800bfad  000200a8  2**2
                  ALLOC
  8 ._user_heap_stack 00002800  200007a0  0800bfad  000207a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 13 .debug_info   00038521  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000713f  00000000  00000000  000585f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e48  00000000  00000000  0005f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002b40  00000000  00000000  00062580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031b73  00000000  00000000  000650c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000392f7  00000000  00000000  00096c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112dc3  00000000  00000000  000cff2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e2ced  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c28c  00000000  00000000  001e2d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b408 	.word	0x0800b408

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	0800b408 	.word	0x0800b408

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800025c:	23ff      	movs	r3, #255	; 0xff
 800025e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000260:	2300      	movs	r3, #0
 8000262:	81fb      	strh	r3, [r7, #14]
 8000264:	e021      	b.n	80002aa <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000266:	89fb      	ldrh	r3, [r7, #14]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	4053      	eors	r3, r2
 8000272:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000274:	2308      	movs	r3, #8
 8000276:	733b      	strb	r3, [r7, #12]
 8000278:	e011      	b.n	800029e <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800027a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800027e:	2b00      	cmp	r3, #0
 8000280:	da07      	bge.n	8000292 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000282:	7b7b      	ldrb	r3, [r7, #13]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b25b      	sxtb	r3, r3
 8000288:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800028c:	b25b      	sxtb	r3, r3
 800028e:	737b      	strb	r3, [r7, #13]
 8000290:	e002      	b.n	8000298 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000298:	7b3b      	ldrb	r3, [r7, #12]
 800029a:	3b01      	subs	r3, #1
 800029c:	733b      	strb	r3, [r7, #12]
 800029e:	7b3b      	ldrb	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1ea      	bne.n	800027a <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80002a4:	89fb      	ldrh	r3, [r7, #14]
 80002a6:	3301      	adds	r3, #1
 80002a8:	81fb      	strh	r3, [r7, #14]
 80002aa:	89fa      	ldrh	r2, [r7, #14]
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3d9      	bcc.n	8000266 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
 80002cc:	4613      	mov	r3, r2
 80002ce:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	4619      	mov	r1, r3
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ffbb 	bl	8000250 <sensirion_common_generate_crc>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	787b      	ldrb	r3, [r7, #1]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d002      	beq.n	80002ea <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80002e4:	f04f 33ff 	mov.w	r3, #4294967295
 80002e8:	e000      	b.n	80002ec <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	4413      	add	r3, r2
 800030c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000316:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f8a2 	bl	8000468 <sensirion_i2c_read>
 8000324:	4603      	mov	r3, r0
 8000326:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800032a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000332:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000336:	e047      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000338:	2300      	movs	r3, #0
 800033a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800033e:	2300      	movs	r3, #0
 8000340:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000344:	e039      	b.n	80003ba <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000346:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800034a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800034c:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800034e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000352:	3302      	adds	r3, #2
 8000354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000356:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	2102      	movs	r1, #2
 800035e:	f7ff ffaf 	bl	80002c0 <sensirion_common_check_crc>
 8000362:	4603      	mov	r3, r0
 8000364:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 8000368:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000370:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000374:	e028      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8000376:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800037a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800037c:	441a      	add	r2, r3
 800037e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000382:	1c59      	adds	r1, r3, #1
 8000384:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 8000388:	4619      	mov	r1, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	440b      	add	r3, r1
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000396:	3301      	adds	r3, #1
 8000398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800039a:	441a      	add	r2, r3
 800039c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80003a0:	1c59      	adds	r1, r3, #1
 80003a2:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80003a6:	4619      	mov	r1, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	440b      	add	r3, r1
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80003b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80003b4:	3303      	adds	r3, #3
 80003b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80003ba:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80003be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3bf      	bcc.n	8000346 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3758      	adds	r7, #88	; 0x58
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80003e0:	88ba      	ldrh	r2, [r7, #4]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	6839      	ldr	r1, [r7, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff84 	bl	80002f4 <sensirion_i2c_read_words_as_bytes>
 80003ec:	4603      	mov	r3, r0
 80003ee:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80003f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sensirion_i2c_read_words+0x2e>
        return ret;
 80003f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003fc:	e020      	b.n	8000440 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e017      	b.n	8000434 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	4413      	add	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21a      	sxth	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	3301      	adds	r3, #1
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b21b      	sxth	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b219      	sxth	r1, r3
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	b28a      	uxth	r2, r1
 800042c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	3301      	adds	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	b29b      	uxth	r3, r3
 8000438:	88ba      	ldrh	r2, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	d8e2      	bhi.n	8000404 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <sensirion_i2c_init+0x1c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000c4 	.word	0x200000c4

08000468 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <sensirion_i2c_read+0x34>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	b29b      	uxth	r3, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b299      	uxth	r1, r3
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	2205      	movs	r2, #5
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	f004 fbe6 	bl	8004c5c <HAL_I2C_Master_Receive>
 8000490:	4603      	mov	r3, r0
 8000492:	b25b      	sxtb	r3, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000c4 	.word	0x200000c4

080004a0 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	4613      	mov	r3, r2
 80004ae:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <sensirion_i2c_write+0x34>)
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	b299      	uxth	r1, r3
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	2205      	movs	r2, #5
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	f004 fad6 	bl	8004a74 <HAL_I2C_Master_Transmit>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b25b      	sxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000c4 	.word	0x200000c4

080004d8 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004e4:	fba2 2303 	umull	r2, r3, r2, r3
 80004e8:	099b      	lsrs	r3, r3, #6
 80004ea:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004f0:	fba3 1302 	umull	r1, r3, r3, r2
 80004f4:	099b      	lsrs	r3, r3, #6
 80004f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <sensirion_sleep_usec+0x32>
        msec++;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f001 fe26 	bl	800215c <HAL_Delay>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	10624dd3 	.word	0x10624dd3

0800051c <sht4x_activate_medium_heater>:
#define SHT_DRV_VERSION_STR "5.3.0"
static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


int16_t sht4x_activate_medium_heater(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]
    buffer[offset++] = (uint8_t)0x24;
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	81fa      	strh	r2, [r7, #14]
 800052c:	3310      	adds	r3, #16
 800052e:	443b      	add	r3, r7
 8000530:	2224      	movs	r2, #36	; 0x24
 8000532:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write(SHT4X_ADDRESS, &buffer[0], offset);
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	2044      	movs	r0, #68	; 0x44
 800053e:	f7ff ffaf 	bl	80004a0 <sensirion_i2c_write>
 8000542:	4603      	mov	r3, r0
 8000544:	81bb      	strh	r3, [r7, #12]
    if (error) {
 8000546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <sht4x_activate_medium_heater+0x38>
        return error;
 800054e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <sht4x_activate_medium_heater+0x40>
    }

    sensirion_sleep_usec(110000);
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <sht4x_activate_medium_heater+0x48>)
 8000556:	f7ff ffbf 	bl	80004d8 <sensirion_sleep_usec>

    return NO_ERROR;
 800055a:	2300      	movs	r3, #0
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	0001adb0 	.word	0x0001adb0

08000568 <sht4x_measure>:
        return ret;
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
    return sht4x_read(temperature, humidity);
}

int16_t sht4x_measure(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	4904      	ldr	r1, [pc, #16]	; (8000580 <sht4x_measure+0x18>)
 8000570:	2044      	movs	r0, #68	; 0x44
 8000572:	f7ff ff95 	bl	80004a0 <sensirion_i2c_write>
 8000576:	4603      	mov	r3, r0
 8000578:	b21b      	sxth	r3, r3
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000008 	.word	0x20000008

08000584 <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2202      	movs	r2, #2
 8000594:	4619      	mov	r1, r3
 8000596:	2044      	movs	r0, #68	; 0x44
 8000598:	f7ff ff1a 	bl	80003d0 <sensirion_i2c_read_words>
 800059c:	4603      	mov	r3, r0
 800059e:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 80005a0:	893b      	ldrh	r3, [r7, #8]
 80005a2:	461a      	mov	r2, r3
 80005a4:	f245 5373 	movw	r3, #21875	; 0x5573
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	135b      	asrs	r3, r3, #13
 80005ae:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80005b2:	3bc8      	subs	r3, #200	; 0xc8
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 80005b8:	897b      	ldrh	r3, [r7, #10]
 80005ba:	461a      	mov	r2, r3
 80005bc:	f643 5309 	movw	r3, #15625	; 0x3d09
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	135b      	asrs	r3, r3, #13
 80005c6:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 80005ca:	3b10      	subs	r3, #16
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	6013      	str	r3, [r2, #0]

    return ret;
 80005d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d007      	beq.n	80005fc <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <sht4x_enable_low_power_mode+0x3c>)
 80005ee:	22e0      	movs	r2, #224	; 0xe0
 80005f0:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <sht4x_enable_low_power_mode+0x40>)
 80005f4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80005f8:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 80005fa:	e006      	b.n	800060a <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <sht4x_enable_low_power_mode+0x3c>)
 80005fe:	22fd      	movs	r2, #253	; 0xfd
 8000600:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <sht4x_enable_low_power_mode+0x40>)
 8000604:	f242 7210 	movw	r2, #10000	; 0x2710
 8000608:	801a      	strh	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008
 800061c:	2000000a 	.word	0x2000000a

08000620 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <platform_stts22h_init+0x3c>)
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <platform_stts22h_init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <platform_stts22h_init+0x3c>)
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <platform_stts22h_init+0x44>)
 8000632:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 8000634:	4a09      	ldr	r2, [pc, #36]	; (800065c <platform_stts22h_init+0x3c>)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <platform_stts22h_init+0x48>)
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <platform_stts22h_init+0x3c>)
 800063e:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <platform_stts22h_init+0x4c>)
 8000642:	f000 f966 	bl	8000912 <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <platform_stts22h_init+0x4c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2ba0      	cmp	r3, #160	; 0xa0
 800064c:	bf0c      	ite	eq
 800064e:	2301      	moveq	r3, #1
 8000650:	2300      	movne	r3, #0
 8000652:	b2db      	uxtb	r3, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000c8 	.word	0x200000c8
 8000660:	08000671 	.word	0x08000671
 8000664:	080006a7 	.word	0x080006a7
 8000668:	200000d8 	.word	0x200000d8
 800066c:	200000dc 	.word	0x200000dc

08000670 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	461a      	mov	r2, r3
 800067c:	460b      	mov	r3, r1
 800067e:	72fb      	strb	r3, [r7, #11]
 8000680:	4613      	mov	r3, r2
 8000682:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	b29b      	uxth	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b299      	uxth	r1, r3
 800068c:	893b      	ldrh	r3, [r7, #8]
 800068e:	2205      	movs	r2, #5
 8000690:	9200      	str	r2, [sp, #0]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f004 fae1 	bl	8004c5c <HAL_I2C_Master_Receive>
 800069a:	4603      	mov	r3, r0
 800069c:	b25b      	sxtb	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af02      	add	r7, sp, #8
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	461a      	mov	r2, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	72fb      	strb	r3, [r7, #11]
 80006b6:	4613      	mov	r3, r2
 80006b8:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	b299      	uxth	r1, r3
 80006c2:	893b      	ldrh	r3, [r7, #8]
 80006c4:	2205      	movs	r2, #5
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f004 f9d2 	bl	8004a74 <HAL_I2C_Master_Transmit>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b25b      	sxtb	r3, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <stts22h_read_reg+0x30>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	685c      	ldr	r4, [r3, #4]
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <stts22h_read_reg+0x30>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68d8      	ldr	r0, [r3, #12]
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	79f9      	ldrb	r1, [r7, #7]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	47a0      	blx	r4
 8000700:	60f8      	str	r0, [r7, #12]

  return ret;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	200000d8 	.word	0x200000d8

08000710 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <stts22h_write_reg+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681c      	ldr	r4, [r3, #0]
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <stts22h_write_reg+0x30>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68d8      	ldr	r0, [r3, #12]
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	79f9      	ldrb	r1, [r7, #7]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	47a0      	blx	r4
 8000734:	60f8      	str	r0, [r7, #12]

  return ret;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	200000d8 	.word	0x200000d8

08000744 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	2004      	movs	r0, #4
 8000758:	f7ff ffc0 	bl	80006dc <stts22h_read_reg>
 800075c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d107      	bne.n	8000774 <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	200c      	movs	r0, #12
 800076e:	f7ff ffb5 	bl	80006dc <stts22h_read_reg>
 8000772:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d11d      	bne.n	80007b6 <stts22h_temp_data_rate_set+0x72>
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d11a      	bne.n	80007b6 <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000780:	7c3b      	ldrb	r3, [r7, #16]
 8000782:	f043 0302 	orr.w	r3, r3, #2
 8000786:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	200c      	movs	r0, #12
 8000792:	f7ff ffbd 	bl	8000710 <stts22h_write_reg>
 8000796:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10b      	bne.n	80007b6 <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800079e:	7c3b      	ldrb	r3, [r7, #16]
 80007a0:	f36f 0341 	bfc	r3, #1, #1
 80007a4:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	200c      	movs	r0, #12
 80007b0:	f7ff ffae 	bl	8000710 <stts22h_write_reg>
 80007b4:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d008      	beq.n	80007ce <stts22h_temp_data_rate_set+0x8a>
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d005      	beq.n	80007ce <stts22h_temp_data_rate_set+0x8a>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b22      	cmp	r3, #34	; 0x22
 80007c6:	d002      	beq.n	80007ce <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b32      	cmp	r3, #50	; 0x32
 80007cc:	d123      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80007ce:	7b3b      	ldrb	r3, [r7, #12]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d11d      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d11a      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80007e0:	7c3b      	ldrb	r3, [r7, #16]
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2201      	movs	r2, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	200c      	movs	r0, #12
 80007f2:	f7ff ff8d 	bl	8000710 <stts22h_write_reg>
 80007f6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 80007fe:	7c3b      	ldrb	r3, [r7, #16]
 8000800:	f36f 0341 	bfc	r3, #1, #1
 8000804:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	200c      	movs	r0, #12
 8000810:	f7ff ff7e 	bl	8000710 <stts22h_write_reg>
 8000814:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b04      	cmp	r3, #4
 800081a:	d125      	bne.n	8000868 <stts22h_temp_data_rate_set+0x124>
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d122      	bne.n	8000868 <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000822:	7c3b      	ldrb	r3, [r7, #16]
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 800082a:	7c3b      	ldrb	r3, [r7, #16]
 800082c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000830:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	200c      	movs	r0, #12
 800083c:	f7ff ff68 	bl	8000710 <stts22h_write_reg>
 8000840:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10f      	bne.n	8000868 <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000848:	7c3b      	ldrb	r3, [r7, #16]
 800084a:	f36f 0341 	bfc	r3, #1, #1
 800084e:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000850:	7c3b      	ldrb	r3, [r7, #16]
 8000852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000856:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	200c      	movs	r0, #12
 8000862:	f7ff ff55 	bl	8000710 <stts22h_write_reg>
 8000866:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d12a      	bne.n	80008c4 <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	7b3b      	ldrb	r3, [r7, #12]
 8000878:	f362 0300 	bfi	r3, r2, #0, #1
 800087c:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	7b3b      	ldrb	r3, [r7, #12]
 800088a:	f362 0382 	bfi	r3, r2, #2, #1
 800088e:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	7b3b      	ldrb	r3, [r7, #12]
 800089c:	f362 13c7 	bfi	r3, r2, #7, #1
 80008a0:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	f003 0303 	and.w	r3, r3, #3
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	7b3b      	ldrb	r3, [r7, #12]
 80008ae:	f362 1305 	bfi	r3, r2, #4, #2
 80008b2:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	2004      	movs	r0, #4
 80008be:	f7ff ff27 	bl	8000710 <stts22h_write_reg>
 80008c2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80008c4:	697b      	ldr	r3, [r7, #20]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get( int16_t *val)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_TEMP_L_OUT, buff, 2);
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2202      	movs	r2, #2
 80008dc:	4619      	mov	r1, r3
 80008de:	2006      	movs	r0, #6
 80008e0:	f7ff fefc 	bl	80006dc <stts22h_read_reg>
 80008e4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80008e6:	7a7b      	ldrb	r3, [r7, #9]
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	7a3b      	ldrb	r3, [r7, #8]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	4413      	add	r3, r2
 8000900:	b29b      	uxth	r3, r3
 8000902:	b21a      	sxth	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	801a      	strh	r2, [r3, #0]

  return ret;
 8000908:	68fb      	ldr	r3, [r7, #12]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fedc 	bl	80006dc <stts22h_read_reg>
 8000924:	60f8      	str	r0, [r7, #12]

  return ret;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000930:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000932:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000934:	3304      	adds	r3, #4

08000936 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000936:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000938:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800093a:	d3f9      	bcc.n	8000930 <CopyDataInit>
  bx lr
 800093c:	4770      	bx	lr

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800093e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000940:	3004      	adds	r0, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000942:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>
  bx lr
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800094a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800094c:	f003 f934 	bl	8003bb8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <LoopForever+0x8>)
 8000952:	490c      	ldr	r1, [pc, #48]	; (8000984 <LoopForever+0xc>)
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <LoopForever+0x10>)
 8000956:	2300      	movs	r3, #0
 8000958:	f7ff ffed 	bl	8000936 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <LoopForever+0x14>)
 800095e:	490c      	ldr	r1, [pc, #48]	; (8000990 <LoopForever+0x18>)
 8000960:	2300      	movs	r3, #0
 8000962:	f7ff ffee 	bl	8000942 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <LoopForever+0x1c>)
 8000968:	490b      	ldr	r1, [pc, #44]	; (8000998 <LoopForever+0x20>)
 800096a:	2300      	movs	r3, #0
 800096c:	f7ff ffe9 	bl	8000942 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000970:	f00a f88c 	bl	800aa8c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000974:	f002 fbe8 	bl	8003148 <main>

08000978 <LoopForever>:

LoopForever:
  b LoopForever
 8000978:	e7fe      	b.n	8000978 <LoopForever>
 800097a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800097c:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 8000980:	20000008 	.word	0x20000008
 8000984:	20000094 	.word	0x20000094
 8000988:	0800bf10 	.word	0x0800bf10
  INIT_BSS _sbss, _ebss
 800098c:	200000a8 	.word	0x200000a8
 8000990:	200007a0 	.word	0x200007a0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000994:	200300e8 	.word	0x200300e8
 8000998:	20030c6a 	.word	0x20030c6a

0800099c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_IRQHandler>
	...

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d207      	bcs.n	80009e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d0:	f00a f856 	bl	800aa80 <__errno>
 80009d4:	4603      	mov	r3, r0
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e009      	b.n	80009f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <_sbrk+0x64>)
 80009f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20024000 	.word	0x20024000
 8000a00:	00002000 	.word	0x00002000
 8000a04:	200000e0 	.word	0x200000e0
 8000a08:	200007a0 	.word	0x200007a0

08000a0c <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f007 fe6b 	bl	80086fa <otCoapSendResponseWithParameters>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <APP_THREAD_Init>:
bool coapConnectionEstablished = false;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_THREAD_INIT_1 */

  /* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f009 fccf 	bl	800a3dc <UTIL_LPM_SetStopMode>
  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8000a3e:	f000 fa53 	bl	8000ee8 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000a42:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <APP_THREAD_Init+0x84>)
 8000a44:	f000 fcc4 	bl	80013d0 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f009 fcf6 	bl	800a43c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8000a50:	f000 fd70 	bl	8001534 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000a54:	f000 fd66 	bl	8001524 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000a58:	f008 fed5 	bl	8009806 <SHCI_C2_THREAD_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <APP_THREAD_Init+0x88>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	2001      	movs	r0, #1
 8000a66:	f009 fe4b 	bl	800a700 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN INIT TASKS */
  APP_THREAD_SetSleepyEndDeviceMode();
 8000a6a:	f000 f8e3 	bl	8000c34 <APP_THREAD_SetSleepyEndDeviceMode>
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 8000a6e:	f000 f935 	bl	8000cdc <APP_THREAD_DeviceConfig>


  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated, APP_THREAD_SendCoapMsg);
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <APP_THREAD_Init+0x8c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	4912      	ldr	r1, [pc, #72]	; (8000ac0 <APP_THREAD_Init+0x90>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f002 f909 	bl	8002c90 <HW_TS_Create>
  HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <APP_THREAD_Init+0x90>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f642 0205 	movw	r2, #10245	; 0x2805
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 f9ff 	bl	8002e8c <HW_TS_Start>
  APP_THREAD_InitPayloadWrite();
 8000a8e:	f000 fb6b 	bl	8001168 <APP_THREAD_InitPayloadWrite>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <APP_THREAD_Init+0x94>)
 8000a98:	f003 fee4 	bl	8004864 <HAL_GPIO_WritePin>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f009 fc9c 	bl	800a3dc <UTIL_LPM_SetStopMode>

  /* Allow the 802_15_4 IP to enter in low power mode */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f008 fed9 	bl	800985e <SHCI_C2_RADIO_AllowLowPower>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200300e8 	.word	0x200300e8
 8000ab8:	080015c9 	.word	0x080015c9
 8000abc:	0800119d 	.word	0x0800119d
 8000ac0:	200000fa 	.word	0x200000fa
 8000ac4:	48000800 	.word	0x48000800

08000ac8 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b16      	cmp	r3, #22
 8000ad6:	f200 8081 	bhi.w	8000bdc <APP_THREAD_Error+0x114>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <APP_THREAD_Error+0x18>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000b3d 	.word	0x08000b3d
 8000ae4:	08000b47 	.word	0x08000b47
 8000ae8:	08000b51 	.word	0x08000b51
 8000aec:	08000b5b 	.word	0x08000b5b
 8000af0:	08000b65 	.word	0x08000b65
 8000af4:	08000b6f 	.word	0x08000b6f
 8000af8:	08000b79 	.word	0x08000b79
 8000afc:	08000b83 	.word	0x08000b83
 8000b00:	08000b97 	.word	0x08000b97
 8000b04:	08000ba1 	.word	0x08000ba1
 8000b08:	08000bab 	.word	0x08000bab
 8000b0c:	08000bb5 	.word	0x08000bb5
 8000b10:	08000bdd 	.word	0x08000bdd
 8000b14:	08000bbf 	.word	0x08000bbf
 8000b18:	08000bc9 	.word	0x08000bc9
 8000b1c:	08000bdd 	.word	0x08000bdd
 8000b20:	08000bdd 	.word	0x08000bdd
 8000b24:	08000bdd 	.word	0x08000bdd
 8000b28:	08000bdd 	.word	0x08000bdd
 8000b2c:	08000bdd 	.word	0x08000bdd
 8000b30:	08000bd3 	.word	0x08000bd3
 8000b34:	08000bdd 	.word	0x08000bdd
 8000b38:	08000b8d 	.word	0x08000b8d
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000b3c:	6839      	ldr	r1, [r7, #0]
 8000b3e:	482c      	ldr	r0, [pc, #176]	; (8000bf0 <APP_THREAD_Error+0x128>)
 8000b40:	f000 f9be 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b44:	e04f      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	482a      	ldr	r0, [pc, #168]	; (8000bf4 <APP_THREAD_Error+0x12c>)
 8000b4a:	f000 f9b9 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b4e:	e04a      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8000b50:	6839      	ldr	r1, [r7, #0]
 8000b52:	4829      	ldr	r0, [pc, #164]	; (8000bf8 <APP_THREAD_Error+0x130>)
 8000b54:	f000 f9b4 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b58:	e045      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8000b5a:	6839      	ldr	r1, [r7, #0]
 8000b5c:	4827      	ldr	r0, [pc, #156]	; (8000bfc <APP_THREAD_Error+0x134>)
 8000b5e:	f000 f9af 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b62:	e040      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8000b64:	6839      	ldr	r1, [r7, #0]
 8000b66:	4826      	ldr	r0, [pc, #152]	; (8000c00 <APP_THREAD_Error+0x138>)
 8000b68:	f000 f9aa 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b6c:	e03b      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <APP_THREAD_Error+0x13c>)
 8000b72:	f000 f9a5 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b76:	e036      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8000b78:	6839      	ldr	r1, [r7, #0]
 8000b7a:	4823      	ldr	r0, [pc, #140]	; (8000c08 <APP_THREAD_Error+0x140>)
 8000b7c:	f000 f9a0 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b80:	e031      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 8000b82:	6839      	ldr	r1, [r7, #0]
 8000b84:	4821      	ldr	r0, [pc, #132]	; (8000c0c <APP_THREAD_Error+0x144>)
 8000b86:	f000 f99b 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b8a:	e02c      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8000b8c:	6839      	ldr	r1, [r7, #0]
 8000b8e:	4820      	ldr	r0, [pc, #128]	; (8000c10 <APP_THREAD_Error+0x148>)
 8000b90:	f000 f996 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b94:	e027      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 8000b96:	6839      	ldr	r1, [r7, #0]
 8000b98:	481e      	ldr	r0, [pc, #120]	; (8000c14 <APP_THREAD_Error+0x14c>)
 8000b9a:	f000 f991 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000b9e:	e022      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8000ba0:	6839      	ldr	r1, [r7, #0]
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <APP_THREAD_Error+0x150>)
 8000ba4:	f000 f98c 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000ba8:	e01d      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	481b      	ldr	r0, [pc, #108]	; (8000c1c <APP_THREAD_Error+0x154>)
 8000bae:	f000 f987 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000bb2:	e018      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 8000bb4:	6839      	ldr	r1, [r7, #0]
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <APP_THREAD_Error+0x158>)
 8000bb8:	f000 f982 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000bbc:	e013      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <APP_THREAD_Error+0x15c>)
 8000bc2:	f000 f97d 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000bc6:	e00e      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 8000bc8:	6839      	ldr	r1, [r7, #0]
 8000bca:	4817      	ldr	r0, [pc, #92]	; (8000c28 <APP_THREAD_Error+0x160>)
 8000bcc:	f000 f978 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000bd0:	e009      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MSG_COMPARE_FAILED:
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",ErrCode);
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <APP_THREAD_Error+0x164>)
 8000bd6:	f000 f973 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000bda:	e004      	b.n	8000be6 <APP_THREAD_Error+0x11e>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4814      	ldr	r0, [pc, #80]	; (8000c30 <APP_THREAD_Error+0x168>)
 8000be0:	f000 f96e 	bl	8000ec0 <APP_THREAD_TraceError>
    break;
 8000be4:	bf00      	nop
  }
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	0800b42c 	.word	0x0800b42c
 8000bf4:	0800b450 	.word	0x0800b450
 8000bf8:	0800b474 	.word	0x0800b474
 8000bfc:	0800b494 	.word	0x0800b494
 8000c00:	0800b4b4 	.word	0x0800b4b4
 8000c04:	0800b4d4 	.word	0x0800b4d4
 8000c08:	0800b4f0 	.word	0x0800b4f0
 8000c0c:	0800b51c 	.word	0x0800b51c
 8000c10:	0800b540 	.word	0x0800b540
 8000c14:	0800b564 	.word	0x0800b564
 8000c18:	0800b584 	.word	0x0800b584
 8000c1c:	0800b5ac 	.word	0x0800b5ac
 8000c20:	0800b5d0 	.word	0x0800b5d0
 8000c24:	0800b5f8 	.word	0x0800b5f8
 8000c28:	0800b618 	.word	0x0800b618
 8000c2c:	0800b640 	.word	0x0800b640
 8000c30:	0800b668 	.word	0x0800b668

08000c34 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	71fb      	strb	r3, [r7, #7]

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(NULL, 5000);
 8000c3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c42:	2000      	movs	r0, #0
 8000c44:	f007 fecd 	bl	80089e2 <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 8000c48:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c4a:	7813      	ldrb	r3, [r2, #0]
 8000c4c:	f36f 0300 	bfc	r3, #0, #1
 8000c50:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c54:	7813      	ldrb	r3, [r2, #0]
 8000c56:	f36f 0341 	bfc	r3, #1, #1
 8000c5a:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 1U;
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c5e:	7813      	ldrb	r3, [r2, #0]
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(NULL,OT_LinkMode);
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c68:	7819      	ldrb	r1, [r3, #0]
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f009 f857 	bl	8009d1e <otThreadSetLinkMode>
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <APP_THREAD_SetSleepyEndDeviceMode+0x50>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2011      	movs	r0, #17
 8000c80:	f7ff ff22 	bl	8000ac8 <APP_THREAD_Error>
   * to modify its mode to MTD.
   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
   * then reattach.
   *
   */
  if (sleepyEndDeviceFlag == FALSE)
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d11e      	bne.n	8000cca <APP_THREAD_SetSleepyEndDeviceMode+0x96>
  {
    error = otThreadSetEnabled(NULL, false);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f008 ffe6 	bl	8009c60 <otThreadSetEnabled>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <APP_THREAD_SetSleepyEndDeviceMode+0x74>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2011      	movs	r0, #17
 8000ca4:	f7ff ff10 	bl	8000ac8 <APP_THREAD_Error>
    error = otThreadSetEnabled(NULL, true);
 8000ca8:	2101      	movs	r1, #1
 8000caa:	2000      	movs	r0, #0
 8000cac:	f008 ffd8 	bl	8009c60 <otThreadSetEnabled>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <APP_THREAD_SetSleepyEndDeviceMode+0x90>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2011      	movs	r0, #17
 8000cc0:	f7ff ff02 	bl	8000ac8 <APP_THREAD_Error>
    sleepyEndDeviceFlag = TRUE;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000e4 	.word	0x200000e4
 8000cd8:	200000e8 	.word	0x200000e8

08000cdc <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af00      	add	r7, sp, #0
	otPlatRadioSetTransmitPower(NULL, 6);
 8000ce2:	2106      	movs	r1, #6
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f008 fd5b 	bl	80097a0 <otPlatRadioSetTransmitPower>
  otError error;
  otNetworkKey networkKey = {{0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9,
 8000cea:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <APP_THREAD_DeviceConfig+0x180>)
 8000cec:	f107 0414 	add.w	r4, r7, #20
 8000cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          0xca, 0x86, 0x85, 0xab, 0x99, 0xda, 0xc9, 0x51}};

  error = otInstanceErasePersistentInfo(NULL);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f007 fdba 	bl	8008870 <otInstanceErasePersistentInfo>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <APP_THREAD_DeviceConfig+0x3a>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8000d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d0e:	4619      	mov	r1, r3
 8000d10:	2006      	movs	r0, #6
 8000d12:	f7ff fed9 	bl	8000ac8 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f007 fd4d 	bl	80087b6 <otInstanceFinalize>
  otInstanceInitSingle();
 8000d1c:	f007 fd24 	bl	8008768 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8000d20:	2200      	movs	r2, #0
 8000d22:	494f      	ldr	r1, [pc, #316]	; (8000e60 <APP_THREAD_DeviceConfig+0x184>)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f007 fd6d 	bl	8008804 <otSetStateChangedCallback>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <APP_THREAD_DeviceConfig+0x68>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8000d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fec2 	bl	8000ac8 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8000d44:	210f      	movs	r1, #15
 8000d46:	2000      	movs	r0, #0
 8000d48:	f007 fdeb 	bl	8008922 <otLinkSetChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <APP_THREAD_DeviceConfig+0x8a>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8000d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2002      	movs	r0, #2
 8000d62:	f7ff feb1 	bl	8000ac8 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8000d66:	f64d 61ad 	movw	r1, #57005	; 0xdead
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f007 fe09 	bl	8008982 <otLinkSetPanId>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <APP_THREAD_DeviceConfig+0xae>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8000d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d82:	4619      	mov	r1, r3
 8000d84:	2003      	movs	r0, #3
 8000d86:	f7ff fe9f 	bl	8000ac8 <APP_THREAD_Error>
  }
  uint8_t extPanId[16] = {0x72, 0x53, 0xc0, 0xf9, 0x58, 0xe3, 0x3f, 0x94};
 8000d8a:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <APP_THREAD_DeviceConfig+0x188>)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d90:	c303      	stmia	r3!, {r0, r1}
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	f107 030d 	add.w	r3, r7, #13
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	f8c3 2003 	str.w	r2, [r3, #3]
  error = otThreadSetExtendedPanId(NULL, &extPanId);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	2000      	movs	r0, #0
 8000da6:	f008 ff8b 	bl	8009cc0 <otThreadSetExtendedPanId>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  error = otThreadSetNetworkName(NULL, "OpenThread X-1");
 8000db0:	492d      	ldr	r1, [pc, #180]	; (8000e68 <APP_THREAD_DeviceConfig+0x18c>)
 8000db2:	2000      	movs	r0, #0
 8000db4:	f009 f823 	bl	8009dfe <otThreadSetNetworkName>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  error = otThreadSetNetworkKey(NULL, &networkKey);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f008 ffeb 	bl	8009da0 <otThreadSetNetworkKey>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <APP_THREAD_DeviceConfig+0x108>
  {
    APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 8000dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2007      	movs	r0, #7
 8000de0:	f7ff fe72 	bl	8000ac8 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8000de4:	2101      	movs	r1, #1
 8000de6:	2000      	movs	r0, #0
 8000de8:	f007 fd6b 	bl	80088c2 <otIp6SetEnabled>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <APP_THREAD_DeviceConfig+0x12a>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8000dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dfe:	4619      	mov	r1, r3
 8000e00:	2004      	movs	r0, #4
 8000e02:	f7ff fe61 	bl	8000ac8 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8000e06:	2101      	movs	r1, #1
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f008 ff29 	bl	8009c60 <otThreadSetEnabled>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <APP_THREAD_DeviceConfig+0x14c>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8000e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e20:	4619      	mov	r1, r3
 8000e22:	2005      	movs	r0, #5
 8000e24:	f7ff fe50 	bl	8000ac8 <APP_THREAD_Error>
  }
  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8000e28:	f241 6133 	movw	r1, #5683	; 0x1633
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f007 fc08 	bl	8008642 <otCoapStart>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (error != OT_ERROR_NONE)
 8000e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <APP_THREAD_DeviceConfig+0x170>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 8000e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e44:	4619      	mov	r1, r3
 8000e46:	2008      	movs	r0, #8
 8000e48:	f7ff fe3e 	bl	8000ac8 <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(NULL, &OT_Ressource);
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <APP_THREAD_DeviceConfig+0x190>)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f007 fc27 	bl	80086a2 <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 8000e54:	bf00      	nop
 8000e56:	372c      	adds	r7, #44	; 0x2c
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	0800b688 	.word	0x0800b688
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	0800b698 	.word	0x0800b698
 8000e68:	0800b678 	.word	0x0800b678
 8000e6c:	2000000c 	.word	0x2000000c

08000e70 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d016      	beq.n	8000eb2 <APP_THREAD_StateNotif+0x42>
  {
    switch (otThreadGetDeviceRole(NULL))
 8000e84:	2000      	movs	r0, #0
 8000e86:	f008 ffe9 	bl	8009e5c <otThreadGetDeviceRole>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d812      	bhi.n	8000eb6 <APP_THREAD_StateNotif+0x46>
 8000e90:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <APP_THREAD_StateNotif+0x28>)
 8000e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e96:	bf00      	nop
 8000e98:	08000eb7 	.word	0x08000eb7
 8000e9c:	08000eb7 	.word	0x08000eb7
 8000ea0:	08000ead 	.word	0x08000ead
 8000ea4:	08000eb7 	.word	0x08000eb7
 8000ea8:	08000eb7 	.word	0x08000eb7
       /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */

       break;
    case OT_DEVICE_ROLE_CHILD:
       /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SetSleepyEndDeviceMode();
 8000eac:	f7ff fec2 	bl	8000c34 <APP_THREAD_SetSleepyEndDeviceMode>
       break;
 8000eb0:	e002      	b.n	8000eb8 <APP_THREAD_StateNotif+0x48>
    default:
       /* USER CODE BEGIN DEFAULT */
       /* USER CODE END DEFAULT */
       break;
    }
  }
 8000eb2:	bf00      	nop
 8000eb4:	e000      	b.n	8000eb8 <APP_THREAD_StateNotif+0x48>
       break;
 8000eb6:	bf00      	nop
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <APP_THREAD_TraceError+0x24>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f002 fe5f 	bl	8003b98 <logApplication>

  /* USER CODE END TRACE_ERROR */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	0800b6a8 	.word	0x0800b6a8

08000ee8 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f008 fcd2 	bl	800989c <SHCI_GetWirelessFwInfo>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d004      	beq.n	8000f08 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000efe:	2101      	movs	r1, #1
 8000f00:	2016      	movs	r0, #22
 8000f02:	f7ff fde1 	bl	8000ac8 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8000f06:	e07c      	b.n	8001002 <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
    APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8000f08:	4a40      	ldr	r2, [pc, #256]	; (800100c <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f002 fe43 	bl	8003b98 <logApplication>
    APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	9200      	str	r2, [sp, #0]
 8000f26:	460b      	mov	r3, r1
 8000f28:	4a39      	ldr	r2, [pc, #228]	; (8001010 <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f002 fe33 	bl	8003b98 <logApplication>
    APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f002 fe2c 	bl	8003b98 <logApplication>
    APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	78db      	ldrb	r3, [r3, #3]
 8000f44:	4a34      	ldr	r2, [pc, #208]	; (8001018 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f002 fe25 	bl	8003b98 <logApplication>
    APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	7a9b      	ldrb	r3, [r3, #10]
 8000f52:	4619      	mov	r1, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	7adb      	ldrb	r3, [r3, #11]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	7b1b      	ldrb	r3, [r3, #12]
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	9200      	str	r2, [sp, #0]
 8000f62:	460b      	mov	r3, r1
 8000f64:	4a2d      	ldr	r2, [pc, #180]	; (800101c <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f002 fe15 	bl	8003b98 <logApplication>
    APP_DBG("Stack type: %d", p_wireless_info->StackType);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	7a5b      	ldrb	r3, [r3, #9]
 8000f72:	4a2b      	ldr	r2, [pc, #172]	; (8001020 <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	2000      	movs	r0, #0
 8000f78:	f002 fe0e 	bl	8003b98 <logApplication>
    APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	7a1b      	ldrb	r3, [r3, #8]
 8000f80:	4a28      	ldr	r2, [pc, #160]	; (8001024 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2000      	movs	r0, #0
 8000f86:	f002 fe07 	bl	8003b98 <logApplication>
    APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	79db      	ldrb	r3, [r3, #7]
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	2000      	movs	r0, #0
 8000f94:	f002 fe00 	bl	8003b98 <logApplication>
    APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	4a23      	ldr	r2, [pc, #140]	; (800102c <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f002 fdf9 	bl	8003b98 <logApplication>
    APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	795b      	ldrb	r3, [r3, #5]
 8000faa:	4a21      	ldr	r2, [pc, #132]	; (8001030 <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f002 fdf2 	bl	8003b98 <logApplication>
    switch(p_wireless_info->StackType)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	7a5b      	ldrb	r3, [r3, #9]
 8000fb8:	2b50      	cmp	r3, #80	; 0x50
 8000fba:	d012      	beq.n	8000fe2 <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8000fbc:	2b50      	cmp	r3, #80	; 0x50
 8000fbe:	dc16      	bgt.n	8000fee <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8000fc0:	2b10      	cmp	r3, #16
 8000fc2:	d002      	beq.n	8000fca <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8000fc4:	2b11      	cmp	r3, #17
 8000fc6:	d006      	beq.n	8000fd6 <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 8000fc8:	e011      	b.n	8000fee <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
      APP_DBG("FW Type : Thread FTD");
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f002 fde2 	bl	8003b98 <logApplication>
      break;
 8000fd4:	e010      	b.n	8000ff8 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Thread MTD");
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f002 fddc 	bl	8003b98 <logApplication>
      break;
 8000fe0:	e00a      	b.n	8000ff8 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f002 fdd6 	bl	8003b98 <logApplication>
      break;
 8000fec:	e004      	b.n	8000ff8 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2016      	movs	r0, #22
 8000ff2:	f7ff fd69 	bl	8000ac8 <APP_THREAD_Error>
      break;
 8000ff6:	bf00      	nop
    APP_DBG("**********************************************************");
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f002 fdcb 	bl	8003b98 <logApplication>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0800b6cc 	.word	0x0800b6cc
 8001010:	0800b708 	.word	0x0800b708
 8001014:	0800b724 	.word	0x0800b724
 8001018:	0800b740 	.word	0x0800b740
 800101c:	0800b758 	.word	0x0800b758
 8001020:	0800b774 	.word	0x0800b774
 8001024:	0800b784 	.word	0x0800b784
 8001028:	0800b798 	.word	0x0800b798
 800102c:	0800b7ac 	.word	0x0800b7ac
 8001030:	0800b7c0 	.word	0x0800b7c0
 8001034:	0800b7d4 	.word	0x0800b7d4
 8001038:	0800b7ec 	.word	0x0800b7ec
 800103c:	0800b804 	.word	0x0800b804
 8001040:	0800b830 	.word	0x0800b830

08001044 <APP_THREAD_CoapPermissionsRequestHandler>:


static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	coapConnectionEstablished = true;
 8001050:	4b3e      	ldr	r3, [pc, #248]	; (800114c <APP_THREAD_CoapPermissionsRequestHandler+0x108>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2102      	movs	r1, #2
 800105a:	483d      	ldr	r0, [pc, #244]	; (8001150 <APP_THREAD_CoapPermissionsRequestHandler+0x10c>)
 800105c:	f003 fc02 	bl	8004864 <HAL_GPIO_WritePin>
	  coapConnectionEstablished = true;
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <APP_THREAD_CoapPermissionsRequestHandler+0x108>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
  APP_DBG(" **********************************************************************************"
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4a3a      	ldr	r2, [pc, #232]	; (8001154 <APP_THREAD_CoapPermissionsRequestHandler+0x110>)
 800106a:	2101      	movs	r1, #1
 800106c:	2000      	movs	r0, #0
 800106e:	f002 fd93 	bl	8003b98 <logApplication>
		  "******************************************************************************"
		  "***********************************************************************",pContext);
  /* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
  //GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
  //printIPv6Addr(&aMessageInfo->mPeerAddr);
  brAddr = pMessageInfo->mPeerAddr;
 8001072:	4a39      	ldr	r2, [pc, #228]	; (8001158 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4614      	mov	r4, r2
 8001078:	3310      	adds	r3, #16
 800107a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  otError error = OT_ERROR_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	77fb      	strb	r3, [r7, #31]
  otMessage *responseMessage;
  otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 8001084:	2344      	movs	r3, #68	; 0x44
 8001086:	77bb      	strb	r3, [r7, #30]
  otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f007 f9e4 	bl	8008456 <otCoapMessageGetCode>
 800108e:	4603      	mov	r3, r0
 8001090:	777b      	strb	r3, [r7, #29]

  responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 8001092:	2100      	movs	r1, #0
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f007 f876 	bl	8008186 <otCoapNewMessage>
 800109a:	61b8      	str	r0, [r7, #24]

  otCoapMessageInitResponse(responseMessage, pMessage,
 800109c:	7fbb      	ldrb	r3, [r7, #30]
 800109e:	2202      	movs	r2, #2
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	69b8      	ldr	r0, [r7, #24]
 80010a4:	f007 f8d2 	bl	800824c <otCoapMessageInitResponse>
                            OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
  otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f007 fa60 	bl	800856e <otCoapMessageGetToken>
 80010ae:	4604      	mov	r4, r0
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f007 fa2e 	bl	8008512 <otCoapMessageGetTokenLength>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	69b8      	ldr	r0, [r7, #24]
 80010be:	f007 f903 	bl	80082c8 <otCoapMessageSetToken>
                        otCoapMessageGetTokenLength(pMessage));
  otCoapMessageSetPayloadMarker(responseMessage);
 80010c2:	69b8      	ldr	r0, [r7, #24]
 80010c4:	f007 f999 	bl	80083fa <otCoapMessageSetPayloadMarker>


  uint16_t offset = otMessageGetOffset(pMessage);
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	f007 fce6 	bl	8008a9a <otMessageGetOffset>
 80010ce:	4603      	mov	r3, r0
 80010d0:	82fb      	strh	r3, [r7, #22]
  otMessageRead(pMessage, offset, resource_name, sizeof(resource_name)-1);
 80010d2:	8af9      	ldrh	r1, [r7, #22]
 80010d4:	231f      	movs	r3, #31
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <APP_THREAD_CoapPermissionsRequestHandler+0x118>)
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f007 fd47 	bl	8008b6c <otMessageRead>


  if (OT_COAP_CODE_GET == messageCode)
 80010de:	7f7b      	ldrb	r3, [r7, #29]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10e      	bne.n	8001102 <APP_THREAD_CoapPermissionsRequestHandler+0xbe>
  {

      error = otMessageAppend(responseMessage, "ack", 3);
 80010e4:	2203      	movs	r2, #3
 80010e6:	491e      	ldr	r1, [pc, #120]	; (8001160 <APP_THREAD_CoapPermissionsRequestHandler+0x11c>)
 80010e8:	69b8      	ldr	r0, [r7, #24]
 80010ea:	f007 fd06 	bl	8008afa <otMessageAppend>
 80010ee:	4603      	mov	r3, r0
 80010f0:	77fb      	strb	r3, [r7, #31]
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	69b9      	ldr	r1, [r7, #24]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff fc88 	bl	8000a0c <otCoapSendResponse>
 80010fc:	4603      	mov	r3, r0
 80010fe:	77fb      	strb	r3, [r7, #31]
 8001100:	e011      	b.n	8001126 <APP_THREAD_CoapPermissionsRequestHandler+0xe2>
                                 pMessageInfo);
  }
  else
  {
      error = otMessageAppend(responseMessage, "nack", 4);
 8001102:	2204      	movs	r2, #4
 8001104:	4917      	ldr	r1, [pc, #92]	; (8001164 <APP_THREAD_CoapPermissionsRequestHandler+0x120>)
 8001106:	69b8      	ldr	r0, [r7, #24]
 8001108:	f007 fcf7 	bl	8008afa <otMessageAppend>
 800110c:	4603      	mov	r3, r0
 800110e:	77fb      	strb	r3, [r7, #31]
      otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 8001110:	2185      	movs	r1, #133	; 0x85
 8001112:	69b8      	ldr	r0, [r7, #24]
 8001114:	f007 f9cd 	bl	80084b2 <otCoapMessageSetCode>
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff fc75 	bl	8000a0c <otCoapSendResponse>
 8001122:	4603      	mov	r3, r0
 8001124:	77fb      	strb	r3, [r7, #31]
                                 pMessageInfo);
  }

  if (error != OT_ERROR_NONE && responseMessage != NULL)
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <APP_THREAD_CoapPermissionsRequestHandler+0xf4>
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <APP_THREAD_CoapPermissionsRequestHandler+0xf4>
  {
      otMessageFree(responseMessage);
 8001132:	69b8      	ldr	r0, [r7, #24]
 8001134:	f007 fc84 	bl	8008a40 <otMessageFree>
  }


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2102      	movs	r1, #2
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <APP_THREAD_CoapPermissionsRequestHandler+0x10c>)
 800113e:	f003 fb91 	bl	8004864 <HAL_GPIO_WritePin>
}
 8001142:	bf00      	nop
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	bf00      	nop
 800114c:	20000234 	.word	0x20000234
 8001150:	48000800 	.word	0x48000800
 8001154:	0800b954 	.word	0x0800b954
 8001158:	2000021c 	.word	0x2000021c
 800115c:	200001fc 	.word	0x200001fc
 8001160:	0800bb28 	.word	0x0800bb28
 8001164:	0800bb2c 	.word	0x0800bb2c

08001168 <APP_THREAD_InitPayloadWrite>:
 * @brief Initialize CoAP write buffer.
 * @param  None
 * @retval None
 */
static void APP_THREAD_InitPayloadWrite(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	e006      	b.n	8001182 <APP_THREAD_InitPayloadWrite+0x1a>
  {
    PayloadWrite[i] = 0xFF;
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <APP_THREAD_InitPayloadWrite+0x30>)
 8001178:	21ff      	movs	r1, #255	; 0xff
 800117a:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	3301      	adds	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d9f5      	bls.n	8001174 <APP_THREAD_InitPayloadWrite+0xc>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200000f8 	.word	0x200000f8

0800119c <APP_THREAD_SendCoapMsg>:
/**
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf, bool require_ack) {
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	b0ad      	sub	sp, #180	; 0xb4
 80011a0:	af0e      	add	r7, sp, #56	; 0x38
 80011a2:	6278      	str	r0, [r7, #36]	; 0x24
 80011a4:	460b      	mov	r3, r1
 80011a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2102      	movs	r1, #2
 80011ae:	487e      	ldr	r0, [pc, #504]	; (80013a8 <APP_THREAD_SendCoapMsg+0x20c>)
 80011b0:	f003 fb58 	bl	8004864 <HAL_GPIO_WritePin>
	int8_t rssi;
	int16_t tmp_aux;
	//otThreadGetParentLastRssi(NULL, &rssi);
	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 80011b4:	497d      	ldr	r1, [pc, #500]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 80011b6:	487e      	ldr	r0, [pc, #504]	; (80013b0 <APP_THREAD_SendCoapMsg+0x214>)
 80011b8:	f7ff f9e4 	bl	8000584 <sht4x_read>
	stts22h_temperature_raw_get(&tmp_aux);
 80011bc:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fb84 	bl	80008ce <stts22h_temperature_raw_get>
	sensor_data.temp_aux = tmp_aux;
 80011c6:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 80011cc:	811a      	strh	r2, [r3, #8]
	int8_t state;
	int8_t ret = app_algo_proc(sensor_data, false, &state);
 80011ce:	4a77      	ldr	r2, [pc, #476]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 80011d0:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011da:	f000 fd6f 	bl	8001cbc <app_algo_proc>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	if(ret == RES_HEAT) sht4x_activate_medium_heater();
 80011e4:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <APP_THREAD_SendCoapMsg+0x54>
 80011ec:	f7ff f996 	bl	800051c <sht4x_activate_medium_heater>
	 * opt_buf (uint32_t): light levels in lux
	 * vdd_meas (uint32_t): supply voltage in mV
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 80011f0:	2301      	movs	r3, #1
 80011f2:	469c      	mov	ip, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 80011f4:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 80011f8:	461d      	mov	r5, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 80011fa:	4b6e      	ldr	r3, [pc, #440]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 80011fc:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 80011fe:	461e      	mov	r6, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001200:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 8001202:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001204:	61fb      	str	r3, [r7, #28]
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001206:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 8001208:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 800120a:	61bb      	str	r3, [r7, #24]
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 800120c:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 800120e:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001210:	617b      	str	r3, [r7, #20]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001212:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 8001214:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001216:	613b      	str	r3, [r7, #16]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001218:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 800121a:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 800121c:	60fb      	str	r3, [r7, #12]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 800121e:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <APP_THREAD_SendCoapMsg+0x218>)
 8001220:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b61      	ldr	r3, [pc, #388]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4b60      	ldr	r3, [pc, #384]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 800122a:	6819      	ldr	r1, [r3, #0]
			sensor_data.humidity, sensor_data.temp_aux, ret, rssi,state);
 800122c:	4b5f      	ldr	r3, [pc, #380]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 800122e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d,%d,%d,%d", device_type,
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	f997 0076 	ldrsb.w	r0, [r7, #118]	; 0x76
 8001238:	f997 4075 	ldrsb.w	r4, [r7, #117]	; 0x75
 800123c:	f997 3069 	ldrsb.w	r3, [r7, #105]	; 0x69
 8001240:	930d      	str	r3, [sp, #52]	; 0x34
 8001242:	940c      	str	r4, [sp, #48]	; 0x30
 8001244:	900b      	str	r0, [sp, #44]	; 0x2c
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	900a      	str	r0, [sp, #40]	; 0x28
 800124a:	9109      	str	r1, [sp, #36]	; 0x24
 800124c:	9208      	str	r2, [sp, #32]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	9207      	str	r2, [sp, #28]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	9206      	str	r2, [sp, #24]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	9205      	str	r2, [sp, #20]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	9204      	str	r2, [sp, #16]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	9203      	str	r2, [sp, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	9302      	str	r3, [sp, #8]
 8001266:	9601      	str	r6, [sp, #4]
 8001268:	9500      	str	r5, [sp, #0]
 800126a:	4663      	mov	r3, ip
 800126c:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <APP_THREAD_SendCoapMsg+0x21c>)
 800126e:	21fe      	movs	r1, #254	; 0xfe
 8001270:	4852      	ldr	r0, [pc, #328]	; (80013bc <APP_THREAD_SendCoapMsg+0x220>)
 8001272:	f009 fd45 	bl	800ad00 <sniprintf>
	buf = tmp_tx_buf;
 8001276:	4b51      	ldr	r3, [pc, #324]	; (80013bc <APP_THREAD_SendCoapMsg+0x220>)
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d", sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
 800127a:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	494a      	ldr	r1, [pc, #296]	; (80013ac <APP_THREAD_SendCoapMsg+0x210>)
 8001284:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001288:	9101      	str	r1, [sp, #4]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <APP_THREAD_SendCoapMsg+0x224>)
 8001290:	2101      	movs	r1, #1
 8001292:	2000      	movs	r0, #0
 8001294:	f002 fc80 	bl	8003b98 <logApplication>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8001298:	2101      	movs	r1, #1
 800129a:	4843      	ldr	r0, [pc, #268]	; (80013a8 <APP_THREAD_SendCoapMsg+0x20c>)
 800129c:	f003 fafa 	bl	8004894 <HAL_GPIO_TogglePin>
	otError error = OT_ERROR_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	otMessage *message = NULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	673b      	str	r3, [r7, #112]	; 0x70
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	// Default parameters
	otCoapType coapType =
			require_ack ?
					OT_COAP_TYPE_CONFIRMABLE : OT_COAP_TYPE_NON_CONFIRMABLE;
 80012b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012b4:	f083 0301 	eor.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
	otCoapType coapType =
 80012ba:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	otIp6Address coapDestinationIp = brAddr;
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <APP_THREAD_SendCoapMsg+0x228>)
 80012c0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80012c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(NULL, NULL);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f006 ff5a 	bl	8008186 <otCoapNewMessage>
 80012d2:	6738      	str	r0, [r7, #112]	; 0x70

	otCoapMessageInit(message, coapType, OT_COAP_CODE_PUT);
 80012d4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80012d8:	2203      	movs	r2, #3
 80012da:	4619      	mov	r1, r3
 80012dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80012de:	f006 ff80 	bl	80081e2 <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 80012e2:	2102      	movs	r1, #2
 80012e4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80012e6:	f007 f826 	bl	8008336 <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 80012ea:	4937      	ldr	r1, [pc, #220]	; (80013c8 <APP_THREAD_SendCoapMsg+0x22c>)
 80012ec:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80012ee:	f007 f852 	bl	8008396 <otCoapMessageAppendUriPathOptions>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	payloadLength = strlen(buf);
 80012f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012fa:	f7fe ff4b 	bl	8000194 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if (payloadLength > 0) {
 8001304:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <APP_THREAD_SendCoapMsg+0x17c>
		error = otCoapMessageSetPayloadMarker(message);
 800130c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800130e:	f007 f874 	bl	80083fa <otCoapMessageSetPayloadMarker>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	// Embed content into message if given
	if (payloadLength > 0) {
 8001318:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800131c:	2b00      	cmp	r3, #0
 800131e:	d009      	beq.n	8001334 <APP_THREAD_SendCoapMsg+0x198>
		error = otMessageAppend(message, buf, payloadLength);
 8001320:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001324:	461a      	mov	r2, r3
 8001326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001328:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800132a:	f007 fbe6 	bl	8008afa <otMessageAppend>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 8001334:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001338:	222c      	movs	r2, #44	; 0x2c
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f009 fbe7 	bl	800ab10 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 8001342:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800134c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8001350:	f241 6333 	movw	r3, #5683	; 0x1633
 8001354:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	if(coapConnectionEstablished) {
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <APP_THREAD_SendCoapMsg+0x230>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d012      	beq.n	8001386 <APP_THREAD_SendCoapMsg+0x1ea>
		error = otCoapSendRequestWithParameters(NULL, message, &messageInfo, NULL,
 8001360:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001364:	2300      	movs	r3, #0
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	2300      	movs	r3, #0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001370:	2000      	movs	r0, #0
 8001372:	f007 f929 	bl	80085c8 <otCoapSendRequestWithParameters>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				NULL,
				NULL);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <APP_THREAD_SendCoapMsg+0x20c>)
 8001382:	f003 fa6f 	bl	8004864 <HAL_GPIO_WritePin>
	}


	if ((error != OT_ERROR_NONE) && (message != NULL)) {
 8001386:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <APP_THREAD_SendCoapMsg+0x1fe>
 800138e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <APP_THREAD_SendCoapMsg+0x1fe>
		otMessageFree(message);
 8001394:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001396:	f007 fb53 	bl	8008a40 <otMessageFree>
	}
	sht4x_measure();
 800139a:	f7ff f8e5 	bl	8000568 <sht4x_measure>
}
 800139e:	bf00      	nop
 80013a0:	377c      	adds	r7, #124	; 0x7c
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	48000800 	.word	0x48000800
 80013ac:	20000590 	.word	0x20000590
 80013b0:	20000594 	.word	0x20000594
 80013b4:	2000022c 	.word	0x2000022c
 80013b8:	0800bc04 	.word	0x0800bc04
 80013bc:	200000fc 	.word	0x200000fc
 80013c0:	0800bc2c 	.word	0x0800bc2c
 80013c4:	2000021c 	.word	0x2000021c
 80013c8:	200001fc 	.word	0x200001fc
 80013cc:	20000234 	.word	0x20000234

080013d0 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200000ec 	.word	0x200000ec

080013f0 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	330c      	adds	r3, #12
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200000ec 	.word	0x200000ec

08001408 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	330b      	adds	r3, #11
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	200000ec 	.word	0x200000ec

08001420 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	330b      	adds	r3, #11
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	200000f0 	.word	0x200000f0

08001438 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <Ot_Cmd_Transfer_Common+0x44>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001448:	725a      	strb	r2, [r3, #9]
 800144a:	2200      	movs	r2, #0
 800144c:	f042 0202 	orr.w	r2, r2, #2
 8001450:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <Ot_Cmd_Transfer_Common+0x44>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	330c      	adds	r3, #12
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	3302      	adds	r3, #2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <Ot_Cmd_Transfer_Common+0x44>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 800146a:	f008 fe39 	bl	800a0e0 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800146e:	f000 f834 	bl	80014da <Wait_Getting_Ack_From_M0>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000ec 	.word	0x200000ec

08001480 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 8001484:	f7ff ffd8 	bl	8001438 <Ot_Cmd_Transfer_Common>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8001494:	f000 f828 	bl	80014e8 <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <TL_OT_CmdEvtReceived+0x1c>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000248 	.word	0x20000248

080014ac <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <TL_THREAD_NotReceived+0x1c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80014ba:	f000 f81d 	bl	80014f8 <Receive_Notification_From_M0>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000f0 	.word	0x200000f0

080014cc <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80014d0:	2004      	movs	r0, #4
 80014d2:	f009 f983 	bl	800a7dc <UTIL_SEQ_WaitEvt>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}

080014da <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 80014de:	2002      	movs	r0, #2
 80014e0:	f009 f97c 	bl	800a7dc <UTIL_SEQ_WaitEvt>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 80014ec:	2002      	movs	r0, #2
 80014ee:	f009 f955 	bl	800a79c <UTIL_SEQ_SetEvt>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <Receive_Notification_From_M0+0x1c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <Receive_Notification_From_M0+0x1c>)
 8001504:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 8001506:	2100      	movs	r1, #0
 8001508:	2001      	movs	r0, #1
 800150a:	f009 f91b 	bl	800a744 <UTIL_SEQ_SetTask>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000f4 	.word	0x200000f4

08001518 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800151c:	f008 fdfc 	bl	800a118 <TL_THREAD_CliSendAck>

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <APP_THREAD_TL_THREAD_INIT+0x28>)
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 800153c:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001540:	4a08      	ldr	r2, [pc, #32]	; (8001564 <APP_THREAD_TL_THREAD_INIT+0x30>)
 8001542:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8001548:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <APP_THREAD_TL_THREAD_INIT+0x28>)
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <APP_THREAD_TL_THREAD_INIT+0x38>)
 800154e:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001552:	f008 fda5 	bl	800a0a0 <TL_THREAD_Init>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20030028 	.word	0x20030028
 8001560:	200300e8 	.word	0x200300e8
 8001564:	200301f4 	.word	0x200301f4
 8001568:	20030300 	.word	0x20030300
 800156c:	2003040c 	.word	0x2003040c

08001570 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	7adb      	ldrb	r3, [r3, #11]
 8001580:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	330c      	adds	r3, #12
 8001586:	490b      	ldr	r1, [pc, #44]	; (80015b4 <TL_THREAD_CliNotReceived+0x44>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fdf9 	bl	8000180 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d009      	beq.n	80015a8 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f103 010c 	add.w	r1, r3, #12
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <TL_THREAD_CliNotReceived+0x48>)
 80015a0:	2002      	movs	r0, #2
 80015a2:	f001 fd07 	bl	8002fb4 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 80015a6:	e001      	b.n	80015ac <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 80015a8:	f7ff ffb6 	bl	8001518 <Send_CLI_Ack_For_OT>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	0800bc74 	.word	0x0800bc74
 80015b8:	080015bd 	.word	0x080015bd

080015bc <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 80015c0:	f7ff ffaa 	bl	8001518 <Send_CLI_Ack_For_OT>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00d      	beq.n	80015f0 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d904      	bls.n	80015e6 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80015dc:	2100      	movs	r1, #0
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fa72 	bl	8000ac8 <APP_THREAD_Error>
 80015e4:	e001      	b.n	80015ea <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80015e6:	f007 fb01 	bl	8008bec <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80015ea:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
  }
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200000f4 	.word	0x200000f4

080015f8 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <LL_PWR_EnableBootC2+0x1c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <LL_PWR_EnableBootC2+0x1c>)
 8001602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	58000400 	.word	0x58000400

08001618 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001622:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001626:	4905      	ldr	r1, [pc, #20]	; (800163c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	58000800 	.word	0x58000800

08001640 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800164a:	6a1a      	ldr	r2, [r3, #32]
 800164c:	4904      	ldr	r1, [pc, #16]	; (8001660 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4313      	orrs	r3, r2
 8001652:	620b      	str	r3, [r1, #32]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	58000800 	.word	0x58000800

08001664 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001672:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800167c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001688:	68fb      	ldr	r3, [r7, #12]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80016a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	605a      	str	r2, [r3, #4]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	609a      	str	r2, [r3, #8]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	609a      	str	r2, [r3, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	4013      	ands	r3, r2
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d101      	bne.n	80017f4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69da      	ldr	r2, [r3, #28]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4013      	ands	r3, r2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d101      	bne.n	800181e <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001830:	2102      	movs	r1, #2
 8001832:	482a      	ldr	r0, [pc, #168]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 8001834:	f7ff ffe5 	bl	8001802 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HW_IPCC_Rx_Handler+0x26>
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	43db      	mvns	r3, r3
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800184c:	f000 f8f8 	bl	8001a40 <HW_IPCC_SYS_EvtHandler>
 8001850:	e041      	b.n	80018d6 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8001852:	2104      	movs	r1, #4
 8001854:	4821      	ldr	r0, [pc, #132]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 8001856:	f7ff ffd4 	bl	8001802 <LL_C2_IPCC_IsActiveFlag_CHx>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <HW_IPCC_Rx_Handler+0x48>
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	43db      	mvns	r3, r3
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800186e:	f000 f937 	bl	8001ae0 <HW_IPCC_THREAD_NotEvtHandler>
 8001872:	e030      	b.n	80018d6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001874:	2110      	movs	r1, #16
 8001876:	4819      	ldr	r0, [pc, #100]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 8001878:	f7ff ffc3 	bl	8001802 <LL_C2_IPCC_IsActiveFlag_CHx>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HW_IPCC_Rx_Handler+0x6a>
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	43db      	mvns	r3, r3
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001890:	f000 f932 	bl	8001af8 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001894:	e01f      	b.n	80018d6 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001896:	2101      	movs	r1, #1
 8001898:	4810      	ldr	r0, [pc, #64]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 800189a:	f7ff ffb2 	bl	8001802 <LL_C2_IPCC_IsActiveFlag_CHx>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HW_IPCC_Rx_Handler+0x8a>
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80018b0:	f000 f88a 	bl	80019c8 <HW_IPCC_BLE_EvtHandler>
 80018b4:	e00f      	b.n	80018d6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80018b6:	2108      	movs	r1, #8
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 80018ba:	f7ff ffa2 	bl	8001802 <LL_C2_IPCC_IsActiveFlag_CHx>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HW_IPCC_Rx_Handler+0xac>
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HW_IPCC_Rx_Handler+0xb0>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80018d2:	f000 f95d 	bl	8001b90 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
}
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	58000c00 	.word	0x58000c00

080018e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018e4:	2102      	movs	r1, #2
 80018e6:	4822      	ldr	r0, [pc, #136]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 80018e8:	f7ff ff76 	bl	80017d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HW_IPCC_Tx_Handler+0x26>
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001900:	f000 f892 	bl	8001a28 <HW_IPCC_SYS_CmdEvtHandler>
 8001904:	e031      	b.n	800196a <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001906:	2104      	movs	r1, #4
 8001908:	4819      	ldr	r0, [pc, #100]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 800190a:	f7ff ff65 	bl	80017d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HW_IPCC_Tx_Handler+0x48>
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	43db      	mvns	r3, r3
 800191a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001922:	f000 f8d1 	bl	8001ac8 <HW_IPCC_OT_CmdEvtHandler>
 8001926:	e020      	b.n	800196a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001928:	2108      	movs	r1, #8
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 800192c:	f7ff ff54 	bl	80017d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HW_IPCC_Tx_Handler+0x6a>
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	43db      	mvns	r3, r3
 800193c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001944:	f000 f906 	bl	8001b54 <HW_IPCC_MM_FreeBufHandler>
 8001948:	e00f      	b.n	800196a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800194a:	2120      	movs	r1, #32
 800194c:	4808      	ldr	r0, [pc, #32]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 800194e:	f7ff ff43 	bl	80017d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HW_IPCC_Tx_Handler+0x8c>
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HW_IPCC_Tx_Handler+0x90>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	43db      	mvns	r3, r3
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001966:	f000 f83b 	bl	80019e0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800196a:	bf00      	nop
 800196c:	bf00      	nop
}
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58000c00 	.word	0x58000c00

08001974 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001978:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800197c:	f7ff fe8b 	bl	8001696 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001980:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001984:	f7ff fe5c 	bl	8001640 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001988:	f44f 7000 	mov.w	r0, #512	; 0x200
 800198c:	f7ff fe44 	bl	8001618 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001990:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001992:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001994:	f7ff fe30 	bl	80015f8 <LL_PWR_EnableBootC2>

  return;
 8001998:	bf00      	nop
}
 800199a:	bd80      	pop	{r7, pc}

0800199c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80019a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80019a4:	f7ff fe5e 	bl	8001664 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <HW_IPCC_Init+0x28>)
 80019aa:	f7ff fea0 	bl	80016ee <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HW_IPCC_Init+0x28>)
 80019b0:	f7ff fe8d 	bl	80016ce <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80019b4:	202c      	movs	r0, #44	; 0x2c
 80019b6:	f002 fb72 	bl	800409e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80019ba:	202d      	movs	r0, #45	; 0x2d
 80019bc:	f002 fb6f 	bl	800409e <HAL_NVIC_EnableIRQ>

  return;
 80019c0:	bf00      	nop
}
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	58000c00 	.word	0x58000c00

080019c8 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80019cc:	f008 fab0 	bl	8009f30 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80019d0:	2101      	movs	r1, #1
 80019d2:	4802      	ldr	r0, [pc, #8]	; (80019dc <HW_IPCC_BLE_EvtHandler+0x14>)
 80019d4:	f7ff fee3 	bl	800179e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80019d8:	bf00      	nop
}
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	58000c00 	.word	0x58000c00

080019e0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80019e4:	2120      	movs	r1, #32
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80019e8:	f7ff fea4 	bl	8001734 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80019ec:	f008 fad0 	bl	8009f90 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80019f0:	bf00      	nop
}
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58000c00 	.word	0x58000c00

080019f8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80019fc:	2102      	movs	r1, #2
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <HW_IPCC_SYS_Init+0x10>)
 8001a00:	f7ff feaa 	bl	8001758 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a04:	bf00      	nop
}
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58000c00 	.word	0x58000c00

08001a0c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a10:	2102      	movs	r1, #2
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a14:	f7ff fed1 	bl	80017ba <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4802      	ldr	r0, [pc, #8]	; (8001a24 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a1c:	f7ff fe77 	bl	800170e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001a20:	bf00      	nop
}
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	58000c00 	.word	0x58000c00

08001a28 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001a30:	f7ff fe80 	bl	8001734 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001a34:	f008 fafc 	bl	800a030 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001a38:	bf00      	nop
}
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	58000c00 	.word	0x58000c00

08001a40 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001a44:	f008 fb0a 	bl	800a05c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4802      	ldr	r0, [pc, #8]	; (8001a54 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001a4c:	f7ff fea7 	bl	800179e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001a50:	bf00      	nop
}
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	58000c00 	.word	0x58000c00

08001a58 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <HW_IPCC_THREAD_Init+0x18>)
 8001a60:	f7ff fe7a 	bl	8001758 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001a64:	2110      	movs	r1, #16
 8001a66:	4802      	ldr	r0, [pc, #8]	; (8001a70 <HW_IPCC_THREAD_Init+0x18>)
 8001a68:	f7ff fe76 	bl	8001758 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a6c:	bf00      	nop
}
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	58000c00 	.word	0x58000c00

08001a74 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4804      	ldr	r0, [pc, #16]	; (8001a8c <HW_IPCC_OT_SendCmd+0x18>)
 8001a7c:	f7ff fe9d 	bl	80017ba <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001a80:	2104      	movs	r1, #4
 8001a82:	4802      	ldr	r0, [pc, #8]	; (8001a8c <HW_IPCC_OT_SendCmd+0x18>)
 8001a84:	f7ff fe43 	bl	800170e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001a88:	bf00      	nop
}
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	58000c00 	.word	0x58000c00

08001a90 <HW_IPCC_THREAD_SendAck>:

  return;
}

void HW_IPCC_THREAD_SendAck( void )
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001a94:	2104      	movs	r1, #4
 8001a96:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <HW_IPCC_THREAD_SendAck+0x18>)
 8001a98:	f7ff fe81 	bl	800179e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <HW_IPCC_THREAD_SendAck+0x18>)
 8001aa0:	f7ff fe5a 	bl	8001758 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001aa4:	bf00      	nop
}
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	58000c00 	.word	0x58000c00

08001aac <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001ab4:	f7ff fe73 	bl	800179e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001ab8:	2110      	movs	r1, #16
 8001aba:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001abc:	f7ff fe4c 	bl	8001758 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001ac0:	bf00      	nop
}
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58000c00 	.word	0x58000c00

08001ac8 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001acc:	2104      	movs	r1, #4
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001ad0:	f7ff fe30 	bl	8001734 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001ad4:	f008 fb2e 	bl	800a134 <HW_IPCC_OT_CmdEvtNot>

  return;
 8001ad8:	bf00      	nop
}
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	58000c00 	.word	0x58000c00

08001ae0 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001ae8:	f7ff fe48 	bl	800177c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001aec:	f008 fb2e 	bl	800a14c <HW_IPCC_THREAD_EvtNot>

  return;
 8001af0:	bf00      	nop
}
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	58000c00 	.word	0x58000c00

08001af8 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001afc:	2110      	movs	r1, #16
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001b00:	f7ff fe3c 	bl	800177c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001b04:	f008 fb2e 	bl	800a164 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001b08:	bf00      	nop
}
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58000c00 	.word	0x58000c00

08001b10 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001b18:	2108      	movs	r1, #8
 8001b1a:	480c      	ldr	r0, [pc, #48]	; (8001b4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b1c:	f7ff fe5c 	bl	80017d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b30:	f7ff fded 	bl	800170e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001b34:	e006      	b.n	8001b44 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b3e:	f7ff fe3c 	bl	80017ba <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001b42:	bf00      	nop
}
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	58000c00 	.word	0x58000c00
 8001b50:	20000238 	.word	0x20000238

08001b54 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001b5c:	f7ff fdea 	bl	8001734 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b66:	2108      	movs	r1, #8
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001b6a:	f7ff fe26 	bl	80017ba <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001b6e:	bf00      	nop
}
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	58000c00 	.word	0x58000c00
 8001b78:	20000238 	.word	0x20000238

08001b7c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001b80:	2108      	movs	r1, #8
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <HW_IPCC_TRACES_Init+0x10>)
 8001b84:	f7ff fde8 	bl	8001758 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b88:	bf00      	nop
}
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58000c00 	.word	0x58000c00

08001b90 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001b94:	f008 fb78 	bl	800a288 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001b9c:	f7ff fdff 	bl	800179e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001ba0:	bf00      	nop
}
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58000c00 	.word	0x58000c00

08001ba8 <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	SensorQueueLL *ret = malloc(sizeof(SensorQueueLL));
 8001bae:	200c      	movs	r0, #12
 8001bb0:	f008 ff90 	bl	800aad4 <malloc>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	607b      	str	r3, [r7, #4]
	ret->front = NULL;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
	ret->rear = NULL;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
	ret->size = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	721a      	strb	r2, [r3, #8]
	return ret;
 8001bca:	687b      	ldr	r3, [r7, #4]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <update_sensor_LL>:

void update_sensor_LL(SensorQueueLL *ll, SensorData_t dat)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	4638      	mov	r0, r7
 8001bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	SensorDataNode *new = malloc(sizeof(SensorDataNode));
 8001be2:	2010      	movs	r0, #16
 8001be4:	f008 ff76 	bl	800aad4 <malloc>
 8001be8:	4603      	mov	r3, r0
 8001bea:	617b      	str	r3, [r7, #20]
	if(new == NULL) return;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d040      	beq.n	8001c74 <update_sensor_LL+0xa0>
	new->data = dat;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	463a      	mov	r2, r7
 8001bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	new->next = NULL;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
	if (ll->size == 0)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	7a1b      	ldrb	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <update_sensor_LL+0x4c>
	{
		ll->front = new;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	605a      	str	r2, [r3, #4]
		ll->size = 1;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	721a      	strb	r2, [r3, #8]
 8001c1e:	e021      	b.n	8001c64 <update_sensor_LL+0x90>
	}
	else
	{
		if (ll->size >= 10)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	7a1b      	ldrb	r3, [r3, #8]
 8001c24:	2b09      	cmp	r3, #9
 8001c26:	d910      	bls.n	8001c4a <update_sensor_LL+0x76>
		{
			SensorDataNode *del = ll->front;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
			ll->front = ll->front->next;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	601a      	str	r2, [r3, #0]
			free(del);
 8001c38:	6938      	ldr	r0, [r7, #16]
 8001c3a:	f008 ff53 	bl	800aae4 <free>
			ll->size--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	7a1b      	ldrb	r3, [r3, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	721a      	strb	r2, [r3, #8]
		}
		ll->rear->next = new;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	605a      	str	r2, [r3, #4]
		ll->size++;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	7a1b      	ldrb	r3, [r3, #8]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	721a      	strb	r2, [r3, #8]
	}
	APP_DBG("LL  size :%d\n",ll->size);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7a1b      	ldrb	r3, [r3, #8]
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <update_sensor_LL+0xa8>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f001 ff93 	bl	8003b98 <logApplication>
 8001c72:	e000      	b.n	8001c76 <update_sensor_LL+0xa2>
	if(new == NULL) return;
 8001c74:	bf00      	nop
}
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800bc78 	.word	0x0800bc78

08001c80 <app_algo_init>:

	return ret;
}

void app_algo_init(SensorData_t data)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 8001c8c:	f7ff ff8c 	bl	8001ba8 <create_sensor_LL>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <app_algo_init+0x38>)
 8001c94:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <app_algo_init+0x38>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <app_algo_init+0x38>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	4a02      	ldr	r2, [pc, #8]	; (8001cb8 <app_algo_init+0x38>)
 8001cae:	6093      	str	r3, [r2, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000023c 	.word	0x2000023c

08001cbc <app_algo_proc>:

eResFsm app_algo_proc(SensorData_t data, bool ext_sig_reset, int8_t *state)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	1d3c      	adds	r4, r7, #4
 8001cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cc8:	70fb      	strb	r3, [r7, #3]
	update_sensor_LL(fsm.data_hist, data);
 8001cca:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <app_algo_proc+0x128>)
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd2:	f7ff ff7f 	bl	8001bd4 <update_sensor_LL>
	*state = fsm.cur_state;
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <app_algo_proc+0x128>)
 8001cd8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	701a      	strb	r2, [r3, #0]
	if (ext_sig_reset)
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <app_algo_proc+0x34>
	{
		fsm.cur_state = STATE_INIT;
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <app_algo_proc+0x128>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e074      	b.n	8001dda <app_algo_proc+0x11e>
	}

	switch (fsm.cur_state)
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <app_algo_proc+0x128>)
 8001cf2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d86c      	bhi.n	8001dd6 <app_algo_proc+0x11a>
 8001cfc:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <app_algo_proc+0x48>)
 8001cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d02:	bf00      	nop
 8001d04:	08001dd1 	.word	0x08001dd1
 8001d08:	08001d1d 	.word	0x08001d1d
 8001d0c:	08001d31 	.word	0x08001d31
 8001d10:	08001d4d 	.word	0x08001d4d
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001da3 	.word	0x08001da3
	{
	case STATE_INIT:
	{
		fsm.cur_state = STATE_MEAS;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <app_algo_proc+0x128>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	711a      	strb	r2, [r3, #4]
		APP_DBG("FSM STATE INIT");
 8001d22:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <app_algo_proc+0x12c>)
 8001d24:	2101      	movs	r1, #1
 8001d26:	2000      	movs	r0, #0
 8001d28:	f001 ff36 	bl	8003b98 <logApplication>
		return RES_NONE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e054      	b.n	8001dda <app_algo_proc+0x11e>
	}
	case STATE_MEAS:
	{
		APP_DBG("FSM STATE MEAS");
 8001d30:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <app_algo_proc+0x130>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2000      	movs	r0, #0
 8001d36:	f001 ff2f 	bl	8003b98 <logApplication>
		if (data.humidity > HUMIDITY_TRIG_TH_POS)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a2c      	ldr	r2, [pc, #176]	; (8001df0 <app_algo_proc+0x134>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	dd02      	ble.n	8001d48 <app_algo_proc+0x8c>
			fsm.cur_state = STATE_PRETRIG;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <app_algo_proc+0x128>)
 8001d44:	2202      	movs	r2, #2
 8001d46:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e046      	b.n	8001dda <app_algo_proc+0x11e>
	}
	case STATE_PRETRIG:
	{
		APP_DBG("FSM STATE PRETRIG\n");
 8001d4c:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <app_algo_proc+0x138>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2000      	movs	r0, #0
 8001d52:	f001 ff21 	bl	8003b98 <logApplication>
		if (data.humidity < HUMIDITY_TRIG_TH_POS)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <app_algo_proc+0x134>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	da04      	bge.n	8001d68 <app_algo_proc+0xac>
		{
			fsm.cur_state = STATE_MEAS;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <app_algo_proc+0x128>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e038      	b.n	8001dda <app_algo_proc+0x11e>
		}
		int32_t t, h;
		//uint8_t ct = traverse_sensor_LL(fsm.data_hist, true, -1, HUMIDITY_TRIG_TH_POS, &t, &h);
		uint8_t ct = 5;
 8001d68:	2305      	movs	r3, #5
 8001d6a:	75fb      	strb	r3, [r7, #23]
		APP_DBG("Pretrig ctr:%d", ct);
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <app_algo_proc+0x13c>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	2000      	movs	r0, #0
 8001d74:	f001 ff10 	bl	8003b98 <logApplication>
		if (ct >= HUMIDITY_SAMPLES_TRIG_TH)
 8001d78:	2205      	movs	r2, #5
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d304      	bcc.n	8001d8a <app_algo_proc+0xce>
		{
			fsm.cur_state = STATE_HEATING;
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <app_algo_proc+0x128>)
 8001d82:	2203      	movs	r2, #3
 8001d84:	711a      	strb	r2, [r3, #4]
			return RES_HEAT;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e027      	b.n	8001dda <app_algo_proc+0x11e>
		}
		return RES_NONE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e025      	b.n	8001dda <app_algo_proc+0x11e>
	}
	case STATE_HEATING:
	{
		APP_DBG("FSM STATE HEATING");
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <app_algo_proc+0x140>)
 8001d90:	2101      	movs	r1, #1
 8001d92:	2000      	movs	r0, #0
 8001d94:	f001 ff00 	bl	8003b98 <logApplication>
		fsm.cur_state = STATE_COOLDOWN;
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <app_algo_proc+0x128>)
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e01b      	b.n	8001dda <app_algo_proc+0x11e>
	}
	case STATE_COOLDOWN:
	{
		APP_DBG("FSM STATE COOLDOWN");
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <app_algo_proc+0x144>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	2000      	movs	r0, #0
 8001da8:	f001 fef6 	bl	8003b98 <logApplication>
		if(data.temp_main - data.temp_aux < fsm.baseline_temp_delta + TEMPERATURE_COOLDOWN_MAX_ALLOWED_DELTA)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001db2:	1a9a      	subs	r2, r3, r2
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <app_algo_proc+0x128>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001dbc:	440b      	add	r3, r1
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	da04      	bge.n	8001dcc <app_algo_proc+0x110>
		{
			fsm.cur_state = STATE_MEAS;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <app_algo_proc+0x128>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e006      	b.n	8001dda <app_algo_proc+0x11e>
		}
		else
		{
			return RES_INVL;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e004      	b.n	8001dda <app_algo_proc+0x11e>
		}
	}
	case STATE_UNDEF:
		return RES_FAULT;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e001      	b.n	8001dda <app_algo_proc+0x11e>
	}
	return RES_FAULT;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000023c 	.word	0x2000023c
 8001de8:	0800bca0 	.word	0x0800bca0
 8001dec:	0800bcb0 	.word	0x0800bcb0
 8001df0:	00013880 	.word	0x00013880
 8001df4:	0800bcc0 	.word	0x0800bcc0
 8001df8:	0800bcd4 	.word	0x0800bcd4
 8001dfc:	0800bce4 	.word	0x0800bce4
 8001e00:	0800bcf8 	.word	0x0800bcf8

08001e04 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <LL_C2_PWR_SetPowerMode+0x28>)
 8001e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4905      	ldr	r1, [pc, #20]	; (8001e2c <LL_C2_PWR_SetPowerMode+0x28>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	58000400 	.word	0x58000400

08001e30 <LL_EXTI_EnableIT_32_63>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <LL_EXTI_EnableIT_32_63+0x24>)
 8001e3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e3e:	4905      	ldr	r1, [pc, #20]	; (8001e54 <LL_EXTI_EnableIT_32_63+0x24>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	58000800 	.word	0x58000800

08001e58 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001e66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e72:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	cafecafe 	.word	0xcafecafe

08001e94 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <LL_LPM_EnableSleep+0x1c>)
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <LL_LPM_EnableSleep+0x1c>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	6113      	str	r3, [r2, #16]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	22ff      	movs	r2, #255	; 0xff
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	22ca      	movs	r2, #202	; 0xca
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2253      	movs	r2, #83	; 0x53
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 0207 	bic.w	r2, r3, #7
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <MX_APPE_Config+0x18>)
 8001f42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f46:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001f48:	f000 f82c 	bl	8001fa4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001f4c:	f000 f831 	bl	8001fb2 <Config_HSE>

  return;
 8001f50:	bf00      	nop
}
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58004000 	.word	0x58004000

08001f58 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001f5c:	f000 f83d 	bl	8001fda <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001f60:	f000 f856 	bl	8002010 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <MX_APPE_Init+0x2c>)
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 fdb8 	bl	8002adc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //Init_Debug();
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f008 fa34 	bl	800a3dc <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001f74:	2101      	movs	r1, #1
 8001f76:	2001      	movs	r0, #1
 8001f78:	f008 fa60 	bl	800a43c <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001f7c:	f000 f856 	bl	800202c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001f80:	bf00      	nop
}
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000056c 	.word	0x2000056c

08001f88 <Init_Smps>:

void Init_Smps(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001f8c:	bf00      	nop
}
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <Init_Exti>:

void Init_Exti(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001f9a:	2050      	movs	r0, #80	; 0x50
 8001f9c:	f7ff ff48 	bl	8001e30 <LL_EXTI_EnableIT_32_63>

  return;
 8001fa0:	bf00      	nop
}
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001fa8:	bf00      	nop
}
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f008 f9d5 	bl	800a368 <OTP_Read>
 8001fbe:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	799b      	ldrb	r3, [r3, #6]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff44 	bl	8001e58 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
}
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <System_Init>:

static void System_Init(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  Init_Smps();
 8001fde:	f7ff ffd3 	bl	8001f88 <Init_Smps>

  Init_Exti();
 8001fe2:	f7ff ffd8 	bl	8001f96 <Init_Exti>

  Init_Rtc();
 8001fe6:	f000 f803 	bl	8001ff0 <Init_Rtc>

  return;
 8001fea:	bf00      	nop
}
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <Init_Rtc+0x1c>)
 8001ff6:	f7ff ff7e 	bl	8001ef6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <Init_Rtc+0x1c>)
 8001ffe:	f7ff ff8a 	bl	8001f16 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002002:	4802      	ldr	r0, [pc, #8]	; (800200c <Init_Rtc+0x1c>)
 8002004:	f7ff ff6a 	bl	8001edc <LL_RTC_EnableWriteProtection>

  return;
 8002008:	bf00      	nop
}
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40002800 	.word	0x40002800

08002010 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002014:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002018:	f7ff ff3c 	bl	8001e94 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800201c:	f008 f9cc 	bl	800a3b8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002020:	2004      	movs	r0, #4
 8002022:	f7ff feef 	bl	8001e04 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002026:	bf00      	nop
}
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002032:	f007 ff43 	bl	8009ebc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002036:	4a11      	ldr	r2, [pc, #68]	; (800207c <appe_Tl_Init+0x50>)
 8002038:	2100      	movs	r1, #0
 800203a:	2004      	movs	r0, #4
 800203c:	f008 fb60 	bl	800a700 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <appe_Tl_Init+0x54>)
 8002042:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <appe_Tl_Init+0x58>)
 8002046:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002048:	463b      	mov	r3, r7
 800204a:	4619      	mov	r1, r3
 800204c:	480e      	ldr	r0, [pc, #56]	; (8002088 <appe_Tl_Init+0x5c>)
 800204e:	f007 fcd3 	bl	80099f8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <appe_Tl_Init+0x60>)
 8002058:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <appe_Tl_Init+0x64>)
 800205c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800205e:	f240 533c 	movw	r3, #1340	; 0x53c
 8002062:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	4618      	mov	r0, r3
 800206a:	f008 f887 	bl	800a17c <TL_MM_Init>

  TL_Enable();
 800206e:	f007 ff1e 	bl	8009eae <TL_Enable>

  return;
 8002072:	bf00      	nop
}
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	08009a31 	.word	0x08009a31
 8002080:	20030a54 	.word	0x20030a54
 8002084:	08002095 	.word	0x08002095
 8002088:	080020ab 	.word	0x080020ab
 800208c:	20030b60 	.word	0x20030b60
 8002090:	20030518 	.word	0x20030518

08002094 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800209e:	bf00      	nop
}
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	330b      	adds	r3, #11
 80020b8:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80020c4:	d004      	beq.n	80020d0 <APPE_SysUserEvtRx+0x26>
 80020c6:	f249 2201 	movw	r2, #37377	; 0x9201
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80020ce:	e008      	b.n	80020e2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 80020d0:	f000 f834 	bl	800213c <APPE_SysEvtReadyProcessing>
         break;
 80020d4:	e005      	b.n	80020e2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	789b      	ldrb	r3, [r3, #2]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f806 	bl	80020ec <APPE_SysEvtError>
         break;
 80020e0:	bf00      	nop
  }
  return;
 80020e2:	bf00      	nop
}
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b7d      	cmp	r3, #125	; 0x7d
 80020fa:	d002      	beq.n	8002102 <APPE_SysEvtError+0x16>
 80020fc:	2b7e      	cmp	r3, #126	; 0x7e
 80020fe:	d006      	beq.n	800210e <APPE_SysEvtError+0x22>
 8002100:	e00b      	b.n	800211a <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <APPE_SysEvtError+0x44>)
 8002104:	2101      	movs	r1, #1
 8002106:	2000      	movs	r0, #0
 8002108:	f001 fd46 	bl	8003b98 <logApplication>
       break;
 800210c:	e00c      	b.n	8002128 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <APPE_SysEvtError+0x48>)
 8002110:	2101      	movs	r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	f001 fd40 	bl	8003b98 <logApplication>
       break;
 8002118:	e006      	b.n	8002128 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <APPE_SysEvtError+0x4c>)
 800211e:	2101      	movs	r1, #1
 8002120:	2000      	movs	r0, #0
 8002122:	f001 fd39 	bl	8003b98 <logApplication>
       break;
 8002126:	bf00      	nop
  }
  return;
 8002128:	bf00      	nop
}
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800bd0c 	.word	0x0800bd0c
 8002134:	0800bd30 	.word	0x0800bd30
 8002138:	0800bd50 	.word	0x0800bd50

0800213c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8002140:	f008 f890 	bl	800a264 <TL_TRACES_Init>

  APP_THREAD_Init();
 8002144:	f7fe fc74 	bl	8000a30 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002148:	2100      	movs	r1, #0
 800214a:	2001      	movs	r0, #1
 800214c:	f008 f946 	bl	800a3dc <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002150:	2100      	movs	r1, #0
 8002152:	2001      	movs	r0, #1
 8002154:	f008 f972 	bl	800a43c <UTIL_LPM_SetOffMode>
  return;
 8002158:	bf00      	nop
}
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f001 fdec 	bl	8003d40 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d00a      	beq.n	800218c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002176:	f001 fdfb 	bl	8003d70 <HAL_GetTickFreq>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002184:	e002      	b.n	800218c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002186:	f7ff fe99 	bl	8001ebc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800218a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800218c:	f001 fdd8 	bl	8003d40 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f4      	bhi.n	8002186 <HAL_Delay+0x2a>
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80021aa:	f04f 30ff 	mov.w	r0, #4294967295
 80021ae:	f008 f9ab 	bl	800a508 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80021ba:	f008 f96f 	bl	800a49c <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80021be:	bf00      	nop
}
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d003      	beq.n	80021dc <UTIL_SEQ_EvtIdle+0x18>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d00c      	beq.n	80021f4 <UTIL_SEQ_EvtIdle+0x30>
 80021da:	e012      	b.n	8002202 <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <UTIL_SEQ_EvtIdle+0x50>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d103      	bne.n	80021ec <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f008 f98f 	bl	800a508 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 80021ea:	e00f      	b.n	800220c <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f008 f98b 	bl	800a508 <UTIL_SEQ_Run>
    break;
 80021f2:	e00b      	b.n	800220c <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80021f4:	2004      	movs	r0, #4
 80021f6:	f008 fad1 	bl	800a79c <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f008 f984 	bl	800a508 <UTIL_SEQ_Run>
    break;
 8002200:	e004      	b.n	800220c <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002202:	f04f 30ff 	mov.w	r0, #4294967295
 8002206:	f008 f97f 	bl	800a508 <UTIL_SEQ_Run>
    break;
 800220a:	bf00      	nop
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000248 	.word	0x20000248

08002218 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8002220:	2100      	movs	r1, #0
 8002222:	2004      	movs	r0, #4
 8002224:	f008 fa8e 	bl	800a744 <UTIL_SEQ_SetTask>
  return;
 8002228:	bf00      	nop
}
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8002238:	2001      	movs	r0, #1
 800223a:	f008 faaf 	bl	800a79c <UTIL_SEQ_SetEvt>
  return;
 800223e:	bf00      	nop
}
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800224e:	2001      	movs	r0, #1
 8002250:	f008 fac4 	bl	800a7dc <UTIL_SEQ_WaitEvt>
  return;
 8002254:	bf00      	nop
}
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f007 ffc5 	bl	800a1f4 <TL_MM_EvtDone>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002282:	2101      	movs	r1, #1
 8002284:	2000      	movs	r0, #0
 8002286:	f001 fc87 	bl	8003b98 <logApplication>
  switch(GPIO_Pin)
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d003      	beq.n	800229a <HAL_GPIO_EXTI_Callback+0x26>
 8002292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002296:	d005      	beq.n	80022a4 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8002298:	e005      	b.n	80022a6 <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 800229a:	2101      	movs	r1, #1
 800229c:	2008      	movs	r0, #8
 800229e:	f008 fa51 	bl	800a744 <UTIL_SEQ_SetTask>
        break;
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_EXTI_Callback+0x32>
        break;
 80022a4:	bf00      	nop
  }
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	0800bd70 	.word	0x0800bd70

080022b4 <LL_EXTI_EnableIT_0_31>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80022be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022c2:	4905      	ldr	r1, [pc, #20]	; (80022d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	58000800 	.word	0x58000800

080022dc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	58000800 	.word	0x58000800

08002300 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <ReadRtcSsrValue+0x3c>)
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	b29b      	uxth	r3, r3
 800230c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <ReadRtcSsrValue+0x3c>)
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	b29b      	uxth	r3, r3
 8002314:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002316:	e005      	b.n	8002324 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <ReadRtcSsrValue+0x3c>)
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	b29b      	uxth	r3, r3
 8002322:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d1f5      	bne.n	8002318 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800232c:	683b      	ldr	r3, [r7, #0]
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40002800 	.word	0x40002800

08002340 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	460a      	mov	r2, r1
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	4613      	mov	r3, r2
 800234e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002350:	79ba      	ldrb	r2, [r7, #6]
 8002352:	491d      	ldr	r1, [pc, #116]	; (80023c8 <LinkTimerAfter+0x88>)
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	3315      	adds	r3, #21
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d009      	beq.n	800237e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <LinkTimerAfter+0x88>)
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3314      	adds	r3, #20
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	4911      	ldr	r1, [pc, #68]	; (80023c8 <LinkTimerAfter+0x88>)
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3315      	adds	r3, #21
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	490c      	ldr	r1, [pc, #48]	; (80023c8 <LinkTimerAfter+0x88>)
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	3314      	adds	r3, #20
 80023a2:	79ba      	ldrb	r2, [r7, #6]
 80023a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80023a6:	79ba      	ldrb	r2, [r7, #6]
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <LinkTimerAfter+0x88>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3315      	adds	r3, #21
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	701a      	strb	r2, [r3, #0]

  return;
 80023ba:	bf00      	nop
}
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000024c 	.word	0x2000024c

080023cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	460a      	mov	r2, r1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	4613      	mov	r3, r2
 80023da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <LinkTimerBefore+0xb8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	79ba      	ldrb	r2, [r7, #6]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d032      	beq.n	800244e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80023e8:	79ba      	ldrb	r2, [r7, #6]
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <LinkTimerBefore+0xbc>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3314      	adds	r3, #20
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	4922      	ldr	r1, [pc, #136]	; (8002488 <LinkTimerBefore+0xbc>)
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	3315      	adds	r3, #21
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002410:	79fa      	ldrb	r2, [r7, #7]
 8002412:	491d      	ldr	r1, [pc, #116]	; (8002488 <LinkTimerBefore+0xbc>)
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3315      	adds	r3, #21
 8002420:	79ba      	ldrb	r2, [r7, #6]
 8002422:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002424:	79fa      	ldrb	r2, [r7, #7]
 8002426:	4918      	ldr	r1, [pc, #96]	; (8002488 <LinkTimerBefore+0xbc>)
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	3314      	adds	r3, #20
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002438:	79ba      	ldrb	r2, [r7, #6]
 800243a:	4913      	ldr	r1, [pc, #76]	; (8002488 <LinkTimerBefore+0xbc>)
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	3314      	adds	r3, #20
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800244c:	e014      	b.n	8002478 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800244e:	79fa      	ldrb	r2, [r7, #7]
 8002450:	490d      	ldr	r1, [pc, #52]	; (8002488 <LinkTimerBefore+0xbc>)
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	3315      	adds	r3, #21
 800245e:	79ba      	ldrb	r2, [r7, #6]
 8002460:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002462:	79ba      	ldrb	r2, [r7, #6]
 8002464:	4908      	ldr	r1, [pc, #32]	; (8002488 <LinkTimerBefore+0xbc>)
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	3314      	adds	r3, #20
 8002472:	79fa      	ldrb	r2, [r7, #7]
 8002474:	701a      	strb	r2, [r3, #0]
  return;
 8002476:	bf00      	nop
}
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	200002dc 	.word	0x200002dc
 8002488:	2000024c 	.word	0x2000024c

0800248c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <linkTimer+0x144>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b06      	cmp	r3, #6
 800249e:	d118      	bne.n	80024d2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <linkTimer+0x144>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <linkTimer+0x148>)
 80024a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80024aa:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <linkTimer+0x144>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	4949      	ldr	r1, [pc, #292]	; (80025d8 <linkTimer+0x14c>)
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3315      	adds	r3, #21
 80024c0:	2206      	movs	r2, #6
 80024c2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80024c4:	4b45      	ldr	r3, [pc, #276]	; (80025dc <linkTimer+0x150>)
 80024c6:	f04f 32ff 	mov.w	r2, #4294967295
 80024ca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	81fb      	strh	r3, [r7, #14]
 80024d0:	e078      	b.n	80025c4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80024d2:	f000 f909 	bl	80026e8 <ReturnTimeElapsed>
 80024d6:	4603      	mov	r3, r0
 80024d8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	493e      	ldr	r1, [pc, #248]	; (80025d8 <linkTimer+0x14c>)
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3308      	adds	r3, #8
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	89fb      	ldrh	r3, [r7, #14]
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	4419      	add	r1, r3
 80024f2:	4839      	ldr	r0, [pc, #228]	; (80025d8 <linkTimer+0x14c>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4403      	add	r3, r0
 80024fe:	3308      	adds	r3, #8
 8002500:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	4934      	ldr	r1, [pc, #208]	; (80025d8 <linkTimer+0x14c>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3308      	adds	r3, #8
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <linkTimer+0x144>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	4a2e      	ldr	r2, [pc, #184]	; (80025d8 <linkTimer+0x14c>)
 8002520:	460b      	mov	r3, r1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	440b      	add	r3, r1
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	3308      	adds	r3, #8
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d337      	bcc.n	80025a4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002534:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <linkTimer+0x144>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800253a:	7b7a      	ldrb	r2, [r7, #13]
 800253c:	4926      	ldr	r1, [pc, #152]	; (80025d8 <linkTimer+0x14c>)
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	3315      	adds	r3, #21
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800254e:	e013      	b.n	8002578 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002550:	7b7a      	ldrb	r2, [r7, #13]
 8002552:	4921      	ldr	r1, [pc, #132]	; (80025d8 <linkTimer+0x14c>)
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	3315      	adds	r3, #21
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002564:	7b7a      	ldrb	r2, [r7, #13]
 8002566:	491c      	ldr	r1, [pc, #112]	; (80025d8 <linkTimer+0x14c>)
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3315      	adds	r3, #21
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002578:	7b3b      	ldrb	r3, [r7, #12]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d00b      	beq.n	8002596 <linkTimer+0x10a>
 800257e:	7b3a      	ldrb	r2, [r7, #12]
 8002580:	4915      	ldr	r1, [pc, #84]	; (80025d8 <linkTimer+0x14c>)
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	3308      	adds	r3, #8
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	d2dc      	bcs.n	8002550 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002596:	7b7a      	ldrb	r2, [r7, #13]
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fecf 	bl	8002340 <LinkTimerAfter>
 80025a2:	e00f      	b.n	80025c4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <linkTimer+0x144>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff0c 	bl	80023cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <linkTimer+0x144>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <linkTimer+0x148>)
 80025bc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <linkTimer+0x144>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80025c4:	89fb      	ldrh	r3, [r7, #14]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002dc 	.word	0x200002dc
 80025d4:	200002dd 	.word	0x200002dd
 80025d8:	2000024c 	.word	0x2000024c
 80025dc:	200002e0 	.word	0x200002e0

080025e0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	460a      	mov	r2, r1
 80025ea:	71fb      	strb	r3, [r7, #7]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80025f0:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <UnlinkTimer+0xf8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d111      	bne.n	8002620 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <UnlinkTimer+0xf8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <UnlinkTimer+0xfc>)
 8002604:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002606:	79fa      	ldrb	r2, [r7, #7]
 8002608:	4935      	ldr	r1, [pc, #212]	; (80026e0 <UnlinkTimer+0x100>)
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	3315      	adds	r3, #21
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <UnlinkTimer+0xf8>)
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e03e      	b.n	800269e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002620:	79fa      	ldrb	r2, [r7, #7]
 8002622:	492f      	ldr	r1, [pc, #188]	; (80026e0 <UnlinkTimer+0x100>)
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	3314      	adds	r3, #20
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002634:	79fa      	ldrb	r2, [r7, #7]
 8002636:	492a      	ldr	r1, [pc, #168]	; (80026e0 <UnlinkTimer+0x100>)
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3315      	adds	r3, #21
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002648:	79f9      	ldrb	r1, [r7, #7]
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	4824      	ldr	r0, [pc, #144]	; (80026e0 <UnlinkTimer+0x100>)
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4403      	add	r3, r0
 8002658:	3315      	adds	r3, #21
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2d8      	uxtb	r0, r3
 800265e:	4920      	ldr	r1, [pc, #128]	; (80026e0 <UnlinkTimer+0x100>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3315      	adds	r3, #21
 800266c:	4602      	mov	r2, r0
 800266e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002670:	7bbb      	ldrb	r3, [r7, #14]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d013      	beq.n	800269e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002676:	79f9      	ldrb	r1, [r7, #7]
 8002678:	7bba      	ldrb	r2, [r7, #14]
 800267a:	4819      	ldr	r0, [pc, #100]	; (80026e0 <UnlinkTimer+0x100>)
 800267c:	460b      	mov	r3, r1
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	440b      	add	r3, r1
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4403      	add	r3, r0
 8002686:	3314      	adds	r3, #20
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	b2d8      	uxtb	r0, r3
 800268c:	4914      	ldr	r1, [pc, #80]	; (80026e0 <UnlinkTimer+0x100>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	3314      	adds	r3, #20
 800269a:	4602      	mov	r2, r0
 800269c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800269e:	79fa      	ldrb	r2, [r7, #7]
 80026a0:	490f      	ldr	r1, [pc, #60]	; (80026e0 <UnlinkTimer+0x100>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	330c      	adds	r3, #12
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <UnlinkTimer+0xf8>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d107      	bne.n	80026cc <UnlinkTimer+0xec>
 80026bc:	79bb      	ldrb	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <UnlinkTimer+0x104>)
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	601a      	str	r2, [r3, #0]
  }

  return;
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
}
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	200002dc 	.word	0x200002dc
 80026dc:	200002dd 	.word	0x200002dd
 80026e0:	2000024c 	.word	0x2000024c
 80026e4:	200002e0 	.word	0x200002e0

080026e8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <ReturnTimeElapsed+0x70>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d026      	beq.n	8002746 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80026f8:	f7ff fe02 	bl	8002300 <ReadRtcSsrValue>
 80026fc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <ReturnTimeElapsed+0x70>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d805      	bhi.n	8002714 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <ReturnTimeElapsed+0x70>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	e00a      	b.n	800272a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <ReturnTimeElapsed+0x74>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <ReturnTimeElapsed+0x70>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	4413      	add	r3, r2
 8002728:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <ReturnTimeElapsed+0x78>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <ReturnTimeElapsed+0x7c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	40d3      	lsrs	r3, r2
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	e001      	b.n	800274a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	b29b      	uxth	r3, r3
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200002e0 	.word	0x200002e0
 800275c:	200002e8 	.word	0x200002e8
 8002760:	200002e6 	.word	0x200002e6
 8002764:	200002e5 	.word	0x200002e5

08002768 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d108      	bne.n	800278a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002778:	f7ff fdc2 	bl	8002300 <ReadRtcSsrValue>
 800277c:	4603      	mov	r3, r0
 800277e:	4a21      	ldr	r2, [pc, #132]	; (8002804 <RestartWakeupCounter+0x9c>)
 8002780:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002782:	2003      	movs	r0, #3
 8002784:	f001 fcb7 	bl	80040f6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002788:	e039      	b.n	80027fe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d803      	bhi.n	8002798 <RestartWakeupCounter+0x30>
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <RestartWakeupCounter+0xa0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d002      	beq.n	800279e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	3b01      	subs	r3, #1
 800279c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800279e:	bf00      	nop
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <RestartWakeupCounter+0xa4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f8      	beq.n	80027a0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <RestartWakeupCounter+0xa4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <RestartWakeupCounter+0xa4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80027be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <RestartWakeupCounter+0xa8>)
 80027c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80027c8:	2003      	movs	r0, #3
 80027ca:	f001 fca2 	bl	8004112 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <RestartWakeupCounter+0xac>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	0c1b      	lsrs	r3, r3, #16
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	490e      	ldr	r1, [pc, #56]	; (8002814 <RestartWakeupCounter+0xac>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80027de:	f7ff fd8f 	bl	8002300 <ReadRtcSsrValue>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <RestartWakeupCounter+0x9c>)
 80027e6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <RestartWakeupCounter+0xa4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <RestartWakeupCounter+0xa4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80027f8:	f3af 8000 	nop.w
  return ;
 80027fc:	bf00      	nop
}
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200002e0 	.word	0x200002e0
 8002808:	200002e5 	.word	0x200002e5
 800280c:	2000056c 	.word	0x2000056c
 8002810:	58000800 	.word	0x58000800
 8002814:	40002800 	.word	0x40002800

08002818 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800281e:	4b45      	ldr	r3, [pc, #276]	; (8002934 <RescheduleTimerList+0x11c>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d107      	bne.n	800283c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800282c:	bf00      	nop
 800282e:	4b42      	ldr	r3, [pc, #264]	; (8002938 <RescheduleTimerList+0x120>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f8      	bne.n	800282e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <RescheduleTimerList+0x120>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <RescheduleTimerList+0x120>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800284c:	4b3b      	ldr	r3, [pc, #236]	; (800293c <RescheduleTimerList+0x124>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	493a      	ldr	r1, [pc, #232]	; (8002940 <RescheduleTimerList+0x128>)
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3308      	adds	r3, #8
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002866:	f7ff ff3f 	bl	80026e8 <ReturnTimeElapsed>
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d205      	bcs.n	8002882 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800287a:	4b32      	ldr	r3, [pc, #200]	; (8002944 <RescheduleTimerList+0x12c>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e04d      	b.n	800291e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	4a30      	ldr	r2, [pc, #192]	; (8002948 <RescheduleTimerList+0x130>)
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	b292      	uxth	r2, r2
 800288a:	4413      	add	r3, r2
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4293      	cmp	r3, r2
 8002892:	d906      	bls.n	80028a2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002894:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <RescheduleTimerList+0x130>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <RescheduleTimerList+0x12c>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e03d      	b.n	800291e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <RescheduleTimerList+0x12c>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028b2:	e034      	b.n	800291e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	4922      	ldr	r1, [pc, #136]	; (8002940 <RescheduleTimerList+0x128>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3308      	adds	r3, #8
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d20a      	bcs.n	80028e2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	491c      	ldr	r1, [pc, #112]	; (8002940 <RescheduleTimerList+0x128>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3308      	adds	r3, #8
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e013      	b.n	800290a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	4916      	ldr	r1, [pc, #88]	; (8002940 <RescheduleTimerList+0x128>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3308      	adds	r3, #8
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	1ac9      	subs	r1, r1, r3
 80028fa:	4811      	ldr	r0, [pc, #68]	; (8002940 <RescheduleTimerList+0x128>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4403      	add	r3, r0
 8002906:	3308      	adds	r3, #8
 8002908:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <RescheduleTimerList+0x128>)
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	3315      	adds	r3, #21
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d1c7      	bne.n	80028b4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002924:	89bb      	ldrh	r3, [r7, #12]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff1e 	bl	8002768 <RestartWakeupCounter>

  return ;
 800292c:	bf00      	nop
}
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40002800 	.word	0x40002800
 8002938:	2000056c 	.word	0x2000056c
 800293c:	200002dc 	.word	0x200002dc
 8002940:	2000024c 	.word	0x2000024c
 8002944:	200002e4 	.word	0x200002e4
 8002948:	200002ea 	.word	0x200002ea

0800294c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002952:	f3ef 8310 	mrs	r3, PRIMASK
 8002956:	617b      	str	r3, [r7, #20]
  return(result);
 8002958:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	22ca      	movs	r2, #202	; 0xca
 8002966:	625a      	str	r2, [r3, #36]	; 0x24
 8002968:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2253      	movs	r2, #83	; 0x53
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002970:	4b55      	ldr	r3, [pc, #340]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	4b54      	ldr	r3, [pc, #336]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002980:	4b52      	ldr	r3, [pc, #328]	; (8002acc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002988:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800298c:	4950      	ldr	r1, [pc, #320]	; (8002ad0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	330c      	adds	r3, #12
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d16e      	bne.n	8002a80 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80029a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029a6:	494a      	ldr	r1, [pc, #296]	; (8002ad0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80029b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029ba:	4945      	ldr	r1, [pc, #276]	; (8002ad0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3310      	adds	r3, #16
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d04c      	beq.n	8002a70 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80029d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029da:	493d      	ldr	r1, [pc, #244]	; (8002ad0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	330d      	adds	r3, #13
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d124      	bne.n	8002a3a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80029f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fdf2 	bl	80025e0 <UnlinkTimer>
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002a08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a0c:	4930      	ldr	r1, [pc, #192]	; (8002ad0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	3304      	adds	r3, #4
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fa32 	bl	8002e8c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	22ca      	movs	r2, #202	; 0xca
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2253      	movs	r2, #83	; 0x53
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
 8002a38:	e012      	b.n	8002a60 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f383 8810 	msr	PRIMASK, r3
}
 8002a44:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f99a 	bl	8002d84 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	22ca      	movs	r2, #202	; 0xca
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2253      	movs	r2, #83	; 0x53
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	4619      	mov	r1, r3
 8002a68:	69b8      	ldr	r0, [r7, #24]
 8002a6a:	f000 fa95 	bl	8002f98 <HW_TS_RTC_Int_AppNot>
 8002a6e:	e022      	b.n	8002ab6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002a70:	f7ff fed2 	bl	8002818 <RescheduleTimerList>
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f383 8810 	msr	PRIMASK, r3
}
 8002a7e:	e01a      	b.n	8002ab6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002a80:	bf00      	nop
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f8      	beq.n	8002a82 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002aa0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002aa4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002abe:	bf00      	nop
}
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000056c 	.word	0x2000056c
 8002acc:	200002dc 	.word	0x200002dc
 8002ad0:	2000024c 	.word	0x2000024c
 8002ad4:	200002e4 	.word	0x200002e4
 8002ad8:	58000800 	.word	0x58000800

08002adc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ae8:	4b5e      	ldr	r3, [pc, #376]	; (8002c64 <HW_TS_Init+0x188>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	22ca      	movs	r2, #202	; 0xca
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24
 8002af0:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HW_TS_Init+0x188>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2253      	movs	r2, #83	; 0x53
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002af8:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <HW_TS_Init+0x18c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a5a      	ldr	r2, [pc, #360]	; (8002c68 <HW_TS_Init+0x18c>)
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002b04:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HW_TS_Init+0x18c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f1c3 0304 	rsb	r3, r3, #4
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4b55      	ldr	r3, [pc, #340]	; (8002c6c <HW_TS_Init+0x190>)
 8002b18:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002b1a:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HW_TS_Init+0x18c>)
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b22:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002b26:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	fa92 f2a2 	rbit	r2, r2
 8002b2e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	d101      	bne.n	8002b3e <HW_TS_Init+0x62>
  {
    return 32U;
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	e003      	b.n	8002b46 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	40d3      	lsrs	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <HW_TS_Init+0x194>)
 8002b50:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002b52:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <HW_TS_Init+0x18c>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HW_TS_Init+0x198>)
 8002b64:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HW_TS_Init+0x198>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	4a40      	ldr	r2, [pc, #256]	; (8002c70 <HW_TS_Init+0x194>)
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b78:	4a3c      	ldr	r2, [pc, #240]	; (8002c6c <HW_TS_Init+0x190>)
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	40d3      	lsrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d904      	bls.n	8002b94 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HW_TS_Init+0x19c>)
 8002b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	e003      	b.n	8002b9c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HW_TS_Init+0x19c>)
 8002b9a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002b9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ba0:	f7ff fb9c 	bl	80022dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ba4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ba8:	f7ff fb84 	bl	80022b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d13d      	bne.n	8002c2e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002bb2:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <HW_TS_Init+0x1a0>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HW_TS_Init+0x1a4>)
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbe:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e00c      	b.n	8002be0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002bc6:	7ffa      	ldrb	r2, [r7, #31]
 8002bc8:	492e      	ldr	r1, [pc, #184]	; (8002c84 <HW_TS_Init+0x1a8>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002bda:	7ffb      	ldrb	r3, [r7, #31]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	7ffb      	ldrb	r3, [r7, #31]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d9ef      	bls.n	8002bc6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HW_TS_Init+0x1ac>)
 8002be8:	2206      	movs	r2, #6
 8002bea:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HW_TS_Init+0x188>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <HW_TS_Init+0x188>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HW_TS_Init+0x188>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HW_TS_Init+0x188>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c0c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HW_TS_Init+0x1b0>)
 8002c10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c14:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002c16:	2003      	movs	r0, #3
 8002c18:	f001 fa7b 	bl	8004112 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HW_TS_Init+0x188>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HW_TS_Init+0x188>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e009      	b.n	8002c42 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HW_TS_Init+0x188>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f001 fa5a 	bl	80040f6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HW_TS_Init+0x188>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2103      	movs	r1, #3
 8002c4e:	2003      	movs	r0, #3
 8002c50:	f001 fa0b 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002c54:	2003      	movs	r0, #3
 8002c56:	f001 fa22 	bl	800409e <HAL_NVIC_EnableIRQ>

  return;
 8002c5a:	bf00      	nop
}
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000056c 	.word	0x2000056c
 8002c68:	40002800 	.word	0x40002800
 8002c6c:	200002e5 	.word	0x200002e5
 8002c70:	200002e6 	.word	0x200002e6
 8002c74:	200002e8 	.word	0x200002e8
 8002c78:	200002ea 	.word	0x200002ea
 8002c7c:	200002e4 	.word	0x200002e4
 8002c80:	200002e0 	.word	0x200002e0
 8002c84:	2000024c 	.word	0x2000024c
 8002c88:	200002dc 	.word	0x200002dc
 8002c8c:	58000800 	.word	0x58000800

08002c90 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b08b      	sub	sp, #44	; 0x2c
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8002caa:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cac:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002cae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb0:	b672      	cpsid	i
}
 8002cb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002cb4:	e004      	b.n	8002cc0 <HW_TS_Create+0x30>
  {
    loop++;
 8002cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d80c      	bhi.n	8002ce2 <HW_TS_Create+0x52>
 8002cc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ccc:	492c      	ldr	r1, [pc, #176]	; (8002d80 <HW_TS_Create+0xf0>)
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	330c      	adds	r3, #12
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e9      	bne.n	8002cb6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d038      	beq.n	8002d5c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002cea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002cee:	4924      	ldr	r1, [pc, #144]	; (8002d80 <HW_TS_Create+0xf0>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f383 8810 	msr	PRIMASK, r3
}
 8002d0a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002d0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d10:	491b      	ldr	r1, [pc, #108]	; (8002d80 <HW_TS_Create+0xf0>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002d22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d26:	4916      	ldr	r1, [pc, #88]	; (8002d80 <HW_TS_Create+0xf0>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	330d      	adds	r3, #13
 8002d34:	79fa      	ldrb	r2, [r7, #7]
 8002d36:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002d38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d3c:	4910      	ldr	r1, [pc, #64]	; (8002d80 <HW_TS_Create+0xf0>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d52:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d5a:	e008      	b.n	8002d6e <HW_TS_Create+0xde>
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	372c      	adds	r7, #44	; 0x2c
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	2000024c 	.word	0x2000024c

08002d84 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d94:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002d96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f001 f98c 	bl	80040ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	22ca      	movs	r2, #202	; 0xca
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
 8002daa:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2253      	movs	r2, #83	; 0x53
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	4930      	ldr	r1, [pc, #192]	; (8002e78 <HW_TS_Stop+0xf4>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d142      	bne.n	8002e50 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fc06 	bl	80025e0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002dd4:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <HW_TS_Stop+0xf8>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d12f      	bne.n	8002e40 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HW_TS_Stop+0xfc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dec:	d107      	bne.n	8002dfe <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002dee:	bf00      	nop
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f8      	bne.n	8002df0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002e0e:	bf00      	nop
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f8      	beq.n	8002e10 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e2e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HW_TS_Stop+0x100>)
 8002e32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e36:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002e38:	2003      	movs	r0, #3
 8002e3a:	f001 f96a 	bl	8004112 <HAL_NVIC_ClearPendingIRQ>
 8002e3e:	e007      	b.n	8002e50 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HW_TS_Stop+0x104>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	7cfa      	ldrb	r2, [r7, #19]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002e4c:	f7ff fce4 	bl	8002818 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <HW_TS_Stop+0xf0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f001 f920 	bl	800409e <HAL_NVIC_EnableIRQ>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f383 8810 	msr	PRIMASK, r3
}
 8002e68:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002e6a:	bf00      	nop
}
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2000056c 	.word	0x2000056c
 8002e78:	2000024c 	.word	0x2000024c
 8002e7c:	200002dc 	.word	0x200002dc
 8002e80:	40002800 	.word	0x40002800
 8002e84:	58000800 	.word	0x58000800
 8002e88:	200002dd 	.word	0x200002dd

08002e8c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002e98:	79fa      	ldrb	r2, [r7, #7]
 8002e9a:	493b      	ldr	r1, [pc, #236]	; (8002f88 <HW_TS_Start+0xfc>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d103      	bne.n	8002eb8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff66 	bl	8002d84 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002ec0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec2:	b672      	cpsid	i
}
 8002ec4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	f001 f8f7 	bl	80040ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HW_TS_Start+0x100>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	22ca      	movs	r2, #202	; 0xca
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HW_TS_Start+0x100>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2253      	movs	r2, #83	; 0x53
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	492a      	ldr	r1, [pc, #168]	; (8002f88 <HW_TS_Start+0xfc>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	330c      	adds	r3, #12
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002ef0:	79fa      	ldrb	r2, [r7, #7]
 8002ef2:	4925      	ldr	r1, [pc, #148]	; (8002f88 <HW_TS_Start+0xfc>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	3308      	adds	r3, #8
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002f04:	79fa      	ldrb	r2, [r7, #7]
 8002f06:	4920      	ldr	r1, [pc, #128]	; (8002f88 <HW_TS_Start+0xfc>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	3304      	adds	r3, #4
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fab6 	bl	800248c <linkTimer>
 8002f20:	4603      	mov	r3, r0
 8002f22:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HW_TS_Start+0x104>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HW_TS_Start+0x108>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	7c7a      	ldrb	r2, [r7, #17]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d002      	beq.n	8002f3c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002f36:	f7ff fc6f 	bl	8002818 <RescheduleTimerList>
 8002f3a:	e013      	b.n	8002f64 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002f3c:	79fa      	ldrb	r2, [r7, #7]
 8002f3e:	4912      	ldr	r1, [pc, #72]	; (8002f88 <HW_TS_Start+0xfc>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	8a7b      	ldrh	r3, [r7, #18]
 8002f50:	79fa      	ldrb	r2, [r7, #7]
 8002f52:	1ac9      	subs	r1, r1, r3
 8002f54:	480c      	ldr	r0, [pc, #48]	; (8002f88 <HW_TS_Start+0xfc>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4403      	add	r3, r0
 8002f60:	3308      	adds	r3, #8
 8002f62:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HW_TS_Start+0x100>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	22ff      	movs	r2, #255	; 0xff
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	f001 f896 	bl	800409e <HAL_NVIC_EnableIRQ>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002f7e:	bf00      	nop
}
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2000024c 	.word	0x2000024c
 8002f8c:	2000056c 	.word	0x2000056c
 8002f90:	200002dc 	.word	0x200002dc
 8002f94:	200002dd 	.word	0x200002dd

08002f98 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4798      	blx	r3

  return;
 8002faa:	bf00      	nop
}
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HW_UART_Transmit_IT+0x1e>
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d00d      	beq.n	8002fec <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002fd0:	e019      	b.n	8003006 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 8002fd2:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <HW_UART_Transmit_IT+0x5c>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HW_UART_Transmit_IT+0x60>)
 8002fda:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <HW_UART_Transmit_IT+0x64>)
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	89bb      	ldrh	r3, [r7, #12]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <HW_UART_Transmit_IT+0x60>)
 8002fe6:	f004 fa99 	bl	800751c <HAL_UART_Transmit_IT>
            break;
 8002fea:	e00c      	b.n	8003006 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002fec:	4a0b      	ldr	r2, [pc, #44]	; (800301c <HW_UART_Transmit_IT+0x68>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HW_UART_Transmit_IT+0x6c>)
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <HW_UART_Transmit_IT+0x70>)
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	89bb      	ldrh	r3, [r7, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	4808      	ldr	r0, [pc, #32]	; (8003020 <HW_UART_Transmit_IT+0x6c>)
 8003000:	f004 fa8c 	bl	800751c <HAL_UART_Transmit_IT>
            break;
 8003004:	bf00      	nop
    }

    return;
 8003006:	bf00      	nop
}
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200002ec 	.word	0x200002ec
 8003014:	200003c4 	.word	0x200003c4
 8003018:	40013800 	.word	0x40013800
 800301c:	200002f0 	.word	0x200002f0
 8003020:	20000330 	.word	0x20000330
 8003024:	40008000 	.word	0x40008000

08003028 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_UART_TxCpltCallback+0x4c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00a      	beq.n	8003050 <HAL_UART_TxCpltCallback+0x28>
 800303a:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <HAL_UART_TxCpltCallback+0x50>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10f      	bne.n	8003060 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <HAL_UART_TxCpltCallback+0x54>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_UART_TxCpltCallback+0x54>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4798      	blx	r3
            }
            break;
 800304e:	e009      	b.n	8003064 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_UART_TxCpltCallback+0x58>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_UART_TxCpltCallback+0x58>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4798      	blx	r3
            }
            break;
 800305e:	e003      	b.n	8003068 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8003060:	bf00      	nop
 8003062:	e002      	b.n	800306a <HAL_UART_TxCpltCallback+0x42>
            break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_UART_TxCpltCallback+0x42>
            break;
 8003068:	bf00      	nop
    }

    return;
 800306a:	bf00      	nop
}
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40008000 	.word	0x40008000
 8003078:	40013800 	.word	0x40013800
 800307c:	200002ec 	.word	0x200002ec
 8003080:	200002f0 	.word	0x200002f0

08003084 <LL_RCC_LSE_SetDriveCapability>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f023 0218 	bic.w	r2, r3, #24
 8003098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_AHB1_GRP1_EnableClock>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030d4:	68fb      	ldr	r3, [r7, #12]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_AHB2_GRP1_EnableClock>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4013      	ands	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_APB1_GRP1_EnableClock>:
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4313      	orrs	r3, r2
 800312a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800314c:	f000 fd8a 	bl	8003c64 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8003150:	f7fe fef4 	bl	8001f3c <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003154:	f000 f824 	bl	80031a0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8003158:	f000 f87e 	bl	8003258 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 800315c:	f000 f898 	bl	8003290 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003160:	f000 f95e 	bl	8003420 <MX_GPIO_Init>
	MX_DMA_Init();
 8003164:	f000 f942 	bl	80033ec <MX_DMA_Init>
	MX_RF_Init();
 8003168:	f000 f904 	bl	8003374 <MX_RF_Init>
	MX_RTC_Init();
 800316c:	f000 f90a 	bl	8003384 <MX_RTC_Init>
	MX_I2C1_Init();
 8003170:	f000 f8a2 	bl	80032b8 <MX_I2C1_Init>

	/*--[ Scanning Done ]--*/
	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8003174:	f7fe fef0 	bl	8001f58 <MX_APPE_Init>
	app_algo_init();
 8003178:	f7fe fd82 	bl	8001c80 <app_algo_init>

	sensirion_i2c_init(&hi2c1);
 800317c:	4807      	ldr	r0, [pc, #28]	; (800319c <main+0x54>)
 800317e:	f7fd f963 	bl	8000448 <sensirion_i2c_init>

	sht4x_enable_low_power_mode(1);
 8003182:	2001      	movs	r0, #1
 8003184:	f7fd fa2a 	bl	80005dc <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 8003188:	4804      	ldr	r0, [pc, #16]	; (800319c <main+0x54>)
 800318a:	f7fd fa49 	bl	8000620 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x04);
 800318e:	2004      	movs	r0, #4
 8003190:	f7fd fad8 	bl	8000744 <stts22h_temp_data_rate_set>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 8003194:	f7ff f807 	bl	80021a6 <MX_APPE_Process>
 8003198:	e7fc      	b.n	8003194 <main+0x4c>
 800319a:	bf00      	nop
 800319c:	20000518 	.word	0x20000518

080031a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b09a      	sub	sp, #104	; 0x68
 80031a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80031a6:	f107 0320 	add.w	r3, r7, #32
 80031aa:	2248      	movs	r2, #72	; 0x48
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f007 fcae 	bl	800ab10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]
 80031c2:	615a      	str	r2, [r3, #20]
 80031c4:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80031c6:	f002 f9e7 	bl	8005598 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff ff5a 	bl	8003084 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <SystemClock_Config+0xb4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d8:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <SystemClock_Config+0xb4>)
 80031da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <SystemClock_Config+0xb4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80031ec:	2307      	movs	r3, #7
 80031ee:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80031f6:	2301      	movs	r3, #1
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003204:	2300      	movs	r3, #0
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003208:	f107 0320 	add.w	r3, r7, #32
 800320c:	4618      	mov	r0, r3
 800320e:	f002 fdbd 	bl	8005d8c <HAL_RCC_OscConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <SystemClock_Config+0x7c>
		Error_Handler();
 8003218:	f000 f92c 	bl	8003474 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 800321c:	236f      	movs	r3, #111	; 0x6f
 800321e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003220:	2302      	movs	r3, #2
 8003222:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2101      	movs	r1, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f003 f919 	bl	8006474 <HAL_RCC_ClockConfig>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <SystemClock_Config+0xac>
		Error_Handler();
 8003248:	f000 f914 	bl	8003474 <Error_Handler>
	}
}
 800324c:	bf00      	nop
 800324e:	3768      	adds	r7, #104	; 0x68
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58000400 	.word	0x58000400

08003258 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b094      	sub	sp, #80	; 0x50
 800325c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800325e:	463b      	mov	r3, r7
 8003260:	2250      	movs	r2, #80	; 0x50
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f007 fc53 	bl	800ab10 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 800326a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800326e:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
	//PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
	// PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003276:	463b      	mov	r3, r7
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fd0c 	bl	8006c96 <HAL_RCCEx_PeriphCLKConfig>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <PeriphCommonClock_Config+0x30>
		Error_Handler();
 8003284:	f000 f8f6 	bl	8003474 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8003288:	bf00      	nop
 800328a:	3750      	adds	r7, #80	; 0x50
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_IPCC_Init+0x20>)
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <MX_IPCC_Init+0x24>)
 8003298:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <MX_IPCC_Init+0x20>)
 800329c:	f002 f8f6 	bl	800548c <HAL_IPCC_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_IPCC_Init+0x1a>
		Error_Handler();
 80032a6:	f000 f8e5 	bl	8003474 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200002f4 	.word	0x200002f4
 80032b4:	58000c00 	.word	0x58000c00

080032b8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 80032be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032c2:	f7ff ff27 	bl	8003114 <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80032c6:	2002      	movs	r0, #2
 80032c8:	f7ff ff0b 	bl	80030e2 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80032cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032d0:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80032d2:	2312      	movs	r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80032d6:	2301      	movs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032da:	2303      	movs	r3, #3
 80032dc:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80032de:	2304      	movs	r3, #4
 80032e0:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4820      	ldr	r0, [pc, #128]	; (8003368 <MX_I2C1_Init+0xb0>)
 80032e8:	f001 f94c 	bl	8004584 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <MX_I2C1_Init+0xb4>)
 80032ee:	4a20      	ldr	r2, [pc, #128]	; (8003370 <MX_I2C1_Init+0xb8>)
 80032f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 80032f2:	4b1e      	ldr	r3, [pc, #120]	; (800336c <MX_I2C1_Init+0xb4>)
 80032f4:	f640 6214 	movw	r2, #3604	; 0xe14
 80032f8:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <MX_I2C1_Init+0xb4>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <MX_I2C1_Init+0xb4>)
 8003302:	2201      	movs	r2, #1
 8003304:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003306:	4b19      	ldr	r3, [pc, #100]	; (800336c <MX_I2C1_Init+0xb4>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <MX_I2C1_Init+0xb4>)
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003312:	4b16      	ldr	r3, [pc, #88]	; (800336c <MX_I2C1_Init+0xb4>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <MX_I2C1_Init+0xb4>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <MX_I2C1_Init+0xb4>)
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003324:	4811      	ldr	r0, [pc, #68]	; (800336c <MX_I2C1_Init+0xb4>)
 8003326:	f001 fb0b 	bl	8004940 <HAL_I2C_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_I2C1_Init+0x7c>
		Error_Handler();
 8003330:	f000 f8a0 	bl	8003474 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8003334:	2100      	movs	r1, #0
 8003336:	480d      	ldr	r0, [pc, #52]	; (800336c <MX_I2C1_Init+0xb4>)
 8003338:	f001 fffe 	bl	8005338 <HAL_I2CEx_ConfigAnalogFilter>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8003342:	f000 f897 	bl	8003474 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003346:	2100      	movs	r1, #0
 8003348:	4808      	ldr	r0, [pc, #32]	; (800336c <MX_I2C1_Init+0xb4>)
 800334a:	f002 f840 	bl	80053ce <HAL_I2CEx_ConfigDigitalFilter>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_I2C1_Init+0xa0>
		Error_Handler();
 8003354:	f000 f88e 	bl	8003474 <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003358:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800335c:	f002 f884 	bl	8005468 <HAL_I2CEx_EnableFastModePlus>
}
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	48000400 	.word	0x48000400
 800336c:	20000518 	.word	0x20000518
 8003370:	40005400 	.word	0x40005400

08003374 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <MX_RTC_Init+0x60>)
 800338a:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <MX_RTC_Init+0x64>)
 800338c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <MX_RTC_Init+0x60>)
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <MX_RTC_Init+0x60>)
 8003396:	220f      	movs	r2, #15
 8003398:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <MX_RTC_Init+0x60>)
 800339c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80033a0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <MX_RTC_Init+0x60>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <MX_RTC_Init+0x60>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <MX_RTC_Init+0x60>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <MX_RTC_Init+0x60>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80033ba:	480a      	ldr	r0, [pc, #40]	; (80033e4 <MX_RTC_Init+0x60>)
 80033bc:	f003 fef2 	bl	80071a4 <HAL_RTC_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_RTC_Init+0x46>
		Error_Handler();
 80033c6:	f000 f855 	bl	8003474 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	4805      	ldr	r0, [pc, #20]	; (80033e4 <MX_RTC_Init+0x60>)
 80033d0:	f003 ffe8 	bl	80073a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80033da:	f000 f84b 	bl	8003474 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000056c 	.word	0x2000056c
 80033e8:	40002800 	.word	0x40002800

080033ec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80033f0:	2004      	movs	r0, #4
 80033f2:	f7ff fe5d 	bl	80030b0 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7ff fe5a 	bl	80030b0 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	200b      	movs	r0, #11
 8003402:	f000 fe32 	bl	800406a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003406:	200b      	movs	r0, #11
 8003408:	f000 fe49 	bl	800409e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	200c      	movs	r0, #12
 8003412:	f000 fe2a 	bl	800406a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003416:	200c      	movs	r0, #12
 8003418:	f000 fe41 	bl	800409e <HAL_NVIC_EnableIRQ>

}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}

08003420 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003426:	2004      	movs	r0, #4
 8003428:	f7ff fe5b 	bl	80030e2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	2001      	movs	r0, #1
 800342e:	f7ff fe58 	bl	80030e2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003432:	2002      	movs	r0, #2
 8003434:	f7ff fe55 	bl	80030e2 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003446:	2303      	movs	r3, #3
 8003448:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800344a:	2301      	movs	r3, #1
 800344c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4805      	ldr	r0, [pc, #20]	; (8003470 <MX_GPIO_Init+0x50>)
 800345c:	f001 f892 	bl	8004584 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003460:	2102      	movs	r1, #2
 8003462:	4803      	ldr	r0, [pc, #12]	; (8003470 <MX_GPIO_Init+0x50>)
 8003464:	f001 fa16 	bl	8004894 <HAL_GPIO_TogglePin>

}
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	48000800 	.word	0x48000800

08003474 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <LL_PWR_SetPowerMode>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <LL_PWR_SetPowerMode+0x24>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 0207 	bic.w	r2, r3, #7
 8003494:	4904      	ldr	r1, [pc, #16]	; (80034a8 <LL_PWR_SetPowerMode+0x24>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	58000400 	.word	0x58000400

080034ac <LL_C2_PWR_SetPowerMode>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80034b4:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	4905      	ldr	r1, [pc, #20]	; (80034d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	58000400 	.word	0x58000400

080034d8 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <LL_PWR_ClearFlag_WU+0x14>)
 80034de:	221f      	movs	r2, #31
 80034e0:	619a      	str	r2, [r3, #24]
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	58000400 	.word	0x58000400

080034f0 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003502:	d101      	bne.n	8003508 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	58000400 	.word	0x58000400

08003518 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <LL_PWR_IsActiveFlag_C2DS+0x24>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352a:	d101      	bne.n	8003530 <LL_PWR_IsActiveFlag_C2DS+0x18>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	58000400 	.word	0x58000400

08003540 <LL_RCC_HSE_Enable>:
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800354e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_HSE_IsReady>:
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003570:	d101      	bne.n	8003576 <LL_RCC_HSE_IsReady+0x18>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <LL_RCC_HSE_IsReady+0x1a>
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_RCC_HSI_Enable>:
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_RCC_HSI_IsReady>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d101      	bne.n	80035b8 <LL_RCC_HSI_IsReady+0x18>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <LL_RCC_HSI_IsReady+0x1a>
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_RCC_SetSysClkSource>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_RCC_GetSysClkSource>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4313      	orrs	r3, r2
 800361e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_LPM_EnableSleep>:
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <LL_LPM_EnableSleep+0x1c>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <LL_LPM_EnableSleep+0x1c>)
 8003636:	f023 0304 	bic.w	r3, r3, #4
 800363a:	6113      	str	r3, [r2, #16]
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <LL_LPM_EnableDeepSleep+0x1c>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <LL_LPM_EnableDeepSleep+0x1c>)
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	6113      	str	r3, [r2, #16]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	3220      	adds	r2, #32
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	4a05      	ldr	r2, [pc, #20]	; (8003698 <LL_HSEM_1StepLock+0x2c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d001      	beq.n	800368a <LL_HSEM_1StepLock+0x1e>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <LL_HSEM_1StepLock+0x20>
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	80000400 	.word	0x80000400

0800369c <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 80036c6:	f000 fb5f 	bl	8003d88 <HAL_SuspendTick>

  EnterLowPower();
 80036ca:	f000 f839 	bl	8003740 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 80036ce:	f7ff ff03 	bl	80034d8 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 80036d2:	2003      	movs	r0, #3
 80036d4:	f7ff fed6 	bl	8003484 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80036d8:	f7ff ffb8 	bl	800364c <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80036dc:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 80036de:	bf00      	nop
}
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 80036e6:	f000 fb5f 	bl	8003da8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 80036ea:	bf00      	nop
}
 80036ec:	bd80      	pop	{r7, pc}

080036ee <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 80036f2:	f000 fb49 	bl	8003d88 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 80036f6:	f000 f823 	bl	8003740 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/

  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 80036fa:	2002      	movs	r0, #2
 80036fc:	f7ff fec2 	bl	8003484 <LL_PWR_SetPowerMode>

  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8003700:	2004      	movs	r0, #4
 8003702:	f7ff fed3 	bl	80034ac <LL_C2_PWR_SetPowerMode>
  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003706:	f7ff ffa1 	bl	800364c <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800370a:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 800370c:	bf00      	nop
}
 800370e:	bd80      	pop	{r7, pc}

08003710 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8003714:	f000 f850 	bl	80037b8 <ExitLowPower>

  HAL_ResumeTick();
 8003718:	f000 fb46 	bl	8003da8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 800371c:	bf00      	nop
}
 800371e:	bd80      	pop	{r7, pc}

08003720 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8003724:	f000 fb30 	bl	8003d88 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8003728:	f7ff ff80 	bl	800362c <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800372c:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 800372e:	bf00      	nop
}
 8003730:	bd80      	pop	{r7, pc}

08003732 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8003736:	f000 fb37 	bl	8003da8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800373a:	bf00      	nop
}
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003744:	bf00      	nop
 8003746:	2103      	movs	r1, #3
 8003748:	4819      	ldr	r0, [pc, #100]	; (80037b0 <EnterLowPower+0x70>)
 800374a:	f7ff ff8f 	bl	800366c <LL_HSEM_1StepLock>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f8      	bne.n	8003746 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8003754:	2104      	movs	r1, #4
 8003756:	4816      	ldr	r0, [pc, #88]	; (80037b0 <EnterLowPower+0x70>)
 8003758:	f7ff ff88 	bl	800366c <LL_HSEM_1StepLock>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d117      	bne.n	8003792 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8003762:	f7ff fed9 	bl	8003518 <LL_PWR_IsActiveFlag_C2DS>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <EnterLowPower+0x36>
 800376c:	f7ff fec0 	bl	80034f0 <LL_PWR_IsActiveFlag_C2SB>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d015      	beq.n	80037a2 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2104      	movs	r1, #4
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <EnterLowPower+0x70>)
 800377c:	f7ff ff8e 	bl	800369c <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8003780:	f000 f852 	bl	8003828 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <EnterLowPower+0x74>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <EnterLowPower+0x74>)
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e007      	b.n	80037a2 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8003792:	f000 f849 	bl	8003828 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <EnterLowPower+0x74>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a06      	ldr	r2, [pc, #24]	; (80037b4 <EnterLowPower+0x74>)
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2103      	movs	r1, #3
 80037a6:	4802      	ldr	r0, [pc, #8]	; (80037b0 <EnterLowPower+0x70>)
 80037a8:	f7ff ff78 	bl	800369c <LL_HSEM_ReleaseLock>

  return;
 80037ac:	bf00      	nop
}
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	58001400 	.word	0x58001400
 80037b4:	58004000 	.word	0x58004000

080037b8 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80037bc:	2200      	movs	r2, #0
 80037be:	2104      	movs	r1, #4
 80037c0:	4817      	ldr	r0, [pc, #92]	; (8003820 <ExitLowPower+0x68>)
 80037c2:	f7ff ff6b 	bl	800369c <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80037c6:	bf00      	nop
 80037c8:	2103      	movs	r1, #3
 80037ca:	4815      	ldr	r0, [pc, #84]	; (8003820 <ExitLowPower+0x68>)
 80037cc:	f7ff ff4e 	bl	800366c <LL_HSEM_1StepLock>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f8      	bne.n	80037c8 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80037d6:	f7ff ff09 	bl	80035ec <LL_RCC_GetSysClkSource>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d118      	bne.n	8003812 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 80037e0:	f7ff feae 	bl	8003540 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <ExitLowPower+0x6c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 0307 	bic.w	r3, r3, #7
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <ExitLowPower+0x6c>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 80037f4:	bf00      	nop
 80037f6:	f7ff feb2 	bl	800355e <LL_RCC_HSE_IsReady>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0fa      	beq.n	80037f6 <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8003800:	2002      	movs	r0, #2
 8003802:	f7ff fedf 	bl	80035c4 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8003806:	bf00      	nop
 8003808:	f7ff fef0 	bl	80035ec <LL_RCC_GetSysClkSource>
 800380c:	4603      	mov	r3, r0
 800380e:	2b08      	cmp	r3, #8
 8003810:	d1fa      	bne.n	8003808 <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2103      	movs	r1, #3
 8003816:	4802      	ldr	r0, [pc, #8]	; (8003820 <ExitLowPower+0x68>)
 8003818:	f7ff ff40 	bl	800369c <LL_HSEM_ReleaseLock>

  return;
 800381c:	bf00      	nop
}
 800381e:	bd80      	pop	{r7, pc}
 8003820:	58001400 	.word	0x58001400
 8003824:	58004000 	.word	0x58004000

08003828 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 800382c:	f7ff fea9 	bl	8003582 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8003830:	bf00      	nop
 8003832:	f7ff feb5 	bl	80035a0 <LL_RCC_HSI_IsReady>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0fa      	beq.n	8003832 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800383c:	2001      	movs	r0, #1
 800383e:	f7ff fec1 	bl	80035c4 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8003842:	2000      	movs	r0, #0
 8003844:	f7ff fede 	bl	8003604 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8003848:	bf00      	nop
 800384a:	f7ff fecf 	bl	80035ec <LL_RCC_GetSysClkSource>
 800384e:	4603      	mov	r3, r0
 8003850:	2b04      	cmp	r3, #4
 8003852:	d1fa      	bne.n	800384a <Switch_On_HSI+0x22>
  return;
 8003854:	bf00      	nop
}
 8003856:	bd80      	pop	{r7, pc}

08003858 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_AHB3_GRP1_EnableClock>:
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4013      	ands	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_APB1_GRP1_EnableClock>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4013      	ands	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038fc:	68fb      	ldr	r3, [r7, #12]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800390e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003912:	f7ff ffc8 	bl	80038a6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2100      	movs	r1, #0
 800391a:	2001      	movs	r0, #1
 800391c:	f000 fba5 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003920:	2001      	movs	r0, #1
 8003922:	f000 fbbc 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	2100      	movs	r1, #0
 800392a:	2004      	movs	r0, #4
 800392c:	f000 fb9d 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003930:	2004      	movs	r0, #4
 8003932:	f000 fbb4 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	2005      	movs	r0, #5
 800393c:	f000 fb95 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003940:	2005      	movs	r0, #5
 8003942:	f000 fbac 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	2015      	movs	r0, #21
 800394c:	f000 fb8d 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003950:	2015      	movs	r0, #21
 8003952:	f000 fba4 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	2100      	movs	r1, #0
 800395a:	202b      	movs	r0, #43	; 0x2b
 800395c:	f000 fb85 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003960:	202b      	movs	r0, #43	; 0x2b
 8003962:	f000 fb9c 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003966:	2200      	movs	r2, #0
 8003968:	2100      	movs	r1, #0
 800396a:	202e      	movs	r0, #46	; 0x2e
 800396c:	f000 fb7d 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003970:	202e      	movs	r0, #46	; 0x2e
 8003972:	f000 fb94 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	2036      	movs	r0, #54	; 0x36
 800397c:	f000 fb75 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003980:	2036      	movs	r0, #54	; 0x36
 8003982:	f000 fb8c 	bl	800409e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <HAL_IPCC_MspInit+0x44>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d113      	bne.n	80039c6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800399e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80039a2:	f7ff ff80 	bl	80038a6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2100      	movs	r1, #0
 80039aa:	202c      	movs	r0, #44	; 0x2c
 80039ac:	f000 fb5d 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80039b0:	202c      	movs	r0, #44	; 0x2c
 80039b2:	f000 fb74 	bl	800409e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2100      	movs	r1, #0
 80039ba:	202d      	movs	r0, #45	; 0x2d
 80039bc:	f000 fb55 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80039c0:	202d      	movs	r0, #45	; 0x2d
 80039c2:	f000 fb6c 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	58000c00 	.word	0x58000c00

080039d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b096      	sub	sp, #88	; 0x58
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	2250      	movs	r2, #80	; 0x50
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f007 f893 	bl	800ab10 <memset>
  if(hrtc->Instance==RTC)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_RTC_MspInit+0x80>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d12b      	bne.n	8003a4c <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80039f4:	f001 fdd0 	bl	8005598 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80039f8:	f001 fdce 	bl	8005598 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 80039fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a00:	f7ff ff2a 	bl	8003858 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a08:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a10:	f107 0308 	add.w	r3, r7, #8
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 f93e 	bl	8006c96 <HAL_RCCEx_PeriphCLKConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003a20:	f7ff fd28 	bl	8003474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a24:	f7ff ff2e 	bl	8003884 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003a28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a2c:	f7ff ff54 	bl	80038d8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	2003      	movs	r0, #3
 8003a36:	f000 fb18 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	f000 fb2f 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <HAL_RTC_MspInit+0x80>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a03      	ldr	r2, [pc, #12]	; (8003a54 <HAL_RTC_MspInit+0x80>)
 8003a46:	f023 0307 	bic.w	r3, r3, #7
 8003a4a:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a4c:	bf00      	nop
 8003a4e:	3758      	adds	r7, #88	; 0x58
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40002800 	.word	0x40002800

08003a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler+0x4>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <MemManage_Handler+0x4>

08003a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <BusFault_Handler+0x4>

08003a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <UsageFault_Handler+0x4>

08003a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aac:	f000 f934 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003ab8:	f001 fdd4 	bl	8005664 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003ac4:	f7fe ff42 	bl	800294c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}

08003acc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003ad0:	f000 fc9a 	bl	8004408 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <DMA1_Channel1_IRQHandler+0x10>)
 8003aee:	f000 fbdc 	bl	80042aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000458 	.word	0x20000458

08003afc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <DMA1_Channel2_IRQHandler+0x10>)
 8003b02:	f000 fbd2 	bl	80042aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200004b8 	.word	0x200004b8

08003b10 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <USART1_IRQHandler+0x10>)
 8003b26:	f003 fd8d 	bl	8007644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200003c4 	.word	0x200003c4

08003b34 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <LPUART1_IRQHandler+0x10>)
 8003b3a:	f003 fd83 	bl	8007644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000330 	.word	0x20000330

08003b48 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003b5a:	f7fd fe67 	bl	800182c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003b66:	f7fd febb 	bl	80018e0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003b72:	f000 fec1 	bl	80048f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8003b8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b90:	f000 fe9a 	bl	80048c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003b98:	b40c      	push	{r2, r3}
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	71fb      	strb	r3, [r7, #7]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	b002      	add	sp, #8
 8003bb6:	4770      	bx	lr

08003bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <SystemInit+0xa0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003bc2:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <SystemInit+0xa0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <SystemInit+0xa0>)
 8003bca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003bea:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <SystemInit+0xa4>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c08:	f023 0305 	bic.w	r3, r3, #5
 8003c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <SystemInit+0xa8>)
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <SystemInit+0xa8>)
 8003c32:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	faf6fefb 	.word	0xfaf6fefb
 8003c60:	22041000 	.word	0x22041000

08003c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_Init+0x3c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a0b      	ldr	r2, [pc, #44]	; (8003ca0 <HAL_Init+0x3c>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f000 f9ea 	bl	8004054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c80:	2000      	movs	r0, #0
 8003c82:	f000 f80f 	bl	8003ca4 <HAL_InitTick>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	71fb      	strb	r3, [r7, #7]
 8003c90:	e001      	b.n	8003c96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c92:	f7ff fe3a 	bl	800390a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c96:	79fb      	ldrb	r3, [r7, #7]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	58004000 	.word	0x58004000

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_InitTick+0x6c>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d024      	beq.n	8003d02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003cb8:	f002 fd88 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <HAL_InitTick+0x6c>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fa04 	bl	80040de <HAL_SYSTICK_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10f      	bne.n	8003cfc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d809      	bhi.n	8003cf6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	f000 f9be 	bl	800406a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <HAL_InitTick+0x70>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e007      	b.n	8003d06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e004      	b.n	8003d06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
 8003d00:	e001      	b.n	8003d06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000024 	.word	0x20000024
 8003d14:	20000020 	.word	0x20000020

08003d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_IncTick+0x20>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_IncTick+0x24>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_IncTick+0x24>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000024 	.word	0x20000024
 8003d3c:	2000059c 	.word	0x2000059c

08003d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return uwTick;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_GetTick+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000059c 	.word	0x2000059c

08003d58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_GetTickPrio+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000020 	.word	0x20000020

08003d70 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_GetTickFreq+0x14>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000024 	.word	0x20000024

08003d88 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_SuspendTick+0x1c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_SuspendTick+0x1c>)
 8003d92:	f023 0302 	bic.w	r3, r3, #2
 8003d96:	6013      	str	r3, [r2, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e010 	.word	0xe000e010

08003da8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_ResumeTick+0x1c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_ResumeTick+0x1c>)
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de4:	4013      	ands	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	60d3      	str	r3, [r2, #12]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <__NVIC_GetPriorityGrouping+0x18>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	f003 0307 	and.w	r3, r3, #7
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db0b      	blt.n	8003e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	4907      	ldr	r1, [pc, #28]	; (8003e64 <__NVIC_EnableIRQ+0x38>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	e000e100 	.word	0xe000e100

08003e68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db12      	blt.n	8003ea0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	490a      	ldr	r1, [pc, #40]	; (8003eac <__NVIC_DisableIRQ+0x44>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2001      	movs	r0, #1
 8003e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e8e:	3320      	adds	r3, #32
 8003e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e94:	f3bf 8f4f 	dsb	sy
}
 8003e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e9a:	f3bf 8f6f 	isb	sy
}
 8003e9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db0c      	blt.n	8003edc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	f003 021f 	and.w	r2, r3, #31
 8003ec8:	4907      	ldr	r1, [pc, #28]	; (8003ee8 <__NVIC_SetPendingIRQ+0x38>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed6:	3340      	adds	r3, #64	; 0x40
 8003ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000e100 	.word	0xe000e100

08003eec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db0c      	blt.n	8003f18 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	4907      	ldr	r1, [pc, #28]	; (8003f24 <__NVIC_ClearPendingIRQ+0x38>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f12:	3360      	adds	r3, #96	; 0x60
 8003f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000e100 	.word	0xe000e100

08003f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db0a      	blt.n	8003f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	490c      	ldr	r1, [pc, #48]	; (8003f74 <__NVIC_SetPriority+0x4c>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f50:	e00a      	b.n	8003f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4908      	ldr	r1, [pc, #32]	; (8003f78 <__NVIC_SetPriority+0x50>)
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	440b      	add	r3, r1
 8003f66:	761a      	strb	r2, [r3, #24]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f1c3 0307 	rsb	r3, r3, #7
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	bf28      	it	cs
 8003f9a:	2304      	movcs	r3, #4
 8003f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d902      	bls.n	8003fac <NVIC_EncodePriority+0x30>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3b03      	subs	r3, #3
 8003faa:	e000      	b.n	8003fae <NVIC_EncodePriority+0x32>
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43d9      	mvns	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	4313      	orrs	r3, r2
         );
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe8:	f3bf 8f4f 	dsb	sy
}
 8003fec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <__NVIC_SystemReset+0x24>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003ff6:	4904      	ldr	r1, [pc, #16]	; (8004008 <__NVIC_SystemReset+0x24>)
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <__NVIC_SystemReset+0x28>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ffe:	f3bf 8f4f 	dsb	sy
}
 8004002:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <__NVIC_SystemReset+0x20>
 8004008:	e000ed00 	.word	0xe000ed00
 800400c:	05fa0004 	.word	0x05fa0004

08004010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004020:	d301      	bcc.n	8004026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004022:	2301      	movs	r3, #1
 8004024:	e00f      	b.n	8004046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004026:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <SysTick_Config+0x40>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402e:	210f      	movs	r1, #15
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	f7ff ff78 	bl	8003f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <SysTick_Config+0x40>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <SysTick_Config+0x40>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000e010 	.word	0xe000e010

08004054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff feb3 	bl	8003dc8 <__NVIC_SetPriorityGrouping>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004078:	f7ff feca 	bl	8003e10 <__NVIC_GetPriorityGrouping>
 800407c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f7ff ff7a 	bl	8003f7c <NVIC_EncodePriority>
 8004088:	4602      	mov	r2, r0
 800408a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff49 	bl	8003f28 <__NVIC_SetPriority>
}
 8004096:	bf00      	nop
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff febd 	bl	8003e2c <__NVIC_EnableIRQ>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fecd 	bl	8003e68 <__NVIC_DisableIRQ>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80040da:	f7ff ff83 	bl	8003fe4 <__NVIC_SystemReset>

080040de <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff92 	bl	8004010 <SysTick_Config>
 80040ec:	4603      	mov	r3, r0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	4603      	mov	r3, r0
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fed3 	bl	8003eb0 <__NVIC_SetPendingIRQ>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800411c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fee3 	bl	8003eec <__NVIC_ClearPendingIRQ>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e04f      	b.n	80041e0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d008      	beq.n	800415e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e040      	b.n	80041e0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 020e 	bic.w	r2, r2, #14
 800416c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f003 021c 	and.w	r2, r3, #28
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2101      	movs	r1, #1
 800419c:	fa01 f202 	lsl.w	r2, r1, r2
 80041a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d005      	beq.n	8004210 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2204      	movs	r2, #4
 8004208:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e047      	b.n	80042a0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800423e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	f003 021c 	and.w	r2, r3, #28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800425c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004274:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800427e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
    }
  }
  return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f003 031c 	and.w	r3, r3, #28
 80042ca:	2204      	movs	r2, #4
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d026      	beq.n	8004324 <HAL_DMA_IRQHandler+0x7a>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d021      	beq.n	8004324 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0204 	bic.w	r2, r2, #4
 80042fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f003 021c 	and.w	r2, r3, #28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2104      	movs	r1, #4
 800430c:	fa01 f202 	lsl.w	r2, r1, r2
 8004310:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	2b00      	cmp	r3, #0
 8004318:	d071      	beq.n	80043fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004322:	e06c      	b.n	80043fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 031c 	and.w	r3, r3, #28
 800432c:	2202      	movs	r2, #2
 800432e:	409a      	lsls	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02e      	beq.n	8004396 <HAL_DMA_IRQHandler+0xec>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d029      	beq.n	8004396 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020a 	bic.w	r2, r2, #10
 800435e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	f003 021c 	and.w	r2, r3, #28
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2102      	movs	r1, #2
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d038      	beq.n	80043fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004394:	e033      	b.n	80043fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f003 031c 	and.w	r3, r3, #28
 800439e:	2208      	movs	r2, #8
 80043a0:	409a      	lsls	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02a      	beq.n	8004400 <HAL_DMA_IRQHandler+0x156>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d025      	beq.n	8004400 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 020e 	bic.w	r2, r2, #14
 80043c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f003 021c 	and.w	r2, r3, #28
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f202 	lsl.w	r2, r1, r2
 80043d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
}
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004414:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800441c:	4013      	ands	r3, r2
 800441e:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004420:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	43db      	mvns	r3, r3
 800442a:	493c      	ldr	r1, [pc, #240]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 800442c:	4013      	ands	r3, r2
 800442e:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004430:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <HAL_FLASH_IRQHandler+0x11c>)
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800443c:	4b38      	ldr	r3, [pc, #224]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	e008      	b.n	8004456 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004450:	4b33      	ldr	r3, [pc, #204]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800445c:	4b30      	ldr	r3, [pc, #192]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 8004466:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <HAL_FLASH_IRQHandler+0x7a>
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800447c:	4927      	ldr	r1, [pc, #156]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 800447e:	4313      	orrs	r3, r2
 8004480:	618b      	str	r3, [r1, #24]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <HAL_FLASH_IRQHandler+0x8e>
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004494:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004496:	4b22      	ldr	r3, [pc, #136]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f84d 	bl	800453c <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80044a2:	4b1e      	ldr	r3, [pc, #120]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d124      	bne.n	80044f8 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80044ae:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d117      	bne.n	80044ec <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044c4:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 80044ce:	4b14      	ldr	r3, [pc, #80]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	3301      	adds	r3, #1
 80044d4:	4a12      	ldr	r2, [pc, #72]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044d6:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f837 	bl	8004550 <FLASH_PageErase>
 80044e2:	e006      	b.n	80044f2 <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80044e4:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	e002      	b.n	80044f2 <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f818 	bl	8004528 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d108      	bne.n	8004512 <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	4a05      	ldr	r2, [pc, #20]	; (800451c <HAL_FLASH_IRQHandler+0x114>)
 8004506:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800450a:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <HAL_FLASH_IRQHandler+0x118>)
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
  }
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	58004000 	.word	0x58004000
 8004520:	200005a0 	.word	0x200005a0
 8004524:	00040001 	.word	0x00040001

08004528 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <FLASH_PageErase+0x30>)
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4313      	orrs	r3, r2
 8004566:	4a06      	ldr	r2, [pc, #24]	; (8004580 <FLASH_PageErase+0x30>)
 8004568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456c:	f043 0302 	orr.w	r3, r3, #2
 8004570:	6153      	str	r3, [r2, #20]
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	58004000 	.word	0x58004000

08004584 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004592:	e14c      	b.n	800482e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2101      	movs	r1, #1
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 813e 	beq.w	8004828 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d005      	beq.n	80045c4 <HAL_GPIO_Init+0x40>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d130      	bne.n	8004626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045fa:	2201      	movs	r2, #1
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0201 	and.w	r2, r3, #1
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b03      	cmp	r3, #3
 8004630:	d017      	beq.n	8004662 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d123      	bne.n	80046b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	08da      	lsrs	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3208      	adds	r2, #8
 8004676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	220f      	movs	r2, #15
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	08da      	lsrs	r2, r3, #3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3208      	adds	r2, #8
 80046b0:	6939      	ldr	r1, [r7, #16]
 80046b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	2203      	movs	r2, #3
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0203 	and.w	r2, r3, #3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8098 	beq.w	8004828 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80046f8:	4a54      	ldr	r2, [pc, #336]	; (800484c <HAL_GPIO_Init+0x2c8>)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	3302      	adds	r3, #2
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	220f      	movs	r2, #15
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004722:	d019      	beq.n	8004758 <HAL_GPIO_Init+0x1d4>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <HAL_GPIO_Init+0x2cc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_GPIO_Init+0x1d0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a49      	ldr	r2, [pc, #292]	; (8004854 <HAL_GPIO_Init+0x2d0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00d      	beq.n	8004750 <HAL_GPIO_Init+0x1cc>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a48      	ldr	r2, [pc, #288]	; (8004858 <HAL_GPIO_Init+0x2d4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <HAL_GPIO_Init+0x1c8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a47      	ldr	r2, [pc, #284]	; (800485c <HAL_GPIO_Init+0x2d8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d101      	bne.n	8004748 <HAL_GPIO_Init+0x1c4>
 8004744:	2304      	movs	r3, #4
 8004746:	e008      	b.n	800475a <HAL_GPIO_Init+0x1d6>
 8004748:	2307      	movs	r3, #7
 800474a:	e006      	b.n	800475a <HAL_GPIO_Init+0x1d6>
 800474c:	2303      	movs	r3, #3
 800474e:	e004      	b.n	800475a <HAL_GPIO_Init+0x1d6>
 8004750:	2302      	movs	r3, #2
 8004752:	e002      	b.n	800475a <HAL_GPIO_Init+0x1d6>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_GPIO_Init+0x1d6>
 8004758:	2300      	movs	r3, #0
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	f002 0203 	and.w	r2, r2, #3
 8004760:	0092      	lsls	r2, r2, #2
 8004762:	4093      	lsls	r3, r2
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800476a:	4938      	ldr	r1, [pc, #224]	; (800484c <HAL_GPIO_Init+0x2c8>)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	3302      	adds	r3, #2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004778:	4b39      	ldr	r3, [pc, #228]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	43db      	mvns	r3, r3
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4013      	ands	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800479c:	4a30      	ldr	r2, [pc, #192]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047a2:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047c6:	4a26      	ldr	r2, [pc, #152]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047f2:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80047fa:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 80047fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	43db      	mvns	r3, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004820:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	3301      	adds	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	f47f aeab 	bne.w	8004594 <HAL_GPIO_Init+0x10>
  }
}
 800483e:	bf00      	nop
 8004840:	bf00      	nop
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40010000 	.word	0x40010000
 8004850:	48000400 	.word	0x48000400
 8004854:	48000800 	.word	0x48000800
 8004858:	48000c00 	.word	0x48000c00
 800485c:	48001000 	.word	0x48001000
 8004860:	58000800 	.word	0x58000800

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004880:	e002      	b.n	8004888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4013      	ands	r3, r2
 80048ac:	041a      	lsls	r2, r3, #16
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43d9      	mvns	r1, r3
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	400b      	ands	r3, r1
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d006      	beq.n	80048ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048de:	4a05      	ldr	r2, [pc, #20]	; (80048f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fcc4 	bl	8002274 <HAL_GPIO_EXTI_Callback>
  }
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	58000800 	.word	0x58000800

080048f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_HSEM_IRQHandler+0x30>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004904:	4b08      	ldr	r3, [pc, #32]	; (8004928 <HAL_HSEM_IRQHandler+0x30>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	43db      	mvns	r3, r3
 800490c:	4906      	ldr	r1, [pc, #24]	; (8004928 <HAL_HSEM_IRQHandler+0x30>)
 800490e:	4013      	ands	r3, r2
 8004910:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <HAL_HSEM_IRQHandler+0x30>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f807 	bl	800492c <HAL_HSEM_FreeCallback>
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	58001500 	.word	0x58001500

0800492c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e081      	b.n	8004a56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f879 	bl	8004a5e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	e006      	b.n	80049c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d104      	bne.n	80049da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	460b      	mov	r3, r1
 8004a82:	817b      	strh	r3, [r7, #10]
 8004a84:	4613      	mov	r3, r2
 8004a86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	f040 80da 	bne.w	8004c4a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_I2C_Master_Transmit+0x30>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0d3      	b.n	8004c4c <HAL_I2C_Master_Transmit+0x1d8>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aac:	f7ff f948 	bl	8003d40 <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2319      	movs	r3, #25
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f9e6 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0be      	b.n	8004c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2221      	movs	r2, #33	; 0x21
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	893a      	ldrh	r2, [r7, #8]
 8004aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2bff      	cmp	r3, #255	; 0xff
 8004afe:	d90e      	bls.n	8004b1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	22ff      	movs	r2, #255	; 0xff
 8004b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	8979      	ldrh	r1, [r7, #10]
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fbdc 	bl	80052d4 <I2C_TransferConfig>
 8004b1c:	e06c      	b.n	8004bf8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	8979      	ldrh	r1, [r7, #10]
 8004b30:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fbcb 	bl	80052d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004b3e:	e05b      	b.n	8004bf8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	6a39      	ldr	r1, [r7, #32]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f9e3 	bl	8004f10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e07b      	b.n	8004c4c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d034      	beq.n	8004bf8 <HAL_I2C_Master_Transmit+0x184>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d130      	bne.n	8004bf8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f975 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04d      	b.n	8004c4c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2bff      	cmp	r3, #255	; 0xff
 8004bb8:	d90e      	bls.n	8004bd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	8979      	ldrh	r1, [r7, #10]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fb7f 	bl	80052d4 <I2C_TransferConfig>
 8004bd6:	e00f      	b.n	8004bf8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	8979      	ldrh	r1, [r7, #10]
 8004bea:	2300      	movs	r3, #0
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fb6e 	bl	80052d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d19e      	bne.n	8004b40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	6a39      	ldr	r1, [r7, #32]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f9c2 	bl	8004f90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e01a      	b.n	8004c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_I2C_Master_Transmit+0x1e4>)
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e000      	b.n	8004c4c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
  }
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	80002000 	.word	0x80002000
 8004c58:	fe00e800 	.word	0xfe00e800

08004c5c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	460b      	mov	r3, r1
 8004c6a:	817b      	strh	r3, [r7, #10]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	f040 80db 	bne.w	8004e34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_I2C_Master_Receive+0x30>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e0d4      	b.n	8004e36 <HAL_I2C_Master_Receive+0x1da>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c94:	f7ff f854 	bl	8003d40 <HAL_GetTick>
 8004c98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2319      	movs	r3, #25
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f8f2 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0bf      	b.n	8004e36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2222      	movs	r2, #34	; 0x22
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	893a      	ldrh	r2, [r7, #8]
 8004cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2bff      	cmp	r3, #255	; 0xff
 8004ce6:	d90e      	bls.n	8004d06 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	22ff      	movs	r2, #255	; 0xff
 8004cec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	8979      	ldrh	r1, [r7, #10]
 8004cf6:	4b52      	ldr	r3, [pc, #328]	; (8004e40 <HAL_I2C_Master_Receive+0x1e4>)
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fae8 	bl	80052d4 <I2C_TransferConfig>
 8004d04:	e06d      	b.n	8004de2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	8979      	ldrh	r1, [r7, #10]
 8004d18:	4b49      	ldr	r3, [pc, #292]	; (8004e40 <HAL_I2C_Master_Receive+0x1e4>)
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fad7 	bl	80052d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004d26:	e05c      	b.n	8004de2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	6a39      	ldr	r1, [r7, #32]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f96b 	bl	8005008 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e07c      	b.n	8004e36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d034      	beq.n	8004de2 <HAL_I2C_Master_Receive+0x186>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d130      	bne.n	8004de2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f880 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e04d      	b.n	8004e36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2bff      	cmp	r3, #255	; 0xff
 8004da2:	d90e      	bls.n	8004dc2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	22ff      	movs	r2, #255	; 0xff
 8004da8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	8979      	ldrh	r1, [r7, #10]
 8004db2:	2300      	movs	r3, #0
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fa8a 	bl	80052d4 <I2C_TransferConfig>
 8004dc0:	e00f      	b.n	8004de2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	8979      	ldrh	r1, [r7, #10]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fa79 	bl	80052d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d19d      	bne.n	8004d28 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	6a39      	ldr	r1, [r7, #32]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f8cd 	bl	8004f90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e01a      	b.n	8004e36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2220      	movs	r2, #32
 8004e06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <HAL_I2C_Master_Receive+0x1e8>)
 8004e14:	400b      	ands	r3, r1
 8004e16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	80002400 	.word	0x80002400
 8004e44:	fe00e800 	.word	0xfe00e800

08004e48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d103      	bne.n	8004e66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d007      	beq.n	8004e84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	619a      	str	r2, [r3, #24]
  }
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea0:	e022      	b.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d01e      	beq.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fe ff49 	bl	8003d40 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d113      	bne.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e00f      	b.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d0cd      	beq.n	8004ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f1c:	e02c      	b.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f8ea 	bl	80050fc <I2C_IsErrorOccurred>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e02a      	b.n	8004f88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d01e      	beq.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fe ff01 	bl	8003d40 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d113      	bne.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e007      	b.n	8004f88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d1cb      	bne.n	8004f1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f9c:	e028      	b.n	8004ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8aa 	bl	80050fc <I2C_IsErrorOccurred>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e026      	b.n	8005000 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7fe fec5 	bl	8003d40 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d113      	bne.n	8004ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e007      	b.n	8005000 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d1cf      	bne.n	8004f9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005014:	e064      	b.n	80050e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f86e 	bl	80050fc <I2C_IsErrorOccurred>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e062      	b.n	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b20      	cmp	r3, #32
 8005036:	d138      	bne.n	80050aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b04      	cmp	r3, #4
 8005044:	d105      	bne.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e04e      	b.n	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b10      	cmp	r3, #16
 800505e:	d107      	bne.n	8005070 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2210      	movs	r2, #16
 8005066:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2204      	movs	r2, #4
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
 800506e:	e002      	b.n	8005076 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2220      	movs	r2, #32
 800507c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800508a:	400b      	ands	r3, r1
 800508c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e022      	b.n	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fe fe49 	bl	8003d40 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10f      	bne.n	80050e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e007      	b.n	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d193      	bne.n	8005016 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	fe00e800 	.word	0xfe00e800

080050fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d075      	beq.n	8005214 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2210      	movs	r2, #16
 800512e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005130:	e056      	b.n	80051e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d052      	beq.n	80051e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800513a:	f7fe fe01 	bl	8003d40 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <I2C_IsErrorOccurred+0x54>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d147      	bne.n	80051e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005162:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005172:	d12e      	bne.n	80051d2 <I2C_IsErrorOccurred+0xd6>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800517a:	d02a      	beq.n	80051d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b20      	cmp	r3, #32
 8005180:	d027      	beq.n	80051d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005190:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005192:	f7fe fdd5 	bl	8003d40 <HAL_GetTick>
 8005196:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005198:	e01b      	b.n	80051d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800519a:	f7fe fdd1 	bl	8003d40 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b19      	cmp	r3, #25
 80051a6:	d914      	bls.n	80051d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d1dc      	bne.n	800519a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d003      	beq.n	80051f6 <I2C_IsErrorOccurred+0xfa>
 80051ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d09d      	beq.n	8005132 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2220      	movs	r2, #32
 8005204:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005236:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	f043 0308 	orr.w	r3, r3, #8
 800524e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800527a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01c      	beq.n	80052c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff fddc 	bl	8004e48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <I2C_IsErrorOccurred+0x1d4>)
 800529c:	400b      	ands	r3, r1
 800529e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	; 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	fe00e800 	.word	0xfe00e800

080052d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	817b      	strh	r3, [r7, #10]
 80052e2:	4613      	mov	r3, r2
 80052e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e6:	897b      	ldrh	r3, [r7, #10]
 80052e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052ec:	7a7b      	ldrb	r3, [r7, #9]
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005302:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	0d5b      	lsrs	r3, r3, #21
 800530e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <I2C_TransferConfig+0x60>)
 8005314:	430b      	orrs	r3, r1
 8005316:	43db      	mvns	r3, r3
 8005318:	ea02 0103 	and.w	r1, r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	03ff63ff 	.word	0x03ff63ff

08005338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b20      	cmp	r3, #32
 800534c:	d138      	bne.n	80053c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005358:	2302      	movs	r3, #2
 800535a:	e032      	b.n	80053c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2224      	movs	r2, #36	; 0x24
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800538a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e000      	b.n	80053c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053c0:	2302      	movs	r3, #2
  }
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d139      	bne.n	8005458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e033      	b.n	800545a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2224      	movs	r2, #36	; 0x24
 80053fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	4904      	ldr	r1, [pc, #16]	; (8005488 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40010000 	.word	0x40010000

0800548c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01e      	beq.n	80054dc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_IPCC_Init+0x60>)
 80054a0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d102      	bne.n	80054b4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fe fa6c 	bl	800398c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80054b4:	68b8      	ldr	r0, [r7, #8]
 80054b6:	f000 f85b 	bl	8005570 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f82c 	bl	8005524 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80054da:	e001      	b.n	80054e0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	58000c00 	.word	0x58000c00

080054f0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	4613      	mov	r3, r2
 8005516:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e00f      	b.n	8005552 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <IPCC_SetDefaultCallbacks+0x44>)
 800553c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3306      	adds	r3, #6
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	4a08      	ldr	r2, [pc, #32]	; (800556c <IPCC_SetDefaultCallbacks+0x48>)
 800554a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b05      	cmp	r3, #5
 8005556:	d9ec      	bls.n	8005532 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	080054f1 	.word	0x080054f1
 800556c:	0800550b 	.word	0x0800550b

08005570 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005584:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	223f      	movs	r2, #63	; 0x3f
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a6:	6013      	str	r3, [r2, #0]
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	58000400 	.word	0x58000400

080055b8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <LL_EXTI_ReadFlag_0_31+0x1c>)
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4013      	ands	r3, r2
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	58000800 	.word	0x58000800

080055e8 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4013      	ands	r3, r2
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	58000800 	.word	0x58000800

08005608 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005610:	4a04      	ldr	r2, [pc, #16]	; (8005624 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60d3      	str	r3, [r2, #12]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	58000800 	.word	0x58000800

08005628 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005630:	4a04      	ldr	r2, [pc, #16]	; (8005644 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	58000800 	.word	0x58000800

08005648 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800564c:	4b04      	ldr	r3, [pc, #16]	; (8005660 <HAL_PWREx_GetVoltageRange+0x18>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005654:	4618      	mov	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	58000400 	.word	0x58000400

08005664 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8005668:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800566c:	f7ff ffac 	bl	80055c8 <LL_EXTI_ReadFlag_0_31>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005676:	f7ff ff9f 	bl	80055b8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800567a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800567e:	f7ff ffc3 	bl	8005608 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8005682:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005686:	f7ff ff9f 	bl	80055c8 <LL_EXTI_ReadFlag_0_31>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005690:	f000 f811 	bl	80056b6 <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005694:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005698:	f7ff ffb6 	bl	8005608 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 800569c:	2002      	movs	r0, #2
 800569e:	f7ff ffa3 	bl	80055e8 <LL_EXTI_ReadFlag_32_63>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80056a8:	f000 f80c 	bl	80056c4 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80056ac:	2002      	movs	r0, #2
 80056ae:	f7ff ffbb 	bl	8005628 <LL_EXTI_ClearFlag_32_63>
  }
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80056b6:	b480      	push	{r7}
 80056b8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80056d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e4:	d101      	bne.n	80056ea <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <LL_RCC_HSE_Enable>:
{
 80056f6:	b480      	push	{r7}
 80056f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80056fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005708:	6013      	str	r3, [r2, #0]
}
 800570a:	bf00      	nop
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <LL_RCC_HSE_Disable>:
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005726:	6013      	str	r3, [r2, #0]
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_RCC_HSE_IsReady>:
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005744:	d101      	bne.n	800574a <LL_RCC_HSE_IsReady+0x18>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <LL_RCC_HSE_IsReady+0x1a>
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_RCC_HSI_Enable>:
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	6013      	str	r3, [r2, #0]
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_RCC_HSI_Disable>:
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005786:	6013      	str	r3, [r2, #0]
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <LL_RCC_HSI_IsReady>:
{
 8005792:	b480      	push	{r7}
 8005794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d101      	bne.n	80057aa <LL_RCC_HSI_IsReady+0x18>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <LL_RCC_HSI_IsReady+0x1a>
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	061b      	lsls	r3, r3, #24
 80057cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <LL_RCC_HSI48_Enable>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_RCC_HSI48_Disable>:
{
 8005802:	b480      	push	{r7}
 8005804:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800580e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800581a:	bf00      	nop
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <LL_RCC_HSI48_IsReady>:
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b02      	cmp	r3, #2
 8005836:	d101      	bne.n	800583c <LL_RCC_HSI48_IsReady+0x18>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <LL_RCC_HSI48_IsReady+0x1a>
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <LL_RCC_LSE_Enable>:
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800584c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005860:	bf00      	nop
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_RCC_LSE_Disable>:
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005882:	bf00      	nop
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <LL_RCC_LSE_EnableBypass>:
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800589c:	f043 0304 	orr.w	r3, r3, #4
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_RCC_LSE_DisableBypass>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058be:	f023 0304 	bic.w	r3, r3, #4
 80058c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058c6:	bf00      	nop
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <LL_RCC_LSE_IsReady>:
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d101      	bne.n	80058e8 <LL_RCC_LSE_IsReady+0x18>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <LL_RCC_LSE_IsReady+0x1a>
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LL_RCC_LSI1_Enable>:
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <LL_RCC_LSI1_Disable>:
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800591a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800592e:	bf00      	nop
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <LL_RCC_LSI1_IsReady>:
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	d101      	bne.n	8005950 <LL_RCC_LSI1_IsReady+0x18>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <LL_RCC_LSI1_IsReady+0x1a>
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <LL_RCC_LSI2_Enable>:
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800596c:	f043 0304 	orr.w	r3, r3, #4
 8005970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_RCC_LSI2_Disable>:
{
 800597e:	b480      	push	{r7}
 8005980:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800598e:	f023 0304 	bic.w	r3, r3, #4
 8005992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005996:	bf00      	nop
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <LL_RCC_LSI2_IsReady>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80059a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d101      	bne.n	80059b8 <LL_RCC_LSI2_IsReady+0x18>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <LL_RCC_LSI2_IsReady+0x1a>
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <LL_RCC_LSI2_SetTrimming>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <LL_RCC_MSI_Enable>:
{
 80059f2:	b480      	push	{r7}
 80059f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80059f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	6013      	str	r3, [r2, #0]
}
 8005a06:	bf00      	nop
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <LL_RCC_MSI_Disable>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	6013      	str	r3, [r2, #0]
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <LL_RCC_MSI_IsReady>:
{
 8005a2e:	b480      	push	{r7}
 8005a30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d101      	bne.n	8005a44 <LL_RCC_MSI_IsReady+0x16>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <LL_RCC_MSI_IsReady+0x18>
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <LL_RCC_MSI_SetRange>:
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_RCC_MSI_GetRange>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a88:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2bb0      	cmp	r3, #176	; 0xb0
 8005a8e:	d901      	bls.n	8005a94 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005a90:	23b0      	movs	r3, #176	; 0xb0
 8005a92:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005a94:	687b      	ldr	r3, [r7, #4]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005abc:	4313      	orrs	r3, r2
 8005abe:	604b      	str	r3, [r1, #4]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <LL_RCC_SetSysClkSource>:
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f023 0203 	bic.w	r2, r3, #3
 8005ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	608b      	str	r3, [r1, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LL_RCC_GetSysClkSource>:
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <LL_RCC_SetAHBPrescaler>:
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <LL_RCC_SetAHB4Prescaler>:
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b70:	f023 020f 	bic.w	r2, r3, #15
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	091b      	lsrs	r3, r3, #4
 8005b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <LL_RCC_SetAPB1Prescaler>:
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <LL_RCC_SetAPB2Prescaler>:
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <LL_RCC_GetAHBPrescaler>:
{
 8005bde:	b480      	push	{r7}
 8005be0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <LL_RCC_GetAHB4Prescaler>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c24:	6013      	str	r3, [r2, #0]
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c42:	6013      	str	r3, [r2, #0]
}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c60:	d101      	bne.n	8005c66 <LL_RCC_PLL_IsReady+0x18>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <LL_RCC_PLL_IsReady+0x1a>
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005c72:	b480      	push	{r7}
 8005c74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	0a1b      	lsrs	r3, r3, #8
 8005c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce6:	d101      	bne.n	8005cec <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d0c:	d101      	bne.n	8005d12 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d32:	d101      	bne.n	8005d38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d56:	d101      	bne.n	8005d5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d7a:	d101      	bne.n	8005d80 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b08d      	sub	sp, #52	; 0x34
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e363      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 808d 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dac:	f7ff fea2 	bl	8005af4 <LL_RCC_GetSysClkSource>
 8005db0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005db2:	f7ff ff83 	bl	8005cbc <LL_RCC_PLL_GetMainSource>
 8005db6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x3e>
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	d147      	bne.n	8005e54 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d144      	bne.n	8005e54 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e347      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005dda:	f7ff fe4d 	bl	8005a78 <LL_RCC_MSI_GetRange>
 8005dde:	4603      	mov	r3, r0
 8005de0:	429c      	cmp	r4, r3
 8005de2:	d914      	bls.n	8005e0e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fd03 	bl	80067f4 <RCC_SetFlashLatencyFromMSIRange>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e336      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fe27 	bl	8005a50 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fe4b 	bl	8005aa2 <LL_RCC_MSI_SetCalibTrimming>
 8005e0c:	e013      	b.n	8005e36 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fe1c 	bl	8005a50 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fe40 	bl	8005aa2 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fce4 	bl	80067f4 <RCC_SetFlashLatencyFromMSIRange>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e317      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e36:	f000 fcc9 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4aa4      	ldr	r2, [pc, #656]	; (80060d0 <HAL_RCC_OscConfig+0x344>)
 8005e3e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e40:	4ba4      	ldr	r3, [pc, #656]	; (80060d4 <HAL_RCC_OscConfig+0x348>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fd ff2d 	bl	8003ca4 <HAL_InitTick>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d039      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e308      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01e      	beq.n	8005e9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e5c:	f7ff fdc9 	bl	80059f2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e60:	f7fd ff6e 	bl	8003d40 <HAL_GetTick>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e68:	f7fd ff6a 	bl	8003d40 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e2f5      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e7a:	f7ff fdd8 	bl	8005a2e <LL_RCC_MSI_IsReady>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f1      	beq.n	8005e68 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fde1 	bl	8005a50 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fe05 	bl	8005aa2 <LL_RCC_MSI_SetCalibTrimming>
 8005e98:	e015      	b.n	8005ec6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e9a:	f7ff fdb9 	bl	8005a10 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e9e:	f7fd ff4f 	bl	8003d40 <HAL_GetTick>
 8005ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ea6:	f7fd ff4b 	bl	8003d40 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e2d6      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005eb8:	f7ff fdb9 	bl	8005a2e <LL_RCC_MSI_IsReady>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f1      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x11a>
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ec4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d047      	beq.n	8005f62 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed2:	f7ff fe0f 	bl	8005af4 <LL_RCC_GetSysClkSource>
 8005ed6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ed8:	f7ff fef0 	bl	8005cbc <LL_RCC_PLL_GetMainSource>
 8005edc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x164>
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d108      	bne.n	8005efc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d105      	bne.n	8005efc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d134      	bne.n	8005f62 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e2b4      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d102      	bne.n	8005f0c <HAL_RCC_OscConfig+0x180>
 8005f06:	f7ff fbf6 	bl	80056f6 <LL_RCC_HSE_Enable>
 8005f0a:	e001      	b.n	8005f10 <HAL_RCC_OscConfig+0x184>
 8005f0c:	f7ff fc02 	bl	8005714 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d012      	beq.n	8005f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fd ff12 	bl	8003d40 <HAL_GetTick>
 8005f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f20:	f7fd ff0e 	bl	8003d40 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b64      	cmp	r3, #100	; 0x64
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e299      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f32:	f7ff fbfe 	bl	8005732 <LL_RCC_HSE_IsReady>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f1      	beq.n	8005f20 <HAL_RCC_OscConfig+0x194>
 8005f3c:	e011      	b.n	8005f62 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3e:	f7fd feff 	bl	8003d40 <HAL_GetTick>
 8005f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f46:	f7fd fefb 	bl	8003d40 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b64      	cmp	r3, #100	; 0x64
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e286      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f58:	f7ff fbeb 	bl	8005732 <LL_RCC_HSE_IsReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f1      	bne.n	8005f46 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d04c      	beq.n	8006008 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6e:	f7ff fdc1 	bl	8005af4 <LL_RCC_GetSysClkSource>
 8005f72:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f74:	f7ff fea2 	bl	8005cbc <LL_RCC_PLL_GetMainSource>
 8005f78:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d005      	beq.n	8005f8c <HAL_RCC_OscConfig+0x200>
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d10e      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d10b      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e266      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fc0a 	bl	80057b6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005fa2:	e031      	b.n	8006008 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d019      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fac:	f7ff fbd3 	bl	8005756 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fd fec6 	bl	8003d40 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fb8:	f7fd fec2 	bl	8003d40 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e24d      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005fca:	f7ff fbe2 	bl	8005792 <LL_RCC_HSI_IsReady>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f1      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fbec 	bl	80057b6 <LL_RCC_HSI_SetCalibTrimming>
 8005fde:	e013      	b.n	8006008 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe0:	f7ff fbc8 	bl	8005774 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fd feac 	bl	8003d40 <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fec:	f7fd fea8 	bl	8003d40 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e233      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ffe:	f7ff fbc8 	bl	8005792 <LL_RCC_HSI_IsReady>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f1      	bne.n	8005fec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a3 	beq.w	8006168 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d076      	beq.n	8006118 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b00      	cmp	r3, #0
 8006034:	d046      	beq.n	80060c4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006036:	f7ff fc7f 	bl	8005938 <LL_RCC_LSI1_IsReady>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d113      	bne.n	8006068 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006040:	f7ff fc58 	bl	80058f4 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006044:	f7fd fe7c 	bl	8003d40 <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800604c:	f7fd fe78 	bl	8003d40 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e203      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800605e:	f7ff fc6b 	bl	8005938 <LL_RCC_LSI1_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f1      	beq.n	800604c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006068:	f7ff fc78 	bl	800595c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fd fe68 	bl	8003d40 <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006074:	f7fd fe64 	bl	8003d40 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b03      	cmp	r3, #3
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e1ef      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006086:	f7ff fc8b 	bl	80059a0 <LL_RCC_LSI2_IsReady>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f1      	beq.n	8006074 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fc95 	bl	80059c4 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800609a:	f7ff fc3c 	bl	8005916 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609e:	f7fd fe4f 	bl	8003d40 <HAL_GetTick>
 80060a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80060a6:	f7fd fe4b 	bl	8003d40 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e1d6      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80060b8:	f7ff fc3e 	bl	8005938 <LL_RCC_LSI1_IsReady>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f1      	bne.n	80060a6 <HAL_RCC_OscConfig+0x31a>
 80060c2:	e051      	b.n	8006168 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80060c4:	f7ff fc16 	bl	80058f4 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c8:	f7fd fe3a 	bl	8003d40 <HAL_GetTick>
 80060cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80060ce:	e00c      	b.n	80060ea <HAL_RCC_OscConfig+0x35e>
 80060d0:	2000001c 	.word	0x2000001c
 80060d4:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80060d8:	f7fd fe32 	bl	8003d40 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e1bd      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80060ea:	f7ff fc25 	bl	8005938 <LL_RCC_LSI1_IsReady>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f1      	beq.n	80060d8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80060f4:	f7ff fc43 	bl	800597e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80060fa:	f7fd fe21 	bl	8003d40 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b03      	cmp	r3, #3
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e1ac      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800610c:	f7ff fc48 	bl	80059a0 <LL_RCC_LSI2_IsReady>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f1      	bne.n	80060fa <HAL_RCC_OscConfig+0x36e>
 8006116:	e027      	b.n	8006168 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006118:	f7ff fc31 	bl	800597e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fd fe10 	bl	8003d40 <HAL_GetTick>
 8006120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006124:	f7fd fe0c 	bl	8003d40 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b03      	cmp	r3, #3
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e197      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006136:	f7ff fc33 	bl	80059a0 <LL_RCC_LSI2_IsReady>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f1      	bne.n	8006124 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006140:	f7ff fbe9 	bl	8005916 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fd fdfc 	bl	8003d40 <HAL_GetTick>
 8006148:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800614c:	f7fd fdf8 	bl	8003d40 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e183      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800615e:	f7ff fbeb 	bl	8005938 <LL_RCC_LSI1_IsReady>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f1      	bne.n	800614c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d05b      	beq.n	800622c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006174:	4ba7      	ldr	r3, [pc, #668]	; (8006414 <HAL_RCC_OscConfig+0x688>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d114      	bne.n	80061aa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006180:	f7ff fa0a 	bl	8005598 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006184:	f7fd fddc 	bl	8003d40 <HAL_GetTick>
 8006188:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618c:	f7fd fdd8 	bl	8003d40 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e163      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800619e:	4b9d      	ldr	r3, [pc, #628]	; (8006414 <HAL_RCC_OscConfig+0x688>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d102      	bne.n	80061b8 <HAL_RCC_OscConfig+0x42c>
 80061b2:	f7ff fb49 	bl	8005848 <LL_RCC_LSE_Enable>
 80061b6:	e00c      	b.n	80061d2 <HAL_RCC_OscConfig+0x446>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b05      	cmp	r3, #5
 80061be:	d104      	bne.n	80061ca <HAL_RCC_OscConfig+0x43e>
 80061c0:	f7ff fb64 	bl	800588c <LL_RCC_LSE_EnableBypass>
 80061c4:	f7ff fb40 	bl	8005848 <LL_RCC_LSE_Enable>
 80061c8:	e003      	b.n	80061d2 <HAL_RCC_OscConfig+0x446>
 80061ca:	f7ff fb4e 	bl	800586a <LL_RCC_LSE_Disable>
 80061ce:	f7ff fb6e 	bl	80058ae <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d014      	beq.n	8006204 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061da:	f7fd fdb1 	bl	8003d40 <HAL_GetTick>
 80061de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80061e0:	e00a      	b.n	80061f8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e2:	f7fd fdad 	bl	8003d40 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e136      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80061f8:	f7ff fb6a 	bl	80058d0 <LL_RCC_LSE_IsReady>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0ef      	beq.n	80061e2 <HAL_RCC_OscConfig+0x456>
 8006202:	e013      	b.n	800622c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006204:	f7fd fd9c 	bl	8003d40 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800620a:	e00a      	b.n	8006222 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620c:	f7fd fd98 	bl	8003d40 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f241 3288 	movw	r2, #5000	; 0x1388
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e121      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006222:	f7ff fb55 	bl	80058d0 <LL_RCC_LSE_IsReady>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ef      	bne.n	800620c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02c      	beq.n	8006292 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	2b00      	cmp	r3, #0
 800623e:	d014      	beq.n	800626a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006240:	f7ff face 	bl	80057e0 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fd fd7c 	bl	8003d40 <HAL_GetTick>
 8006248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800624c:	f7fd fd78 	bl	8003d40 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e103      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800625e:	f7ff fae1 	bl	8005824 <LL_RCC_HSI48_IsReady>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f1      	beq.n	800624c <HAL_RCC_OscConfig+0x4c0>
 8006268:	e013      	b.n	8006292 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800626a:	f7ff faca 	bl	8005802 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626e:	f7fd fd67 	bl	8003d40 <HAL_GetTick>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006276:	f7fd fd63 	bl	8003d40 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e0ee      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006288:	f7ff facc 	bl	8005824 <LL_RCC_HSI48_IsReady>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f1      	bne.n	8006276 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80e4 	beq.w	8006464 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800629c:	f7ff fc2a 	bl	8005af4 <LL_RCC_GetSysClkSource>
 80062a0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	f040 80b4 	bne.w	800641c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0203 	and.w	r2, r3, #3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	429a      	cmp	r2, r3
 80062c0:	d123      	bne.n	800630a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d11c      	bne.n	800630a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062dc:	429a      	cmp	r2, r3
 80062de:	d114      	bne.n	800630a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d10d      	bne.n	800630a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d106      	bne.n	800630a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d05d      	beq.n	80063c6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d058      	beq.n	80063c2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0a1      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006322:	f7ff fc85 	bl	8005c30 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006326:	f7fd fd0b 	bl	8003d40 <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632e:	f7fd fd07 	bl	8003d40 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e092      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ef      	bne.n	800632e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	4b30      	ldr	r3, [pc, #192]	; (8006418 <HAL_RCC_OscConfig+0x68c>)
 8006356:	4013      	ands	r3, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006360:	4311      	orrs	r1, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006366:	0212      	lsls	r2, r2, #8
 8006368:	4311      	orrs	r1, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800636e:	4311      	orrs	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006374:	4311      	orrs	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800637a:	430a      	orrs	r2, r1
 800637c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006380:	4313      	orrs	r3, r2
 8006382:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006384:	f7ff fc45 	bl	8005c12 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006398:	f7fd fcd2 	bl	8003d40 <HAL_GetTick>
 800639c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a0:	f7fd fcce 	bl	8003d40 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e059      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ef      	beq.n	80063a0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063c0:	e050      	b.n	8006464 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e04f      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d147      	bne.n	8006464 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063d4:	f7ff fc1d 	bl	8005c12 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063e8:	f7fd fcaa 	bl	8003d40 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f0:	f7fd fca6 	bl	8003d40 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e031      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0ef      	beq.n	80063f0 <HAL_RCC_OscConfig+0x664>
 8006410:	e028      	b.n	8006464 <HAL_RCC_OscConfig+0x6d8>
 8006412:	bf00      	nop
 8006414:	58000400 	.word	0x58000400
 8006418:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b0c      	cmp	r3, #12
 8006420:	d01e      	beq.n	8006460 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006422:	f7ff fc05 	bl	8005c30 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006426:	f7fd fc8b 	bl	8003d40 <HAL_GetTick>
 800642a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800642e:	f7fd fc87 	bl	8003d40 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e012      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1ef      	bne.n	800642e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800644e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_OscConfig+0x6e4>)
 800645a:	4013      	ands	r3, r2
 800645c:	60cb      	str	r3, [r1, #12]
 800645e:	e001      	b.n	8006464 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3734      	adds	r7, #52	; 0x34
 800646a:	46bd      	mov	sp, r7
 800646c:	bd90      	pop	{r4, r7, pc}
 800646e:	bf00      	nop
 8006470:	eefefffc 	.word	0xeefefffc

08006474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e12d      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006488:	4b98      	ldr	r3, [pc, #608]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d91b      	bls.n	80064ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006496:	4b95      	ldr	r3, [pc, #596]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 0207 	bic.w	r2, r3, #7
 800649e:	4993      	ldr	r1, [pc, #588]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a6:	f7fd fc4b 	bl	8003d40 <HAL_GetTick>
 80064aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064ae:	f7fd fc47 	bl	8003d40 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e111      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c0:	4b8a      	ldr	r3, [pc, #552]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d1ef      	bne.n	80064ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fb14 	bl	8005b0c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064e4:	f7fd fc2c 	bl	8003d40 <HAL_GetTick>
 80064e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064ec:	f7fd fc28 	bl	8003d40 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e0f2      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80064fe:	f7ff fbe9 	bl	8005cd4 <LL_RCC_IsActiveFlag_HPRE>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f1      	beq.n	80064ec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d016      	beq.n	8006542 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fb0b 	bl	8005b34 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800651e:	f7fd fc0f 	bl	8003d40 <HAL_GetTick>
 8006522:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006524:	e008      	b.n	8006538 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006526:	f7fd fc0b 	bl	8003d40 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e0d5      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006538:	f7ff fbde 	bl	8005cf8 <LL_RCC_IsActiveFlag_C2HPRE>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f1      	beq.n	8006526 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fb04 	bl	8005b60 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006558:	f7fd fbf2 	bl	8003d40 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006560:	f7fd fbee 	bl	8003d40 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e0b8      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006572:	f7ff fbd4 	bl	8005d1e <LL_RCC_IsActiveFlag_SHDHPRE>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f1      	beq.n	8006560 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d016      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fafe 	bl	8005b8e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006592:	f7fd fbd5 	bl	8003d40 <HAL_GetTick>
 8006596:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800659a:	f7fd fbd1 	bl	8003d40 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e09b      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80065ac:	f7ff fbca 	bl	8005d44 <LL_RCC_IsActiveFlag_PPRE1>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f1      	beq.n	800659a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d017      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff faf4 	bl	8005bb6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065ce:	f7fd fbb7 	bl	8003d40 <HAL_GetTick>
 80065d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065d6:	f7fd fbb3 	bl	8003d40 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e07d      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065e8:	f7ff fbbe 	bl	8005d68 <LL_RCC_IsActiveFlag_PPRE2>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f1      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d043      	beq.n	8006686 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d106      	bne.n	8006614 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006606:	f7ff f894 	bl	8005732 <LL_RCC_HSE_IsReady>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11e      	bne.n	800664e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e067      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d106      	bne.n	800662a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800661c:	f7ff fb17 	bl	8005c4e <LL_RCC_PLL_IsReady>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d113      	bne.n	800664e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e05c      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006632:	f7ff f9fc 	bl	8005a2e <LL_RCC_MSI_IsReady>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d108      	bne.n	800664e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e051      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006640:	f7ff f8a7 	bl	8005792 <LL_RCC_HSI_IsReady>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e04a      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fa3a 	bl	8005acc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006658:	f7fd fb72 	bl	8003d40 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800665e:	e00a      	b.n	8006676 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006660:	f7fd fb6e 	bl	8003d40 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	; 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e036      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006676:	f7ff fa3d 	bl	8005af4 <LL_RCC_GetSysClkSource>
 800667a:	4602      	mov	r2, r0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	429a      	cmp	r2, r3
 8006684:	d1ec      	bne.n	8006660 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006686:	4b19      	ldr	r3, [pc, #100]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d21b      	bcs.n	80066cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006694:	4b15      	ldr	r3, [pc, #84]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f023 0207 	bic.w	r2, r3, #7
 800669c:	4913      	ldr	r1, [pc, #76]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a4:	f7fd fb4c 	bl	8003d40 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066aa:	e008      	b.n	80066be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80066ac:	f7fd fb48 	bl	8003d40 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e012      	b.n	80066e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066be:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_RCC_ClockConfig+0x278>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d1ef      	bne.n	80066ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066cc:	f000 f87e 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 80066d0:	4603      	mov	r3, r0
 80066d2:	4a07      	ldr	r2, [pc, #28]	; (80066f0 <HAL_RCC_ClockConfig+0x27c>)
 80066d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80066d6:	f7fd fb3f 	bl	8003d58 <HAL_GetTickPrio>
 80066da:	4603      	mov	r3, r0
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fd fae1 	bl	8003ca4 <HAL_InitTick>
 80066e2:	4603      	mov	r3, r0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	58004000 	.word	0x58004000
 80066f0:	2000001c 	.word	0x2000001c

080066f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066fa:	f7ff f9fb 	bl	8005af4 <LL_RCC_GetSysClkSource>
 80066fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006706:	f7ff f9b7 	bl	8005a78 <LL_RCC_MSI_GetRange>
 800670a:	4603      	mov	r3, r0
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	4a2b      	ldr	r2, [pc, #172]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e04b      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b04      	cmp	r3, #4
 8006720:	d102      	bne.n	8006728 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006722:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e045      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b08      	cmp	r3, #8
 800672c:	d10a      	bne.n	8006744 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800672e:	f7fe ffd0 	bl	80056d2 <LL_RCC_HSE_IsEnabledDiv2>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d102      	bne.n	800673e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006738:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e03a      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800673e:	4b22      	ldr	r3, [pc, #136]	; (80067c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e037      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006744:	f7ff faba 	bl	8005cbc <LL_RCC_PLL_GetMainSource>
 8006748:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d003      	beq.n	8006758 <HAL_RCC_GetSysClockFreq+0x64>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b03      	cmp	r3, #3
 8006754:	d003      	beq.n	800675e <HAL_RCC_GetSysClockFreq+0x6a>
 8006756:	e00d      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006758:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800675a:	60bb      	str	r3, [r7, #8]
        break;
 800675c:	e015      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800675e:	f7fe ffb8 	bl	80056d2 <LL_RCC_HSE_IsEnabledDiv2>
 8006762:	4603      	mov	r3, r0
 8006764:	2b01      	cmp	r3, #1
 8006766:	d102      	bne.n	800676e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006768:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800676a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800676c:	e00d      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800676e:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006770:	60bb      	str	r3, [r7, #8]
        break;
 8006772:	e00a      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006774:	f7ff f980 	bl	8005a78 <LL_RCC_MSI_GetRange>
 8006778:	4603      	mov	r3, r0
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	4a0f      	ldr	r2, [pc, #60]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006786:	60bb      	str	r3, [r7, #8]
        break;
 8006788:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800678a:	f7ff fa72 	bl	8005c72 <LL_RCC_PLL_GetN>
 800678e:	4602      	mov	r2, r0
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	fb03 f402 	mul.w	r4, r3, r2
 8006796:	f7ff fa85 	bl	8005ca4 <LL_RCC_PLL_GetDivider>
 800679a:	4603      	mov	r3, r0
 800679c:	091b      	lsrs	r3, r3, #4
 800679e:	3301      	adds	r3, #1
 80067a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80067a4:	f7ff fa72 	bl	8005c8c <LL_RCC_PLL_GetR>
 80067a8:	4603      	mov	r3, r0
 80067aa:	0f5b      	lsrs	r3, r3, #29
 80067ac:	3301      	adds	r3, #1
 80067ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80067b2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd90      	pop	{r4, r7, pc}
 80067be:	bf00      	nop
 80067c0:	0800be24 	.word	0x0800be24
 80067c4:	00f42400 	.word	0x00f42400
 80067c8:	01e84800 	.word	0x01e84800

080067cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067cc:	b598      	push	{r3, r4, r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80067d0:	f7ff ff90 	bl	80066f4 <HAL_RCC_GetSysClockFreq>
 80067d4:	4604      	mov	r4, r0
 80067d6:	f7ff fa02 	bl	8005bde <LL_RCC_GetAHBPrescaler>
 80067da:	4603      	mov	r3, r0
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	4a03      	ldr	r2, [pc, #12]	; (80067f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80067e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd98      	pop	{r3, r4, r7, pc}
 80067f0:	0800bde4 	.word	0x0800bde4

080067f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2bb0      	cmp	r3, #176	; 0xb0
 8006800:	d903      	bls.n	800680a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e007      	b.n	800681a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	4a11      	ldr	r2, [pc, #68]	; (8006858 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006818:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800681a:	f7ff f9ec 	bl	8005bf6 <LL_RCC_GetAHB4Prescaler>
 800681e:	4603      	mov	r3, r0
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006832:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006838:	fba2 2303 	umull	r2, r3, r2, r3
 800683c:	0c9c      	lsrs	r4, r3, #18
 800683e:	f7fe ff03 	bl	8005648 <HAL_PWREx_GetVoltageRange>
 8006842:	4603      	mov	r3, r0
 8006844:	4619      	mov	r1, r3
 8006846:	4620      	mov	r0, r4
 8006848:	f000 f80c 	bl	8006864 <RCC_SetFlashLatency>
 800684c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	bf00      	nop
 8006858:	0800be24 	.word	0x0800be24
 800685c:	0800bde4 	.word	0x0800bde4
 8006860:	431bde83 	.word	0x431bde83

08006864 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b093      	sub	sp, #76	; 0x4c
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800686e:	4b37      	ldr	r3, [pc, #220]	; (800694c <RCC_SetFlashLatency+0xe8>)
 8006870:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006876:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800687a:	4a35      	ldr	r2, [pc, #212]	; (8006950 <RCC_SetFlashLatency+0xec>)
 800687c:	f107 031c 	add.w	r3, r7, #28
 8006880:	ca07      	ldmia	r2, {r0, r1, r2}
 8006882:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006886:	4b33      	ldr	r3, [pc, #204]	; (8006954 <RCC_SetFlashLatency+0xf0>)
 8006888:	f107 040c 	add.w	r4, r7, #12
 800688c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800688e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006892:	2300      	movs	r3, #0
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d11a      	bne.n	80068d4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800689e:	2300      	movs	r3, #0
 80068a0:	643b      	str	r3, [r7, #64]	; 0x40
 80068a2:	e013      	b.n	80068cc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80068a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	3348      	adds	r3, #72	; 0x48
 80068aa:	443b      	add	r3, r7
 80068ac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d807      	bhi.n	80068c6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80068b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	3348      	adds	r3, #72	; 0x48
 80068bc:	443b      	add	r3, r7
 80068be:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80068c2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80068c4:	e020      	b.n	8006908 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c8:	3301      	adds	r3, #1
 80068ca:	643b      	str	r3, [r7, #64]	; 0x40
 80068cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d9e8      	bls.n	80068a4 <RCC_SetFlashLatency+0x40>
 80068d2:	e019      	b.n	8006908 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068d4:	2300      	movs	r3, #0
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d8:	e013      	b.n	8006902 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80068da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	3348      	adds	r3, #72	; 0x48
 80068e0:	443b      	add	r3, r7
 80068e2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d807      	bhi.n	80068fc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80068ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	3348      	adds	r3, #72	; 0x48
 80068f2:	443b      	add	r3, r7
 80068f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80068f8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80068fa:	e005      	b.n	8006908 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fe:	3301      	adds	r3, #1
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	2b02      	cmp	r3, #2
 8006906:	d9e8      	bls.n	80068da <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006908:	4b13      	ldr	r3, [pc, #76]	; (8006958 <RCC_SetFlashLatency+0xf4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f023 0207 	bic.w	r2, r3, #7
 8006910:	4911      	ldr	r1, [pc, #68]	; (8006958 <RCC_SetFlashLatency+0xf4>)
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006918:	f7fd fa12 	bl	8003d40 <HAL_GetTick>
 800691c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800691e:	e008      	b.n	8006932 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006920:	f7fd fa0e 	bl	8003d40 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e007      	b.n	8006942 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <RCC_SetFlashLatency+0xf4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800693c:	429a      	cmp	r2, r3
 800693e:	d1ef      	bne.n	8006920 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	374c      	adds	r7, #76	; 0x4c
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	0800bda0 	.word	0x0800bda0
 8006950:	0800bdb0 	.word	0x0800bdb0
 8006954:	0800bdbc 	.word	0x0800bdbc
 8006958:	58004000 	.word	0x58004000

0800695c <LL_RCC_LSE_IsEnabled>:
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <LL_RCC_LSE_IsEnabled+0x18>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <LL_RCC_LSE_IsEnabled+0x1a>
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <LL_RCC_LSE_IsReady>:
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d101      	bne.n	8006998 <LL_RCC_LSE_IsReady+0x18>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <LL_RCC_LSE_IsReady+0x1a>
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <LL_RCC_SetRFWKPClockSource>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4313      	orrs	r3, r2
 80069c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <LL_RCC_SetSMPSClockSource>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	f023 0203 	bic.w	r2, r3, #3
 80069e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	624b      	str	r3, [r1, #36]	; 0x24
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <LL_RCC_SetSMPSPrescaler>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_RCC_SetUSARTClockSource>:
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a30:	f023 0203 	bic.w	r2, r3, #3
 8006a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <LL_RCC_SetLPUARTClockSource>:
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <LL_RCC_SetI2CClockSource>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	091b      	lsrs	r3, r3, #4
 8006a8c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a90:	43db      	mvns	r3, r3
 8006a92:	401a      	ands	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <LL_RCC_SetLPTIMClockSource>:
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006abe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	041b      	lsls	r3, r3, #16
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	401a      	ands	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <LL_RCC_SetSAIClockSource>:
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <LL_RCC_SetRNGClockSource>:
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <LL_RCC_SetCLK48ClockSource>:
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <LL_RCC_SetUSBClockSource>:
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff ffe3 	bl	8006b3e <LL_RCC_SetCLK48ClockSource>
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <LL_RCC_SetADCClockSource>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <LL_RCC_SetRTCClockSource>:
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <LL_RCC_GetRTCClockSource>:
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_RCC_ForceBackupDomainReset>:
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c0a:	bf00      	nop
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c2c:	bf00      	nop
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <LL_RCC_PLLSAI1_Enable>:
{
 8006c36:	b480      	push	{r7}
 8006c38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c48:	6013      	str	r3, [r2, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <LL_RCC_PLLSAI1_Disable>:
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c66:	6013      	str	r3, [r2, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <LL_RCC_PLLSAI1_IsReady>:
{
 8006c72:	b480      	push	{r7}
 8006c74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c84:	d101      	bne.n	8006c8a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b088      	sub	sp, #32
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d034      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cba:	d021      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006cbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cc0:	d81b      	bhi.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cc6:	d01d      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ccc:	d815      	bhi.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00b      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cd6:	d110      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ce8:	e00d      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f947 	bl	8006f82 <RCCEx_PLLSAI1_ConfigNP>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006cf8:	e005      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	77fb      	strb	r3, [r7, #31]
        break;
 8006cfe:	e002      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d06:	7ffb      	ldrb	r3, [r7, #31]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fee8 	bl	8006ae6 <LL_RCC_SetSAIClockSource>
 8006d16:	e001      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	7ffb      	ldrb	r3, [r7, #31]
 8006d1a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d046      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006d28:	f7ff ff56 	bl	8006bd8 <LL_RCC_GetRTCClockSource>
 8006d2c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d03c      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006d38:	f7fe fc2e 	bl	8005598 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff ff30 	bl	8006bac <LL_RCC_SetRTCClockSource>
 8006d4c:	e02e      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006d58:	f7ff ff4b 	bl	8006bf2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006d5c:	f7ff ff5a 	bl	8006c14 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006d78:	f7ff fdf0 	bl	800695c <LL_RCC_LSE_IsEnabled>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d114      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d82:	f7fc ffdd 	bl	8003d40 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006d88:	e00b      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fc ffd9 	bl	8003d40 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d902      	bls.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	77fb      	strb	r3, [r7, #31]
              break;
 8006da0:	e004      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006da2:	f7ff fded 	bl	8006980 <LL_RCC_LSE_IsReady>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d1ee      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006dac:	7ffb      	ldrb	r3, [r7, #31]
 8006dae:	77bb      	strb	r3, [r7, #30]
 8006db0:	e001      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	7ffb      	ldrb	r3, [r7, #31]
 8006db4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fe2a 	bl	8006a20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fe35 	bl	8006a4c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fe5d 	bl	8006ab2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fe52 	bl	8006ab2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fe2a 	bl	8006a78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff fe1f 	bl	8006a78 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d022      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fe8d 	bl	8006b6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e58:	d107      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e68:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e72:	d10b      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f8dd 	bl	8007038 <RCCEx_PLLSAI1_ConfigNQ>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006e82:	7ffb      	ldrb	r3, [r7, #31]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006e88:	7ffb      	ldrb	r3, [r7, #31]
 8006e8a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d02b      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea0:	d008      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eaa:	d003      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fe2a 	bl	8006b12 <LL_RCC_SetRNGClockSource>
 8006ebe:	e00a      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	2000      	movs	r0, #0
 8006ecc:	f7ff fe21 	bl	8006b12 <LL_RCC_SetRNGClockSource>
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff fe34 	bl	8006b3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d022      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fe3d 	bl	8006b80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f28:	d10b      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f8dd 	bl	80070ee <RCCEx_PLLSAI1_ConfigNR>
 8006f34:	4603      	mov	r3, r0
 8006f36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006f38:	7ffb      	ldrb	r3, [r7, #31]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006f3e:	7ffb      	ldrb	r3, [r7, #31]
 8006f40:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fd26 	bl	80069a4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fd45 	bl	80069f8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fd2c 	bl	80069d0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006f78:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006f8e:	f7ff fe61 	bl	8006c54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f92:	f7fc fed5 	bl	8003d40 <HAL_GetTick>
 8006f96:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f98:	e009      	b.n	8006fae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f9a:	f7fc fed1 	bl	8003d40 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d902      	bls.n	8006fae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	73fb      	strb	r3, [r7, #15]
      break;
 8006fac:	e004      	b.n	8006fb8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006fae:	f7ff fe60 	bl	8006c72 <LL_RCC_PLLSAI1_IsReady>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d137      	bne.n	800702e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006fec:	f7ff fe23 	bl	8006c36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff0:	f7fc fea6 	bl	8003d40 <HAL_GetTick>
 8006ff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ff6:	e009      	b.n	800700c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ff8:	f7fc fea2 	bl	8003d40 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d902      	bls.n	800700c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	73fb      	strb	r3, [r7, #15]
        break;
 800700a:	e004      	b.n	8007016 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800700c:	f7ff fe31 	bl	8006c72 <LL_RCC_PLLSAI1_IsReady>
 8007010:	4603      	mov	r3, r0
 8007012:	2b01      	cmp	r3, #1
 8007014:	d1f0      	bne.n	8006ff8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d108      	bne.n	800702e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800701c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800702a:	4313      	orrs	r3, r2
 800702c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007044:	f7ff fe06 	bl	8006c54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007048:	f7fc fe7a 	bl	8003d40 <HAL_GetTick>
 800704c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800704e:	e009      	b.n	8007064 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007050:	f7fc fe76 	bl	8003d40 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d902      	bls.n	8007064 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	73fb      	strb	r3, [r7, #15]
      break;
 8007062:	e004      	b.n	800706e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007064:	f7ff fe05 	bl	8006c72 <LL_RCC_PLLSAI1_IsReady>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d137      	bne.n	80070e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007088:	4313      	orrs	r3, r2
 800708a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800708c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800709e:	4313      	orrs	r3, r2
 80070a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80070a2:	f7ff fdc8 	bl	8006c36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a6:	f7fc fe4b 	bl	8003d40 <HAL_GetTick>
 80070aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80070ac:	e009      	b.n	80070c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070ae:	f7fc fe47 	bl	8003d40 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d902      	bls.n	80070c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	73fb      	strb	r3, [r7, #15]
        break;
 80070c0:	e004      	b.n	80070cc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80070c2:	f7ff fdd6 	bl	8006c72 <LL_RCC_PLLSAI1_IsReady>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d1f0      	bne.n	80070ae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d108      	bne.n	80070e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80070d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070e0:	4313      	orrs	r3, r2
 80070e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80070fa:	f7ff fdab 	bl	8006c54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070fe:	f7fc fe1f 	bl	8003d40 <HAL_GetTick>
 8007102:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007104:	e009      	b.n	800711a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007106:	f7fc fe1b 	bl	8003d40 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d902      	bls.n	800711a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	73fb      	strb	r3, [r7, #15]
      break;
 8007118:	e004      	b.n	8007124 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800711a:	f7ff fdaa 	bl	8006c72 <LL_RCC_PLLSAI1_IsReady>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1f0      	bne.n	8007106 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d137      	bne.n	800719a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800712a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800713e:	4313      	orrs	r3, r2
 8007140:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007154:	4313      	orrs	r3, r2
 8007156:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007158:	f7ff fd6d 	bl	8006c36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800715c:	f7fc fdf0 	bl	8003d40 <HAL_GetTick>
 8007160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007162:	e009      	b.n	8007178 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007164:	f7fc fdec 	bl	8003d40 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d902      	bls.n	8007178 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	73fb      	strb	r3, [r7, #15]
        break;
 8007176:	e004      	b.n	8007182 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007178:	f7ff fd7b 	bl	8006c72 <LL_RCC_PLLSAI1_IsReady>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d1f0      	bne.n	8007164 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007196:	4313      	orrs	r3, r2
 8007198:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e09f      	b.n	80072f6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d106      	bne.n	80071d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fc fc02 	bl	80039d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80071d8:	4b49      	ldr	r3, [pc, #292]	; (8007300 <HAL_RTC_Init+0x15c>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d07e      	beq.n	80072e2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	22ca      	movs	r2, #202	; 0xca
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2253      	movs	r2, #83	; 0x53
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f8ab 	bl	8007350 <RTC_EnterInitMode>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	22ff      	movs	r2, #255	; 0xff
 8007206:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2204      	movs	r2, #4
 800720c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
 8007214:	e067      	b.n	80072e6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6812      	ldr	r2, [r2, #0]
 8007220:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007228:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6899      	ldr	r1, [r3, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	431a      	orrs	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	68d2      	ldr	r2, [r2, #12]
 8007250:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6919      	ldr	r1, [r3, #16]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	041a      	lsls	r2, r3, #16
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007274:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0203 	bic.w	r2, r2, #3
 8007284:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d113      	bne.n	80072d4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f829 	bl	8007304 <HAL_RTC_WaitForSynchro>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00d      	beq.n	80072d4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	22ff      	movs	r2, #255	; 0xff
 80072be:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2204      	movs	r2, #4
 80072c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e010      	b.n	80072f6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	22ff      	movs	r2, #255	; 0xff
 80072da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	e001      	b.n	80072e6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40002800 	.word	0x40002800

08007304 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800731a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800731c:	f7fc fd10 	bl	8003d40 <HAL_GetTick>
 8007320:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007322:	e009      	b.n	8007338 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007324:	f7fc fd0c 	bl	8003d40 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007332:	d901      	bls.n	8007338 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e007      	b.n	8007348 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0ee      	beq.n	8007324 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d119      	bne.n	800739a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007370:	f7fc fce6 	bl	8003d40 <HAL_GetTick>
 8007374:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007376:	e009      	b.n	800738c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007378:	f7fc fce2 	bl	8003d40 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007386:	d901      	bls.n	800738c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e007      	b.n	800739c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0ee      	beq.n	8007378 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e0a8      	b.n	8007510 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	22ca      	movs	r2, #202	; 0xca
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2253      	movs	r2, #83	; 0x53
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d020      	beq.n	800742e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80073ec:	f7fc fca8 	bl	8003d40 <HAL_GetTick>
 80073f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80073f2:	e015      	b.n	8007420 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073f4:	f7fc fca4 	bl	8003d40 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007402:	d90d      	bls.n	8007420 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2203      	movs	r2, #3
 8007410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e077      	b.n	8007510 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e2      	bne.n	80073f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800744e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007450:	f7fc fc76 	bl	8003d40 <HAL_GetTick>
 8007454:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007456:	e015      	b.n	8007484 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007458:	f7fc fc72 	bl	8003d40 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007466:	d90d      	bls.n	8007484 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	22ff      	movs	r2, #255	; 0xff
 800746e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2203      	movs	r2, #3
 8007474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e045      	b.n	8007510 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0e2      	beq.n	8007458 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0207 	bic.w	r2, r2, #7
 80074a8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6899      	ldr	r1, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80074ba:	4b17      	ldr	r3, [pc, #92]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80074bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c0:	4a15      	ldr	r2, [pc, #84]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80074c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a12      	ldr	r2, [pc, #72]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80074d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074d4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074e4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074f4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	22ff      	movs	r2, #255	; 0xff
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	58000800 	.word	0x58000800

0800751c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800751c:	b480      	push	{r7}
 800751e:	b091      	sub	sp, #68	; 0x44
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007530:	2b20      	cmp	r3, #32
 8007532:	d178      	bne.n	8007626 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_UART_Transmit_IT+0x24>
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e071      	b.n	8007628 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2221      	movs	r2, #33	; 0x21
 800756c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007578:	d12a      	bne.n	80075d0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007582:	d107      	bne.n	8007594 <HAL_UART_Transmit_IT+0x78>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4a29      	ldr	r2, [pc, #164]	; (8007634 <HAL_UART_Transmit_IT+0x118>)
 8007590:	679a      	str	r2, [r3, #120]	; 0x78
 8007592:	e002      	b.n	800759a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a28      	ldr	r2, [pc, #160]	; (8007638 <HAL_UART_Transmit_IT+0x11c>)
 8007598:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ba:	637a      	str	r2, [r7, #52]	; 0x34
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e5      	bne.n	800759a <HAL_UART_Transmit_IT+0x7e>
 80075ce:	e028      	b.n	8007622 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d8:	d107      	bne.n	80075ea <HAL_UART_Transmit_IT+0xce>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a15      	ldr	r2, [pc, #84]	; (800763c <HAL_UART_Transmit_IT+0x120>)
 80075e6:	679a      	str	r2, [r3, #120]	; 0x78
 80075e8:	e002      	b.n	80075f0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a14      	ldr	r2, [pc, #80]	; (8007640 <HAL_UART_Transmit_IT+0x124>)
 80075ee:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760e:	623b      	str	r3, [r7, #32]
 8007610:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	69f9      	ldr	r1, [r7, #28]
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	61bb      	str	r3, [r7, #24]
   return(result);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e000      	b.n	8007628 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007626:	2302      	movs	r3, #2
  }
}
 8007628:	4618      	mov	r0, r3
 800762a:	3744      	adds	r7, #68	; 0x44
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	0800800b 	.word	0x0800800b
 8007638:	08007f2b 	.word	0x08007f2b
 800763c:	08007e69 	.word	0x08007e69
 8007640:	08007db1 	.word	0x08007db1

08007644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b0ba      	sub	sp, #232	; 0xe8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800766a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800766e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007672:	4013      	ands	r3, r2
 8007674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d11b      	bne.n	80076b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d015      	beq.n	80076b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800768c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007690:	f003 0320 	and.w	r3, r3, #32
 8007694:	2b00      	cmp	r3, #0
 8007696:	d105      	bne.n	80076a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 82e3 	beq.w	8007c74 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
      }
      return;
 80076b6:	e2dd      	b.n	8007c74 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 8123 	beq.w	8007908 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076c6:	4b8d      	ldr	r3, [pc, #564]	; (80078fc <HAL_UART_IRQHandler+0x2b8>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076d2:	4b8b      	ldr	r3, [pc, #556]	; (8007900 <HAL_UART_IRQHandler+0x2bc>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8116 	beq.w	8007908 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d011      	beq.n	800770c <HAL_UART_IRQHandler+0xc8>
 80076e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2201      	movs	r2, #1
 80076fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007702:	f043 0201 	orr.w	r2, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d011      	beq.n	800773c <HAL_UART_IRQHandler+0xf8>
 8007718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2202      	movs	r2, #2
 800772a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007732:	f043 0204 	orr.w	r2, r3, #4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d011      	beq.n	800776c <HAL_UART_IRQHandler+0x128>
 8007748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2204      	movs	r2, #4
 800775a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	f043 0202 	orr.w	r2, r3, #2
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800776c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d017      	beq.n	80077a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007784:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007788:	4b5c      	ldr	r3, [pc, #368]	; (80078fc <HAL_UART_IRQHandler+0x2b8>)
 800778a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2208      	movs	r2, #8
 8007796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779e:	f043 0208 	orr.w	r2, r3, #8
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d012      	beq.n	80077da <HAL_UART_IRQHandler+0x196>
 80077b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00c      	beq.n	80077da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d0:	f043 0220 	orr.w	r2, r3, #32
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8249 	beq.w	8007c78 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d013      	beq.n	800781a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d105      	bne.n	800780a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d005      	beq.n	800783e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007836:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800783a:	2b00      	cmp	r3, #0
 800783c:	d054      	beq.n	80078e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa3a 	bl	8007cb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d146      	bne.n	80078e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800786c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3308      	adds	r3, #8
 800787a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800787e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800788a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1d9      	bne.n	8007852 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d017      	beq.n	80078d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ae:	4a15      	ldr	r2, [pc, #84]	; (8007904 <HAL_UART_IRQHandler+0x2c0>)
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fc fc97 	bl	80041ec <HAL_DMA_Abort_IT>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d019      	beq.n	80078f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80078d2:	4610      	mov	r0, r2
 80078d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d6:	e00f      	b.n	80078f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9d7 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078de:	e00b      	b.n	80078f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9d3 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e6:	e007      	b.n	80078f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f9cf 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80078f6:	e1bf      	b.n	8007c78 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	bf00      	nop
    return;
 80078fa:	e1bd      	b.n	8007c78 <HAL_UART_IRQHandler+0x634>
 80078fc:	10000001 	.word	0x10000001
 8007900:	04000120 	.word	0x04000120
 8007904:	08007d85 	.word	0x08007d85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790c:	2b01      	cmp	r3, #1
 800790e:	f040 8153 	bne.w	8007bb8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 814c 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8145 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2210      	movs	r2, #16
 8007934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	f040 80bb 	bne.w	8007abc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 818f 	beq.w	8007c7c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007968:	429a      	cmp	r2, r3
 800796a:	f080 8187 	bcs.w	8007c7c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007974:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	f040 8087 	bne.w	8007a9a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1da      	bne.n	800798c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e1      	bne.n	80079d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e3      	bne.n	8007a12 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e4      	bne.n	8007a58 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fc fb4a 	bl	800412e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f8f3 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007aba:	e0df      	b.n	8007c7c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80d1 	beq.w	8007c80 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80cc 	beq.w	8007c80 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e4      	bne.n	8007ae8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3308      	adds	r3, #8
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b34:	f023 0301 	bic.w	r3, r3, #1
 8007b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3308      	adds	r3, #8
 8007b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b46:	633a      	str	r2, [r7, #48]	; 0x30
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e1      	bne.n	8007b1e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0310 	bic.w	r3, r3, #16
 8007b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	69b9      	ldr	r1, [r7, #24]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e4      	bne.n	8007b6e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007baa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f875 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bb6:	e063      	b.n	8007c80 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00e      	beq.n	8007be2 <HAL_UART_IRQHandler+0x59e>
 8007bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fab5 	bl	800814a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007be0:	e051      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d014      	beq.n	8007c18 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d008      	beq.n	8007c18 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d03a      	beq.n	8007c84 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    }
    return;
 8007c16:	e035      	b.n	8007c84 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5f4>
 8007c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fa5f 	bl	80080f4 <UART_EndTransmit_IT>
    return;
 8007c36:	e026      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <HAL_UART_IRQHandler+0x614>
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fa8e 	bl	8008172 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c56:	e016      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d010      	beq.n	8007c86 <HAL_UART_IRQHandler+0x642>
 8007c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da0c      	bge.n	8007c86 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fa76 	bl	800815e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c72:	e008      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
      return;
 8007c74:	bf00      	nop
 8007c76:	e006      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
    return;
 8007c78:	bf00      	nop
 8007c7a:	e004      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
      return;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
      return;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <HAL_UART_IRQHandler+0x642>
    return;
 8007c84:	bf00      	nop
  }
}
 8007c86:	37e8      	adds	r7, #232	; 0xe8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b095      	sub	sp, #84	; 0x54
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cde:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e6      	bne.n	8007cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e3      	bne.n	8007cf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d118      	bne.n	8007d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f023 0310 	bic.w	r3, r3, #16
 8007d46:	647b      	str	r3, [r7, #68]	; 0x44
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	6979      	ldr	r1, [r7, #20]
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e6      	bne.n	8007d32 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d78:	bf00      	nop
 8007d7a:	3754      	adds	r7, #84	; 0x54
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff ff72 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b08f      	sub	sp, #60	; 0x3c
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbe:	2b21      	cmp	r3, #33	; 0x21
 8007dc0:	d14c      	bne.n	8007e5c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d132      	bne.n	8007e34 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e6      	bne.n	8007dce <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6979      	ldr	r1, [r7, #20]
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e6      	bne.n	8007e00 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007e32:	e013      	b.n	8007e5c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007e5c:	bf00      	nop
 8007e5e:	373c      	adds	r7, #60	; 0x3c
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b091      	sub	sp, #68	; 0x44
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e76:	2b21      	cmp	r3, #33	; 0x21
 8007e78:	d151      	bne.n	8007f1e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d132      	bne.n	8007eec <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	623b      	str	r3, [r7, #32]
   return(result);
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	69b9      	ldr	r1, [r7, #24]
 8007edc:	69fa      	ldr	r2, [r7, #28]
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007eea:	e018      	b.n	8007f1e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f00:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f06:	1c9a      	adds	r2, r3, #2
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007f1e:	bf00      	nop
 8007f20:	3744      	adds	r7, #68	; 0x44
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b091      	sub	sp, #68	; 0x44
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f38:	2b21      	cmp	r3, #33	; 0x21
 8007f3a:	d160      	bne.n	8007ffe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f42:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f44:	e057      	b.n	8007ff6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d133      	bne.n	8007fba <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	623b      	str	r3, [r7, #32]
   return(result);
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f72:	633a      	str	r2, [r7, #48]	; 0x30
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e5      	bne.n	8007f52 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e6      	bne.n	8007f86 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007fb8:	e021      	b.n	8007ffe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d013      	beq.n	8007ff0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fcc:	781a      	ldrb	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007ff0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007ff6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1a4      	bne.n	8007f46 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007ffc:	e7ff      	b.n	8007ffe <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007ffe:	bf00      	nop
 8008000:	3744      	adds	r7, #68	; 0x44
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800800a:	b480      	push	{r7}
 800800c:	b091      	sub	sp, #68	; 0x44
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008018:	2b21      	cmp	r3, #33	; 0x21
 800801a:	d165      	bne.n	80080e8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008022:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008024:	e05c      	b.n	80080e0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800802c:	b29b      	uxth	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d133      	bne.n	800809a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	61fb      	str	r3, [r7, #28]
   return(result);
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	60bb      	str	r3, [r7, #8]
   return(result);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800807a:	633b      	str	r3, [r7, #48]	; 0x30
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	6979      	ldr	r1, [r7, #20]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	e841 2300 	strex	r3, r2, [r1]
 8008090:	613b      	str	r3, [r7, #16]
   return(result);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e6      	bne.n	8008066 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008098:	e026      	b.n	80080e8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d018      	beq.n	80080da <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ac:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080bc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c2:	1c9a      	adds	r2, r3, #2
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080dc:	3b01      	subs	r3, #1
 80080de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80080e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d19f      	bne.n	8008026 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80080e6:	e7ff      	b.n	80080e8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80080e8:	bf00      	nop
 80080ea:	3744      	adds	r7, #68	; 0x44
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	60bb      	str	r3, [r7, #8]
   return(result);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008110:	61fb      	str	r3, [r7, #28]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6979      	ldr	r1, [r7, #20]
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	613b      	str	r3, [r7, #16]
   return(result);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e6      	bne.n	80080fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7fa ff73 	bl	8003028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008142:	bf00      	nop
 8008144:	3720      	adds	r7, #32
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008190:	f7f9 f99c 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008194:	f7f9 f92c 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008198:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f062 0208 	orn	r2, r2, #8
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	2200      	movs	r2, #0
 80081a6:	705a      	strb	r2, [r3, #1]
 80081a8:	2200      	movs	r2, #0
 80081aa:	709a      	strb	r2, [r3, #2]
 80081ac:	2200      	movs	r2, #0
 80081ae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f042 0201 	orr.w	r2, r2, #1
 80081b8:	711a      	strb	r2, [r3, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	715a      	strb	r2, [r3, #5]
 80081be:	2200      	movs	r2, #0
 80081c0:	719a      	strb	r2, [r3, #6]
 80081c2:	2200      	movs	r2, #0
 80081c4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80081cc:	f7f9 f958 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80081d0:	f7f9 f91a 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80081d4:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]

}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
 80081ee:	4613      	mov	r3, r2
 80081f0:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80081f2:	f7f9 f96b 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80081f6:	f7f9 f8fb 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80081fa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f062 0228 	orn	r2, r2, #40	; 0x28
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	2200      	movs	r2, #0
 8008208:	705a      	strb	r2, [r3, #1]
 800820a:	2200      	movs	r2, #0
 800820c:	709a      	strb	r2, [r3, #2]
 800820e:	2200      	movs	r2, #0
 8008210:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f042 0203 	orr.w	r2, r2, #3
 800821a:	711a      	strb	r2, [r3, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	715a      	strb	r2, [r3, #5]
 8008220:	2200      	movs	r2, #0
 8008222:	719a      	strb	r2, [r3, #6]
 8008224:	2200      	movs	r2, #0
 8008226:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 8008234:	78ba      	ldrb	r2, [r7, #2]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800823a:	f7f9 f921 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800823e:	f7f9 f8e3 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008242:	60f8      	str	r0, [r7, #12]
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4611      	mov	r1, r2
 8008258:	461a      	mov	r2, r3
 800825a:	460b      	mov	r3, r1
 800825c:	71fb      	strb	r3, [r7, #7]
 800825e:	4613      	mov	r3, r2
 8008260:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8008262:	f7f9 f933 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008266:	f7f9 f8c3 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 800826a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2200      	movs	r2, #0
 8008270:	f062 0227 	orn	r2, r2, #39	; 0x27
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	705a      	strb	r2, [r3, #1]
 800827a:	2200      	movs	r2, #0
 800827c:	709a      	strb	r2, [r3, #2]
 800827e:	2200      	movs	r2, #0
 8008280:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2200      	movs	r2, #0
 8008286:	f042 0204 	orr.w	r2, r2, #4
 800828a:	711a      	strb	r2, [r3, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	715a      	strb	r2, [r3, #5]
 8008290:	2200      	movs	r2, #0
 8008292:	719a      	strb	r2, [r3, #6]
 8008294:	2200      	movs	r2, #0
 8008296:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 80082a4:	79fa      	ldrb	r2, [r7, #7]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 80082aa:	79ba      	ldrb	r2, [r7, #6]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 80082b0:	f7f9 f8e6 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80082b4:	f7f9 f8a8 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80082b8:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	b2db      	uxtb	r3, r3
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 80082d6:	f7f9 f8f9 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80082da:	f7f9 f889 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80082de:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f062 0226 	orn	r2, r2, #38	; 0x26
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	705a      	strb	r2, [r3, #1]
 80082ee:	2200      	movs	r2, #0
 80082f0:	709a      	strb	r2, [r3, #2]
 80082f2:	2200      	movs	r2, #0
 80082f4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f042 0203 	orr.w	r2, r2, #3
 80082fe:	711a      	strb	r2, [r3, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	715a      	strb	r2, [r3, #5]
 8008304:	2200      	movs	r2, #0
 8008306:	719a      	strb	r2, [r3, #6]
 8008308:	2200      	movs	r2, #0
 800830a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 8008318:	79fa      	ldrb	r2, [r7, #7]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800831e:	f7f9 f8af 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008322:	f7f9 f871 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008326:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	b2db      	uxtb	r3, r3
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008342:	f7f9 f8c3 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008346:	f7f9 f853 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 800834a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f062 0225 	orn	r2, r2, #37	; 0x25
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	2200      	movs	r2, #0
 8008358:	705a      	strb	r2, [r3, #1]
 800835a:	2200      	movs	r2, #0
 800835c:	709a      	strb	r2, [r3, #2]
 800835e:	2200      	movs	r2, #0
 8008360:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f042 0202 	orr.w	r2, r2, #2
 800836a:	711a      	strb	r2, [r3, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	715a      	strb	r2, [r3, #5]
 8008370:	2200      	movs	r2, #0
 8008372:	719a      	strb	r2, [r3, #6]
 8008374:	2200      	movs	r2, #0
 8008376:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8008384:	f7f9 f87c 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008388:	f7f9 f83e 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 800838c:	60f8      	str	r0, [r7, #12]
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80083a0:	f7f9 f894 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80083a4:	f7f9 f824 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80083a8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f062 0220 	orn	r2, r2, #32
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	2200      	movs	r2, #0
 80083b6:	705a      	strb	r2, [r3, #1]
 80083b8:	2200      	movs	r2, #0
 80083ba:	709a      	strb	r2, [r3, #2]
 80083bc:	2200      	movs	r2, #0
 80083be:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f042 0202 	orr.w	r2, r2, #2
 80083c8:	711a      	strb	r2, [r3, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	715a      	strb	r2, [r3, #5]
 80083ce:	2200      	movs	r2, #0
 80083d0:	719a      	strb	r2, [r3, #6]
 80083d2:	2200      	movs	r2, #0
 80083d4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80083e2:	f7f9 f84d 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80083e6:	f7f9 f80f 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80083ea:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	b2db      	uxtb	r3, r3
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008402:	f7f9 f863 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008406:	f7f8 fff3 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 800840a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f062 0219 	orn	r2, r2, #25
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	705a      	strb	r2, [r3, #1]
 800841a:	2200      	movs	r2, #0
 800841c:	709a      	strb	r2, [r3, #2]
 800841e:	2200      	movs	r2, #0
 8008420:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	711a      	strb	r2, [r3, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	715a      	strb	r2, [r3, #5]
 8008430:	2200      	movs	r2, #0
 8008432:	719a      	strb	r2, [r3, #6]
 8008434:	2200      	movs	r2, #0
 8008436:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800843e:	f7f9 f81f 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008442:	f7f8 ffe1 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008446:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	b2db      	uxtb	r3, r3
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800845e:	f7f9 f835 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008462:	f7f8 ffc5 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008466:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f062 0217 	orn	r2, r2, #23
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	705a      	strb	r2, [r3, #1]
 8008476:	2200      	movs	r2, #0
 8008478:	709a      	strb	r2, [r3, #2]
 800847a:	2200      	movs	r2, #0
 800847c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f042 0201 	orr.w	r2, r2, #1
 8008486:	711a      	strb	r2, [r3, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	715a      	strb	r2, [r3, #5]
 800848c:	2200      	movs	r2, #0
 800848e:	719a      	strb	r2, [r3, #6]
 8008490:	2200      	movs	r2, #0
 8008492:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800849a:	f7f8 fff1 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800849e:	f7f8 ffb3 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80084a2:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	b2db      	uxtb	r3, r3
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80084be:	f7f9 f805 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80084c2:	f7f8 ff95 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80084c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f062 0216 	orn	r2, r2, #22
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	2200      	movs	r2, #0
 80084d4:	705a      	strb	r2, [r3, #1]
 80084d6:	2200      	movs	r2, #0
 80084d8:	709a      	strb	r2, [r3, #2]
 80084da:	2200      	movs	r2, #0
 80084dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f042 0202 	orr.w	r2, r2, #2
 80084e6:	711a      	strb	r2, [r3, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	715a      	strb	r2, [r3, #5]
 80084ec:	2200      	movs	r2, #0
 80084ee:	719a      	strb	r2, [r3, #6]
 80084f0:	2200      	movs	r2, #0
 80084f2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8008500:	f7f8 ffbe 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008504:	f7f8 ff80 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008508:	60f8      	str	r0, [r7, #12]
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800851a:	f7f8 ffd7 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800851e:	f7f8 ff67 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008522:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f062 0213 	orn	r2, r2, #19
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	705a      	strb	r2, [r3, #1]
 8008532:	2200      	movs	r2, #0
 8008534:	709a      	strb	r2, [r3, #2]
 8008536:	2200      	movs	r2, #0
 8008538:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	711a      	strb	r2, [r3, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	715a      	strb	r2, [r3, #5]
 8008548:	2200      	movs	r2, #0
 800854a:	719a      	strb	r2, [r3, #6]
 800854c:	2200      	movs	r2, #0
 800854e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008556:	f7f8 ff93 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800855a:	f7f8 ff55 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 800855e:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	b2db      	uxtb	r3, r3
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008576:	f7f8 ffa9 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800857a:	f7f8 ff39 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 800857e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f062 0212 	orn	r2, r2, #18
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	705a      	strb	r2, [r3, #1]
 800858e:	2200      	movs	r2, #0
 8008590:	709a      	strb	r2, [r3, #2]
 8008592:	2200      	movs	r2, #0
 8008594:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f042 0201 	orr.w	r2, r2, #1
 800859e:	711a      	strb	r2, [r3, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	715a      	strb	r2, [r3, #5]
 80085a4:	2200      	movs	r2, #0
 80085a6:	719a      	strb	r2, [r3, #6]
 80085a8:	2200      	movs	r2, #0
 80085aa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80085b2:	f7f8 ff65 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80085b6:	f7f8 ff27 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80085ba:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 80085d6:	f7f8 ff79 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80085da:	f7f8 ff09 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80085de:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f062 0209 	orn	r2, r2, #9
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	2200      	movs	r2, #0
 80085ec:	705a      	strb	r2, [r3, #1]
 80085ee:	2200      	movs	r2, #0
 80085f0:	709a      	strb	r2, [r3, #2]
 80085f2:	2200      	movs	r2, #0
 80085f4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f042 0205 	orr.w	r2, r2, #5
 80085fe:	711a      	strb	r2, [r3, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	715a      	strb	r2, [r3, #5]
 8008604:	2200      	movs	r2, #0
 8008606:	719a      	strb	r2, [r3, #6]
 8008608:	2200      	movs	r2, #0
 800860a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 800861e:	6a3a      	ldr	r2, [r7, #32]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 8008624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 800862a:	f7f8 ff29 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800862e:	f7f8 feeb 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008632:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	b2db      	uxtb	r3, r3
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800864e:	f7f8 ff3d 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008652:	f7f8 fecd 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008656:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f062 0207 	orn	r2, r2, #7
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	2200      	movs	r2, #0
 8008664:	705a      	strb	r2, [r3, #1]
 8008666:	2200      	movs	r2, #0
 8008668:	709a      	strb	r2, [r3, #2]
 800866a:	2200      	movs	r2, #0
 800866c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	711a      	strb	r2, [r3, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	715a      	strb	r2, [r3, #5]
 800867c:	2200      	movs	r2, #0
 800867e:	719a      	strb	r2, [r3, #6]
 8008680:	2200      	movs	r2, #0
 8008682:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 8008684:	887a      	ldrh	r2, [r7, #2]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800868a:	f7f8 fef9 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800868e:	f7f8 febb 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008692:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	b2db      	uxtb	r3, r3
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80086ac:	f7f8 ff0e 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80086b0:	f7f8 fe9e 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80086b4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f062 0203 	orn	r2, r2, #3
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	705a      	strb	r2, [r3, #1]
 80086c4:	2200      	movs	r2, #0
 80086c6:	709a      	strb	r2, [r3, #2]
 80086c8:	2200      	movs	r2, #0
 80086ca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f042 0201 	orr.w	r2, r2, #1
 80086d4:	711a      	strb	r2, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	715a      	strb	r2, [r3, #5]
 80086da:	2200      	movs	r2, #0
 80086dc:	719a      	strb	r2, [r3, #6]
 80086de:	2200      	movs	r2, #0
 80086e0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80086e8:	f7f8 feca 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80086ec:	f7f8 fe8c 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80086f0:	60f8      	str	r0, [r7, #12]
}
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 8008708:	f7f8 fee0 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800870c:	f7f8 fe70 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008710:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	2200      	movs	r2, #0
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	705a      	strb	r2, [r3, #1]
 8008720:	2200      	movs	r2, #0
 8008722:	709a      	strb	r2, [r3, #2]
 8008724:	2200      	movs	r2, #0
 8008726:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2200      	movs	r2, #0
 800872c:	f042 0203 	orr.w	r2, r2, #3
 8008730:	711a      	strb	r2, [r3, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	715a      	strb	r2, [r3, #5]
 8008736:	2200      	movs	r2, #0
 8008738:	719a      	strb	r2, [r3, #6]
 800873a:	2200      	movs	r2, #0
 800873c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008750:	f7f8 fe96 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008754:	f7f8 fe58 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008758:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	b2db      	uxtb	r3, r3
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 800876e:	f7f8 fead 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008772:	f7f8 fe3d 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008776:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f062 0235 	orn	r2, r2, #53	; 0x35
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	705a      	strb	r2, [r3, #1]
 8008786:	2200      	movs	r2, #0
 8008788:	709a      	strb	r2, [r3, #2]
 800878a:	2200      	movs	r2, #0
 800878c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	711a      	strb	r2, [r3, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	715a      	strb	r2, [r3, #5]
 8008798:	2200      	movs	r2, #0
 800879a:	719a      	strb	r2, [r3, #6]
 800879c:	2200      	movs	r2, #0
 800879e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80087a0:	f7f8 fe6e 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80087a4:	f7f8 fe30 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80087a8:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80087be:	f7f8 fe85 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80087c2:	f7f8 fe15 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80087c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f062 0233 	orn	r2, r2, #51	; 0x33
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	705a      	strb	r2, [r3, #1]
 80087d6:	2200      	movs	r2, #0
 80087d8:	709a      	strb	r2, [r3, #2]
 80087da:	2200      	movs	r2, #0
 80087dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	711a      	strb	r2, [r3, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	715a      	strb	r2, [r3, #5]
 80087e8:	2200      	movs	r2, #0
 80087ea:	719a      	strb	r2, [r3, #6]
 80087ec:	2200      	movs	r2, #0
 80087ee:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80087f0:	f7f8 fe46 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80087f4:	f7f8 fe08 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80087f8:	60f8      	str	r0, [r7, #12]
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 8008810:	f7f8 fe5c 	bl	80014cc <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 8008814:	4a15      	ldr	r2, [pc, #84]	; (800886c <otSetStateChangedCallback+0x68>)
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800881a:	f7f8 fde9 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 800881e:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2200      	movs	r2, #0
 8008824:	f062 0232 	orn	r2, r2, #50	; 0x32
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	705a      	strb	r2, [r3, #1]
 800882e:	2200      	movs	r2, #0
 8008830:	709a      	strb	r2, [r3, #2]
 8008832:	2200      	movs	r2, #0
 8008834:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2200      	movs	r2, #0
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	711a      	strb	r2, [r3, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	715a      	strb	r2, [r3, #5]
 8008844:	2200      	movs	r2, #0
 8008846:	719a      	strb	r2, [r3, #6]
 8008848:	2200      	movs	r2, #0
 800884a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008852:	f7f8 fe15 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008856:	f7f8 fdd7 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 800885a:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	b2db      	uxtb	r3, r3
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200005b8 	.word	0x200005b8

08008870 <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008878:	f7f8 fe28 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800887c:	f7f8 fdb8 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008880:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f062 022c 	orn	r2, r2, #44	; 0x2c
 800888a:	701a      	strb	r2, [r3, #0]
 800888c:	2200      	movs	r2, #0
 800888e:	705a      	strb	r2, [r3, #1]
 8008890:	2200      	movs	r2, #0
 8008892:	709a      	strb	r2, [r3, #2]
 8008894:	2200      	movs	r2, #0
 8008896:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	711a      	strb	r2, [r3, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	715a      	strb	r2, [r3, #5]
 80088a2:	2200      	movs	r2, #0
 80088a4:	719a      	strb	r2, [r3, #6]
 80088a6:	2200      	movs	r2, #0
 80088a8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80088aa:	f7f8 fde9 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80088ae:	f7f8 fdab 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80088b2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	b2db      	uxtb	r3, r3
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80088ce:	f7f8 fdfd 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80088d2:	f7f8 fd8d 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80088d6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	2200      	movs	r2, #0
 80088e4:	705a      	strb	r2, [r3, #1]
 80088e6:	2200      	movs	r2, #0
 80088e8:	709a      	strb	r2, [r3, #2]
 80088ea:	2200      	movs	r2, #0
 80088ec:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	711a      	strb	r2, [r3, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	715a      	strb	r2, [r3, #5]
 80088fc:	2200      	movs	r2, #0
 80088fe:	719a      	strb	r2, [r3, #6]
 8008900:	2200      	movs	r2, #0
 8008902:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800890a:	f7f8 fdb9 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800890e:	f7f8 fd7b 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008912:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	b2db      	uxtb	r3, r3
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	460b      	mov	r3, r1
 800892c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800892e:	f7f8 fdcd 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008932:	f7f8 fd5d 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008936:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f042 0207 	orr.w	r2, r2, #7
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	705a      	strb	r2, [r3, #1]
 8008946:	2200      	movs	r2, #0
 8008948:	709a      	strb	r2, [r3, #2]
 800894a:	2200      	movs	r2, #0
 800894c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f042 0201 	orr.w	r2, r2, #1
 8008956:	711a      	strb	r2, [r3, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	715a      	strb	r2, [r3, #5]
 800895c:	2200      	movs	r2, #0
 800895e:	719a      	strb	r2, [r3, #6]
 8008960:	2200      	movs	r2, #0
 8008962:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800896a:	f7f8 fd89 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800896e:	f7f8 fd4b 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008972:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	b2db      	uxtb	r3, r3
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800898e:	f7f8 fd9d 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008992:	f7f8 fd2d 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008996:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f042 020e 	orr.w	r2, r2, #14
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	2200      	movs	r2, #0
 80089a4:	705a      	strb	r2, [r3, #1]
 80089a6:	2200      	movs	r2, #0
 80089a8:	709a      	strb	r2, [r3, #2]
 80089aa:	2200      	movs	r2, #0
 80089ac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	711a      	strb	r2, [r3, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	715a      	strb	r2, [r3, #5]
 80089bc:	2200      	movs	r2, #0
 80089be:	719a      	strb	r2, [r3, #6]
 80089c0:	2200      	movs	r2, #0
 80089c2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80089c4:	887a      	ldrh	r2, [r7, #2]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80089ca:	f7f8 fd59 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80089ce:	f7f8 fd1b 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80089d2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	b2db      	uxtb	r3, r3
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80089ec:	f7f8 fd6e 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80089f0:	f7f8 fcfe 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80089f4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f042 0210 	orr.w	r2, r2, #16
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	705a      	strb	r2, [r3, #1]
 8008a04:	2200      	movs	r2, #0
 8008a06:	709a      	strb	r2, [r3, #2]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f042 0201 	orr.w	r2, r2, #1
 8008a14:	711a      	strb	r2, [r3, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	715a      	strb	r2, [r3, #5]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	719a      	strb	r2, [r3, #6]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008a28:	f7f8 fd2a 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008a2c:	f7f8 fcec 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a30:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	b2db      	uxtb	r3, r3
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008a48:	f7f8 fd40 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008a4c:	f7f8 fcd0 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008a50:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f042 0216 	orr.w	r2, r2, #22
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	705a      	strb	r2, [r3, #1]
 8008a64:	2200      	movs	r2, #0
 8008a66:	709a      	strb	r2, [r3, #2]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	711a      	strb	r2, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	715a      	strb	r2, [r3, #5]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	719a      	strb	r2, [r3, #6]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008a88:	f7f8 fcfa 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008a8c:	f7f8 fcbc 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a90:	60f8      	str	r0, [r7, #12]
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008aa2:	f7f8 fd13 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008aa6:	f7f8 fca3 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008aaa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f042 0219 	orr.w	r2, r2, #25
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f042 0201 	orr.w	r2, r2, #1
 8008abc:	705a      	strb	r2, [r3, #1]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	709a      	strb	r2, [r3, #2]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f042 0201 	orr.w	r2, r2, #1
 8008ace:	711a      	strb	r2, [r3, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	715a      	strb	r2, [r3, #5]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	719a      	strb	r2, [r3, #6]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008ae2:	f7f8 fccd 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008ae6:	f7f8 fc8f 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008aea:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	b29b      	uxth	r3, r3
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	4613      	mov	r3, r2
 8008b06:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8008b08:	f7f8 fce0 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008b0c:	f7f8 fc70 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008b10:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f042 021e 	orr.w	r2, r2, #30
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f042 0201 	orr.w	r2, r2, #1
 8008b22:	705a      	strb	r2, [r3, #1]
 8008b24:	2200      	movs	r2, #0
 8008b26:	709a      	strb	r2, [r3, #2]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f042 0203 	orr.w	r2, r2, #3
 8008b34:	711a      	strb	r2, [r3, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	715a      	strb	r2, [r3, #5]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	719a      	strb	r2, [r3, #6]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008b54:	f7f8 fc94 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008b58:	f7f8 fc56 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008b5c:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	b2db      	uxtb	r3, r3
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	461a      	mov	r2, r3
 8008b78:	460b      	mov	r3, r1
 8008b7a:	817b      	strh	r3, [r7, #10]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8008b80:	f7f8 fca4 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008b84:	f7f8 fc34 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8008b88:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f042 021f 	orr.w	r2, r2, #31
 8008b92:	701a      	strb	r2, [r3, #0]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f042 0201 	orr.w	r2, r2, #1
 8008b9a:	705a      	strb	r2, [r3, #1]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	709a      	strb	r2, [r3, #2]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f042 0204 	orr.w	r2, r2, #4
 8008bac:	711a      	strb	r2, [r3, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	715a      	strb	r2, [r3, #5]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	719a      	strb	r2, [r3, #6]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8008bc0:	897a      	ldrh	r2, [r7, #10]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8008bcc:	893a      	ldrh	r2, [r7, #8]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8008bd2:	f7f8 fc55 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008bd6:	f7f8 fc17 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008bda:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	b29b      	uxth	r3, r3
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8008bec:	b5b0      	push	{r4, r5, r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8008bf6:	f7f8 fc13 	bl	8001420 <THREAD_Get_NotificationPayloadBuffer>
 8008bfa:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	2b48      	cmp	r3, #72	; 0x48
 8008c04:	f200 8543 	bhi.w	800968e <OpenThread_CallBack_Processing+0xaa2>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <OpenThread_CallBack_Processing+0x24>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008f7b 	.word	0x08008f7b
 8008c14:	08009033 	.word	0x08009033
 8008c18:	0800908b 	.word	0x0800908b
 8008c1c:	08009137 	.word	0x08009137
 8008c20:	08009143 	.word	0x08009143
 8008c24:	08009161 	.word	0x08009161
 8008c28:	0800968f 	.word	0x0800968f
 8008c2c:	0800918b 	.word	0x0800918b
 8008c30:	080091a5 	.word	0x080091a5
 8008c34:	080091d9 	.word	0x080091d9
 8008c38:	080091f7 	.word	0x080091f7
 8008c3c:	08009215 	.word	0x08009215
 8008c40:	0800968f 	.word	0x0800968f
 8008c44:	0800923f 	.word	0x0800923f
 8008c48:	080092a1 	.word	0x080092a1
 8008c4c:	080092c7 	.word	0x080092c7
 8008c50:	080092e7 	.word	0x080092e7
 8008c54:	08009305 	.word	0x08009305
 8008c58:	0800968f 	.word	0x0800968f
 8008c5c:	0800932d 	.word	0x0800932d
 8008c60:	08009355 	.word	0x08009355
 8008c64:	0800968f 	.word	0x0800968f
 8008c68:	08009373 	.word	0x08009373
 8008c6c:	08009397 	.word	0x08009397
 8008c70:	080093c1 	.word	0x080093c1
 8008c74:	08008da1 	.word	0x08008da1
 8008c78:	08008dc5 	.word	0x08008dc5
 8008c7c:	08008de9 	.word	0x08008de9
 8008c80:	08008e13 	.word	0x08008e13
 8008c84:	0800968f 	.word	0x0800968f
 8008c88:	080093e1 	.word	0x080093e1
 8008c8c:	0800968f 	.word	0x0800968f
 8008c90:	0800968f 	.word	0x0800968f
 8008c94:	0800968f 	.word	0x0800968f
 8008c98:	0800968f 	.word	0x0800968f
 8008c9c:	0800968f 	.word	0x0800968f
 8008ca0:	08009069 	.word	0x08009069
 8008ca4:	080090c9 	.word	0x080090c9
 8008ca8:	080090ef 	.word	0x080090ef
 8008cac:	08009115 	.word	0x08009115
 8008cb0:	08009403 	.word	0x08009403
 8008cb4:	08009441 	.word	0x08009441
 8008cb8:	08009459 	.word	0x08009459
 8008cbc:	08008f97 	.word	0x08008f97
 8008cc0:	08008ffd 	.word	0x08008ffd
 8008cc4:	0800968f 	.word	0x0800968f
 8008cc8:	08008e3d 	.word	0x08008e3d
 8008ccc:	08008e5d 	.word	0x08008e5d
 8008cd0:	08008e7d 	.word	0x08008e7d
 8008cd4:	08008e9d 	.word	0x08008e9d
 8008cd8:	08008ebf 	.word	0x08008ebf
 8008cdc:	08008ee1 	.word	0x08008ee1
 8008ce0:	0800968f 	.word	0x0800968f
 8008ce4:	0800968f 	.word	0x0800968f
 8008ce8:	08008d35 	.word	0x08008d35
 8008cec:	08008d59 	.word	0x08008d59
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	0800968f 	.word	0x0800968f
 8008cf8:	0800968f 	.word	0x0800968f
 8008cfc:	08008f03 	.word	0x08008f03
 8008d00:	08008f21 	.word	0x08008f21
 8008d04:	0800968f 	.word	0x0800968f
 8008d08:	08008f53 	.word	0x08008f53
 8008d0c:	08009015 	.word	0x08009015
 8008d10:	08009487 	.word	0x08009487
 8008d14:	080094a5 	.word	0x080094a5
 8008d18:	080094c3 	.word	0x080094c3
 8008d1c:	08009541 	.word	0x08009541
 8008d20:	0800956f 	.word	0x0800956f
 8008d24:	080095b3 	.word	0x080095b3
 8008d28:	0800961d 	.word	0x0800961d
 8008d2c:	0800965b 	.word	0x0800965b
 8008d30:	080095e7 	.word	0x080095e7
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 8008d34:	4b9f      	ldr	r3, [pc, #636]	; (8008fb4 <OpenThread_CallBack_Processing+0x3c8>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 84ab 	beq.w	8009694 <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008d3e:	4b9d      	ldr	r3, [pc, #628]	; (8008fb4 <OpenThread_CallBack_Processing+0x3c8>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	6892      	ldr	r2, [r2, #8]
 8008d46:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008d4c:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008d52:	4798      	blx	r3
    }
    break;
 8008d54:	f000 bc9e 	b.w	8009694 <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8008d58:	4b97      	ldr	r3, [pc, #604]	; (8008fb8 <OpenThread_CallBack_Processing+0x3cc>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 849b 	beq.w	8009698 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008d62:	4b95      	ldr	r3, [pc, #596]	; (8008fb8 <OpenThread_CallBack_Processing+0x3cc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	6892      	ldr	r2, [r2, #8]
 8008d6a:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008d70:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008d76:	4798      	blx	r3
    }
    break;
 8008d78:	f000 bc8e 	b.w	8009698 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8008d7c:	4b8f      	ldr	r3, [pc, #572]	; (8008fbc <OpenThread_CallBack_Processing+0x3d0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 848b 	beq.w	800969c <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008d86:	4b8d      	ldr	r3, [pc, #564]	; (8008fbc <OpenThread_CallBack_Processing+0x3d0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	6892      	ldr	r2, [r2, #8]
 8008d8e:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008d94:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008d9a:	4798      	blx	r3
    }
    break;
 8008d9c:	f000 bc7e 	b.w	800969c <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8008da0:	4b87      	ldr	r3, [pc, #540]	; (8008fc0 <OpenThread_CallBack_Processing+0x3d4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 847b 	beq.w	80096a0 <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008daa:	4b85      	ldr	r3, [pc, #532]	; (8008fc0 <OpenThread_CallBack_Processing+0x3d4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	6892      	ldr	r2, [r2, #8]
 8008db2:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008db8:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008dbe:	4798      	blx	r3
    }
    break;
 8008dc0:	f000 bc6e 	b.w	80096a0 <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 8008dc4:	4b7f      	ldr	r3, [pc, #508]	; (8008fc4 <OpenThread_CallBack_Processing+0x3d8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 846b 	beq.w	80096a4 <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008dce:	4b7d      	ldr	r3, [pc, #500]	; (8008fc4 <OpenThread_CallBack_Processing+0x3d8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	6892      	ldr	r2, [r2, #8]
 8008dd6:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008ddc:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008de2:	4798      	blx	r3
    }
    break;
 8008de4:	f000 bc5e 	b.w	80096a4 <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 8008de8:	4b77      	ldr	r3, [pc, #476]	; (8008fc8 <OpenThread_CallBack_Processing+0x3dc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 845b 	beq.w	80096a8 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008df2:	4b75      	ldr	r3, [pc, #468]	; (8008fc8 <OpenThread_CallBack_Processing+0x3dc>)
 8008df4:	681c      	ldr	r4, [r3, #0]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008e00:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008e06:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008e0c:	47a0      	blx	r4
    }
    break;
 8008e0e:	f000 bc4b 	b.w	80096a8 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 8008e12:	4b6e      	ldr	r3, [pc, #440]	; (8008fcc <OpenThread_CallBack_Processing+0x3e0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8448 	beq.w	80096ac <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008e1c:	4b6b      	ldr	r3, [pc, #428]	; (8008fcc <OpenThread_CallBack_Processing+0x3e0>)
 8008e1e:	681c      	ldr	r4, [r3, #0]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008e2a:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008e30:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008e36:	47a0      	blx	r4
    }
    break;
 8008e38:	f000 bc38 	b.w	80096ac <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 8008e3c:	4b64      	ldr	r3, [pc, #400]	; (8008fd0 <OpenThread_CallBack_Processing+0x3e4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8435 	beq.w	80096b0 <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8008e46:	4b62      	ldr	r3, [pc, #392]	; (8008fd0 <OpenThread_CallBack_Processing+0x3e4>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	6892      	ldr	r2, [r2, #8]
 8008e4e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8008e54:	4611      	mov	r1, r2
 8008e56:	4798      	blx	r3
    }
    break;
 8008e58:	f000 bc2a 	b.w	80096b0 <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 8008e5c:	4b5d      	ldr	r3, [pc, #372]	; (8008fd4 <OpenThread_CallBack_Processing+0x3e8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8427 	beq.w	80096b4 <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8008e66:	4b5b      	ldr	r3, [pc, #364]	; (8008fd4 <OpenThread_CallBack_Processing+0x3e8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	6892      	ldr	r2, [r2, #8]
 8008e6e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8008e74:	4611      	mov	r1, r2
 8008e76:	4798      	blx	r3
    }
    break;
 8008e78:	f000 bc1c 	b.w	80096b4 <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 8008e7c:	4b56      	ldr	r3, [pc, #344]	; (8008fd8 <OpenThread_CallBack_Processing+0x3ec>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 8419 	beq.w	80096b8 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8008e86:	4b54      	ldr	r3, [pc, #336]	; (8008fd8 <OpenThread_CallBack_Processing+0x3ec>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	6892      	ldr	r2, [r2, #8]
 8008e8e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8008e94:	4611      	mov	r1, r2
 8008e96:	4798      	blx	r3
    }
    break;
 8008e98:	f000 bc0e 	b.w	80096b8 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 8008e9c:	4b4f      	ldr	r3, [pc, #316]	; (8008fdc <OpenThread_CallBack_Processing+0x3f0>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 840b 	beq.w	80096bc <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 8008ea6:	4b4d      	ldr	r3, [pc, #308]	; (8008fdc <OpenThread_CallBack_Processing+0x3f0>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	6892      	ldr	r2, [r2, #8]
 8008eae:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8008eb4:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8008eba:	4798      	blx	r3
    }
    break;
 8008ebc:	e3fe      	b.n	80096bc <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 8008ebe:	4b48      	ldr	r3, [pc, #288]	; (8008fe0 <OpenThread_CallBack_Processing+0x3f4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 83fc 	beq.w	80096c0 <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 8008ec8:	4b45      	ldr	r3, [pc, #276]	; (8008fe0 <OpenThread_CallBack_Processing+0x3f4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	6892      	ldr	r2, [r2, #8]
 8008ed0:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 8008ed6:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 8008edc:	4798      	blx	r3
    }
    break;
 8008ede:	e3ef      	b.n	80096c0 <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 8008ee0:	4b3f      	ldr	r3, [pc, #252]	; (8008fe0 <OpenThread_CallBack_Processing+0x3f4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 83ed 	beq.w	80096c4 <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 8008eea:	4b3e      	ldr	r3, [pc, #248]	; (8008fe4 <OpenThread_CallBack_Processing+0x3f8>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	6892      	ldr	r2, [r2, #8]
 8008ef2:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 8008ef8:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 8008efe:	4798      	blx	r3
    }
    break;
 8008f00:	e3e0      	b.n	80096c4 <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 8008f02:	4b39      	ldr	r3, [pc, #228]	; (8008fe8 <OpenThread_CallBack_Processing+0x3fc>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 83de 	beq.w	80096c8 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8008f0c:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <OpenThread_CallBack_Processing+0x3fc>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	6892      	ldr	r2, [r2, #8]
 8008f14:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4798      	blx	r3
    }
    break;
 8008f1e:	e3d3      	b.n	80096c8 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 8008f20:	4b32      	ldr	r3, [pc, #200]	; (8008fec <OpenThread_CallBack_Processing+0x400>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 83d1 	beq.w	80096cc <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 8008f2a:	4b30      	ldr	r3, [pc, #192]	; (8008fec <OpenThread_CallBack_Processing+0x400>)
 8008f2c:	681c      	ldr	r4, [r3, #0]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 8008f38:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 8008f3e:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 8008f44:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	462b      	mov	r3, r5
 8008f4e:	47a0      	blx	r4
    }
    break;
 8008f50:	e3bc      	b.n	80096cc <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 8008f52:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <OpenThread_CallBack_Processing+0x404>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 83ba 	beq.w	80096d0 <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008f5c:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <OpenThread_CallBack_Processing+0x404>)
 8008f5e:	681c      	ldr	r4, [r3, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008f6a:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008f70:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8008f76:	47a0      	blx	r4
    }
    break;
 8008f78:	e3aa      	b.n	80096d0 <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 8008f7a:	4b1e      	ldr	r3, [pc, #120]	; (8008ff4 <OpenThread_CallBack_Processing+0x408>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 83a8 	beq.w	80096d4 <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8008f84:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <OpenThread_CallBack_Processing+0x408>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8008f90:	4611      	mov	r1, r2
 8008f92:	4798      	blx	r3
    }
    break;
 8008f94:	e39e      	b.n	80096d4 <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 8008f96:	4b18      	ldr	r3, [pc, #96]	; (8008ff8 <OpenThread_CallBack_Processing+0x40c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 839c 	beq.w	80096d8 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8008fa0:	4b15      	ldr	r3, [pc, #84]	; (8008ff8 <OpenThread_CallBack_Processing+0x40c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	6892      	ldr	r2, [r2, #8]
 8008fa8:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4798      	blx	r3
    }
    break;
 8008fb2:	e391      	b.n	80096d8 <OpenThread_CallBack_Processing+0xaec>
 8008fb4:	2000064c 	.word	0x2000064c
 8008fb8:	20000654 	.word	0x20000654
 8008fbc:	20000650 	.word	0x20000650
 8008fc0:	200005e0 	.word	0x200005e0
 8008fc4:	200005dc 	.word	0x200005dc
 8008fc8:	200005e4 	.word	0x200005e4
 8008fcc:	200005d8 	.word	0x200005d8
 8008fd0:	20000658 	.word	0x20000658
 8008fd4:	2000065c 	.word	0x2000065c
 8008fd8:	20000660 	.word	0x20000660
 8008fdc:	20000668 	.word	0x20000668
 8008fe0:	20000664 	.word	0x20000664
 8008fe4:	2000066c 	.word	0x2000066c
 8008fe8:	20000678 	.word	0x20000678
 8008fec:	20000674 	.word	0x20000674
 8008ff0:	20000670 	.word	0x20000670
 8008ff4:	200005b8 	.word	0x200005b8
 8008ff8:	200005e8 	.word	0x200005e8
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 8008ffc:	4b97      	ldr	r3, [pc, #604]	; (800925c <OpenThread_CallBack_Processing+0x670>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 836b 	beq.w	80096dc <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 8009006:	4b95      	ldr	r3, [pc, #596]	; (800925c <OpenThread_CallBack_Processing+0x670>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	6892      	ldr	r2, [r2, #8]
 800900e:	4610      	mov	r0, r2
 8009010:	4798      	blx	r3
    }
    break;
 8009012:	e363      	b.n	80096dc <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 8009014:	4b92      	ldr	r3, [pc, #584]	; (8009260 <OpenThread_CallBack_Processing+0x674>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 8361 	beq.w	80096e0 <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800901e:	4b90      	ldr	r3, [pc, #576]	; (8009260 <OpenThread_CallBack_Processing+0x674>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	6892      	ldr	r2, [r2, #8]
 8009026:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800902c:	4611      	mov	r1, r2
 800902e:	4798      	blx	r3
    }
    break;
 8009030:	e356      	b.n	80096e0 <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	461a      	mov	r2, r3
 8009038:	4b8a      	ldr	r3, [pc, #552]	; (8009264 <OpenThread_CallBack_Processing+0x678>)
 800903a:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800903c:	4b89      	ldr	r3, [pc, #548]	; (8009264 <OpenThread_CallBack_Processing+0x678>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4a89      	ldr	r2, [pc, #548]	; (8009268 <OpenThread_CallBack_Processing+0x67c>)
 8009044:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 8009046:	4b88      	ldr	r3, [pc, #544]	; (8009268 <OpenThread_CallBack_Processing+0x67c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 834a 	beq.w	80096e4 <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009050:	4b85      	ldr	r3, [pc, #532]	; (8009268 <OpenThread_CallBack_Processing+0x67c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a83      	ldr	r2, [pc, #524]	; (8009264 <OpenThread_CallBack_Processing+0x678>)
 8009056:	6812      	ldr	r2, [r2, #0]
 8009058:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800905e:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009064:	4798      	blx	r3
    }
    break;
 8009066:	e33d      	b.n	80096e4 <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 8009068:	4b80      	ldr	r3, [pc, #512]	; (800926c <OpenThread_CallBack_Processing+0x680>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 833b 	beq.w	80096e8 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009072:	4b7e      	ldr	r3, [pc, #504]	; (800926c <OpenThread_CallBack_Processing+0x680>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	6892      	ldr	r2, [r2, #8]
 800907a:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009080:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009086:	4798      	blx	r3
    }
    break;
 8009088:	e32e      	b.n	80096e8 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	461a      	mov	r2, r3
 8009090:	4b77      	ldr	r3, [pc, #476]	; (8009270 <OpenThread_CallBack_Processing+0x684>)
 8009092:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 8009094:	4b76      	ldr	r3, [pc, #472]	; (8009270 <OpenThread_CallBack_Processing+0x684>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	4a76      	ldr	r2, [pc, #472]	; (8009274 <OpenThread_CallBack_Processing+0x688>)
 800909c:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800909e:	4b75      	ldr	r3, [pc, #468]	; (8009274 <OpenThread_CallBack_Processing+0x688>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 8322 	beq.w	80096ec <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80090a8:	4b72      	ldr	r3, [pc, #456]	; (8009274 <OpenThread_CallBack_Processing+0x688>)
 80090aa:	681c      	ldr	r4, [r3, #0]
 80090ac:	4b70      	ldr	r3, [pc, #448]	; (8009270 <OpenThread_CallBack_Processing+0x684>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80090b6:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80090bc:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	47a0      	blx	r4
    }
    break;
 80090c6:	e311      	b.n	80096ec <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 80090c8:	4b6b      	ldr	r3, [pc, #428]	; (8009278 <OpenThread_CallBack_Processing+0x68c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 830f 	beq.w	80096f0 <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80090d2:	4b69      	ldr	r3, [pc, #420]	; (8009278 <OpenThread_CallBack_Processing+0x68c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	6892      	ldr	r2, [r2, #8]
 80090da:	2a00      	cmp	r2, #0
 80090dc:	bf14      	ite	ne
 80090de:	2201      	movne	r2, #1
 80090e0:	2200      	moveq	r2, #0
 80090e2:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80090e8:	4611      	mov	r1, r2
 80090ea:	4798      	blx	r3
    }
    break;
 80090ec:	e300      	b.n	80096f0 <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 80090ee:	4b62      	ldr	r3, [pc, #392]	; (8009278 <OpenThread_CallBack_Processing+0x68c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 82fe 	beq.w	80096f4 <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80090f8:	4b5f      	ldr	r3, [pc, #380]	; (8009278 <OpenThread_CallBack_Processing+0x68c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	6892      	ldr	r2, [r2, #8]
 8009100:	2a00      	cmp	r2, #0
 8009102:	bf14      	ite	ne
 8009104:	2201      	movne	r2, #1
 8009106:	2200      	moveq	r2, #0
 8009108:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800910e:	4611      	mov	r1, r2
 8009110:	4798      	blx	r3
    }
    break;
 8009112:	e2ef      	b.n	80096f4 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 8009114:	4b59      	ldr	r3, [pc, #356]	; (800927c <OpenThread_CallBack_Processing+0x690>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 82ed 	beq.w	80096f8 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800911e:	4b57      	ldr	r3, [pc, #348]	; (800927c <OpenThread_CallBack_Processing+0x690>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	6892      	ldr	r2, [r2, #8]
 8009126:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800912c:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8009132:	4798      	blx	r3
    }
    break;
 8009134:	e2e0      	b.n	80096f8 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 8009136:	2001      	movs	r0, #1
 8009138:	f000 fb78 	bl	800982c <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800913c:	f7fa ffcb 	bl	80040d6 <HAL_NVIC_SystemReset>
    break;
 8009140:	e317      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 8009142:	4b4f      	ldr	r3, [pc, #316]	; (8009280 <OpenThread_CallBack_Processing+0x694>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 82d8 	beq.w	80096fc <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800914c:	4b4c      	ldr	r3, [pc, #304]	; (8009280 <OpenThread_CallBack_Processing+0x694>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	6892      	ldr	r2, [r2, #8]
 8009154:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800915a:	4611      	mov	r1, r2
 800915c:	4798      	blx	r3
    }
    break;
 800915e:	e2cd      	b.n	80096fc <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 8009160:	4b48      	ldr	r3, [pc, #288]	; (8009284 <OpenThread_CallBack_Processing+0x698>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 82cb 	beq.w	8009700 <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800916a:	4b46      	ldr	r3, [pc, #280]	; (8009284 <OpenThread_CallBack_Processing+0x698>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	6892      	ldr	r2, [r2, #8]
 8009172:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009178:	2a00      	cmp	r2, #0
 800917a:	bf14      	ite	ne
 800917c:	2201      	movne	r2, #1
 800917e:	2200      	moveq	r2, #0
 8009180:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009186:	4798      	blx	r3
    }
    break;
 8009188:	e2ba      	b.n	8009700 <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800918a:	4b3f      	ldr	r3, [pc, #252]	; (8009288 <OpenThread_CallBack_Processing+0x69c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 82b8 	beq.w	8009704 <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 8009194:	4b3c      	ldr	r3, [pc, #240]	; (8009288 <OpenThread_CallBack_Processing+0x69c>)
 8009196:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800919c:	4611      	mov	r1, r2
 800919e:	2000      	movs	r0, #0
 80091a0:	4798      	blx	r3
    }
    break;
 80091a2:	e2af      	b.n	8009704 <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <OpenThread_CallBack_Processing+0x6a0>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 82ad 	beq.w	8009708 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80091ae:	4b37      	ldr	r3, [pc, #220]	; (800928c <OpenThread_CallBack_Processing+0x6a0>)
 80091b0:	681c      	ldr	r4, [r3, #0]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80091bc:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80091c2:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80091c8:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	462b      	mov	r3, r5
 80091d4:	47a0      	blx	r4
    }
    break;
 80091d6:	e297      	b.n	8009708 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 80091d8:	4b2d      	ldr	r3, [pc, #180]	; (8009290 <OpenThread_CallBack_Processing+0x6a4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 8295 	beq.w	800970c <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80091e2:	4b2b      	ldr	r3, [pc, #172]	; (8009290 <OpenThread_CallBack_Processing+0x6a4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	6892      	ldr	r2, [r2, #8]
 80091ea:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80091f0:	4611      	mov	r1, r2
 80091f2:	4798      	blx	r3
    }
    break;
 80091f4:	e28a      	b.n	800970c <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 80091f6:	4b27      	ldr	r3, [pc, #156]	; (8009294 <OpenThread_CallBack_Processing+0x6a8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8288 	beq.w	8009710 <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8009200:	4b24      	ldr	r3, [pc, #144]	; (8009294 <OpenThread_CallBack_Processing+0x6a8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	6892      	ldr	r2, [r2, #8]
 8009208:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800920e:	4611      	mov	r1, r2
 8009210:	4798      	blx	r3
    }
    break;
 8009212:	e27d      	b.n	8009710 <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 8009214:	4b20      	ldr	r3, [pc, #128]	; (8009298 <OpenThread_CallBack_Processing+0x6ac>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 827b 	beq.w	8009714 <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800921e:	4b1e      	ldr	r3, [pc, #120]	; (8009298 <OpenThread_CallBack_Processing+0x6ac>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	6892      	ldr	r2, [r2, #8]
 8009226:	4610      	mov	r0, r2
          p_notification->Data[1],
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800922c:	2a00      	cmp	r2, #0
 800922e:	bf14      	ite	ne
 8009230:	2201      	movne	r2, #1
 8009232:	2200      	moveq	r2, #0
 8009234:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800923a:	4798      	blx	r3
    }
    break;
 800923c:	e26a      	b.n	8009714 <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800923e:	4b17      	ldr	r3, [pc, #92]	; (800929c <OpenThread_CallBack_Processing+0x6b0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 8268 	beq.w	8009718 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8009248:	4b14      	ldr	r3, [pc, #80]	; (800929c <OpenThread_CallBack_Processing+0x6b0>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	6892      	ldr	r2, [r2, #8]
 8009250:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8009256:	4611      	mov	r1, r2
 8009258:	4798      	blx	r3
    }
    break;
 800925a:	e25d      	b.n	8009718 <OpenThread_CallBack_Processing+0xb2c>
 800925c:	200005ec 	.word	0x200005ec
 8009260:	200005f0 	.word	0x200005f0
 8009264:	20000634 	.word	0x20000634
 8009268:	20000628 	.word	0x20000628
 800926c:	2000062c 	.word	0x2000062c
 8009270:	20000638 	.word	0x20000638
 8009274:	20000630 	.word	0x20000630
 8009278:	20000640 	.word	0x20000640
 800927c:	2000063c 	.word	0x2000063c
 8009280:	200005c0 	.word	0x200005c0
 8009284:	200005c4 	.word	0x200005c4
 8009288:	200005bc 	.word	0x200005bc
 800928c:	200005c8 	.word	0x200005c8
 8009290:	200005cc 	.word	0x200005cc
 8009294:	200005d0 	.word	0x200005d0
 8009298:	200005d4 	.word	0x200005d4
 800929c:	200005f4 	.word	0x200005f4
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 80092a0:	4b95      	ldr	r3, [pc, #596]	; (80094f8 <OpenThread_CallBack_Processing+0x90c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8239 	beq.w	800971c <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80092aa:	4b93      	ldr	r3, [pc, #588]	; (80094f8 <OpenThread_CallBack_Processing+0x90c>)
 80092ac:	681c      	ldr	r4, [r3, #0]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80092b6:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80092bc:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80092c2:	47a0      	blx	r4
    }
    break;
 80092c4:	e22a      	b.n	800971c <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 80092c6:	4b8d      	ldr	r3, [pc, #564]	; (80094fc <OpenThread_CallBack_Processing+0x910>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 8228 	beq.w	8009720 <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 80092d0:	4b8a      	ldr	r3, [pc, #552]	; (80094fc <OpenThread_CallBack_Processing+0x910>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	6892      	ldr	r2, [r2, #8]
 80092d8:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 80092e2:	4798      	blx	r3
    }
    break;
 80092e4:	e21c      	b.n	8009720 <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 80092e6:	4b86      	ldr	r3, [pc, #536]	; (8009500 <OpenThread_CallBack_Processing+0x914>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 821a 	beq.w	8009724 <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 80092f0:	4b83      	ldr	r3, [pc, #524]	; (8009500 <OpenThread_CallBack_Processing+0x914>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	6892      	ldr	r2, [r2, #8]
 80092f8:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 80092fe:	4611      	mov	r1, r2
 8009300:	4798      	blx	r3
    }
    break;
 8009302:	e20f      	b.n	8009724 <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 8009304:	4b7f      	ldr	r3, [pc, #508]	; (8009504 <OpenThread_CallBack_Processing+0x918>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 820d 	beq.w	8009728 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800930e:	4b7d      	ldr	r3, [pc, #500]	; (8009504 <OpenThread_CallBack_Processing+0x918>)
 8009310:	681c      	ldr	r4, [r3, #0]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800931c:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009322:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009328:	47a0      	blx	r4
    }
    break;
 800932a:	e1fd      	b.n	8009728 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800932c:	4b76      	ldr	r3, [pc, #472]	; (8009508 <OpenThread_CallBack_Processing+0x91c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 81fb 	beq.w	800972c <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009336:	4b74      	ldr	r3, [pc, #464]	; (8009508 <OpenThread_CallBack_Processing+0x91c>)
 8009338:	681c      	ldr	r4, [r3, #0]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009344:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800934a:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009350:	47a0      	blx	r4
    }
    break;
 8009352:	e1eb      	b.n	800972c <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 8009354:	4b6d      	ldr	r3, [pc, #436]	; (800950c <OpenThread_CallBack_Processing+0x920>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 81e9 	beq.w	8009730 <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800935e:	4b6b      	ldr	r3, [pc, #428]	; (800950c <OpenThread_CallBack_Processing+0x920>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	6892      	ldr	r2, [r2, #8]
 8009366:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800936c:	4611      	mov	r1, r2
 800936e:	4798      	blx	r3
    }
    break;
 8009370:	e1de      	b.n	8009730 <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 8009372:	4b67      	ldr	r3, [pc, #412]	; (8009510 <OpenThread_CallBack_Processing+0x924>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 81dc 	beq.w	8009734 <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800937c:	4b64      	ldr	r3, [pc, #400]	; (8009510 <OpenThread_CallBack_Processing+0x924>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	6892      	ldr	r2, [r2, #8]
 8009384:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800938a:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009390:	b2d2      	uxtb	r2, r2
 8009392:	4798      	blx	r3
    }
    break;
 8009394:	e1ce      	b.n	8009734 <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 8009396:	4b5f      	ldr	r3, [pc, #380]	; (8009514 <OpenThread_CallBack_Processing+0x928>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 81cc 	beq.w	8009738 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80093a0:	4b5c      	ldr	r3, [pc, #368]	; (8009514 <OpenThread_CallBack_Processing+0x928>)
 80093a2:	681c      	ldr	r4, [r3, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80093ae:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80093b4:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	47a0      	blx	r4
    }
    break;
 80093be:	e1bb      	b.n	8009738 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 80093c0:	4b55      	ldr	r3, [pc, #340]	; (8009518 <OpenThread_CallBack_Processing+0x92c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 81b9 	beq.w	800973c <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80093ca:	4b53      	ldr	r3, [pc, #332]	; (8009518 <OpenThread_CallBack_Processing+0x92c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	6892      	ldr	r2, [r2, #8]
 80093d2:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80093d8:	b252      	sxtb	r2, r2
 80093da:	4611      	mov	r1, r2
 80093dc:	4798      	blx	r3
    }
    break;
 80093de:	e1ad      	b.n	800973c <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 80093e0:	4b4e      	ldr	r3, [pc, #312]	; (800951c <OpenThread_CallBack_Processing+0x930>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 81ab 	beq.w	8009740 <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 80093ea:	4b4c      	ldr	r3, [pc, #304]	; (800951c <OpenThread_CallBack_Processing+0x930>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	6892      	ldr	r2, [r2, #8]
 80093f2:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 80093f8:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 80093fe:	4798      	blx	r3
    }
    break;
 8009400:	e19e      	b.n	8009740 <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	461a      	mov	r2, r3
 8009408:	4b45      	ldr	r3, [pc, #276]	; (8009520 <OpenThread_CallBack_Processing+0x934>)
 800940a:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800940c:	4b44      	ldr	r3, [pc, #272]	; (8009520 <OpenThread_CallBack_Processing+0x934>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	4a44      	ldr	r2, [pc, #272]	; (8009524 <OpenThread_CallBack_Processing+0x938>)
 8009414:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 8009416:	4b43      	ldr	r3, [pc, #268]	; (8009524 <OpenThread_CallBack_Processing+0x938>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 8192 	beq.w	8009744 <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8009420:	4b40      	ldr	r3, [pc, #256]	; (8009524 <OpenThread_CallBack_Processing+0x938>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a3e      	ldr	r2, [pc, #248]	; (8009520 <OpenThread_CallBack_Processing+0x934>)
 8009426:	6812      	ldr	r2, [r2, #0]
 8009428:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800942e:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8009434:	4798      	blx	r3
 8009436:	4603      	mov	r3, r0
 8009438:	461a      	mov	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	609a      	str	r2, [r3, #8]
      }
      break;
 800943e:	e181      	b.n	8009744 <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 8009440:	4b39      	ldr	r3, [pc, #228]	; (8009528 <OpenThread_CallBack_Processing+0x93c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 817f 	beq.w	8009748 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800944a:	4b37      	ldr	r3, [pc, #220]	; (8009528 <OpenThread_CallBack_Processing+0x93c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	6892      	ldr	r2, [r2, #8]
 8009452:	4610      	mov	r0, r2
 8009454:	4798      	blx	r3
    }
    break;
 8009456:	e177      	b.n	8009748 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 8009458:	4b34      	ldr	r3, [pc, #208]	; (800952c <OpenThread_CallBack_Processing+0x940>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 8175 	beq.w	800974c <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009462:	4b32      	ldr	r3, [pc, #200]	; (800952c <OpenThread_CallBack_Processing+0x940>)
 8009464:	6819      	ldr	r1, [r3, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009470:	2200      	movs	r2, #0
 8009472:	461c      	mov	r4, r3
 8009474:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800947a:	b2db      	uxtb	r3, r3
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	4622      	mov	r2, r4
 8009480:	462b      	mov	r3, r5
 8009482:	4788      	blx	r1
    }
    break;
 8009484:	e162      	b.n	800974c <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 8009486:	4b2a      	ldr	r3, [pc, #168]	; (8009530 <OpenThread_CallBack_Processing+0x944>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 8160 	beq.w	8009750 <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 8009490:	4b27      	ldr	r3, [pc, #156]	; (8009530 <OpenThread_CallBack_Processing+0x944>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	6892      	ldr	r2, [r2, #8]
 8009498:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800949e:	4611      	mov	r1, r2
 80094a0:	4798      	blx	r3
    }
    break;
 80094a2:	e155      	b.n	8009750 <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 80094a4:	4b23      	ldr	r3, [pc, #140]	; (8009534 <OpenThread_CallBack_Processing+0x948>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 8153 	beq.w	8009754 <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 80094ae:	4b21      	ldr	r3, [pc, #132]	; (8009534 <OpenThread_CallBack_Processing+0x948>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	6892      	ldr	r2, [r2, #8]
 80094b6:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 80094bc:	4611      	mov	r1, r2
 80094be:	4798      	blx	r3
    }
    break;
 80094c0:	e148      	b.n	8009754 <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80094ca:	4a1b      	ldr	r2, [pc, #108]	; (8009538 <OpenThread_CallBack_Processing+0x94c>)
 80094cc:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 80094ce:	4b1a      	ldr	r3, [pc, #104]	; (8009538 <OpenThread_CallBack_Processing+0x94c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	4a19      	ldr	r2, [pc, #100]	; (800953c <OpenThread_CallBack_Processing+0x950>)
 80094d6:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 80094d8:	4b18      	ldr	r3, [pc, #96]	; (800953c <OpenThread_CallBack_Processing+0x950>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 813b 	beq.w	8009758 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 80094e2:	4b16      	ldr	r3, [pc, #88]	; (800953c <OpenThread_CallBack_Processing+0x950>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	6892      	ldr	r2, [r2, #8]
 80094ea:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 80094f0:	b2d2      	uxtb	r2, r2
 80094f2:	4611      	mov	r1, r2
 80094f4:	4798      	blx	r3
    }
    break;
 80094f6:	e12f      	b.n	8009758 <OpenThread_CallBack_Processing+0xb6c>
 80094f8:	20000600 	.word	0x20000600
 80094fc:	20000604 	.word	0x20000604
 8009500:	200005f8 	.word	0x200005f8
 8009504:	200005fc 	.word	0x200005fc
 8009508:	20000608 	.word	0x20000608
 800950c:	2000060c 	.word	0x2000060c
 8009510:	20000610 	.word	0x20000610
 8009514:	20000614 	.word	0x20000614
 8009518:	20000618 	.word	0x20000618
 800951c:	2000061c 	.word	0x2000061c
 8009520:	20000624 	.word	0x20000624
 8009524:	20000620 	.word	0x20000620
 8009528:	20000644 	.word	0x20000644
 800952c:	20000648 	.word	0x20000648
 8009530:	2000067c 	.word	0x2000067c
 8009534:	20000680 	.word	0x20000680
 8009538:	20000684 	.word	0x20000684
 800953c:	2000068c 	.word	0x2000068c
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009548:	4a8d      	ldr	r2, [pc, #564]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 800954a:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800954c:	4b8c      	ldr	r3, [pc, #560]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	4a8c      	ldr	r2, [pc, #560]	; (8009784 <OpenThread_CallBack_Processing+0xb98>)
 8009554:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 8009556:	4b8b      	ldr	r3, [pc, #556]	; (8009784 <OpenThread_CallBack_Processing+0xb98>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 80fe 	beq.w	800975c <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 8009560:	4b88      	ldr	r3, [pc, #544]	; (8009784 <OpenThread_CallBack_Processing+0xb98>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	6892      	ldr	r2, [r2, #8]
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
    }
    break;
 800956c:	e0f6      	b.n	800975c <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009576:	4a82      	ldr	r2, [pc, #520]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 8009578:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800957a:	4b81      	ldr	r3, [pc, #516]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	4a81      	ldr	r2, [pc, #516]	; (8009788 <OpenThread_CallBack_Processing+0xb9c>)
 8009582:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 8009584:	4b80      	ldr	r3, [pc, #512]	; (8009788 <OpenThread_CallBack_Processing+0xb9c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 80e9 	beq.w	8009760 <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800958e:	4b7e      	ldr	r3, [pc, #504]	; (8009788 <OpenThread_CallBack_Processing+0xb9c>)
 8009590:	681c      	ldr	r4, [r3, #0]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bf14      	ite	ne
 80095a4:	2301      	movne	r3, #1
 80095a6:	2300      	moveq	r3, #0
 80095a8:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 80095ae:	47a0      	blx	r4
    }
    break;
 80095b0:	e0d6      	b.n	8009760 <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80095ba:	4a71      	ldr	r2, [pc, #452]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 80095bc:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 80095be:	4b70      	ldr	r3, [pc, #448]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	4a71      	ldr	r2, [pc, #452]	; (800978c <OpenThread_CallBack_Processing+0xba0>)
 80095c6:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 80095c8:	4b70      	ldr	r3, [pc, #448]	; (800978c <OpenThread_CallBack_Processing+0xba0>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 80c9 	beq.w	8009764 <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 80095d2:	4b6e      	ldr	r3, [pc, #440]	; (800978c <OpenThread_CallBack_Processing+0xba0>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	6892      	ldr	r2, [r2, #8]
 80095da:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 80095e0:	4611      	mov	r1, r2
 80095e2:	4798      	blx	r3
    }
    break;
 80095e4:	e0be      	b.n	8009764 <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80095ee:	4a64      	ldr	r2, [pc, #400]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 80095f0:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 80095f2:	4b63      	ldr	r3, [pc, #396]	; (8009780 <OpenThread_CallBack_Processing+0xb94>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	4a65      	ldr	r2, [pc, #404]	; (8009790 <OpenThread_CallBack_Processing+0xba4>)
 80095fa:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 80095fc:	4b64      	ldr	r3, [pc, #400]	; (8009790 <OpenThread_CallBack_Processing+0xba4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 80b1 	beq.w	8009768 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 8009606:	4b62      	ldr	r3, [pc, #392]	; (8009790 <OpenThread_CallBack_Processing+0xba4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	6892      	ldr	r2, [r2, #8]
 800960e:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 8009618:	4798      	blx	r3
    }
    break;
 800961a:	e0a5      	b.n	8009768 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	4a5c      	ldr	r2, [pc, #368]	; (8009794 <OpenThread_CallBack_Processing+0xba8>)
 8009624:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 8009626:	4b5b      	ldr	r3, [pc, #364]	; (8009794 <OpenThread_CallBack_Processing+0xba8>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	4a5a      	ldr	r2, [pc, #360]	; (8009798 <OpenThread_CallBack_Processing+0xbac>)
 800962e:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 8009630:	4b59      	ldr	r3, [pc, #356]	; (8009798 <OpenThread_CallBack_Processing+0xbac>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 8099 	beq.w	800976c <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800963a:	4b57      	ldr	r3, [pc, #348]	; (8009798 <OpenThread_CallBack_Processing+0xbac>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	6892      	ldr	r2, [r2, #8]
 8009642:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 8009648:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800964e:	4798      	blx	r3
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	609a      	str	r2, [r3, #8]
    }
    break;
 8009658:	e088      	b.n	800976c <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	4a4c      	ldr	r2, [pc, #304]	; (8009794 <OpenThread_CallBack_Processing+0xba8>)
 8009662:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 8009664:	4b4b      	ldr	r3, [pc, #300]	; (8009794 <OpenThread_CallBack_Processing+0xba8>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	4a4c      	ldr	r2, [pc, #304]	; (800979c <OpenThread_CallBack_Processing+0xbb0>)
 800966c:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800966e:	4b4b      	ldr	r3, [pc, #300]	; (800979c <OpenThread_CallBack_Processing+0xbb0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d07c      	beq.n	8009770 <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 8009676:	4b49      	ldr	r3, [pc, #292]	; (800979c <OpenThread_CallBack_Processing+0xbb0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	6892      	ldr	r2, [r2, #8]
 800967e:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 8009684:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800968a:	4798      	blx	r3
    }
    break;
 800968c:	e070      	b.n	8009770 <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	71fb      	strb	r3, [r7, #7]
    break;
 8009692:	e06e      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009694:	bf00      	nop
 8009696:	e06c      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009698:	bf00      	nop
 800969a:	e06a      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800969c:	bf00      	nop
 800969e:	e068      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096a0:	bf00      	nop
 80096a2:	e066      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096a4:	bf00      	nop
 80096a6:	e064      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096a8:	bf00      	nop
 80096aa:	e062      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096ac:	bf00      	nop
 80096ae:	e060      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096b0:	bf00      	nop
 80096b2:	e05e      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096b4:	bf00      	nop
 80096b6:	e05c      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096b8:	bf00      	nop
 80096ba:	e05a      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096bc:	bf00      	nop
 80096be:	e058      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096c0:	bf00      	nop
 80096c2:	e056      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096c4:	bf00      	nop
 80096c6:	e054      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096c8:	bf00      	nop
 80096ca:	e052      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096cc:	bf00      	nop
 80096ce:	e050      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096d0:	bf00      	nop
 80096d2:	e04e      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096d4:	bf00      	nop
 80096d6:	e04c      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096d8:	bf00      	nop
 80096da:	e04a      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096dc:	bf00      	nop
 80096de:	e048      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096e0:	bf00      	nop
 80096e2:	e046      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096e4:	bf00      	nop
 80096e6:	e044      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096e8:	bf00      	nop
 80096ea:	e042      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096ec:	bf00      	nop
 80096ee:	e040      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096f0:	bf00      	nop
 80096f2:	e03e      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096f4:	bf00      	nop
 80096f6:	e03c      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096f8:	bf00      	nop
 80096fa:	e03a      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 80096fc:	bf00      	nop
 80096fe:	e038      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009700:	bf00      	nop
 8009702:	e036      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009704:	bf00      	nop
 8009706:	e034      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009708:	bf00      	nop
 800970a:	e032      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800970c:	bf00      	nop
 800970e:	e030      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009710:	bf00      	nop
 8009712:	e02e      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009714:	bf00      	nop
 8009716:	e02c      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009718:	bf00      	nop
 800971a:	e02a      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800971c:	bf00      	nop
 800971e:	e028      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009720:	bf00      	nop
 8009722:	e026      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009724:	bf00      	nop
 8009726:	e024      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009728:	bf00      	nop
 800972a:	e022      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800972c:	bf00      	nop
 800972e:	e020      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009730:	bf00      	nop
 8009732:	e01e      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009734:	bf00      	nop
 8009736:	e01c      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009738:	bf00      	nop
 800973a:	e01a      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800973c:	bf00      	nop
 800973e:	e018      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009740:	bf00      	nop
 8009742:	e016      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
      break;
 8009744:	bf00      	nop
 8009746:	e014      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009748:	bf00      	nop
 800974a:	e012      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800974c:	bf00      	nop
 800974e:	e010      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009750:	bf00      	nop
 8009752:	e00e      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009754:	bf00      	nop
 8009756:	e00c      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009758:	bf00      	nop
 800975a:	e00a      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800975c:	bf00      	nop
 800975e:	e008      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009760:	bf00      	nop
 8009762:	e006      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009764:	bf00      	nop
 8009766:	e004      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009768:	bf00      	nop
 800976a:	e002      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 800976c:	bf00      	nop
 800976e:	e000      	b.n	8009772 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009770:	bf00      	nop
  }

  TL_THREAD_SendAck();
 8009772:	f000 fcc3 	bl	800a0fc <TL_THREAD_SendAck>
  return status;
 8009776:	79fb      	ldrb	r3, [r7, #7]

}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bdb0      	pop	{r4, r5, r7, pc}
 8009780:	20000684 	.word	0x20000684
 8009784:	20000690 	.word	0x20000690
 8009788:	20000694 	.word	0x20000694
 800978c:	20000698 	.word	0x20000698
 8009790:	200006a4 	.word	0x200006a4
 8009794:	20000688 	.word	0x20000688
 8009798:	2000069c 	.word	0x2000069c
 800979c:	200006a0 	.word	0x200006a0

080097a0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80097ac:	f7f7 fe8e 	bl	80014cc <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80097b0:	f7f7 fe1e 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 80097b4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80097be:	701a      	strb	r2, [r3, #0]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f042 0202 	orr.w	r2, r2, #2
 80097c6:	705a      	strb	r2, [r3, #1]
 80097c8:	2200      	movs	r2, #0
 80097ca:	709a      	strb	r2, [r3, #2]
 80097cc:	2200      	movs	r2, #0
 80097ce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f042 0201 	orr.w	r2, r2, #1
 80097d8:	711a      	strb	r2, [r3, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	715a      	strb	r2, [r3, #5]
 80097de:	2200      	movs	r2, #0
 80097e0:	719a      	strb	r2, [r3, #6]
 80097e2:	2200      	movs	r2, #0
 80097e4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 80097e6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80097ee:	f7f7 fe47 	bl	8001480 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80097f2:	f7f7 fe09 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 80097f6:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	b2db      	uxtb	r3, r3
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b086      	sub	sp, #24
 800980a:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800980c:	1d3b      	adds	r3, r7, #4
 800980e:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	2100      	movs	r1, #0
 8009816:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800981a:	f000 f957 	bl	8009acc <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	330b      	adds	r3, #11
 8009822:	78db      	ldrb	r3, [r3, #3]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009836:	f107 030c 	add.w	r3, r7, #12
 800983a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8009840:	f107 020c 	add.w	r2, r7, #12
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2101      	movs	r1, #1
 8009848:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800984c:	f000 f93e 	bl	8009acc <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	330b      	adds	r3, #11
 8009854:	78db      	ldrb	r3, [r3, #3]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3720      	adds	r7, #32
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b088      	sub	sp, #32
 8009862:	af00      	add	r7, sp, #0
 8009864:	4603      	mov	r3, r0
 8009866:	460a      	mov	r2, r1
 8009868:	71fb      	strb	r3, [r7, #7]
 800986a:	4613      	mov	r3, r2
 800986c:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 8009878:	79bb      	ldrb	r3, [r7, #6]
 800987a:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 800987c:	f107 020c 	add.w	r2, r7, #12
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	2102      	movs	r1, #2
 8009884:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 8009888:	f000 f920 	bl	8009acc <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	330b      	adds	r3, #11
 8009890:	78db      	ldrb	r3, [r3, #3]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3720      	adds	r7, #32
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800989c:	b480      	push	{r7}
 800989e:	b08b      	sub	sp, #44	; 0x2c
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80098c4:	4b4a      	ldr	r3, [pc, #296]	; (80099f0 <SHCI_GetWirelessFwInfo+0x154>)
 80098c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80098cc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80098d6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a44      	ldr	r2, [pc, #272]	; (80099f4 <SHCI_GetWirelessFwInfo+0x158>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d10f      	bne.n	8009908 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	e01a      	b.n	800993e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009910:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009914:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	0e1b      	lsrs	r3, r3, #24
 8009942:	b2da      	uxtb	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	b2da      	uxtb	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	0a1b      	lsrs	r3, r3, #8
 8009956:	b2da      	uxtb	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	091b      	lsrs	r3, r3, #4
 8009960:	b2db      	uxtb	r3, r3
 8009962:	f003 030f 	and.w	r3, r3, #15
 8009966:	b2da      	uxtb	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f003 030f 	and.w	r3, r3, #15
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	0e1b      	lsrs	r3, r3, #24
 800997e:	b2da      	uxtb	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	b2da      	uxtb	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	0a1b      	lsrs	r3, r3, #8
 8009992:	b2da      	uxtb	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	b2da      	uxtb	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	0e1b      	lsrs	r3, r3, #24
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	0c1b      	lsrs	r3, r3, #16
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	0e1b      	lsrs	r3, r3, #24
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	0c1b      	lsrs	r3, r3, #16
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	372c      	adds	r7, #44	; 0x2c
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	58004000 	.word	0x58004000
 80099f4:	a94656b9 	.word	0xa94656b9

080099f8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	4a08      	ldr	r2, [pc, #32]	; (8009a28 <shci_init+0x30>)
 8009a08:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009a0a:	4a08      	ldr	r2, [pc, #32]	; (8009a2c <shci_init+0x34>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009a10:	4806      	ldr	r0, [pc, #24]	; (8009a2c <shci_init+0x34>)
 8009a12:	f000 f911 	bl	8009c38 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f894 	bl	8009b48 <TlInit>

  return;
 8009a20:	bf00      	nop
}
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	200006c8 	.word	0x200006c8
 8009a2c:	200006a8 	.word	0x200006a8

08009a30 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009a36:	4822      	ldr	r0, [pc, #136]	; (8009ac0 <shci_user_evt_proc+0x90>)
 8009a38:	f000 ff74 	bl	800a924 <LST_is_empty>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d12b      	bne.n	8009a9a <shci_user_evt_proc+0x6a>
 8009a42:	4b20      	ldr	r3, [pc, #128]	; (8009ac4 <shci_user_evt_proc+0x94>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d027      	beq.n	8009a9a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009a4a:	f107 030c 	add.w	r3, r7, #12
 8009a4e:	4619      	mov	r1, r3
 8009a50:	481b      	ldr	r0, [pc, #108]	; (8009ac0 <shci_user_evt_proc+0x90>)
 8009a52:	f000 fff6 	bl	800aa42 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009a56:	4b1c      	ldr	r3, [pc, #112]	; (8009ac8 <shci_user_evt_proc+0x98>)
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00c      	beq.n	8009a78 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009a62:	2301      	movs	r3, #1
 8009a64:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009a66:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <shci_user_evt_proc+0x98>)
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	1d3a      	adds	r2, r7, #4
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009a70:	793a      	ldrb	r2, [r7, #4]
 8009a72:	4b14      	ldr	r3, [pc, #80]	; (8009ac4 <shci_user_evt_proc+0x94>)
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	e002      	b.n	8009a7e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a78:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <shci_user_evt_proc+0x94>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009a7e:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <shci_user_evt_proc+0x94>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fbb3 	bl	800a1f4 <TL_MM_EvtDone>
 8009a8e:	e004      	b.n	8009a9a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4619      	mov	r1, r3
 8009a94:	480a      	ldr	r0, [pc, #40]	; (8009ac0 <shci_user_evt_proc+0x90>)
 8009a96:	f000 ff67 	bl	800a968 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009a9a:	4809      	ldr	r0, [pc, #36]	; (8009ac0 <shci_user_evt_proc+0x90>)
 8009a9c:	f000 ff42 	bl	800a924 <LST_is_empty>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d107      	bne.n	8009ab6 <shci_user_evt_proc+0x86>
 8009aa6:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <shci_user_evt_proc+0x94>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009aae:	4804      	ldr	r0, [pc, #16]	; (8009ac0 <shci_user_evt_proc+0x90>)
 8009ab0:	f7f8 fbb2 	bl	8002218 <shci_notify_asynch_evt>
  }


  return;
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
}
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000094 	.word	0x20000094
 8009ac4:	200000a4 	.word	0x200000a4
 8009ac8:	200006a8 	.word	0x200006a8

08009acc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60ba      	str	r2, [r7, #8]
 8009ad4:	607b      	str	r3, [r7, #4]
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	81fb      	strh	r3, [r7, #14]
 8009ada:	460b      	mov	r3, r1
 8009adc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009ade:	2000      	movs	r0, #0
 8009ae0:	f000 f864 	bl	8009bac <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009ae4:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <shci_send+0x74>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	89fa      	ldrh	r2, [r7, #14]
 8009aea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009aee:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <shci_send+0x74>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	7b7a      	ldrb	r2, [r7, #13]
 8009af4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009af6:	4b12      	ldr	r3, [pc, #72]	; (8009b40 <shci_send+0x74>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	330c      	adds	r3, #12
 8009afc:	7b7a      	ldrb	r2, [r7, #13]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fff7 	bl	800aaf4 <memcpy>

  shciContext.io.Send(0,0);
 8009b06:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <shci_send+0x78>)
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009b10:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009b14:	f7f8 fb97 	bl	8002246 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f103 0008 	add.w	r0, r3, #8
 8009b1e:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <shci_send+0x74>)
 8009b20:	6819      	ldr	r1, [r3, #0]
 8009b22:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <shci_send+0x74>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	789b      	ldrb	r3, [r3, #2]
 8009b28:	3303      	adds	r3, #3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f000 ffe2 	bl	800aaf4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009b30:	2001      	movs	r0, #1
 8009b32:	f000 f83b 	bl	8009bac <Cmd_SetStatus>

  return;
 8009b36:	bf00      	nop
}
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	200000a0 	.word	0x200000a0
 8009b44:	200006a8 	.word	0x200006a8

08009b48 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009b50:	4a10      	ldr	r2, [pc, #64]	; (8009b94 <TlInit+0x4c>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009b56:	4810      	ldr	r0, [pc, #64]	; (8009b98 <TlInit+0x50>)
 8009b58:	f000 fed4 	bl	800a904 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f000 f825 	bl	8009bac <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009b62:	4b0e      	ldr	r3, [pc, #56]	; (8009b9c <TlInit+0x54>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009b68:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <TlInit+0x58>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00c      	beq.n	8009b8a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009b74:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <TlInit+0x5c>)
 8009b76:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009b78:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <TlInit+0x60>)
 8009b7a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009b7c:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <TlInit+0x58>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f107 020c 	add.w	r2, r7, #12
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
  }

  return;
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
}
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	200000a0 	.word	0x200000a0
 8009b98:	20000094 	.word	0x20000094
 8009b9c:	200000a4 	.word	0x200000a4
 8009ba0:	200006a8 	.word	0x200006a8
 8009ba4:	08009bfd 	.word	0x08009bfd
 8009ba8:	08009c15 	.word	0x08009c15

08009bac <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10b      	bne.n	8009bd4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009bbc:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <Cmd_SetStatus+0x48>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <Cmd_SetStatus+0x48>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2000      	movs	r0, #0
 8009bca:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <Cmd_SetStatus+0x4c>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009bd2:	e00b      	b.n	8009bec <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009bd4:	4b08      	ldr	r3, [pc, #32]	; (8009bf8 <Cmd_SetStatus+0x4c>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009bda:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <Cmd_SetStatus+0x48>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d004      	beq.n	8009bec <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009be2:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <Cmd_SetStatus+0x48>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2001      	movs	r0, #1
 8009be8:	4798      	blx	r3
  return;
 8009bea:	bf00      	nop
 8009bec:	bf00      	nop
}
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	200006c8 	.word	0x200006c8
 8009bf8:	2000009c 	.word	0x2000009c

08009bfc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7f8 fb13 	bl	8002230 <shci_cmd_resp_release>

  return;
 8009c0a:	bf00      	nop
}
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	4805      	ldr	r0, [pc, #20]	; (8009c34 <TlUserEvtReceived+0x20>)
 8009c20:	f000 fec8 	bl	800a9b4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009c24:	4803      	ldr	r0, [pc, #12]	; (8009c34 <TlUserEvtReceived+0x20>)
 8009c26:	f7f8 faf7 	bl	8002218 <shci_notify_asynch_evt>

  return;
 8009c2a:	bf00      	nop
}
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	20000094 	.word	0x20000094

08009c38 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a05      	ldr	r2, [pc, #20]	; (8009c58 <shci_register_io_bus+0x20>)
 8009c44:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a04      	ldr	r2, [pc, #16]	; (8009c5c <shci_register_io_bus+0x24>)
 8009c4a:	611a      	str	r2, [r3, #16]

  return;
 8009c4c:	bf00      	nop
}
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	08009fa5 	.word	0x08009fa5
 8009c5c:	08009ff9 	.word	0x08009ff9

08009c60 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009c6c:	f7f7 fc2e 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c70:	f7f7 fbbe 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8009c74:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	2200      	movs	r2, #0
 8009c82:	705a      	strb	r2, [r3, #1]
 8009c84:	2200      	movs	r2, #0
 8009c86:	709a      	strb	r2, [r3, #2]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f042 0201 	orr.w	r2, r2, #1
 8009c94:	711a      	strb	r2, [r3, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	715a      	strb	r2, [r3, #5]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	719a      	strb	r2, [r3, #6]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8009ca2:	78fa      	ldrb	r2, [r7, #3]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009ca8:	f7f7 fbea 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009cac:	f7f7 fbac 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009cb0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	b2db      	uxtb	r3, r3
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

otError otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009cca:	f7f7 fbff 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009cce:	f7f7 fb8f 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8009cd2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f042 0269 	orr.w	r2, r2, #105	; 0x69
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	705a      	strb	r2, [r3, #1]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	709a      	strb	r2, [r3, #2]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	711a      	strb	r2, [r3, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	715a      	strb	r2, [r3, #5]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	719a      	strb	r2, [r3, #6]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009d06:	f7f7 fbbb 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d0a:	f7f7 fb7d 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d0e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	b2db      	uxtb	r3, r3
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009d28:	f7f7 fbd0 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d2c:	f7f7 fb60 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8009d30:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 8009d3a:	701a      	strb	r2, [r3, #0]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	705a      	strb	r2, [r3, #1]
 8009d40:	2200      	movs	r2, #0
 8009d42:	709a      	strb	r2, [r3, #2]
 8009d44:	2200      	movs	r2, #0
 8009d46:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f042 0203 	orr.w	r2, r2, #3
 8009d50:	711a      	strb	r2, [r3, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	715a      	strb	r2, [r3, #5]
 8009d56:	2200      	movs	r2, #0
 8009d58:	719a      	strb	r2, [r3, #6]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 8009d5e:	783b      	ldrb	r3, [r7, #0]
 8009d60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	461a      	mov	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 8009d6c:	783b      	ldrb	r3, [r7, #0]
 8009d6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	461a      	mov	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 8009d7a:	783b      	ldrb	r3, [r7, #0]
 8009d7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009d88:	f7f7 fb7a 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d8c:	f7f7 fb3c 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d90:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	b2db      	uxtb	r3, r3
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009daa:	f7f7 fb8f 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009dae:	f7f7 fb1f 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8009db2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	705a      	strb	r2, [r3, #1]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	709a      	strb	r2, [r3, #2]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f042 0201 	orr.w	r2, r2, #1
 8009dd2:	711a      	strb	r2, [r3, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	715a      	strb	r2, [r3, #5]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	719a      	strb	r2, [r3, #6]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009de6:	f7f7 fb4b 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009dea:	f7f7 fb0d 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009dee:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	b2db      	uxtb	r3, r3
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

otError otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009e08:	f7f7 fb60 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e0c:	f7f7 faf0 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8009e10:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f042 027a 	orr.w	r2, r2, #122	; 0x7a
 8009e1a:	701a      	strb	r2, [r3, #0]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	705a      	strb	r2, [r3, #1]
 8009e20:	2200      	movs	r2, #0
 8009e22:	709a      	strb	r2, [r3, #2]
 8009e24:	2200      	movs	r2, #0
 8009e26:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f042 0201 	orr.w	r2, r2, #1
 8009e30:	711a      	strb	r2, [r3, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	715a      	strb	r2, [r3, #5]
 8009e36:	2200      	movs	r2, #0
 8009e38:	719a      	strb	r2, [r3, #6]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009e44:	f7f7 fb1c 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e48:	f7f7 fade 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e4c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	b2db      	uxtb	r3, r3
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009e64:	f7f7 fb32 	bl	80014cc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e68:	f7f7 fac2 	bl	80013f0 <THREAD_Get_OTCmdPayloadBuffer>
 8009e6c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f062 0279 	orn	r2, r2, #121	; 0x79
 8009e76:	701a      	strb	r2, [r3, #0]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	705a      	strb	r2, [r3, #1]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	709a      	strb	r2, [r3, #2]
 8009e80:	2200      	movs	r2, #0
 8009e82:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	711a      	strb	r2, [r3, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	715a      	strb	r2, [r3, #5]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	719a      	strb	r2, [r3, #6]
 8009e92:	2200      	movs	r2, #0
 8009e94:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009e96:	f7f7 faf3 	bl	8001480 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e9a:	f7f7 fab5 	bl	8001408 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e9e:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	b2db      	uxtb	r3, r3
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009eb2:	f7f7 fd5f 	bl	8001974 <HW_IPCC_Enable>

  return;
 8009eb6:	bf00      	nop
}
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <TL_Init>:


void TL_Init( void )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009ec0:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <TL_Init+0x48>)
 8009ec2:	4a11      	ldr	r2, [pc, #68]	; (8009f08 <TL_Init+0x4c>)
 8009ec4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	; (8009f04 <TL_Init+0x48>)
 8009ec8:	4a10      	ldr	r2, [pc, #64]	; (8009f0c <TL_Init+0x50>)
 8009eca:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <TL_Init+0x48>)
 8009ece:	4a10      	ldr	r2, [pc, #64]	; (8009f10 <TL_Init+0x54>)
 8009ed0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009ed2:	4b0c      	ldr	r3, [pc, #48]	; (8009f04 <TL_Init+0x48>)
 8009ed4:	4a0f      	ldr	r2, [pc, #60]	; (8009f14 <TL_Init+0x58>)
 8009ed6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009ed8:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <TL_Init+0x48>)
 8009eda:	4a0f      	ldr	r2, [pc, #60]	; (8009f18 <TL_Init+0x5c>)
 8009edc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009ede:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <TL_Init+0x48>)
 8009ee0:	4a0e      	ldr	r2, [pc, #56]	; (8009f1c <TL_Init+0x60>)
 8009ee2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009ee4:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <TL_Init+0x48>)
 8009ee6:	4a0e      	ldr	r2, [pc, #56]	; (8009f20 <TL_Init+0x64>)
 8009ee8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009eea:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <TL_Init+0x48>)
 8009eec:	4a0d      	ldr	r2, [pc, #52]	; (8009f24 <TL_Init+0x68>)
 8009eee:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009ef0:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <TL_Init+0x48>)
 8009ef2:	4a0d      	ldr	r2, [pc, #52]	; (8009f28 <TL_Init+0x6c>)
 8009ef4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009ef6:	4b03      	ldr	r3, [pc, #12]	; (8009f04 <TL_Init+0x48>)
 8009ef8:	4a0c      	ldr	r2, [pc, #48]	; (8009f2c <TL_Init+0x70>)
 8009efa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009efc:	f7f7 fd4e 	bl	800199c <HW_IPCC_Init>

  return;
 8009f00:	bf00      	nop
}
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	20030000 	.word	0x20030000
 8009f08:	20030038 	.word	0x20030038
 8009f0c:	20030058 	.word	0x20030058
 8009f10:	20030068 	.word	0x20030068
 8009f14:	20030078 	.word	0x20030078
 8009f18:	20030080 	.word	0x20030080
 8009f1c:	20030088 	.word	0x20030088
 8009f20:	20030090 	.word	0x20030090
 8009f24:	200300ac 	.word	0x200300ac
 8009f28:	200300b0 	.word	0x200300b0
 8009f2c:	200300bc 	.word	0x200300bc

08009f30 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009f36:	e01c      	b.n	8009f72 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009f38:	1d3b      	adds	r3, r7, #4
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4812      	ldr	r0, [pc, #72]	; (8009f88 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009f3e:	f000 fd80 	bl	800aa42 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	7a5b      	ldrb	r3, [r3, #9]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d003      	beq.n	8009f52 <HW_IPCC_BLE_RxEvtNot+0x22>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7a5b      	ldrb	r3, [r3, #9]
 8009f4e:	2b0e      	cmp	r3, #14
 8009f50:	d105      	bne.n	8009f5e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4619      	mov	r1, r3
 8009f56:	2002      	movs	r0, #2
 8009f58:	f000 f9b0 	bl	800a2bc <OutputDbgTrace>
 8009f5c:	e004      	b.n	8009f68 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4619      	mov	r1, r3
 8009f62:	2003      	movs	r0, #3
 8009f64:	f000 f9aa 	bl	800a2bc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009f68:	4b08      	ldr	r3, [pc, #32]	; (8009f8c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009f72:	4805      	ldr	r0, [pc, #20]	; (8009f88 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009f74:	f000 fcd6 	bl	800a924 <LST_is_empty>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0dc      	beq.n	8009f38 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009f7e:	bf00      	nop
}
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200300d8 	.word	0x200300d8
 8009f8c:	200006d4 	.word	0x200006d4

08009f90 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009f94:	4b02      	ldr	r3, [pc, #8]	; (8009fa0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4798      	blx	r3

  return;
 8009f9a:	bf00      	nop
}
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	200006d8 	.word	0x200006d8

08009fa4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009fb0:	480d      	ldr	r0, [pc, #52]	; (8009fe8 <TL_SYS_Init+0x44>)
 8009fb2:	f000 fca7 	bl	800a904 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <TL_SYS_Init+0x48>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <TL_SYS_Init+0x44>)
 8009fc8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009fca:	f7f7 fd15 	bl	80019f8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a07      	ldr	r2, [pc, #28]	; (8009ff0 <TL_SYS_Init+0x4c>)
 8009fd4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	4a06      	ldr	r2, [pc, #24]	; (8009ff4 <TL_SYS_Init+0x50>)
 8009fdc:	6013      	str	r3, [r2, #0]

  return 0;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	200300e0 	.word	0x200300e0
 8009fec:	20030000 	.word	0x20030000
 8009ff0:	200006dc 	.word	0x200006dc
 8009ff4:	200006e0 	.word	0x200006e0

08009ff8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <TL_SYS_SendCmd+0x34>)
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2210      	movs	r2, #16
 800a00c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a00e:	4b07      	ldr	r3, [pc, #28]	; (800a02c <TL_SYS_SendCmd+0x34>)
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4619      	mov	r1, r3
 800a016:	2004      	movs	r0, #4
 800a018:	f000 f950 	bl	800a2bc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a01c:	f7f7 fcf6 	bl	8001a0c <HW_IPCC_SYS_SendCmd>

  return 0;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20030000 	.word	0x20030000

0800a030 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a034:	4b07      	ldr	r3, [pc, #28]	; (800a054 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4619      	mov	r1, r3
 800a03c:	2005      	movs	r0, #5
 800a03e:	f000 f93d 	bl	800a2bc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a03      	ldr	r2, [pc, #12]	; (800a054 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a048:	68d2      	ldr	r2, [r2, #12]
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	4610      	mov	r0, r2
 800a04e:	4798      	blx	r3

  return;
 800a050:	bf00      	nop
}
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20030000 	.word	0x20030000
 800a058:	200006dc 	.word	0x200006dc

0800a05c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a062:	e00e      	b.n	800a082 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a064:	1d3b      	adds	r3, r7, #4
 800a066:	4619      	mov	r1, r3
 800a068:	480b      	ldr	r0, [pc, #44]	; (800a098 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a06a:	f000 fcea 	bl	800aa42 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4619      	mov	r1, r3
 800a072:	2006      	movs	r0, #6
 800a074:	f000 f922 	bl	800a2bc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a078:	4b08      	ldr	r3, [pc, #32]	; (800a09c <HW_IPCC_SYS_EvtNot+0x40>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	4610      	mov	r0, r2
 800a080:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a082:	4805      	ldr	r0, [pc, #20]	; (800a098 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a084:	f000 fc4e 	bl	800a924 <LST_is_empty>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0ea      	beq.n	800a064 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a08e:	bf00      	nop
}
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	200300e0 	.word	0x200300e0
 800a09c:	200006e0 	.word	0x200006e0

0800a0a0 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <TL_THREAD_Init+0x3c>)
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	689a      	ldr	r2, [r3, #8]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800a0ce:	f7f7 fcc3 	bl	8001a58 <HW_IPCC_THREAD_Init>

  return;
 800a0d2:	bf00      	nop
}
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20030000 	.word	0x20030000

0800a0e0 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800a0e4:	4b04      	ldr	r3, [pc, #16]	; (800a0f8 <TL_OT_SendCmd+0x18>)
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800a0ee:	f7f7 fcc1 	bl	8001a74 <HW_IPCC_OT_SendCmd>

  return;
 800a0f2:	bf00      	nop
}
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20030000 	.word	0x20030000

0800a0fc <TL_THREAD_SendAck>:

  return;
}

void TL_THREAD_SendAck ( void )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <TL_THREAD_SendAck+0x18>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	220d      	movs	r2, #13
 800a108:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800a10a:	f7f7 fcc1 	bl	8001a90 <HW_IPCC_THREAD_SendAck>

  return;
 800a10e:	bf00      	nop
}
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20030000 	.word	0x20030000

0800a118 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a11c:	4b04      	ldr	r3, [pc, #16]	; (800a130 <TL_THREAD_CliSendAck+0x18>)
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	220d      	movs	r2, #13
 800a124:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800a126:	f7f7 fcc1 	bl	8001aac <HW_IPCC_THREAD_CliSendAck>

  return;
 800a12a:	bf00      	nop
}
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20030000 	.word	0x20030000

0800a134 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800a138:	4b03      	ldr	r3, [pc, #12]	; (800a148 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f7 f9a4 	bl	800148c <TL_OT_CmdEvtReceived>

  return;
 800a144:	bf00      	nop
}
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20030000 	.word	0x20030000

0800a14c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800a150:	4b03      	ldr	r3, [pc, #12]	; (800a160 <HW_IPCC_THREAD_EvtNot+0x14>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4618      	mov	r0, r3
 800a158:	f7f7 f9a8 	bl	80014ac <TL_THREAD_NotReceived>

  return;
 800a15c:	bf00      	nop
}
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20030000 	.word	0x20030000

0800a164 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800a168:	4b03      	ldr	r3, [pc, #12]	; (800a178 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f7 f9fe 	bl	8001570 <TL_THREAD_CliNotReceived>

  return;
 800a174:	bf00      	nop
}
 800a176:	bd80      	pop	{r7, pc}
 800a178:	20030000 	.word	0x20030000

0800a17c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a184:	4817      	ldr	r0, [pc, #92]	; (800a1e4 <TL_MM_Init+0x68>)
 800a186:	f000 fbbd 	bl	800a904 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a18a:	4817      	ldr	r0, [pc, #92]	; (800a1e8 <TL_MM_Init+0x6c>)
 800a18c:	f000 fbba 	bl	800a904 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a190:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <TL_MM_Init+0x70>)
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	4a16      	ldr	r2, [pc, #88]	; (800a1f0 <TL_MM_Init+0x74>)
 800a196:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a198:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <TL_MM_Init+0x74>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	6892      	ldr	r2, [r2, #8]
 800a1a0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a1a2:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <TL_MM_Init+0x74>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	68d2      	ldr	r2, [r2, #12]
 800a1aa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a1ac:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <TL_MM_Init+0x74>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <TL_MM_Init+0x68>)
 800a1b2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <TL_MM_Init+0x74>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6812      	ldr	r2, [r2, #0]
 800a1bc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a1be:	4b0c      	ldr	r3, [pc, #48]	; (800a1f0 <TL_MM_Init+0x74>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6852      	ldr	r2, [r2, #4]
 800a1c6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a1c8:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <TL_MM_Init+0x74>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	6912      	ldr	r2, [r2, #16]
 800a1d0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a1d2:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <TL_MM_Init+0x74>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	6952      	ldr	r2, [r2, #20]
 800a1da:	619a      	str	r2, [r3, #24]

  return;
 800a1dc:	bf00      	nop
}
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	200300c8 	.word	0x200300c8
 800a1e8:	200006cc 	.word	0x200006cc
 800a1ec:	20030000 	.word	0x20030000
 800a1f0:	200006e4 	.word	0x200006e4

0800a1f4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4807      	ldr	r0, [pc, #28]	; (800a21c <TL_MM_EvtDone+0x28>)
 800a200:	f000 fbd8 	bl	800a9b4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	2000      	movs	r0, #0
 800a208:	f000 f858 	bl	800a2bc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a20c:	4804      	ldr	r0, [pc, #16]	; (800a220 <TL_MM_EvtDone+0x2c>)
 800a20e:	f7f7 fc7f 	bl	8001b10 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a212:	bf00      	nop
}
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	200006cc 	.word	0x200006cc
 800a220:	0800a225 	.word	0x0800a225

0800a224 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a22a:	e00c      	b.n	800a246 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a22c:	1d3b      	adds	r3, r7, #4
 800a22e:	4619      	mov	r1, r3
 800a230:	480a      	ldr	r0, [pc, #40]	; (800a25c <SendFreeBuf+0x38>)
 800a232:	f000 fc06 	bl	800aa42 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a236:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <SendFreeBuf+0x3c>)
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fbb7 	bl	800a9b4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a246:	4805      	ldr	r0, [pc, #20]	; (800a25c <SendFreeBuf+0x38>)
 800a248:	f000 fb6c 	bl	800a924 <LST_is_empty>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0ec      	beq.n	800a22c <SendFreeBuf+0x8>
  }

  return;
 800a252:	bf00      	nop
}
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	200006cc 	.word	0x200006cc
 800a260:	20030000 	.word	0x20030000

0800a264 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a268:	4805      	ldr	r0, [pc, #20]	; (800a280 <TL_TRACES_Init+0x1c>)
 800a26a:	f000 fb4b 	bl	800a904 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a26e:	4b05      	ldr	r3, [pc, #20]	; (800a284 <TL_TRACES_Init+0x20>)
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	4a03      	ldr	r2, [pc, #12]	; (800a280 <TL_TRACES_Init+0x1c>)
 800a274:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a276:	f7f7 fc81 	bl	8001b7c <HW_IPCC_TRACES_Init>

  return;
 800a27a:	bf00      	nop
}
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	200300d0 	.word	0x200300d0
 800a284:	20030000 	.word	0x20030000

0800a288 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a28e:	e008      	b.n	800a2a2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a290:	1d3b      	adds	r3, r7, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4808      	ldr	r0, [pc, #32]	; (800a2b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a296:	f000 fbd4 	bl	800aa42 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7f7 ffdd 	bl	800225c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a2a2:	4805      	ldr	r0, [pc, #20]	; (800a2b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a2a4:	f000 fb3e 	bl	800a924 <LST_is_empty>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0f0      	beq.n	800a290 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a2ae:	bf00      	nop
}
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	200300d0 	.word	0x200300d0

0800a2bc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	6039      	str	r1, [r7, #0]
 800a2c6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	2b06      	cmp	r3, #6
 800a2cc:	d845      	bhi.n	800a35a <OutputDbgTrace+0x9e>
 800a2ce:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <OutputDbgTrace+0x18>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a2f1 	.word	0x0800a2f1
 800a2d8:	0800a315 	.word	0x0800a315
 800a2dc:	0800a31b 	.word	0x0800a31b
 800a2e0:	0800a32f 	.word	0x0800a32f
 800a2e4:	0800a33b 	.word	0x0800a33b
 800a2e8:	0800a341 	.word	0x0800a341
 800a2ec:	0800a34f 	.word	0x0800a34f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	7a5b      	ldrb	r3, [r3, #9]
 800a2f8:	2bff      	cmp	r3, #255	; 0xff
 800a2fa:	d005      	beq.n	800a308 <OutputDbgTrace+0x4c>
 800a2fc:	2bff      	cmp	r3, #255	; 0xff
 800a2fe:	dc05      	bgt.n	800a30c <OutputDbgTrace+0x50>
 800a300:	2b0e      	cmp	r3, #14
 800a302:	d005      	beq.n	800a310 <OutputDbgTrace+0x54>
 800a304:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a306:	e001      	b.n	800a30c <OutputDbgTrace+0x50>
          break;
 800a308:	bf00      	nop
 800a30a:	e027      	b.n	800a35c <OutputDbgTrace+0xa0>
          break;
 800a30c:	bf00      	nop
 800a30e:	e025      	b.n	800a35c <OutputDbgTrace+0xa0>
          break;
 800a310:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a312:	e023      	b.n	800a35c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a318:	e020      	b.n	800a35c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	7a5b      	ldrb	r3, [r3, #9]
 800a322:	2b0e      	cmp	r3, #14
 800a324:	d001      	beq.n	800a32a <OutputDbgTrace+0x6e>
 800a326:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a328:	e000      	b.n	800a32c <OutputDbgTrace+0x70>
          break;
 800a32a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a32c:	e016      	b.n	800a35c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	7a5b      	ldrb	r3, [r3, #9]
 800a336:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a338:	e010      	b.n	800a35c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a33e:	e00d      	b.n	800a35c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	7a5b      	ldrb	r3, [r3, #9]
 800a348:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a34a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a34c:	e006      	b.n	800a35c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	7a5b      	ldrb	r3, [r3, #9]
 800a356:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a358:	e000      	b.n	800a35c <OutputDbgTrace+0xa0>

    default:
      break;
 800a35a:	bf00      	nop
  }

  return;
 800a35c:	bf00      	nop
}
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a372:	4b0f      	ldr	r3, [pc, #60]	; (800a3b0 <OTP_Read+0x48>)
 800a374:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a376:	e002      	b.n	800a37e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3b08      	subs	r3, #8
 800a37c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	79fa      	ldrb	r2, [r7, #7]
 800a386:	429a      	cmp	r2, r3
 800a388:	d003      	beq.n	800a392 <OTP_Read+0x2a>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4a09      	ldr	r2, [pc, #36]	; (800a3b4 <OTP_Read+0x4c>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d1f2      	bne.n	800a378 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3307      	adds	r3, #7
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	79fa      	ldrb	r2, [r7, #7]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d001      	beq.n	800a3a2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	1fff73f8 	.word	0x1fff73f8
 800a3b4:	1fff7000 	.word	0x1fff7000

0800a3b8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <UTIL_LPM_Init+0x1c>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a3c2:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <UTIL_LPM_Init+0x20>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a3c8:	bf00      	nop
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	200006e8 	.word	0x200006e8
 800a3d8:	200006ec 	.word	0x200006ec

0800a3dc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ec:	613b      	str	r3, [r7, #16]
  return(result);
 800a3ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a3f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3f2:	b672      	cpsid	i
}
 800a3f4:	bf00      	nop

  switch( state )
 800a3f6:	78fb      	ldrb	r3, [r7, #3]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d008      	beq.n	800a40e <UTIL_LPM_SetStopMode+0x32>
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d10e      	bne.n	800a41e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a400:	4b0d      	ldr	r3, [pc, #52]	; (800a438 <UTIL_LPM_SetStopMode+0x5c>)
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4313      	orrs	r3, r2
 800a408:	4a0b      	ldr	r2, [pc, #44]	; (800a438 <UTIL_LPM_SetStopMode+0x5c>)
 800a40a:	6013      	str	r3, [r2, #0]
      break;
 800a40c:	e008      	b.n	800a420 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	43da      	mvns	r2, r3
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <UTIL_LPM_SetStopMode+0x5c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4013      	ands	r3, r2
 800a418:	4a07      	ldr	r2, [pc, #28]	; (800a438 <UTIL_LPM_SetStopMode+0x5c>)
 800a41a:	6013      	str	r3, [r2, #0]
      break;
 800a41c:	e000      	b.n	800a420 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a41e:	bf00      	nop
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f383 8810 	msr	PRIMASK, r3
}
 800a42a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a42c:	bf00      	nop
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	200006e8 	.word	0x200006e8

0800a43c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a448:	f3ef 8310 	mrs	r3, PRIMASK
 800a44c:	613b      	str	r3, [r7, #16]
  return(result);
 800a44e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a452:	b672      	cpsid	i
}
 800a454:	bf00      	nop
  
  switch(state)
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d008      	beq.n	800a46e <UTIL_LPM_SetOffMode+0x32>
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d10e      	bne.n	800a47e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a460:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <UTIL_LPM_SetOffMode+0x5c>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4313      	orrs	r3, r2
 800a468:	4a0b      	ldr	r2, [pc, #44]	; (800a498 <UTIL_LPM_SetOffMode+0x5c>)
 800a46a:	6013      	str	r3, [r2, #0]
      break;
 800a46c:	e008      	b.n	800a480 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	43da      	mvns	r2, r3
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <UTIL_LPM_SetOffMode+0x5c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4013      	ands	r3, r2
 800a478:	4a07      	ldr	r2, [pc, #28]	; (800a498 <UTIL_LPM_SetOffMode+0x5c>)
 800a47a:	6013      	str	r3, [r2, #0]
      break;
 800a47c:	e000      	b.n	800a480 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a47e:	bf00      	nop
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f383 8810 	msr	PRIMASK, r3
}
 800a48a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a48c:	bf00      	nop
 800a48e:	371c      	adds	r7, #28
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	200006ec 	.word	0x200006ec

0800a49c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4a8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a4aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4ac:	b672      	cpsid	i
}
 800a4ae:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a4b0:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <UTIL_LPM_EnterLowPower+0x60>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d006      	beq.n	800a4c6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a4b8:	4b11      	ldr	r3, [pc, #68]	; (800a500 <UTIL_LPM_EnterLowPower+0x64>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a4be:	4b10      	ldr	r3, [pc, #64]	; (800a500 <UTIL_LPM_EnterLowPower+0x64>)
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	4798      	blx	r3
 800a4c4:	e010      	b.n	800a4e8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a4c6:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <UTIL_LPM_EnterLowPower+0x68>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <UTIL_LPM_EnterLowPower+0x64>)
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a4d4:	4b0a      	ldr	r3, [pc, #40]	; (800a500 <UTIL_LPM_EnterLowPower+0x64>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	4798      	blx	r3
 800a4da:	e005      	b.n	800a4e8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a4dc:	4b08      	ldr	r3, [pc, #32]	; (800a500 <UTIL_LPM_EnterLowPower+0x64>)
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a4e2:	4b07      	ldr	r3, [pc, #28]	; (800a500 <UTIL_LPM_EnterLowPower+0x64>)
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	4798      	blx	r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f383 8810 	msr	PRIMASK, r3
}
 800a4f2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a4f4:	bf00      	nop
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	200006e8 	.word	0x200006e8
 800a500:	0800bdcc 	.word	0x0800bdcc
 800a504:	200006ec 	.word	0x200006ec

0800a508 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b090      	sub	sp, #64	; 0x40
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a510:	4b73      	ldr	r3, [pc, #460]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a516:	4b72      	ldr	r3, [pc, #456]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4013      	ands	r3, r2
 800a51e:	4a70      	ldr	r2, [pc, #448]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a520:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a522:	4b70      	ldr	r3, [pc, #448]	; (800a6e4 <UTIL_SEQ_Run+0x1dc>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a528:	4b6f      	ldr	r3, [pc, #444]	; (800a6e8 <UTIL_SEQ_Run+0x1e0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a52e:	4b6f      	ldr	r3, [pc, #444]	; (800a6ec <UTIL_SEQ_Run+0x1e4>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a534:	4b6e      	ldr	r3, [pc, #440]	; (800a6f0 <UTIL_SEQ_Run+0x1e8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a53a:	e08d      	b.n	800a658 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a53c:	2300      	movs	r3, #0
 800a53e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a540:	e002      	b.n	800a548 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a544:	3301      	adds	r3, #1
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a548:	4a6a      	ldr	r2, [pc, #424]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a54c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	401a      	ands	r2, r3
 800a554:	4b62      	ldr	r3, [pc, #392]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4013      	ands	r3, r2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0f1      	beq.n	800a542 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a55e:	4a65      	ldr	r2, [pc, #404]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a562:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	401a      	ands	r2, r3
 800a56a:	4b5d      	ldr	r3, [pc, #372]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4013      	ands	r3, r2
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a572:	4a60      	ldr	r2, [pc, #384]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	4413      	add	r3, r2
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	4013      	ands	r3, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d106      	bne.n	800a592 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a584:	4a5b      	ldr	r2, [pc, #364]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	4413      	add	r3, r2
 800a58c:	f04f 32ff 	mov.w	r2, #4294967295
 800a590:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a592:	4a58      	ldr	r2, [pc, #352]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	4413      	add	r3, r2
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	4013      	ands	r3, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 f973 	bl	800a88c <SEQ_BitPosition>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4b53      	ldr	r3, [pc, #332]	; (800a6f8 <UTIL_SEQ_Run+0x1f0>)
 800a5ac:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a5ae:	4a51      	ldr	r2, [pc, #324]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	4b4f      	ldr	r3, [pc, #316]	; (800a6f8 <UTIL_SEQ_Run+0x1f0>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2101      	movs	r1, #1
 800a5be:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c2:	43db      	mvns	r3, r3
 800a5c4:	401a      	ands	r2, r3
 800a5c6:	494b      	ldr	r1, [pc, #300]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	440b      	add	r3, r1
 800a5ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a5d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a5d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5da:	b672      	cpsid	i
}
 800a5dc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a5de:	4b46      	ldr	r3, [pc, #280]	; (800a6f8 <UTIL_SEQ_Run+0x1f0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e8:	43da      	mvns	r2, r3
 800a5ea:	4b3e      	ldr	r3, [pc, #248]	; (800a6e4 <UTIL_SEQ_Run+0x1dc>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	4a3c      	ldr	r2, [pc, #240]	; (800a6e4 <UTIL_SEQ_Run+0x1dc>)
 800a5f2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5f8:	e013      	b.n	800a622 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	4a3d      	ldr	r2, [pc, #244]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a600:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a604:	4b3c      	ldr	r3, [pc, #240]	; (800a6f8 <UTIL_SEQ_Run+0x1f0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2201      	movs	r2, #1
 800a60a:	fa02 f303 	lsl.w	r3, r2, r3
 800a60e:	43da      	mvns	r2, r3
 800a610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a612:	3b01      	subs	r3, #1
 800a614:	400a      	ands	r2, r1
 800a616:	4937      	ldr	r1, [pc, #220]	; (800a6f4 <UTIL_SEQ_Run+0x1ec>)
 800a618:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61e:	3b01      	subs	r3, #1
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e8      	bne.n	800a5fa <UTIL_SEQ_Run+0xf2>
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f383 8810 	msr	PRIMASK, r3
}
 800a632:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a634:	4b30      	ldr	r3, [pc, #192]	; (800a6f8 <UTIL_SEQ_Run+0x1f0>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a30      	ldr	r2, [pc, #192]	; (800a6fc <UTIL_SEQ_Run+0x1f4>)
 800a63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a63e:	4798      	blx	r3

    local_taskset = TaskSet;
 800a640:	4b28      	ldr	r3, [pc, #160]	; (800a6e4 <UTIL_SEQ_Run+0x1dc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a646:	4b28      	ldr	r3, [pc, #160]	; (800a6e8 <UTIL_SEQ_Run+0x1e0>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a64c:	4b27      	ldr	r3, [pc, #156]	; (800a6ec <UTIL_SEQ_Run+0x1e4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a652:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <UTIL_SEQ_Run+0x1e8>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	401a      	ands	r2, r3
 800a65e:	4b20      	ldr	r3, [pc, #128]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4013      	ands	r3, r2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <UTIL_SEQ_Run+0x16c>
 800a668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66c:	4013      	ands	r3, r2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f43f af64 	beq.w	800a53c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a674:	4b20      	ldr	r3, [pc, #128]	; (800a6f8 <UTIL_SEQ_Run+0x1f0>)
 800a676:	f04f 32ff 	mov.w	r2, #4294967295
 800a67a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a67c:	f000 f8f8 	bl	800a870 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a680:	f3ef 8310 	mrs	r3, PRIMASK
 800a684:	613b      	str	r3, [r7, #16]
  return(result);
 800a686:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a68a:	b672      	cpsid	i
}
 800a68c:	bf00      	nop
  local_taskset = TaskSet;
 800a68e:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <UTIL_SEQ_Run+0x1dc>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a694:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <UTIL_SEQ_Run+0x1e0>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a69a:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <UTIL_SEQ_Run+0x1e4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a6a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	401a      	ands	r2, r3
 800a6a6:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d107      	bne.n	800a6c0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a6b0:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <UTIL_SEQ_Run+0x1e8>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a6bc:	f7f7 fd7b 	bl	80021b6 <UTIL_SEQ_Idle>
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f383 8810 	msr	PRIMASK, r3
}
 800a6ca:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a6cc:	f000 f8d7 	bl	800a87e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a6d0:	4a03      	ldr	r2, [pc, #12]	; (800a6e0 <UTIL_SEQ_Run+0x1d8>)
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	6013      	str	r3, [r2, #0]

  return;
 800a6d6:	bf00      	nop
}
 800a6d8:	3740      	adds	r7, #64	; 0x40
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000002c 	.word	0x2000002c
 800a6e4:	200006f0 	.word	0x200006f0
 800a6e8:	200006f4 	.word	0x200006f4
 800a6ec:	20000028 	.word	0x20000028
 800a6f0:	200006f8 	.word	0x200006f8
 800a6f4:	20000780 	.word	0x20000780
 800a6f8:	200006fc 	.word	0x200006fc
 800a6fc:	20000700 	.word	0x20000700

0800a700 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a70c:	f3ef 8310 	mrs	r3, PRIMASK
 800a710:	617b      	str	r3, [r7, #20]
  return(result);
 800a712:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a716:	b672      	cpsid	i
}
 800a718:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 f8b6 	bl	800a88c <SEQ_BitPosition>
 800a720:	4603      	mov	r3, r0
 800a722:	4619      	mov	r1, r3
 800a724:	4a06      	ldr	r2, [pc, #24]	; (800a740 <UTIL_SEQ_RegTask+0x40>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f383 8810 	msr	PRIMASK, r3
}
 800a736:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a738:	bf00      	nop
}
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20000700 	.word	0x20000700

0800a744 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a744:	b480      	push	{r7}
 800a746:	b087      	sub	sp, #28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a74e:	f3ef 8310 	mrs	r3, PRIMASK
 800a752:	60fb      	str	r3, [r7, #12]
  return(result);
 800a754:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a756:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a758:	b672      	cpsid	i
}
 800a75a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a75c:	4b0d      	ldr	r3, [pc, #52]	; (800a794 <UTIL_SEQ_SetTask+0x50>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4313      	orrs	r3, r2
 800a764:	4a0b      	ldr	r2, [pc, #44]	; (800a794 <UTIL_SEQ_SetTask+0x50>)
 800a766:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a768:	4a0b      	ldr	r2, [pc, #44]	; (800a798 <UTIL_SEQ_SetTask+0x54>)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	431a      	orrs	r2, r3
 800a774:	4908      	ldr	r1, [pc, #32]	; (800a798 <UTIL_SEQ_SetTask+0x54>)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f383 8810 	msr	PRIMASK, r3
}
 800a786:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a788:	bf00      	nop
}
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	200006f0 	.word	0x200006f0
 800a798:	20000780 	.word	0x20000780

0800a79c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a7a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7ae:	b672      	cpsid	i
}
 800a7b0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <UTIL_SEQ_SetEvt+0x3c>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	4a07      	ldr	r2, [pc, #28]	; (800a7d8 <UTIL_SEQ_SetEvt+0x3c>)
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	f383 8810 	msr	PRIMASK, r3
}
 800a7c8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a7ca:	bf00      	nop
}
 800a7cc:	371c      	adds	r7, #28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	200006f4 	.word	0x200006f4

0800a7dc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a7e4:	4b1f      	ldr	r3, [pc, #124]	; (800a864 <UTIL_SEQ_WaitEvt+0x88>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a7ea:	4b1e      	ldr	r3, [pc, #120]	; (800a864 <UTIL_SEQ_WaitEvt+0x88>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d102      	bne.n	800a7fa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61fb      	str	r3, [r7, #28]
 800a7f8:	e005      	b.n	800a806 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a7fa:	4b1a      	ldr	r3, [pc, #104]	; (800a864 <UTIL_SEQ_WaitEvt+0x88>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2201      	movs	r2, #1
 800a800:	fa02 f303 	lsl.w	r3, r2, r3
 800a804:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a806:	4b18      	ldr	r3, [pc, #96]	; (800a868 <UTIL_SEQ_WaitEvt+0x8c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a80c:	4a16      	ldr	r2, [pc, #88]	; (800a868 <UTIL_SEQ_WaitEvt+0x8c>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a812:	e003      	b.n	800a81c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	69f8      	ldr	r0, [r7, #28]
 800a818:	f7f7 fcd4 	bl	80021c4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a81c:	4b13      	ldr	r3, [pc, #76]	; (800a86c <UTIL_SEQ_WaitEvt+0x90>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4013      	ands	r3, r2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0f5      	beq.n	800a814 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a828:	4a0e      	ldr	r2, [pc, #56]	; (800a864 <UTIL_SEQ_WaitEvt+0x88>)
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a82e:	f3ef 8310 	mrs	r3, PRIMASK
 800a832:	60bb      	str	r3, [r7, #8]
  return(result);
 800a834:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a838:	b672      	cpsid	i
}
 800a83a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	43da      	mvns	r2, r3
 800a840:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <UTIL_SEQ_WaitEvt+0x90>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4013      	ands	r3, r2
 800a846:	4a09      	ldr	r2, [pc, #36]	; (800a86c <UTIL_SEQ_WaitEvt+0x90>)
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f383 8810 	msr	PRIMASK, r3
}
 800a854:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a856:	4a04      	ldr	r2, [pc, #16]	; (800a868 <UTIL_SEQ_WaitEvt+0x8c>)
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	6013      	str	r3, [r2, #0]
  return;
 800a85c:	bf00      	nop
}
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	200006fc 	.word	0x200006fc
 800a868:	200006f8 	.word	0x200006f8
 800a86c:	200006f4 	.word	0x200006f4

0800a870 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a870:	b480      	push	{r7}
 800a872:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a874:	bf00      	nop
}
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a87e:	b480      	push	{r7}
 800a880:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a882:	bf00      	nop
}
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	0c1b      	lsrs	r3, r3, #16
 800a8a0:	041b      	lsls	r3, r3, #16
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d104      	bne.n	800a8b0 <SEQ_BitPosition+0x24>
 800a8a6:	2310      	movs	r3, #16
 800a8a8:	73fb      	strb	r3, [r7, #15]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	041b      	lsls	r3, r3, #16
 800a8ae:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <SEQ_BitPosition+0x3a>
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	3308      	adds	r3, #8
 800a8be:	73fb      	strb	r3, [r7, #15]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	021b      	lsls	r3, r3, #8
 800a8c4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d105      	bne.n	800a8dc <SEQ_BitPosition+0x50>
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	73fb      	strb	r3, [r7, #15]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	011b      	lsls	r3, r3, #4
 800a8da:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	0f1b      	lsrs	r3, r3, #28
 800a8e0:	4a07      	ldr	r2, [pc, #28]	; (800a900 <SEQ_BitPosition+0x74>)
 800a8e2:	5cd2      	ldrb	r2, [r2, r3]
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	f1c3 031f 	rsb	r3, r3, #31
 800a8f0:	b2db      	uxtb	r3, r3
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	0800be64 	.word	0x0800be64

0800a904 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	605a      	str	r2, [r3, #4]
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a92c:	f3ef 8310 	mrs	r3, PRIMASK
 800a930:	60fb      	str	r3, [r7, #12]
  return(result);
 800a932:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a936:	b672      	cpsid	i
}
 800a938:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	429a      	cmp	r2, r3
 800a942:	d102      	bne.n	800a94a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a944:	2301      	movs	r3, #1
 800a946:	75fb      	strb	r3, [r7, #23]
 800a948:	e001      	b.n	800a94e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	75fb      	strb	r3, [r7, #23]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f383 8810 	msr	PRIMASK, r3
}
 800a958:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	371c      	adds	r7, #28
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a972:	f3ef 8310 	mrs	r3, PRIMASK
 800a976:	60fb      	str	r3, [r7, #12]
  return(result);
 800a978:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a97a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a97c:	b672      	cpsid	i
}
 800a97e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	605a      	str	r2, [r3, #4]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f383 8810 	msr	PRIMASK, r3
}
 800a9a6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a9a8:	bf00      	nop
 800a9aa:	371c      	adds	r7, #28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9be:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a9c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c8:	b672      	cpsid	i
}
 800a9ca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f383 8810 	msr	PRIMASK, r3
}
 800a9f2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a9f4:	bf00      	nop
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa08:	f3ef 8310 	mrs	r3, PRIMASK
 800aa0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa12:	b672      	cpsid	i
}
 800aa14:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	6812      	ldr	r2, [r2, #0]
 800aa1e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6852      	ldr	r2, [r2, #4]
 800aa28:	605a      	str	r2, [r3, #4]
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	f383 8810 	msr	PRIMASK, r3
}
 800aa34:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aa36:	bf00      	nop
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b086      	sub	sp, #24
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa4c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa50:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa52:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa56:	b672      	cpsid	i
}
 800aa58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff ffca 	bl	800aa00 <LST_remove_node>
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f383 8810 	msr	PRIMASK, r3
}
 800aa76:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aa78:	bf00      	nop
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <__errno>:
 800aa80:	4b01      	ldr	r3, [pc, #4]	; (800aa88 <__errno+0x8>)
 800aa82:	6818      	ldr	r0, [r3, #0]
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	20000030 	.word	0x20000030

0800aa8c <__libc_init_array>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	4d0d      	ldr	r5, [pc, #52]	; (800aac4 <__libc_init_array+0x38>)
 800aa90:	4c0d      	ldr	r4, [pc, #52]	; (800aac8 <__libc_init_array+0x3c>)
 800aa92:	1b64      	subs	r4, r4, r5
 800aa94:	10a4      	asrs	r4, r4, #2
 800aa96:	2600      	movs	r6, #0
 800aa98:	42a6      	cmp	r6, r4
 800aa9a:	d109      	bne.n	800aab0 <__libc_init_array+0x24>
 800aa9c:	4d0b      	ldr	r5, [pc, #44]	; (800aacc <__libc_init_array+0x40>)
 800aa9e:	4c0c      	ldr	r4, [pc, #48]	; (800aad0 <__libc_init_array+0x44>)
 800aaa0:	f000 fcb2 	bl	800b408 <_init>
 800aaa4:	1b64      	subs	r4, r4, r5
 800aaa6:	10a4      	asrs	r4, r4, #2
 800aaa8:	2600      	movs	r6, #0
 800aaaa:	42a6      	cmp	r6, r4
 800aaac:	d105      	bne.n	800aaba <__libc_init_array+0x2e>
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
 800aab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab4:	4798      	blx	r3
 800aab6:	3601      	adds	r6, #1
 800aab8:	e7ee      	b.n	800aa98 <__libc_init_array+0xc>
 800aaba:	f855 3b04 	ldr.w	r3, [r5], #4
 800aabe:	4798      	blx	r3
 800aac0:	3601      	adds	r6, #1
 800aac2:	e7f2      	b.n	800aaaa <__libc_init_array+0x1e>
 800aac4:	0800bf08 	.word	0x0800bf08
 800aac8:	0800bf08 	.word	0x0800bf08
 800aacc:	0800bf08 	.word	0x0800bf08
 800aad0:	0800bf0c 	.word	0x0800bf0c

0800aad4 <malloc>:
 800aad4:	4b02      	ldr	r3, [pc, #8]	; (800aae0 <malloc+0xc>)
 800aad6:	4601      	mov	r1, r0
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	f000 b88d 	b.w	800abf8 <_malloc_r>
 800aade:	bf00      	nop
 800aae0:	20000030 	.word	0x20000030

0800aae4 <free>:
 800aae4:	4b02      	ldr	r3, [pc, #8]	; (800aaf0 <free+0xc>)
 800aae6:	4601      	mov	r1, r0
 800aae8:	6818      	ldr	r0, [r3, #0]
 800aaea:	f000 b819 	b.w	800ab20 <_free_r>
 800aaee:	bf00      	nop
 800aaf0:	20000030 	.word	0x20000030

0800aaf4 <memcpy>:
 800aaf4:	440a      	add	r2, r1
 800aaf6:	4291      	cmp	r1, r2
 800aaf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aafc:	d100      	bne.n	800ab00 <memcpy+0xc>
 800aafe:	4770      	bx	lr
 800ab00:	b510      	push	{r4, lr}
 800ab02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab0a:	4291      	cmp	r1, r2
 800ab0c:	d1f9      	bne.n	800ab02 <memcpy+0xe>
 800ab0e:	bd10      	pop	{r4, pc}

0800ab10 <memset>:
 800ab10:	4402      	add	r2, r0
 800ab12:	4603      	mov	r3, r0
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d100      	bne.n	800ab1a <memset+0xa>
 800ab18:	4770      	bx	lr
 800ab1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab1e:	e7f9      	b.n	800ab14 <memset+0x4>

0800ab20 <_free_r>:
 800ab20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab22:	2900      	cmp	r1, #0
 800ab24:	d044      	beq.n	800abb0 <_free_r+0x90>
 800ab26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab2a:	9001      	str	r0, [sp, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab32:	bfb8      	it	lt
 800ab34:	18e4      	addlt	r4, r4, r3
 800ab36:	f000 f919 	bl	800ad6c <__malloc_lock>
 800ab3a:	4a1e      	ldr	r2, [pc, #120]	; (800abb4 <_free_r+0x94>)
 800ab3c:	9801      	ldr	r0, [sp, #4]
 800ab3e:	6813      	ldr	r3, [r2, #0]
 800ab40:	b933      	cbnz	r3, 800ab50 <_free_r+0x30>
 800ab42:	6063      	str	r3, [r4, #4]
 800ab44:	6014      	str	r4, [r2, #0]
 800ab46:	b003      	add	sp, #12
 800ab48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab4c:	f000 b914 	b.w	800ad78 <__malloc_unlock>
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	d908      	bls.n	800ab66 <_free_r+0x46>
 800ab54:	6825      	ldr	r5, [r4, #0]
 800ab56:	1961      	adds	r1, r4, r5
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	bf01      	itttt	eq
 800ab5c:	6819      	ldreq	r1, [r3, #0]
 800ab5e:	685b      	ldreq	r3, [r3, #4]
 800ab60:	1949      	addeq	r1, r1, r5
 800ab62:	6021      	streq	r1, [r4, #0]
 800ab64:	e7ed      	b.n	800ab42 <_free_r+0x22>
 800ab66:	461a      	mov	r2, r3
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	b10b      	cbz	r3, 800ab70 <_free_r+0x50>
 800ab6c:	42a3      	cmp	r3, r4
 800ab6e:	d9fa      	bls.n	800ab66 <_free_r+0x46>
 800ab70:	6811      	ldr	r1, [r2, #0]
 800ab72:	1855      	adds	r5, r2, r1
 800ab74:	42a5      	cmp	r5, r4
 800ab76:	d10b      	bne.n	800ab90 <_free_r+0x70>
 800ab78:	6824      	ldr	r4, [r4, #0]
 800ab7a:	4421      	add	r1, r4
 800ab7c:	1854      	adds	r4, r2, r1
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	6011      	str	r1, [r2, #0]
 800ab82:	d1e0      	bne.n	800ab46 <_free_r+0x26>
 800ab84:	681c      	ldr	r4, [r3, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	6053      	str	r3, [r2, #4]
 800ab8a:	4421      	add	r1, r4
 800ab8c:	6011      	str	r1, [r2, #0]
 800ab8e:	e7da      	b.n	800ab46 <_free_r+0x26>
 800ab90:	d902      	bls.n	800ab98 <_free_r+0x78>
 800ab92:	230c      	movs	r3, #12
 800ab94:	6003      	str	r3, [r0, #0]
 800ab96:	e7d6      	b.n	800ab46 <_free_r+0x26>
 800ab98:	6825      	ldr	r5, [r4, #0]
 800ab9a:	1961      	adds	r1, r4, r5
 800ab9c:	428b      	cmp	r3, r1
 800ab9e:	bf04      	itt	eq
 800aba0:	6819      	ldreq	r1, [r3, #0]
 800aba2:	685b      	ldreq	r3, [r3, #4]
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	bf04      	itt	eq
 800aba8:	1949      	addeq	r1, r1, r5
 800abaa:	6021      	streq	r1, [r4, #0]
 800abac:	6054      	str	r4, [r2, #4]
 800abae:	e7ca      	b.n	800ab46 <_free_r+0x26>
 800abb0:	b003      	add	sp, #12
 800abb2:	bd30      	pop	{r4, r5, pc}
 800abb4:	20000790 	.word	0x20000790

0800abb8 <sbrk_aligned>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	4e0e      	ldr	r6, [pc, #56]	; (800abf4 <sbrk_aligned+0x3c>)
 800abbc:	460c      	mov	r4, r1
 800abbe:	6831      	ldr	r1, [r6, #0]
 800abc0:	4605      	mov	r5, r0
 800abc2:	b911      	cbnz	r1, 800abca <sbrk_aligned+0x12>
 800abc4:	f000 f88c 	bl	800ace0 <_sbrk_r>
 800abc8:	6030      	str	r0, [r6, #0]
 800abca:	4621      	mov	r1, r4
 800abcc:	4628      	mov	r0, r5
 800abce:	f000 f887 	bl	800ace0 <_sbrk_r>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	d00a      	beq.n	800abec <sbrk_aligned+0x34>
 800abd6:	1cc4      	adds	r4, r0, #3
 800abd8:	f024 0403 	bic.w	r4, r4, #3
 800abdc:	42a0      	cmp	r0, r4
 800abde:	d007      	beq.n	800abf0 <sbrk_aligned+0x38>
 800abe0:	1a21      	subs	r1, r4, r0
 800abe2:	4628      	mov	r0, r5
 800abe4:	f000 f87c 	bl	800ace0 <_sbrk_r>
 800abe8:	3001      	adds	r0, #1
 800abea:	d101      	bne.n	800abf0 <sbrk_aligned+0x38>
 800abec:	f04f 34ff 	mov.w	r4, #4294967295
 800abf0:	4620      	mov	r0, r4
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	20000794 	.word	0x20000794

0800abf8 <_malloc_r>:
 800abf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfc:	1ccd      	adds	r5, r1, #3
 800abfe:	f025 0503 	bic.w	r5, r5, #3
 800ac02:	3508      	adds	r5, #8
 800ac04:	2d0c      	cmp	r5, #12
 800ac06:	bf38      	it	cc
 800ac08:	250c      	movcc	r5, #12
 800ac0a:	2d00      	cmp	r5, #0
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	db01      	blt.n	800ac14 <_malloc_r+0x1c>
 800ac10:	42a9      	cmp	r1, r5
 800ac12:	d905      	bls.n	800ac20 <_malloc_r+0x28>
 800ac14:	230c      	movs	r3, #12
 800ac16:	603b      	str	r3, [r7, #0]
 800ac18:	2600      	movs	r6, #0
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac20:	4e2e      	ldr	r6, [pc, #184]	; (800acdc <_malloc_r+0xe4>)
 800ac22:	f000 f8a3 	bl	800ad6c <__malloc_lock>
 800ac26:	6833      	ldr	r3, [r6, #0]
 800ac28:	461c      	mov	r4, r3
 800ac2a:	bb34      	cbnz	r4, 800ac7a <_malloc_r+0x82>
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f7ff ffc2 	bl	800abb8 <sbrk_aligned>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	4604      	mov	r4, r0
 800ac38:	d14d      	bne.n	800acd6 <_malloc_r+0xde>
 800ac3a:	6834      	ldr	r4, [r6, #0]
 800ac3c:	4626      	mov	r6, r4
 800ac3e:	2e00      	cmp	r6, #0
 800ac40:	d140      	bne.n	800acc4 <_malloc_r+0xcc>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	4631      	mov	r1, r6
 800ac46:	4638      	mov	r0, r7
 800ac48:	eb04 0803 	add.w	r8, r4, r3
 800ac4c:	f000 f848 	bl	800ace0 <_sbrk_r>
 800ac50:	4580      	cmp	r8, r0
 800ac52:	d13a      	bne.n	800acca <_malloc_r+0xd2>
 800ac54:	6821      	ldr	r1, [r4, #0]
 800ac56:	3503      	adds	r5, #3
 800ac58:	1a6d      	subs	r5, r5, r1
 800ac5a:	f025 0503 	bic.w	r5, r5, #3
 800ac5e:	3508      	adds	r5, #8
 800ac60:	2d0c      	cmp	r5, #12
 800ac62:	bf38      	it	cc
 800ac64:	250c      	movcc	r5, #12
 800ac66:	4629      	mov	r1, r5
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f7ff ffa5 	bl	800abb8 <sbrk_aligned>
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d02b      	beq.n	800acca <_malloc_r+0xd2>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	442b      	add	r3, r5
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	e00e      	b.n	800ac98 <_malloc_r+0xa0>
 800ac7a:	6822      	ldr	r2, [r4, #0]
 800ac7c:	1b52      	subs	r2, r2, r5
 800ac7e:	d41e      	bmi.n	800acbe <_malloc_r+0xc6>
 800ac80:	2a0b      	cmp	r2, #11
 800ac82:	d916      	bls.n	800acb2 <_malloc_r+0xba>
 800ac84:	1961      	adds	r1, r4, r5
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	6025      	str	r5, [r4, #0]
 800ac8a:	bf18      	it	ne
 800ac8c:	6059      	strne	r1, [r3, #4]
 800ac8e:	6863      	ldr	r3, [r4, #4]
 800ac90:	bf08      	it	eq
 800ac92:	6031      	streq	r1, [r6, #0]
 800ac94:	5162      	str	r2, [r4, r5]
 800ac96:	604b      	str	r3, [r1, #4]
 800ac98:	4638      	mov	r0, r7
 800ac9a:	f104 060b 	add.w	r6, r4, #11
 800ac9e:	f000 f86b 	bl	800ad78 <__malloc_unlock>
 800aca2:	f026 0607 	bic.w	r6, r6, #7
 800aca6:	1d23      	adds	r3, r4, #4
 800aca8:	1af2      	subs	r2, r6, r3
 800acaa:	d0b6      	beq.n	800ac1a <_malloc_r+0x22>
 800acac:	1b9b      	subs	r3, r3, r6
 800acae:	50a3      	str	r3, [r4, r2]
 800acb0:	e7b3      	b.n	800ac1a <_malloc_r+0x22>
 800acb2:	6862      	ldr	r2, [r4, #4]
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	bf0c      	ite	eq
 800acb8:	6032      	streq	r2, [r6, #0]
 800acba:	605a      	strne	r2, [r3, #4]
 800acbc:	e7ec      	b.n	800ac98 <_malloc_r+0xa0>
 800acbe:	4623      	mov	r3, r4
 800acc0:	6864      	ldr	r4, [r4, #4]
 800acc2:	e7b2      	b.n	800ac2a <_malloc_r+0x32>
 800acc4:	4634      	mov	r4, r6
 800acc6:	6876      	ldr	r6, [r6, #4]
 800acc8:	e7b9      	b.n	800ac3e <_malloc_r+0x46>
 800acca:	230c      	movs	r3, #12
 800accc:	603b      	str	r3, [r7, #0]
 800acce:	4638      	mov	r0, r7
 800acd0:	f000 f852 	bl	800ad78 <__malloc_unlock>
 800acd4:	e7a1      	b.n	800ac1a <_malloc_r+0x22>
 800acd6:	6025      	str	r5, [r4, #0]
 800acd8:	e7de      	b.n	800ac98 <_malloc_r+0xa0>
 800acda:	bf00      	nop
 800acdc:	20000790 	.word	0x20000790

0800ace0 <_sbrk_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d06      	ldr	r5, [pc, #24]	; (800acfc <_sbrk_r+0x1c>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	f7f5 fe58 	bl	80009a0 <_sbrk>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_sbrk_r+0x1a>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_sbrk_r+0x1a>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	2000079c 	.word	0x2000079c

0800ad00 <sniprintf>:
 800ad00:	b40c      	push	{r2, r3}
 800ad02:	b530      	push	{r4, r5, lr}
 800ad04:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <sniprintf+0x64>)
 800ad06:	1e0c      	subs	r4, r1, #0
 800ad08:	681d      	ldr	r5, [r3, #0]
 800ad0a:	b09d      	sub	sp, #116	; 0x74
 800ad0c:	da08      	bge.n	800ad20 <sniprintf+0x20>
 800ad0e:	238b      	movs	r3, #139	; 0x8b
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	f04f 30ff 	mov.w	r0, #4294967295
 800ad16:	b01d      	add	sp, #116	; 0x74
 800ad18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad1c:	b002      	add	sp, #8
 800ad1e:	4770      	bx	lr
 800ad20:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad24:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad28:	bf14      	ite	ne
 800ad2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad2e:	4623      	moveq	r3, r4
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	9307      	str	r3, [sp, #28]
 800ad34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad38:	9002      	str	r0, [sp, #8]
 800ad3a:	9006      	str	r0, [sp, #24]
 800ad3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad42:	ab21      	add	r3, sp, #132	; 0x84
 800ad44:	a902      	add	r1, sp, #8
 800ad46:	4628      	mov	r0, r5
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	f000 f877 	bl	800ae3c <_svfiprintf_r>
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	bfbc      	itt	lt
 800ad52:	238b      	movlt	r3, #139	; 0x8b
 800ad54:	602b      	strlt	r3, [r5, #0]
 800ad56:	2c00      	cmp	r4, #0
 800ad58:	d0dd      	beq.n	800ad16 <sniprintf+0x16>
 800ad5a:	9b02      	ldr	r3, [sp, #8]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	701a      	strb	r2, [r3, #0]
 800ad60:	e7d9      	b.n	800ad16 <sniprintf+0x16>
 800ad62:	bf00      	nop
 800ad64:	20000030 	.word	0x20000030

0800ad68 <__retarget_lock_acquire_recursive>:
 800ad68:	4770      	bx	lr

0800ad6a <__retarget_lock_release_recursive>:
 800ad6a:	4770      	bx	lr

0800ad6c <__malloc_lock>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	; (800ad74 <__malloc_lock+0x8>)
 800ad6e:	f7ff bffb 	b.w	800ad68 <__retarget_lock_acquire_recursive>
 800ad72:	bf00      	nop
 800ad74:	20000798 	.word	0x20000798

0800ad78 <__malloc_unlock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__malloc_unlock+0x8>)
 800ad7a:	f7ff bff6 	b.w	800ad6a <__retarget_lock_release_recursive>
 800ad7e:	bf00      	nop
 800ad80:	20000798 	.word	0x20000798

0800ad84 <__ssputs_r>:
 800ad84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad88:	688e      	ldr	r6, [r1, #8]
 800ad8a:	429e      	cmp	r6, r3
 800ad8c:	4682      	mov	sl, r0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	4690      	mov	r8, r2
 800ad92:	461f      	mov	r7, r3
 800ad94:	d838      	bhi.n	800ae08 <__ssputs_r+0x84>
 800ad96:	898a      	ldrh	r2, [r1, #12]
 800ad98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad9c:	d032      	beq.n	800ae04 <__ssputs_r+0x80>
 800ad9e:	6825      	ldr	r5, [r4, #0]
 800ada0:	6909      	ldr	r1, [r1, #16]
 800ada2:	eba5 0901 	sub.w	r9, r5, r1
 800ada6:	6965      	ldr	r5, [r4, #20]
 800ada8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adb0:	3301      	adds	r3, #1
 800adb2:	444b      	add	r3, r9
 800adb4:	106d      	asrs	r5, r5, #1
 800adb6:	429d      	cmp	r5, r3
 800adb8:	bf38      	it	cc
 800adba:	461d      	movcc	r5, r3
 800adbc:	0553      	lsls	r3, r2, #21
 800adbe:	d531      	bpl.n	800ae24 <__ssputs_r+0xa0>
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7ff ff19 	bl	800abf8 <_malloc_r>
 800adc6:	4606      	mov	r6, r0
 800adc8:	b950      	cbnz	r0, 800ade0 <__ssputs_r+0x5c>
 800adca:	230c      	movs	r3, #12
 800adcc:	f8ca 3000 	str.w	r3, [sl]
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add6:	81a3      	strh	r3, [r4, #12]
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade0:	6921      	ldr	r1, [r4, #16]
 800ade2:	464a      	mov	r2, r9
 800ade4:	f7ff fe86 	bl	800aaf4 <memcpy>
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	6126      	str	r6, [r4, #16]
 800adf6:	6165      	str	r5, [r4, #20]
 800adf8:	444e      	add	r6, r9
 800adfa:	eba5 0509 	sub.w	r5, r5, r9
 800adfe:	6026      	str	r6, [r4, #0]
 800ae00:	60a5      	str	r5, [r4, #8]
 800ae02:	463e      	mov	r6, r7
 800ae04:	42be      	cmp	r6, r7
 800ae06:	d900      	bls.n	800ae0a <__ssputs_r+0x86>
 800ae08:	463e      	mov	r6, r7
 800ae0a:	6820      	ldr	r0, [r4, #0]
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	4641      	mov	r1, r8
 800ae10:	f000 faa8 	bl	800b364 <memmove>
 800ae14:	68a3      	ldr	r3, [r4, #8]
 800ae16:	1b9b      	subs	r3, r3, r6
 800ae18:	60a3      	str	r3, [r4, #8]
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	4433      	add	r3, r6
 800ae1e:	6023      	str	r3, [r4, #0]
 800ae20:	2000      	movs	r0, #0
 800ae22:	e7db      	b.n	800addc <__ssputs_r+0x58>
 800ae24:	462a      	mov	r2, r5
 800ae26:	f000 fab7 	bl	800b398 <_realloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1e1      	bne.n	800adf4 <__ssputs_r+0x70>
 800ae30:	6921      	ldr	r1, [r4, #16]
 800ae32:	4650      	mov	r0, sl
 800ae34:	f7ff fe74 	bl	800ab20 <_free_r>
 800ae38:	e7c7      	b.n	800adca <__ssputs_r+0x46>
	...

0800ae3c <_svfiprintf_r>:
 800ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	4698      	mov	r8, r3
 800ae42:	898b      	ldrh	r3, [r1, #12]
 800ae44:	061b      	lsls	r3, r3, #24
 800ae46:	b09d      	sub	sp, #116	; 0x74
 800ae48:	4607      	mov	r7, r0
 800ae4a:	460d      	mov	r5, r1
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	d50e      	bpl.n	800ae6e <_svfiprintf_r+0x32>
 800ae50:	690b      	ldr	r3, [r1, #16]
 800ae52:	b963      	cbnz	r3, 800ae6e <_svfiprintf_r+0x32>
 800ae54:	2140      	movs	r1, #64	; 0x40
 800ae56:	f7ff fecf 	bl	800abf8 <_malloc_r>
 800ae5a:	6028      	str	r0, [r5, #0]
 800ae5c:	6128      	str	r0, [r5, #16]
 800ae5e:	b920      	cbnz	r0, 800ae6a <_svfiprintf_r+0x2e>
 800ae60:	230c      	movs	r3, #12
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	e0d1      	b.n	800b00e <_svfiprintf_r+0x1d2>
 800ae6a:	2340      	movs	r3, #64	; 0x40
 800ae6c:	616b      	str	r3, [r5, #20]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	9309      	str	r3, [sp, #36]	; 0x24
 800ae72:	2320      	movs	r3, #32
 800ae74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae7c:	2330      	movs	r3, #48	; 0x30
 800ae7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b028 <_svfiprintf_r+0x1ec>
 800ae82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae86:	f04f 0901 	mov.w	r9, #1
 800ae8a:	4623      	mov	r3, r4
 800ae8c:	469a      	mov	sl, r3
 800ae8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae92:	b10a      	cbz	r2, 800ae98 <_svfiprintf_r+0x5c>
 800ae94:	2a25      	cmp	r2, #37	; 0x25
 800ae96:	d1f9      	bne.n	800ae8c <_svfiprintf_r+0x50>
 800ae98:	ebba 0b04 	subs.w	fp, sl, r4
 800ae9c:	d00b      	beq.n	800aeb6 <_svfiprintf_r+0x7a>
 800ae9e:	465b      	mov	r3, fp
 800aea0:	4622      	mov	r2, r4
 800aea2:	4629      	mov	r1, r5
 800aea4:	4638      	mov	r0, r7
 800aea6:	f7ff ff6d 	bl	800ad84 <__ssputs_r>
 800aeaa:	3001      	adds	r0, #1
 800aeac:	f000 80aa 	beq.w	800b004 <_svfiprintf_r+0x1c8>
 800aeb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeb2:	445a      	add	r2, fp
 800aeb4:	9209      	str	r2, [sp, #36]	; 0x24
 800aeb6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 80a2 	beq.w	800b004 <_svfiprintf_r+0x1c8>
 800aec0:	2300      	movs	r3, #0
 800aec2:	f04f 32ff 	mov.w	r2, #4294967295
 800aec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeca:	f10a 0a01 	add.w	sl, sl, #1
 800aece:	9304      	str	r3, [sp, #16]
 800aed0:	9307      	str	r3, [sp, #28]
 800aed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aed6:	931a      	str	r3, [sp, #104]	; 0x68
 800aed8:	4654      	mov	r4, sl
 800aeda:	2205      	movs	r2, #5
 800aedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee0:	4851      	ldr	r0, [pc, #324]	; (800b028 <_svfiprintf_r+0x1ec>)
 800aee2:	f7f5 f965 	bl	80001b0 <memchr>
 800aee6:	9a04      	ldr	r2, [sp, #16]
 800aee8:	b9d8      	cbnz	r0, 800af22 <_svfiprintf_r+0xe6>
 800aeea:	06d0      	lsls	r0, r2, #27
 800aeec:	bf44      	itt	mi
 800aeee:	2320      	movmi	r3, #32
 800aef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aef4:	0711      	lsls	r1, r2, #28
 800aef6:	bf44      	itt	mi
 800aef8:	232b      	movmi	r3, #43	; 0x2b
 800aefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aefe:	f89a 3000 	ldrb.w	r3, [sl]
 800af02:	2b2a      	cmp	r3, #42	; 0x2a
 800af04:	d015      	beq.n	800af32 <_svfiprintf_r+0xf6>
 800af06:	9a07      	ldr	r2, [sp, #28]
 800af08:	4654      	mov	r4, sl
 800af0a:	2000      	movs	r0, #0
 800af0c:	f04f 0c0a 	mov.w	ip, #10
 800af10:	4621      	mov	r1, r4
 800af12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af16:	3b30      	subs	r3, #48	; 0x30
 800af18:	2b09      	cmp	r3, #9
 800af1a:	d94e      	bls.n	800afba <_svfiprintf_r+0x17e>
 800af1c:	b1b0      	cbz	r0, 800af4c <_svfiprintf_r+0x110>
 800af1e:	9207      	str	r2, [sp, #28]
 800af20:	e014      	b.n	800af4c <_svfiprintf_r+0x110>
 800af22:	eba0 0308 	sub.w	r3, r0, r8
 800af26:	fa09 f303 	lsl.w	r3, r9, r3
 800af2a:	4313      	orrs	r3, r2
 800af2c:	9304      	str	r3, [sp, #16]
 800af2e:	46a2      	mov	sl, r4
 800af30:	e7d2      	b.n	800aed8 <_svfiprintf_r+0x9c>
 800af32:	9b03      	ldr	r3, [sp, #12]
 800af34:	1d19      	adds	r1, r3, #4
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	9103      	str	r1, [sp, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	bfbb      	ittet	lt
 800af3e:	425b      	neglt	r3, r3
 800af40:	f042 0202 	orrlt.w	r2, r2, #2
 800af44:	9307      	strge	r3, [sp, #28]
 800af46:	9307      	strlt	r3, [sp, #28]
 800af48:	bfb8      	it	lt
 800af4a:	9204      	strlt	r2, [sp, #16]
 800af4c:	7823      	ldrb	r3, [r4, #0]
 800af4e:	2b2e      	cmp	r3, #46	; 0x2e
 800af50:	d10c      	bne.n	800af6c <_svfiprintf_r+0x130>
 800af52:	7863      	ldrb	r3, [r4, #1]
 800af54:	2b2a      	cmp	r3, #42	; 0x2a
 800af56:	d135      	bne.n	800afc4 <_svfiprintf_r+0x188>
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	9203      	str	r2, [sp, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	bfb8      	it	lt
 800af64:	f04f 33ff 	movlt.w	r3, #4294967295
 800af68:	3402      	adds	r4, #2
 800af6a:	9305      	str	r3, [sp, #20]
 800af6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b038 <_svfiprintf_r+0x1fc>
 800af70:	7821      	ldrb	r1, [r4, #0]
 800af72:	2203      	movs	r2, #3
 800af74:	4650      	mov	r0, sl
 800af76:	f7f5 f91b 	bl	80001b0 <memchr>
 800af7a:	b140      	cbz	r0, 800af8e <_svfiprintf_r+0x152>
 800af7c:	2340      	movs	r3, #64	; 0x40
 800af7e:	eba0 000a 	sub.w	r0, r0, sl
 800af82:	fa03 f000 	lsl.w	r0, r3, r0
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	4303      	orrs	r3, r0
 800af8a:	3401      	adds	r4, #1
 800af8c:	9304      	str	r3, [sp, #16]
 800af8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af92:	4826      	ldr	r0, [pc, #152]	; (800b02c <_svfiprintf_r+0x1f0>)
 800af94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af98:	2206      	movs	r2, #6
 800af9a:	f7f5 f909 	bl	80001b0 <memchr>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d038      	beq.n	800b014 <_svfiprintf_r+0x1d8>
 800afa2:	4b23      	ldr	r3, [pc, #140]	; (800b030 <_svfiprintf_r+0x1f4>)
 800afa4:	bb1b      	cbnz	r3, 800afee <_svfiprintf_r+0x1b2>
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	3307      	adds	r3, #7
 800afaa:	f023 0307 	bic.w	r3, r3, #7
 800afae:	3308      	adds	r3, #8
 800afb0:	9303      	str	r3, [sp, #12]
 800afb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb4:	4433      	add	r3, r6
 800afb6:	9309      	str	r3, [sp, #36]	; 0x24
 800afb8:	e767      	b.n	800ae8a <_svfiprintf_r+0x4e>
 800afba:	fb0c 3202 	mla	r2, ip, r2, r3
 800afbe:	460c      	mov	r4, r1
 800afc0:	2001      	movs	r0, #1
 800afc2:	e7a5      	b.n	800af10 <_svfiprintf_r+0xd4>
 800afc4:	2300      	movs	r3, #0
 800afc6:	3401      	adds	r4, #1
 800afc8:	9305      	str	r3, [sp, #20]
 800afca:	4619      	mov	r1, r3
 800afcc:	f04f 0c0a 	mov.w	ip, #10
 800afd0:	4620      	mov	r0, r4
 800afd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afd6:	3a30      	subs	r2, #48	; 0x30
 800afd8:	2a09      	cmp	r2, #9
 800afda:	d903      	bls.n	800afe4 <_svfiprintf_r+0x1a8>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0c5      	beq.n	800af6c <_svfiprintf_r+0x130>
 800afe0:	9105      	str	r1, [sp, #20]
 800afe2:	e7c3      	b.n	800af6c <_svfiprintf_r+0x130>
 800afe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800afe8:	4604      	mov	r4, r0
 800afea:	2301      	movs	r3, #1
 800afec:	e7f0      	b.n	800afd0 <_svfiprintf_r+0x194>
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	462a      	mov	r2, r5
 800aff4:	4b0f      	ldr	r3, [pc, #60]	; (800b034 <_svfiprintf_r+0x1f8>)
 800aff6:	a904      	add	r1, sp, #16
 800aff8:	4638      	mov	r0, r7
 800affa:	f3af 8000 	nop.w
 800affe:	1c42      	adds	r2, r0, #1
 800b000:	4606      	mov	r6, r0
 800b002:	d1d6      	bne.n	800afb2 <_svfiprintf_r+0x176>
 800b004:	89ab      	ldrh	r3, [r5, #12]
 800b006:	065b      	lsls	r3, r3, #25
 800b008:	f53f af2c 	bmi.w	800ae64 <_svfiprintf_r+0x28>
 800b00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b00e:	b01d      	add	sp, #116	; 0x74
 800b010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b014:	ab03      	add	r3, sp, #12
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	462a      	mov	r2, r5
 800b01a:	4b06      	ldr	r3, [pc, #24]	; (800b034 <_svfiprintf_r+0x1f8>)
 800b01c:	a904      	add	r1, sp, #16
 800b01e:	4638      	mov	r0, r7
 800b020:	f000 f87a 	bl	800b118 <_printf_i>
 800b024:	e7eb      	b.n	800affe <_svfiprintf_r+0x1c2>
 800b026:	bf00      	nop
 800b028:	0800bed4 	.word	0x0800bed4
 800b02c:	0800bede 	.word	0x0800bede
 800b030:	00000000 	.word	0x00000000
 800b034:	0800ad85 	.word	0x0800ad85
 800b038:	0800beda 	.word	0x0800beda

0800b03c <_printf_common>:
 800b03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	4616      	mov	r6, r2
 800b042:	4699      	mov	r9, r3
 800b044:	688a      	ldr	r2, [r1, #8]
 800b046:	690b      	ldr	r3, [r1, #16]
 800b048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b04c:	4293      	cmp	r3, r2
 800b04e:	bfb8      	it	lt
 800b050:	4613      	movlt	r3, r2
 800b052:	6033      	str	r3, [r6, #0]
 800b054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b058:	4607      	mov	r7, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	b10a      	cbz	r2, 800b062 <_printf_common+0x26>
 800b05e:	3301      	adds	r3, #1
 800b060:	6033      	str	r3, [r6, #0]
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	0699      	lsls	r1, r3, #26
 800b066:	bf42      	ittt	mi
 800b068:	6833      	ldrmi	r3, [r6, #0]
 800b06a:	3302      	addmi	r3, #2
 800b06c:	6033      	strmi	r3, [r6, #0]
 800b06e:	6825      	ldr	r5, [r4, #0]
 800b070:	f015 0506 	ands.w	r5, r5, #6
 800b074:	d106      	bne.n	800b084 <_printf_common+0x48>
 800b076:	f104 0a19 	add.w	sl, r4, #25
 800b07a:	68e3      	ldr	r3, [r4, #12]
 800b07c:	6832      	ldr	r2, [r6, #0]
 800b07e:	1a9b      	subs	r3, r3, r2
 800b080:	42ab      	cmp	r3, r5
 800b082:	dc26      	bgt.n	800b0d2 <_printf_common+0x96>
 800b084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b088:	1e13      	subs	r3, r2, #0
 800b08a:	6822      	ldr	r2, [r4, #0]
 800b08c:	bf18      	it	ne
 800b08e:	2301      	movne	r3, #1
 800b090:	0692      	lsls	r2, r2, #26
 800b092:	d42b      	bmi.n	800b0ec <_printf_common+0xb0>
 800b094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b098:	4649      	mov	r1, r9
 800b09a:	4638      	mov	r0, r7
 800b09c:	47c0      	blx	r8
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d01e      	beq.n	800b0e0 <_printf_common+0xa4>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	68e5      	ldr	r5, [r4, #12]
 800b0a6:	6832      	ldr	r2, [r6, #0]
 800b0a8:	f003 0306 	and.w	r3, r3, #6
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	bf08      	it	eq
 800b0b0:	1aad      	subeq	r5, r5, r2
 800b0b2:	68a3      	ldr	r3, [r4, #8]
 800b0b4:	6922      	ldr	r2, [r4, #16]
 800b0b6:	bf0c      	ite	eq
 800b0b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0bc:	2500      	movne	r5, #0
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	bfc4      	itt	gt
 800b0c2:	1a9b      	subgt	r3, r3, r2
 800b0c4:	18ed      	addgt	r5, r5, r3
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	341a      	adds	r4, #26
 800b0ca:	42b5      	cmp	r5, r6
 800b0cc:	d11a      	bne.n	800b104 <_printf_common+0xc8>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	e008      	b.n	800b0e4 <_printf_common+0xa8>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4652      	mov	r2, sl
 800b0d6:	4649      	mov	r1, r9
 800b0d8:	4638      	mov	r0, r7
 800b0da:	47c0      	blx	r8
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d103      	bne.n	800b0e8 <_printf_common+0xac>
 800b0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e8:	3501      	adds	r5, #1
 800b0ea:	e7c6      	b.n	800b07a <_printf_common+0x3e>
 800b0ec:	18e1      	adds	r1, r4, r3
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	2030      	movs	r0, #48	; 0x30
 800b0f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0f6:	4422      	add	r2, r4
 800b0f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b100:	3302      	adds	r3, #2
 800b102:	e7c7      	b.n	800b094 <_printf_common+0x58>
 800b104:	2301      	movs	r3, #1
 800b106:	4622      	mov	r2, r4
 800b108:	4649      	mov	r1, r9
 800b10a:	4638      	mov	r0, r7
 800b10c:	47c0      	blx	r8
 800b10e:	3001      	adds	r0, #1
 800b110:	d0e6      	beq.n	800b0e0 <_printf_common+0xa4>
 800b112:	3601      	adds	r6, #1
 800b114:	e7d9      	b.n	800b0ca <_printf_common+0x8e>
	...

0800b118 <_printf_i>:
 800b118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b11c:	7e0f      	ldrb	r7, [r1, #24]
 800b11e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b120:	2f78      	cmp	r7, #120	; 0x78
 800b122:	4691      	mov	r9, r2
 800b124:	4680      	mov	r8, r0
 800b126:	460c      	mov	r4, r1
 800b128:	469a      	mov	sl, r3
 800b12a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b12e:	d807      	bhi.n	800b140 <_printf_i+0x28>
 800b130:	2f62      	cmp	r7, #98	; 0x62
 800b132:	d80a      	bhi.n	800b14a <_printf_i+0x32>
 800b134:	2f00      	cmp	r7, #0
 800b136:	f000 80d8 	beq.w	800b2ea <_printf_i+0x1d2>
 800b13a:	2f58      	cmp	r7, #88	; 0x58
 800b13c:	f000 80a3 	beq.w	800b286 <_printf_i+0x16e>
 800b140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b148:	e03a      	b.n	800b1c0 <_printf_i+0xa8>
 800b14a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b14e:	2b15      	cmp	r3, #21
 800b150:	d8f6      	bhi.n	800b140 <_printf_i+0x28>
 800b152:	a101      	add	r1, pc, #4	; (adr r1, 800b158 <_printf_i+0x40>)
 800b154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b158:	0800b1b1 	.word	0x0800b1b1
 800b15c:	0800b1c5 	.word	0x0800b1c5
 800b160:	0800b141 	.word	0x0800b141
 800b164:	0800b141 	.word	0x0800b141
 800b168:	0800b141 	.word	0x0800b141
 800b16c:	0800b141 	.word	0x0800b141
 800b170:	0800b1c5 	.word	0x0800b1c5
 800b174:	0800b141 	.word	0x0800b141
 800b178:	0800b141 	.word	0x0800b141
 800b17c:	0800b141 	.word	0x0800b141
 800b180:	0800b141 	.word	0x0800b141
 800b184:	0800b2d1 	.word	0x0800b2d1
 800b188:	0800b1f5 	.word	0x0800b1f5
 800b18c:	0800b2b3 	.word	0x0800b2b3
 800b190:	0800b141 	.word	0x0800b141
 800b194:	0800b141 	.word	0x0800b141
 800b198:	0800b2f3 	.word	0x0800b2f3
 800b19c:	0800b141 	.word	0x0800b141
 800b1a0:	0800b1f5 	.word	0x0800b1f5
 800b1a4:	0800b141 	.word	0x0800b141
 800b1a8:	0800b141 	.word	0x0800b141
 800b1ac:	0800b2bb 	.word	0x0800b2bb
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	1d1a      	adds	r2, r3, #4
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	602a      	str	r2, [r5, #0]
 800b1b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e0a3      	b.n	800b30c <_printf_i+0x1f4>
 800b1c4:	6820      	ldr	r0, [r4, #0]
 800b1c6:	6829      	ldr	r1, [r5, #0]
 800b1c8:	0606      	lsls	r6, r0, #24
 800b1ca:	f101 0304 	add.w	r3, r1, #4
 800b1ce:	d50a      	bpl.n	800b1e6 <_printf_i+0xce>
 800b1d0:	680e      	ldr	r6, [r1, #0]
 800b1d2:	602b      	str	r3, [r5, #0]
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	da03      	bge.n	800b1e0 <_printf_i+0xc8>
 800b1d8:	232d      	movs	r3, #45	; 0x2d
 800b1da:	4276      	negs	r6, r6
 800b1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e0:	485e      	ldr	r0, [pc, #376]	; (800b35c <_printf_i+0x244>)
 800b1e2:	230a      	movs	r3, #10
 800b1e4:	e019      	b.n	800b21a <_printf_i+0x102>
 800b1e6:	680e      	ldr	r6, [r1, #0]
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1ee:	bf18      	it	ne
 800b1f0:	b236      	sxthne	r6, r6
 800b1f2:	e7ef      	b.n	800b1d4 <_printf_i+0xbc>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	6820      	ldr	r0, [r4, #0]
 800b1f8:	1d19      	adds	r1, r3, #4
 800b1fa:	6029      	str	r1, [r5, #0]
 800b1fc:	0601      	lsls	r1, r0, #24
 800b1fe:	d501      	bpl.n	800b204 <_printf_i+0xec>
 800b200:	681e      	ldr	r6, [r3, #0]
 800b202:	e002      	b.n	800b20a <_printf_i+0xf2>
 800b204:	0646      	lsls	r6, r0, #25
 800b206:	d5fb      	bpl.n	800b200 <_printf_i+0xe8>
 800b208:	881e      	ldrh	r6, [r3, #0]
 800b20a:	4854      	ldr	r0, [pc, #336]	; (800b35c <_printf_i+0x244>)
 800b20c:	2f6f      	cmp	r7, #111	; 0x6f
 800b20e:	bf0c      	ite	eq
 800b210:	2308      	moveq	r3, #8
 800b212:	230a      	movne	r3, #10
 800b214:	2100      	movs	r1, #0
 800b216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b21a:	6865      	ldr	r5, [r4, #4]
 800b21c:	60a5      	str	r5, [r4, #8]
 800b21e:	2d00      	cmp	r5, #0
 800b220:	bfa2      	ittt	ge
 800b222:	6821      	ldrge	r1, [r4, #0]
 800b224:	f021 0104 	bicge.w	r1, r1, #4
 800b228:	6021      	strge	r1, [r4, #0]
 800b22a:	b90e      	cbnz	r6, 800b230 <_printf_i+0x118>
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	d04d      	beq.n	800b2cc <_printf_i+0x1b4>
 800b230:	4615      	mov	r5, r2
 800b232:	fbb6 f1f3 	udiv	r1, r6, r3
 800b236:	fb03 6711 	mls	r7, r3, r1, r6
 800b23a:	5dc7      	ldrb	r7, [r0, r7]
 800b23c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b240:	4637      	mov	r7, r6
 800b242:	42bb      	cmp	r3, r7
 800b244:	460e      	mov	r6, r1
 800b246:	d9f4      	bls.n	800b232 <_printf_i+0x11a>
 800b248:	2b08      	cmp	r3, #8
 800b24a:	d10b      	bne.n	800b264 <_printf_i+0x14c>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	07de      	lsls	r6, r3, #31
 800b250:	d508      	bpl.n	800b264 <_printf_i+0x14c>
 800b252:	6923      	ldr	r3, [r4, #16]
 800b254:	6861      	ldr	r1, [r4, #4]
 800b256:	4299      	cmp	r1, r3
 800b258:	bfde      	ittt	le
 800b25a:	2330      	movle	r3, #48	; 0x30
 800b25c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b260:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b264:	1b52      	subs	r2, r2, r5
 800b266:	6122      	str	r2, [r4, #16]
 800b268:	f8cd a000 	str.w	sl, [sp]
 800b26c:	464b      	mov	r3, r9
 800b26e:	aa03      	add	r2, sp, #12
 800b270:	4621      	mov	r1, r4
 800b272:	4640      	mov	r0, r8
 800b274:	f7ff fee2 	bl	800b03c <_printf_common>
 800b278:	3001      	adds	r0, #1
 800b27a:	d14c      	bne.n	800b316 <_printf_i+0x1fe>
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	b004      	add	sp, #16
 800b282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b286:	4835      	ldr	r0, [pc, #212]	; (800b35c <_printf_i+0x244>)
 800b288:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b28c:	6829      	ldr	r1, [r5, #0]
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	f851 6b04 	ldr.w	r6, [r1], #4
 800b294:	6029      	str	r1, [r5, #0]
 800b296:	061d      	lsls	r5, r3, #24
 800b298:	d514      	bpl.n	800b2c4 <_printf_i+0x1ac>
 800b29a:	07df      	lsls	r7, r3, #31
 800b29c:	bf44      	itt	mi
 800b29e:	f043 0320 	orrmi.w	r3, r3, #32
 800b2a2:	6023      	strmi	r3, [r4, #0]
 800b2a4:	b91e      	cbnz	r6, 800b2ae <_printf_i+0x196>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	f023 0320 	bic.w	r3, r3, #32
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	2310      	movs	r3, #16
 800b2b0:	e7b0      	b.n	800b214 <_printf_i+0xfc>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	f043 0320 	orr.w	r3, r3, #32
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	2378      	movs	r3, #120	; 0x78
 800b2bc:	4828      	ldr	r0, [pc, #160]	; (800b360 <_printf_i+0x248>)
 800b2be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2c2:	e7e3      	b.n	800b28c <_printf_i+0x174>
 800b2c4:	0659      	lsls	r1, r3, #25
 800b2c6:	bf48      	it	mi
 800b2c8:	b2b6      	uxthmi	r6, r6
 800b2ca:	e7e6      	b.n	800b29a <_printf_i+0x182>
 800b2cc:	4615      	mov	r5, r2
 800b2ce:	e7bb      	b.n	800b248 <_printf_i+0x130>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	6826      	ldr	r6, [r4, #0]
 800b2d4:	6961      	ldr	r1, [r4, #20]
 800b2d6:	1d18      	adds	r0, r3, #4
 800b2d8:	6028      	str	r0, [r5, #0]
 800b2da:	0635      	lsls	r5, r6, #24
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	d501      	bpl.n	800b2e4 <_printf_i+0x1cc>
 800b2e0:	6019      	str	r1, [r3, #0]
 800b2e2:	e002      	b.n	800b2ea <_printf_i+0x1d2>
 800b2e4:	0670      	lsls	r0, r6, #25
 800b2e6:	d5fb      	bpl.n	800b2e0 <_printf_i+0x1c8>
 800b2e8:	8019      	strh	r1, [r3, #0]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	6123      	str	r3, [r4, #16]
 800b2ee:	4615      	mov	r5, r2
 800b2f0:	e7ba      	b.n	800b268 <_printf_i+0x150>
 800b2f2:	682b      	ldr	r3, [r5, #0]
 800b2f4:	1d1a      	adds	r2, r3, #4
 800b2f6:	602a      	str	r2, [r5, #0]
 800b2f8:	681d      	ldr	r5, [r3, #0]
 800b2fa:	6862      	ldr	r2, [r4, #4]
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	4628      	mov	r0, r5
 800b300:	f7f4 ff56 	bl	80001b0 <memchr>
 800b304:	b108      	cbz	r0, 800b30a <_printf_i+0x1f2>
 800b306:	1b40      	subs	r0, r0, r5
 800b308:	6060      	str	r0, [r4, #4]
 800b30a:	6863      	ldr	r3, [r4, #4]
 800b30c:	6123      	str	r3, [r4, #16]
 800b30e:	2300      	movs	r3, #0
 800b310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b314:	e7a8      	b.n	800b268 <_printf_i+0x150>
 800b316:	6923      	ldr	r3, [r4, #16]
 800b318:	462a      	mov	r2, r5
 800b31a:	4649      	mov	r1, r9
 800b31c:	4640      	mov	r0, r8
 800b31e:	47d0      	blx	sl
 800b320:	3001      	adds	r0, #1
 800b322:	d0ab      	beq.n	800b27c <_printf_i+0x164>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	079b      	lsls	r3, r3, #30
 800b328:	d413      	bmi.n	800b352 <_printf_i+0x23a>
 800b32a:	68e0      	ldr	r0, [r4, #12]
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	4298      	cmp	r0, r3
 800b330:	bfb8      	it	lt
 800b332:	4618      	movlt	r0, r3
 800b334:	e7a4      	b.n	800b280 <_printf_i+0x168>
 800b336:	2301      	movs	r3, #1
 800b338:	4632      	mov	r2, r6
 800b33a:	4649      	mov	r1, r9
 800b33c:	4640      	mov	r0, r8
 800b33e:	47d0      	blx	sl
 800b340:	3001      	adds	r0, #1
 800b342:	d09b      	beq.n	800b27c <_printf_i+0x164>
 800b344:	3501      	adds	r5, #1
 800b346:	68e3      	ldr	r3, [r4, #12]
 800b348:	9903      	ldr	r1, [sp, #12]
 800b34a:	1a5b      	subs	r3, r3, r1
 800b34c:	42ab      	cmp	r3, r5
 800b34e:	dcf2      	bgt.n	800b336 <_printf_i+0x21e>
 800b350:	e7eb      	b.n	800b32a <_printf_i+0x212>
 800b352:	2500      	movs	r5, #0
 800b354:	f104 0619 	add.w	r6, r4, #25
 800b358:	e7f5      	b.n	800b346 <_printf_i+0x22e>
 800b35a:	bf00      	nop
 800b35c:	0800bee5 	.word	0x0800bee5
 800b360:	0800bef6 	.word	0x0800bef6

0800b364 <memmove>:
 800b364:	4288      	cmp	r0, r1
 800b366:	b510      	push	{r4, lr}
 800b368:	eb01 0402 	add.w	r4, r1, r2
 800b36c:	d902      	bls.n	800b374 <memmove+0x10>
 800b36e:	4284      	cmp	r4, r0
 800b370:	4623      	mov	r3, r4
 800b372:	d807      	bhi.n	800b384 <memmove+0x20>
 800b374:	1e43      	subs	r3, r0, #1
 800b376:	42a1      	cmp	r1, r4
 800b378:	d008      	beq.n	800b38c <memmove+0x28>
 800b37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b37e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b382:	e7f8      	b.n	800b376 <memmove+0x12>
 800b384:	4402      	add	r2, r0
 800b386:	4601      	mov	r1, r0
 800b388:	428a      	cmp	r2, r1
 800b38a:	d100      	bne.n	800b38e <memmove+0x2a>
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b396:	e7f7      	b.n	800b388 <memmove+0x24>

0800b398 <_realloc_r>:
 800b398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39c:	4680      	mov	r8, r0
 800b39e:	4614      	mov	r4, r2
 800b3a0:	460e      	mov	r6, r1
 800b3a2:	b921      	cbnz	r1, 800b3ae <_realloc_r+0x16>
 800b3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	f7ff bc25 	b.w	800abf8 <_malloc_r>
 800b3ae:	b92a      	cbnz	r2, 800b3bc <_realloc_r+0x24>
 800b3b0:	f7ff fbb6 	bl	800ab20 <_free_r>
 800b3b4:	4625      	mov	r5, r4
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3bc:	f000 f81b 	bl	800b3f6 <_malloc_usable_size_r>
 800b3c0:	4284      	cmp	r4, r0
 800b3c2:	4607      	mov	r7, r0
 800b3c4:	d802      	bhi.n	800b3cc <_realloc_r+0x34>
 800b3c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3ca:	d812      	bhi.n	800b3f2 <_realloc_r+0x5a>
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	4640      	mov	r0, r8
 800b3d0:	f7ff fc12 	bl	800abf8 <_malloc_r>
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d0ed      	beq.n	800b3b6 <_realloc_r+0x1e>
 800b3da:	42bc      	cmp	r4, r7
 800b3dc:	4622      	mov	r2, r4
 800b3de:	4631      	mov	r1, r6
 800b3e0:	bf28      	it	cs
 800b3e2:	463a      	movcs	r2, r7
 800b3e4:	f7ff fb86 	bl	800aaf4 <memcpy>
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	f7ff fb98 	bl	800ab20 <_free_r>
 800b3f0:	e7e1      	b.n	800b3b6 <_realloc_r+0x1e>
 800b3f2:	4635      	mov	r5, r6
 800b3f4:	e7df      	b.n	800b3b6 <_realloc_r+0x1e>

0800b3f6 <_malloc_usable_size_r>:
 800b3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3fa:	1f18      	subs	r0, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	bfbc      	itt	lt
 800b400:	580b      	ldrlt	r3, [r1, r0]
 800b402:	18c0      	addlt	r0, r0, r3
 800b404:	4770      	bx	lr
	...

0800b408 <_init>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	bf00      	nop
 800b40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40e:	bc08      	pop	{r3}
 800b410:	469e      	mov	lr, r3
 800b412:	4770      	bx	lr

0800b414 <_fini>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	bf00      	nop
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr
